{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "runs": [
    {
      "properties": {
        "id": 237304,
        "version": "2.0.0",
        "type": "source code",
        "status": "accepted",
        "submissionDate": "2017-10-06",
        "language": "cplusplus",
        "author": "NSA/Center for Assured Software",
        "description": "CWE: 191 Integer Underflow\n BadSource: fscanf Read data from the console using fscanf()\n GoodSource: Set data to a small, non-zero number (negative two)\n Sinks: multiply\n GoodSink: Ensure there will not be an underflow before multiplying data by 2\n BadSink : If data is negative, multiply by 2, which can cause an underflow\n Flow Variant: 33 Data flow: use of a C++ reference to data within the same function",
        "state": "mixed"
      },
      "tool": {
        "driver": {
          "name": "SARD - SAMATE",
          "fullName": "Software Assurance Reference Dataset Project",
          "informationUri": "https://samate.nist.gov/SARD/",
          "version": "5.0.0",
          "organization": "NIST",
          "supportedTaxonomies": [
            {
              "name": "CWE",
              "index": 0
            }
          ]
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "src/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_fscanf_multiply_33.cpp"
          },
          "length": 3553,
          "sourceLanguage": "cplusplus",
          "hashes": {
            "sha-256": "f67081eb36ac8baadd8e1e51ab6e1aa76bcde3f36f05558319a53d733992fcf2"
          }
        },
        {
          "location": {
            "uri": "src/testcasesupport/io.c"
          },
          "length": 5429,
          "sourceLanguage": "c",
          "hashes": {
            "sha-256": "50ace91d0f9cd9f281d5d8ff3a9ca879ee2779d737030ae84e8e4be3df5b299c"
          }
        },
        {
          "location": {
            "uri": "src/testcasesupport/std_testcase.h"
          },
          "length": 4004,
          "sourceLanguage": "c",
          "hashes": {
            "sha-256": "a78aaf3a54a6210260ad70123c09c3c283c6edf7808b6244205e00b8f2d9b8d0"
          }
        },
        {
          "location": {
            "uri": "src/testcasesupport/std_testcase_io.h"
          },
          "length": 1457,
          "sourceLanguage": "c",
          "hashes": {
            "sha-256": "6459df50d22697bb61619e2effd688ebb98915db25f7eb1bdbb767f888066fb6"
          }
        }
      ],
      "taxonomies": [
        {
          "name": "CWE",
          "version": "4.6",
          "informationUri": "https://cwe.mitre.org/data/published/cwe_v4.6.pdf",
          "downloadUri": "https://cwe.mitre.org/data/xml/cwec_v4.6.xml.zip",
          "organization": "MITRE",
          "shortDescription": {
            "text": "The MITRE Common Weakness Enumeration"
          },
          "isComprehensive": false,
          "taxa": [
            {
              "id": "191",
              "name": "Integer Underflow (Wrap or Wraparound)"
            }
          ]
        }
      ],
      "results": [
        {
          "ruleId": "CWE-191",
          "message": {
            "text": "Integer Underflow (Wrap or Wraparound)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_fscanf_multiply_33.cpp",
                  "index": 0
                },
                "region": {
                  "startLine": 38
                }
              }
            }
          ],
          "taxa": [
            {
              "toolComponent": {
                "name": "CWE",
                "index": 0
              },
              "id": "191",
              "index": 0
            }
          ]
        }
      ]
    }
  ]
}
