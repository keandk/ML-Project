# Subgraphs for folder: 238736-v2.0.0-mixed
# Total center nodes with subgraphs: 4

START_SUBGRAPH center_node=30064771152
# Node count: 5
# Neighbor count: 4
  "30064771150" -> "30064771152" [label="CDG"];
  "30064771150" [label="CALL", ARGUMENT_INDEX="-1", CODE="data < 100", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="153", METHOD_FULL_NAME="<operator>.lessThan", NAME="<operator>.lessThan", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771151" -> "30064771152" [label="POST_DOMINATE"];
  "30064771151" [label="CALL", ARGUMENT_INDEX="2", CODE="* dataBuffer = (char *)malloc(data)", COLUMN_NUMBER="18", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="157", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="char*"];
  "30064771152" -> "30064771151" [label="REACHING_DEF", property="(char *)malloc(data)"];
  "30064771152" -> "30064771153" [label="POST_DOMINATE"];
  "30064771152" -> "68719476793" [label="REACHING_DEF", property="(char *)malloc(data)"];
  "30064771152" [label="CALL", ARGUMENT_INDEX="2", CODE="(char *)malloc(data)", COLUMN_NUMBER="33", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="157", METHOD_FULL_NAME="<operator>.cast", NAME="<operator>.cast", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771153" -> "30064771152" [label="REACHING_DEF", property="malloc(data)"];
  "30064771153" [label="CALL", ARGUMENT_INDEX="2", CODE="malloc(data)", COLUMN_NUMBER="41", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="157", METHOD_FULL_NAME="<unresolvedNamespace>.malloc:<unresolvedSignature>(1)", NAME="malloc", ORDER="2", SIGNATURE="<unresolvedSignature>", TYPE_FULL_NAME="ANY"];
  "68719476793" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="dataBuffer", COLUMN_NUMBER="20", LINE_NUMBER="157", NAME="dataBuffer", ORDER="1", TYPE_FULL_NAME="char*"];
END_SUBGRAPH center_node=30064771152

START_SUBGRAPH center_node=68719476750
# Node count: 8
# Neighbor count: 7
  "30064771082" -> "68719476750" [label="CDG"];
  "30064771082" [label="CALL", ARGUMENT_INDEX="-1", CODE="connectSocket == INVALID_SOCKET", COLUMN_NUMBER="17", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="73", METHOD_FULL_NAME="<operator>.equals", NAME="<operator>.equals", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771086" -> "68719476750" [label="REACHING_DEF", property="&service"];
  "30064771086" [label="CALL", ARGUMENT_INDEX="1", CODE="&service", COLUMN_NUMBER="20", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="77", METHOD_FULL_NAME="<operator>.addressOf", NAME="<operator>.addressOf", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771088" -> "68719476750" [label="DOMINATE"];
  "30064771088" [label="CALL", ARGUMENT_INDEX="-1", CODE="service.sin_family = AF_INET", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="78", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="4", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771089" -> "68719476750" [label="REACHING_DEF", property="service.sin_family"];
  "30064771089" [label="CALL", ARGUMENT_INDEX="1", CODE="service.sin_family", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="78", METHOD_FULL_NAME="<operator>.fieldAccess", NAME="<operator>.fieldAccess", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771092" -> "68719476750" [label="AST"];
  "30064771092" [label="CALL", ARGUMENT_INDEX="1", CODE="service.sin_addr", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="79", METHOD_FULL_NAME="<operator>.fieldAccess", NAME="<operator>.fieldAccess", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "55834574849" -> "68719476750" [label="POST_DOMINATE"];
  "55834574849" [label="FIELD_IDENTIFIER", ARGUMENT_INDEX="2", CANONICAL_NAME="sin_addr", CODE="sin_addr", COLUMN_NUMBER="13", LINE_NUMBER="79", ORDER="2"];
  "68719476747" -> "68719476750" [label="REACHING_DEF", property="service"];
  "68719476747" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="service", COLUMN_NUMBER="40", LINE_NUMBER="77", NAME="service", ORDER="1", TYPE_FULL_NAME="sockaddr_in"];
  "68719476750" -> "30064771088" [label="POST_DOMINATE"];
  "68719476750" -> "55834574849" [label="DOMINATE"];
  "68719476750" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="service", COLUMN_NUMBER="13", LINE_NUMBER="79", NAME="service", ORDER="1", TYPE_FULL_NAME="sockaddr_in"];
END_SUBGRAPH center_node=68719476750

START_SUBGRAPH center_node=30064771164
# Node count: 1
# Neighbor count: 0
  "30064771164" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="170", METHOD_FULL_NAME="CWE194_Unexpected_Sign_Extension__connect_socket_malloc_33.goodG2B:void()", NAME="goodG2B", ORDER="1", SIGNATURE="void()", TYPE_FULL_NAME="void"];
END_SUBGRAPH center_node=30064771164

START_SUBGRAPH center_node=47244640256
# Node count: 1
# Neighbor count: 0
  "47244640256" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            /* FLAW: Use a value input from the network */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_...", COLUMN_NUMBER="9", CONTROL_STRUCTURE_TYPE="DO", LINE_NUMBER="63", ORDER="8", PARSER_TYPE_NAME="CPPASTDoStatement"];
END_SUBGRAPH center_node=47244640256

