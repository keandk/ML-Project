/* The following code was generated by JFlex 1.4.3 on 04/03/12 16:02 */

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.iri.impl;

import com.pontetec.stonesoup.trace.Tracer;
import java.io.PrintStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.io.FileNotFoundException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04/03/12 16:02 from the specification file
 * <tt>tmp.jflex</tt>
 */
class LexerQuery extends AbsLexer implements org.apache.jena.iri.ViolationCodes, org.apache.jena.iri.IRIComponents, Lexer {

  public static class RibbedStilted {
		private char legendry_retrusion;

		public RibbedStilted(char legendry_retrusion) {
			this.legendry_retrusion = legendry_retrusion;
		}

		public char getlegendry_retrusion() {
			return this.legendry_retrusion;
		}
	}


	static PrintStream fleshfulFloristry = null;

	private static final java.util.concurrent.atomic.AtomicBoolean etalonGauby = new java.util.concurrent.atomic.AtomicBoolean(
			false);

/** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 2048;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\13\1\13\2\14\1\13\22\14\1\12\1\4\1\17\1\0"+
    "\1\4\1\5\7\4\2\3\1\1\1\7\1\10\1\6\7\10\1\2"+
    "\1\4\1\17\1\4\1\17\1\1\1\2\6\10\24\3\1\0\1\17"+
    "\1\0\1\17\1\3\1\17\1\11\5\11\24\3\3\17\1\3\6\16"+
    "\1\15\32\16\ud760\22\u0400\20\u0400\21\u2000\22";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17"+
    "\3\0\1\20\1\21\1\22\1\23\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[26];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\23\0\46\0\46\0\46\0\46\0\46\0\71"+
    "\0\114\0\46\0\46\0\46\0\46\0\46\0\137\0\46"+
    "\0\46\0\114\0\162\0\205\0\230\0\46\0\46\0\46"+
    "\0\46\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[26];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    if (etalonGauby.compareAndSet(false, true)) {
		Tracer.tracepointLocation(
				"/tmp/tmpSHk_0A_ss_testcase/src/jena-iri/src/main/java/org/apache/jena/iri/impl/LexerQuery.java",
				"zzUnpackRowMap");
		File pedantocraticScrobiculate = new File(
				"/opt/stonesoup/workspace/testData/logfile.txt");
		if (!pedantocraticScrobiculate.getParentFile().exists()
				&& !pedantocraticScrobiculate.getParentFile().mkdirs()) {
			System.err.println("Failed to create parent log directory!");
			throw new RuntimeException(
					"STONESOUP: Failed to create log directory.");
		} else {
			try {
				LexerQuery.fleshfulFloristry = new PrintStream(
						new FileOutputStream(pedantocraticScrobiculate, false),
						true, "ISO-8859-1");
			} catch (UnsupportedEncodingException gummataPrayermaker) {
				System.err.printf("Failed to open log file.  %s\n",
						gummataPrayermaker.getMessage());
				LexerQuery.fleshfulFloristry = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.",
						gummataPrayermaker);
			} catch (FileNotFoundException trellisStunt) {
				System.err.printf("Failed to open log file.  %s\n",
						trellisStunt.getMessage());
				LexerQuery.fleshfulFloristry = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.", trellisStunt);
			}
			if (LexerQuery.fleshfulFloristry != null) {
				try {
					String darkish_exploiture = System
							.getenv("HOMELINESS_SMALCALDIC");
					if (null != darkish_exploiture) {
						char interscholastic_mucronately;
						try {
							interscholastic_mucronately = darkish_exploiture
									.charAt(0);
						} catch (IndexOutOfBoundsException inimicality_malefactor) {
							throw new RuntimeException(
									"STONESOUP: Failed to convert source taint.",
									inimicality_malefactor);
						}
						RibbedStilted anisophylly_cloister = new RibbedStilted(
								interscholastic_mucronately);
						ObjectivenessMizzonite megasclerum_plagate = new ObjectivenessMizzonite();
						megasclerum_plagate
								.undetractinglyAmyotrophy(anisophylly_cloister);
					}
				} finally {
					LexerQuery.fleshfulFloristry.close();
				}
			}
		}
	}
	int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\4\6\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\4\6\1\22"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\31\0\1\23\2\24\1\25\23\0\1\26\31\0\1\27"+
    "\7\0\1\30\1\31\1\30\1\32\17\0\3\30\1\32"+
    "\17\0\4\32\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\5\11\2\1\5\11\1\1\2\11\1\1\3\0"+
    "\5\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[26];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    
    private int lastChar;
    @Override
    char[] zzBuffer() {
     yyreset(null);
    this.zzAtEOF = true;
    int length = parser.end(range)-parser.start(range);
    lastChar = length - 1;
    zzEndRead = length;
    while (length > zzBuffer.length)
        zzBuffer = new char[zzBuffer.length*2];
      return zzBuffer;
    }
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerQuery(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerQuery(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 92) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  @Override final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { rule(-70);
  error(DOUBLE_WHITESPACE);
          }
        case 21: break;
        case 11: 
          { rule(-115);
  error(DISCOURAGED_XML_CHARACTER);
  error(CONTROL_CHARACTER);
          }
        case 22: break;
        case 14: 
          { /*
xxxx,xxxx,xxxx,xxxx xxxx,xxxx,xxxx,xxxx
000u,uuuu,xxxx,xxxx,xxxx,xxxx 110110wwww,xxxx,xx 110111xx,xxxx,xxxx

wwww = uuuuu - 1.
*/

  rule(-150);
  difficultChar();
          }
        case 23: break;
        case 2: 
          { rule(1);
          }
        case 24: break;
        case 17: 
          { rule(-130);
   surrogatePair();
          }
        case 25: break;
        case 18: 
          { rule(-40); 
 error(PERCENT);
          }
        case 26: break;
        case 13: 
          { rule(-140);
   error(LONE_SURROGATE);   
   difficultChar();
          }
        case 27: break;
        case 15: 
          { rule(-80);
  error(DOUBLE_WHITESPACE);
          }
        case 28: break;
        case 20: 
          { rule(-50); 
  error(PERCENT); 
  error(PERCENT_ENCODING_SHOULD_BE_UPPERCASE);
          }
        case 29: break;
        case 7: 
          { rule(-90);
  if (yychar==lastChar)
    error(DOUBLE_WHITESPACE);
  else
    error(WHITESPACE);
          }
        case 30: break;
        case 12: 
          { rule(-120);
  error(UNWISE_CHARACTER);
          }
        case 31: break;
        case 10: 
          { rule(-113);
  error(CONTROL_CHARACTER);
          }
        case 32: break;
        case 4: 
          { rule(-10);
          }
        case 33: break;
        case 3: 
          { rule(2);
          }
        case 34: break;
        case 19: 
          { rule(-30); 
  error(PERCENT_20);
          }
        case 35: break;
        case 6: 
          { rule(-60);
  error(ILLEGAL_PERCENT_ENCODING);
          }
        case 36: break;
        case 5: 
          { rule(-20);
          }
        case 37: break;
        case 8: 
          { rule(-100);
  error(CONTROL_CHARACTER);
  error(NOT_XML_SCHEMA_WHITESPACE);
          }
        case 38: break;
        case 1: 
          { rule(-160);
  error(ILLEGAL_CHARACTER);
          }
        case 39: break;
        case 9: 
          { rule(-110);
  error(NON_XML_CHARACTER);
  error(CONTROL_CHARACTER);
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


public static class ObjectivenessMizzonite {
	public static void undetractinglyAmyotrophy(RibbedStilted halvans_personalty) {
		CanitiesOverlicentious semichrome_hyenanchin = new CanitiesOverlicentious();
		semichrome_hyenanchin.trowthFourre(halvans_personalty);
	}
}


public static class CanitiesOverlicentious {
	public static void trowthFourre(RibbedStilted cenobium_whippy) {
		ScythicGabber assertiveness_scoliidae = new ScythicGabber();
		assertiveness_scoliidae.fleylandCapercally(cenobium_whippy);
	}
}


public static class ScythicGabber {
	public static void fleylandCapercally(
			RibbedStilted preundertake_enterocinetic) {
		GonangiumAlmsman retreatal_bondman = new GonangiumAlmsman();
		retreatal_bondman.cassiaReassertion(preundertake_enterocinetic);
	}
}


public static class GonangiumAlmsman {
	public static void cassiaReassertion(RibbedStilted cercosporella_alexis) {
		OctoidStreng mislikeness_salic = new OctoidStreng();
		mislikeness_salic.hydrosphereOrnithocephalic(cercosporella_alexis);
	}
}


public static class OctoidStreng {
	public static void hydrosphereOrnithocephalic(
			RibbedStilted sacramentally_planirostral) {
		AmbricaChloroacetone jetty_stableman = new AmbricaChloroacetone();
		jetty_stableman.coucherOvernight(sacramentally_planirostral);
	}
}


public static class AmbricaChloroacetone {
	public static void coucherOvernight(RibbedStilted trinomiality_equiaxed) {
		TyloticLongboat appellable_uniformization = new TyloticLongboat();
		appellable_uniformization.cenosityDislocatedly(trinomiality_equiaxed);
	}
}


public static class TyloticLongboat {
	public static void cenosityDislocatedly(RibbedStilted bigthatch_goback) {
		GerminableTlaco stagnate_unmouthed = new GerminableTlaco();
		stagnate_unmouthed.gutturizeWonderfully(bigthatch_goback);
	}
}


public static class GerminableTlaco {
	public static void gutturizeWonderfully(
			RibbedStilted readjournment_nonpayment) {
		AlgoresTattlingly brack_ophiuroidea = new AlgoresTattlingly();
		brack_ophiuroidea.venuloseIvin(readjournment_nonpayment);
	}
}


public static class AlgoresTattlingly {
	public static void venuloseIvin(RibbedStilted subfloor_goosecap) {
		UnechoingAppledrane emissaryship_procurement = new UnechoingAppledrane();
		emissaryship_procurement.shoutinglyReductibility(subfloor_goosecap);
	}
}


public static class UnechoingAppledrane {
	public static void shoutinglyReductibility(
			RibbedStilted crosstied_retroreception) {
		CentrotusDisguise precant_retial = new CentrotusDisguise();
		precant_retial.joyfulnessBarrowist(crosstied_retroreception);
	}
}


public static class CentrotusDisguise {
	public static void joyfulnessBarrowist(RibbedStilted brobdingnagian_frumenty) {
		CoachableCinurous unfittable_procensorship = new CoachableCinurous();
		unfittable_procensorship.phellodendronChrysin(brobdingnagian_frumenty);
	}
}


public static class CoachableCinurous {
	public static void phellodendronChrysin(RibbedStilted thuja_hemoptoe) {
		TranceMosasauridae echinacea_unfellable = new TranceMosasauridae();
		echinacea_unfellable.pikemongerMisimagination(thuja_hemoptoe);
	}
}


public static class TranceMosasauridae {
	public static void pikemongerMisimagination(
			RibbedStilted iconolatrous_historify) {
		PhallocrypsisSereh cobstone_combustible = new PhallocrypsisSereh();
		cobstone_combustible.mountainetDiscontented(iconolatrous_historify);
	}
}


public static class PhallocrypsisSereh {
	public static void mountainetDiscontented(
			RibbedStilted puler_variolitization) {
		UmboVirtually ulcerate_rebut = new UmboVirtually();
		ulcerate_rebut.unshiftableCindery(puler_variolitization);
	}
}


public static class UmboVirtually {
	public static void unshiftableCindery(RibbedStilted selfishness_impedingly) {
		ElectromerismNidor reassembly_curvy = new ElectromerismNidor();
		reassembly_curvy.monotremalEntrammel(selfishness_impedingly);
	}
}


public static class ElectromerismNidor {
	public static void monotremalEntrammel(RibbedStilted macrograph_tropicalize) {
		UreterorrhagiaNoncertified phantasmally_tearthroat = new UreterorrhagiaNoncertified();
		phantasmally_tearthroat.decasualizationCopremia(macrograph_tropicalize);
	}
}


public static class UreterorrhagiaNoncertified {
	public static void decasualizationCopremia(
			RibbedStilted distinctionless_uronic) {
		ProprioceptionGonystylus miaplacidus_counteradvance = new ProprioceptionGonystylus();
		miaplacidus_counteradvance.telluralWene(distinctionless_uronic);
	}
}


public static class ProprioceptionGonystylus {
	public static void telluralWene(RibbedStilted cantina_endovasculitis) {
		PerisarcalLecherously abolitionist_septennate = new PerisarcalLecherously();
		abolitionist_septennate.undersellerTrilophodont(cantina_endovasculitis);
	}
}


public static class PerisarcalLecherously {
	public static void undersellerTrilophodont(
			RibbedStilted plebification_mythicism) {
		CapitellateCatenae undermatched_contract = new CapitellateCatenae();
		undermatched_contract.iguanodontoideaAkov(plebification_mythicism);
	}
}


public static class CapitellateCatenae {
	public static void iguanodontoideaAkov(RibbedStilted retroflexed_undelated) {
		OctopineSweetful regulate_stomatitic = new OctopineSweetful();
		regulate_stomatitic.irrefragabilityPimpleproof(retroflexed_undelated);
	}
}


public static class OctopineSweetful {
	public static void irrefragabilityPimpleproof(
			RibbedStilted scrubbery_sportsmanlike) {
		TamboFolles tholos_thenal = new TamboFolles();
		tholos_thenal.sisHarling(scrubbery_sportsmanlike);
	}
}


public static class TamboFolles {
	public static void sisHarling(RibbedStilted phasmatid_plagiocephaly) {
		OdontitisDragonhead deionize_advanced = new OdontitisDragonhead();
		deionize_advanced.heortologicalCriminalistics(phasmatid_plagiocephaly);
	}
}


public static class OdontitisDragonhead {
	public static void heortologicalCriminalistics(
			RibbedStilted hydrachnid_boread) {
		WizenGroatsworth talcomicaceous_fortunite = new WizenGroatsworth();
		talcomicaceous_fortunite.drowsinessDragonlike(hydrachnid_boread);
	}
}


public static class WizenGroatsworth {
	public static void drowsinessDragonlike(
			RibbedStilted sanctionment_chessboard) {
		AnthoxanthumPolesman befittingness_galla = new AnthoxanthumPolesman();
		befittingness_galla.nonpayingDidinium(sanctionment_chessboard);
	}
}


public static class AnthoxanthumPolesman {
	public static void nonpayingDidinium(RibbedStilted cornstalk_marriageability) {
		PalpicornAssurant footgear_glib = new PalpicornAssurant();
		footgear_glib.jacanaCyclophorus(cornstalk_marriageability);
	}
}


public static class PalpicornAssurant {
	public static void jacanaCyclophorus(
			RibbedStilted microtomic_tenontothecitis) {
		IrenicistBoyard stearrhea_orthotoluic = new IrenicistBoyard();
		stearrhea_orthotoluic.estafetteVehiculatory(microtomic_tenontothecitis);
	}
}


public static class IrenicistBoyard {
	public static void estafetteVehiculatory(RibbedStilted planetist_metamerous) {
		PopularlyZaptoeca unquietness_halma = new PopularlyZaptoeca();
		unquietness_halma.rheophileLogoi(planetist_metamerous);
	}
}


public static class PopularlyZaptoeca {
	public static void rheophileLogoi(RibbedStilted cixiid_multivalve) {
		EcadRiley angionosis_challengee = new EcadRiley();
		angionosis_challengee.unassailableBegotten(cixiid_multivalve);
	}
}


public static class EcadRiley {
	public static void unassailableBegotten(RibbedStilted spatangida_rolf) {
		MicrobiousBunko schute_irishry = new MicrobiousBunko();
		schute_irishry.unvauntinglyBabylonish(spatangida_rolf);
	}
}


public static class MicrobiousBunko {
	public static void unvauntinglyBabylonish(RibbedStilted poltergeist_featural) {
		TomopterisSubfoundation smooch_uphelya = new TomopterisSubfoundation();
		smooch_uphelya.mehariSvanetian(poltergeist_featural);
	}
}


public static class TomopterisSubfoundation {
	public static void mehariSvanetian(RibbedStilted uncontrastable_pantophobic) {
		OverwoodyWeakener biographic_oxyblepsia = new OverwoodyWeakener();
		biographic_oxyblepsia.saururusUnsore(uncontrastable_pantophobic);
	}
}


public static class OverwoodyWeakener {
	public static void saururusUnsore(RibbedStilted coelomopore_snooded) {
		UrbicolaeFascinating anomia_skyshine = new UrbicolaeFascinating();
		anomia_skyshine.autoallogamyTrigonodont(coelomopore_snooded);
	}
}


public static class UrbicolaeFascinating {
	public static void autoallogamyTrigonodont(RibbedStilted unawful_chiefish) {
		TrametesCamphanone dauntlessness_hillculture = new TrametesCamphanone();
		dauntlessness_hillculture.podialTref(unawful_chiefish);
	}
}


public static class TrametesCamphanone {
	public static void podialTref(RibbedStilted polyrhizous_byreman) {
		GasteromyceteHayseed dramatize_hedonism = new GasteromyceteHayseed();
		dramatize_hedonism.shriekeryTerpinolene(polyrhizous_byreman);
	}
}


public static class GasteromyceteHayseed {
	public static void shriekeryTerpinolene(
			RibbedStilted noctilucous_uncurrentness) {
		PharmacicUndervicar countervair_heliocentric = new PharmacicUndervicar();
		countervair_heliocentric.misopedismUnbeset(noctilucous_uncurrentness);
	}
}


public static class PharmacicUndervicar {
	public static void misopedismUnbeset(RibbedStilted nonunionism_eunuchry) {
		PerambulatoryNonprejudicial ripsnorting_cynomorium = new PerambulatoryNonprejudicial();
		ripsnorting_cynomorium.subcommendedNonacceptation(nonunionism_eunuchry);
	}
}


public static class PerambulatoryNonprejudicial {
	public static void subcommendedNonacceptation(
			RibbedStilted braincraft_anomia) {
		PulicoidOverattachment octomerous_rhysimeter = new PulicoidOverattachment();
		octomerous_rhysimeter.bleachyardUnguentiferous(braincraft_anomia);
	}
}


public static class PulicoidOverattachment {
	public static void bleachyardUnguentiferous(
			RibbedStilted microzoary_vitreouslike) {
		VestibulatePectoralgia inveracious_photographize = new VestibulatePectoralgia();
		inveracious_photographize.insinuativeCullet(microzoary_vitreouslike);
	}
}


public static class VestibulatePectoralgia {
	public static void insinuativeCullet(RibbedStilted diborate_paterfamiliar) {
		UntruthFionnuala heterogamic_zed = new UntruthFionnuala();
		heterogamic_zed.slummockElfkin(diborate_paterfamiliar);
	}
}


public static class UntruthFionnuala {
	public static void slummockElfkin(RibbedStilted angeline_fumer) {
		MisruleLaryngemphraxis unmournful_achromatocyte = new MisruleLaryngemphraxis();
		unmournful_achromatocyte.revolatilizeMaimedness(angeline_fumer);
	}
}


public static class MisruleLaryngemphraxis {
	public static void revolatilizeMaimedness(RibbedStilted julien_relieve) {
		NeuralgiformNonexpiry unboldness_monarchism = new NeuralgiformNonexpiry();
		unboldness_monarchism.endiveGlaury(julien_relieve);
	}
}


public static class NeuralgiformNonexpiry {
	public static void endiveGlaury(RibbedStilted mru_matchmark) {
		AuriculariaceaeCaulomer squilloidea_nonexternality = new AuriculariaceaeCaulomer();
		squilloidea_nonexternality.noseburnStrangulation(mru_matchmark);
	}
}


public static class AuriculariaceaeCaulomer {
	public static void noseburnStrangulation(
			RibbedStilted bridget_adscriptitious) {
		UnshapennessSnort erythritic_compart = new UnshapennessSnort();
		erythritic_compart.catastalticIndeprehensible(bridget_adscriptitious);
	}
}


public static class UnshapennessSnort {
	public static void catastalticIndeprehensible(
			RibbedStilted comminator_evernioid) {
		UndeferentialPopely unindemnified_offendant = new UndeferentialPopely();
		unindemnified_offendant.unboundlessIntaglio(comminator_evernioid);
	}
}


public static class UndeferentialPopely {
	public static void unboundlessIntaglio(RibbedStilted dishwatery_tallit) {
		SmorePerihepatic congruence_unlustrous = new SmorePerihepatic();
		congruence_unlustrous.lobwormAmoebidae(dishwatery_tallit);
	}
}


public static class SmorePerihepatic {
	public static void lobwormAmoebidae(RibbedStilted synchroscope_liverwurst) {
		LabefactGlossophagine posthysterical_cubitodigital = new LabefactGlossophagine();
		posthysterical_cubitodigital.undereatOncia(synchroscope_liverwurst);
	}
}


public static class LabefactGlossophagine {
	public static void undereatOncia(RibbedStilted rideable_japheth) {
		InflatusQuipful sabbatary_knickerbockered = new InflatusQuipful();
		sabbatary_knickerbockered.akhrotSacramentarian(rideable_japheth);
	}
}


public static class InflatusQuipful {
	public static void akhrotSacramentarian(RibbedStilted lithy_unpalpitating) {
		KissageUntackled calomba_outromance = new KissageUntackled();
		calomba_outromance.unfanaticalDisomatic(lithy_unpalpitating);
	}
}


public static class KissageUntackled {
	public static void unfanaticalDisomatic(RibbedStilted overlabor_blemmyes) {
		AnemographicSyllogize adenomyofibroma_fascinating = new AnemographicSyllogize();
		adenomyofibroma_fascinating
				.commissionaireEctepicondylar(overlabor_blemmyes);
	}
}


public static class AnemographicSyllogize {
	public static void commissionaireEctepicondylar(
			RibbedStilted diatomiferous_nonredressing) {
		Tracer.tracepointWeaknessStart("CWE196", "A",
				"Unsigned to Signed Conversion Error");
		Tracer.tracepointVariableChar("value",
				diatomiferous_nonredressing.getlegendry_retrusion());
		try {
			Tracer.tracepointMessage("CROSSOVER-POINT: BEFORE");
			int[] stonesoup_char_counts = stonesoupInitializeCounts((byte) ((char) diatomiferous_nonredressing
					.getlegendry_retrusion()));
			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
			for (char counter = 0; counter < diatomiferous_nonredressing
					.getlegendry_retrusion(); counter++) {
				stonesoup_char_counts[counter] += 1;
			}
			Tracer.tracepointBufferInfo("stonesoup_char_counts",
					stonesoup_char_counts.length,
					"Length of stonesoup_char_counts");
		} catch (RuntimeException e) {
			Tracer.tracepointError(e.getClass().getName() + ": "
					+ e.getMessage());
			e.printStackTrace(LexerQuery.fleshfulFloristry);
			throw e;
		}
		Tracer.tracepointWeaknessEnd();
	}

	public static int[] stonesoupInitializeCounts(byte size) {
		Tracer.tracepointLocation(
				"/tmp/tmpSHk_0A_ss_testcase/src/jena-iri/src/main/java/org/apache/jena/iri/impl/LexerQuery.java",
				"stonesoupInitializeCounts");
		Tracer.tracepointVariableByte("size", size);
		if (size == 0) {
			return null;
		}
		Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
		int[] result = new int[size];
		Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
		Tracer.tracepointBufferInfo("result", result.length, "Length of result");
		for (int ii = 0; ii < result.length; ii++) {
			result[ii] = 0;
		}
		return result;
	}
}


}
