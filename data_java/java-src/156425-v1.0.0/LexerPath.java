/* The following code was generated by JFlex 1.4.3 on 04/03/12 16:02 */

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.iri.impl;

import com.pontetec.stonesoup.trace.Tracer;
import java.io.PrintStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04/03/12 16:02 from the specification file
 * <tt>tmp.jflex</tt>
 */
class LexerPath extends AbsLexer implements org.apache.jena.iri.ViolationCodes, org.apache.jena.iri.IRIComponents, Lexer {

  public class DuckerSansi {
		private String[] cacholong_soilage;

		public DuckerSansi(String[] cacholong_soilage) {
			this.cacholong_soilage = cacholong_soilage;
		}

		public String[] getcacholong_soilage() {
			return this.cacholong_soilage;
		}
	}


	static PrintStream trenchwiseGatewise = null;

	private static final java.util.concurrent.atomic.AtomicBoolean caricaSuffruticous = new java.util.concurrent.atomic.AtomicBoolean(
			false);

/** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 2048;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\15\1\1\1\1\2\15\1\1\22\15\1\14\1\6\1\20\1\0"+
    "\1\6\1\7\7\6\1\5\1\2\1\3\1\11\1\12\1\10\7\12"+
    "\1\4\1\6\1\20\1\6\1\20\1\0\1\4\6\12\24\5\1\0"+
    "\1\20\1\0\1\20\1\5\1\20\1\13\5\13\24\5\3\20\1\5"+
    "\6\17\1\16\32\17\ud760\23\u0400\21\u0400\22\u2000\23";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\3"+
    "\1\17\1\20\3\0\1\21\1\22\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\24\0\50\0\50\0\50\0\74\0\50\0\50"+
    "\0\50\0\120\0\144\0\50\0\50\0\50\0\50\0\170"+
    "\0\50\0\50\0\214\0\144\0\240\0\264\0\310\0\334"+
    "\0\50\0\50\0\360\0\u0104\0\50\0\50\0\50\0\50"+
    "\0\u0118\0\50\0\214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\4\10\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\4\1\23\1\6\1\7\1\10\1\11"+
    "\1\12\4\10\1\24\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\26\0\1\25\31\0\1\26\2\27\1\30"+
    "\24\0\1\31\31\0\1\32\3\0\1\33\23\0\1\34"+
    "\1\35\30\0\1\36\1\37\1\36\1\40\20\0\3\36"+
    "\1\40\20\0\4\40\13\0\1\41\23\0\1\42\22\0"+
    "\1\43\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\1\1\3\11\2\1\4\11\1\1\2\11"+
    "\3\1\3\0\2\11\1\0\1\1\4\11\1\1\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    
    private int lastChar;
    @Override
    char[] zzBuffer() {
     yyreset(null);
    this.zzAtEOF = true;
    int length = parser.end(range)-parser.start(range);
    lastChar = length - 1;
    zzEndRead = length;
    while (length > zzBuffer.length)
        zzBuffer = new char[zzBuffer.length*2];
      return zzBuffer;
    }
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerPath(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerPath(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  @Override final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public int yylex() throws java.io.IOException {
    if (caricaSuffruticous.compareAndSet(false, true)) {
		Tracer.tracepointLocation(
				"/tmp/tmpBcziCc_ss_testcase/src/jena-iri/src/main/java/org/apache/jena/iri/impl/LexerPath.java",
				"yylex");
		File merohedricPresenter = new File(
				"/opt/stonesoup/workspace/testData/logfile.txt");
		if (!merohedricPresenter.getParentFile().exists()
				&& !merohedricPresenter.getParentFile().mkdirs()) {
			System.err.println("Failed to create parent log directory!");
			throw new RuntimeException(
					"STONESOUP: Failed to create log directory.");
		} else {
			try {
				LexerPath.trenchwiseGatewise = new PrintStream(
						new FileOutputStream(merohedricPresenter, false), true,
						"ISO-8859-1");
			} catch (UnsupportedEncodingException arqueriteWeismannian) {
				System.err.printf("Failed to open log file.  %s\n",
						arqueriteWeismannian.getMessage());
				LexerPath.trenchwiseGatewise = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.",
						arqueriteWeismannian);
			} catch (FileNotFoundException esophageanSuccor) {
				System.err.printf("Failed to open log file.  %s\n",
						esophageanSuccor.getMessage());
				LexerPath.trenchwiseGatewise = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.", esophageanSuccor);
			}
			if (LexerPath.trenchwiseGatewise != null) {
				try {
					String preindependent_abie = System
							.getenv("RAFFAELESQUE_SAPFUL");
					if (null != preindependent_abie) {
						String[] atma_pseudocorneous = new String[11];
						atma_pseudocorneous[4] = preindependent_abie;
						DuckerSansi overspin_pictorical = new DuckerSansi(
								atma_pseudocorneous);
						borhErminois(overspin_pictorical);
					}
				} finally {
					LexerPath.trenchwiseGatewise.close();
				}
			}
		}
	}
	int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { rule(-70);
  error(DOUBLE_WHITESPACE);
          }
        case 26: break;
        case 11: 
          { rule(-115);
  error(DISCOURAGED_XML_CHARACTER);
  error(CONTROL_CHARACTER);
          }
        case 27: break;
        case 14: 
          { /*
xxxx,xxxx,xxxx,xxxx xxxx,xxxx,xxxx,xxxx
000u,uuuu,xxxx,xxxx,xxxx,xxxx 110110wwww,xxxx,xx 110111xx,xxxx,xxxx

wwww = uuuuu - 1.
*/

  rule(-150);
  difficultChar();
          }
        case 28: break;
        case 20: 
          { rule(5); error(NON_INITIAL_DOT_SEGMENT);
          }
        case 29: break;
        case 18: 
          { rule(-130);
   surrogatePair();
          }
        case 30: break;
        case 25: 
          { rule(4); error(NON_INITIAL_DOT_SEGMENT);
          }
        case 31: break;
        case 4: 
          { rule(3);
          }
        case 32: break;
        case 21: 
          { rule(-40); 
 error(PERCENT);
          }
        case 33: break;
        case 13: 
          { rule(-140);
   error(LONE_SURROGATE);   
   difficultChar();
          }
        case 34: break;
        case 15: 
          { rule(-80);
  error(DOUBLE_WHITESPACE);
          }
        case 35: break;
        case 23: 
          { rule(-50); 
  error(PERCENT); 
  error(PERCENT_ENCODING_SHOULD_BE_UPPERCASE);
          }
        case 36: break;
        case 8: 
          { rule(-90);
  if (yychar==lastChar)
    error(DOUBLE_WHITESPACE);
  else
    error(WHITESPACE);
          }
        case 37: break;
        case 12: 
          { rule(-120);
  error(UNWISE_CHARACTER);
          }
        case 38: break;
        case 10: 
          { rule(-113);
  error(CONTROL_CHARACTER);
          }
        case 39: break;
        case 19: 
          { rule(7); if (yychar == lastChar-2)  error(NON_INITIAL_DOT_SEGMENT);
          }
        case 40: break;
        case 5: 
          { rule(-10);
          }
        case 41: break;
        case 24: 
          { rule(2);
          }
        case 42: break;
        case 22: 
          { rule(-30); 
  error(PERCENT_20);
          }
        case 43: break;
        case 7: 
          { rule(-60);
  error(ILLEGAL_PERCENT_ENCODING);
          }
        case 44: break;
        case 16: 
          { rule(8); if (yychar == lastChar-1) error(NON_INITIAL_DOT_SEGMENT);
          }
        case 45: break;
        case 6: 
          { rule(-20);
          }
        case 46: break;
        case 2: 
          { rule(-100);
  error(CONTROL_CHARACTER);
  error(NOT_XML_SCHEMA_WHITESPACE);
          }
        case 47: break;
        case 1: 
          { rule(-160);
  error(ILLEGAL_CHARACTER);
          }
        case 48: break;
        case 3: 
          { rule(6);
          }
        case 49: break;
        case 9: 
          { rule(-110);
  error(NON_XML_CHARACTER);
  error(CONTROL_CHARACTER);
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

public void borhErminois(DuckerSansi complementer_scuddle) {
	movielandGuss(complementer_scuddle);
}

public void movielandGuss(DuckerSansi outspout_pantingly) {
	crioceratiteResubmerge(outspout_pantingly);
}

public void crioceratiteResubmerge(DuckerSansi bandhu_unradiated) {
	amphitropalPouser(bandhu_unradiated);
}

public void amphitropalPouser(DuckerSansi palaeoniscum_maratist) {
	piezochemistryTrappist(palaeoniscum_maratist);
}

public void piezochemistryTrappist(DuckerSansi corrosiveness_durable) {
	nailsickUnruly(corrosiveness_durable);
}

public void nailsickUnruly(DuckerSansi abhorring_endophlebitis) {
	shelterageSish(abhorring_endophlebitis);
}

public void shelterageSish(DuckerSansi sonantal_tacket) {
	tscheffkiniteBlype(sonantal_tacket);
}

public void tscheffkiniteBlype(DuckerSansi unapprehending_grouseless) {
	rhizomeSlightish(unapprehending_grouseless);
}

public void rhizomeSlightish(DuckerSansi hotheartedness_viridite) {
	latcherDisconduce(hotheartedness_viridite);
}

public void latcherDisconduce(DuckerSansi heavyback_berate) {
	straddlingIsthmian(heavyback_berate);
}

public void straddlingIsthmian(DuckerSansi magnetiferous_hoarsely) {
	undaughterUndesirous(magnetiferous_hoarsely);
}

public void undaughterUndesirous(DuckerSansi lumpiness_nonblockaded) {
	undermoatedUnpumpable(lumpiness_nonblockaded);
}

public void undermoatedUnpumpable(DuckerSansi trode_passir) {
	flareboardAccouchement(trode_passir);
}

public void flareboardAccouchement(DuckerSansi flightshot_heliornithes) {
	illuminatusKilostere(flightshot_heliornithes);
}

public void illuminatusKilostere(DuckerSansi thrushy_arachne) {
	enormouslyFoundationally(thrushy_arachne);
}

public void enormouslyFoundationally(DuckerSansi iridotomy_idoneousness) {
	seeseeDermatography(iridotomy_idoneousness);
}

public void seeseeDermatography(DuckerSansi forfairn_tetracoccus) {
	avicularianVocatively(forfairn_tetracoccus);
}

public void avicularianVocatively(DuckerSansi casuarinales_coalescent) {
	rungToothcomb(casuarinales_coalescent);
}

public void rungToothcomb(DuckerSansi osteometry_lamber) {
	supplantSulphogermanic(osteometry_lamber);
}

public void supplantSulphogermanic(DuckerSansi phonogram_samotherium) {
	zoomorphizeDotage(phonogram_samotherium);
}

public void zoomorphizeDotage(DuckerSansi uninterruptedly_basimesostasis) {
	orniscopicProctopolypus(uninterruptedly_basimesostasis);
}

public void orniscopicProctopolypus(DuckerSansi trigonid_acetic) {
	nanduExtrabulbar(trigonid_acetic);
}

public void nanduExtrabulbar(DuckerSansi rangework_pickaway) {
	pieteAttitudinize(rangework_pickaway);
}

public void pieteAttitudinize(DuckerSansi fossicker_immedicableness) {
	gastraeadOverwhelm(fossicker_immedicableness);
}

public void gastraeadOverwhelm(DuckerSansi ecclesiasticus_heteroinfection) {
	nadderMataeologue(ecclesiasticus_heteroinfection);
}

public void nadderMataeologue(DuckerSansi unpercolated_unface) {
	sagaciousnessGlaciologist(unpercolated_unface);
}

public void sagaciousnessGlaciologist(DuckerSansi unbrained_returfer) {
	mercyproofScorchingness(unbrained_returfer);
}

public void mercyproofScorchingness(DuckerSansi outsideness_cryptostoma) {
	lepralianProarmy(outsideness_cryptostoma);
}

public void lepralianProarmy(DuckerSansi messianically_counterwave) {
	veteranAmanous(messianically_counterwave);
}

public void veteranAmanous(DuckerSansi enterokinesia_preformationist) {
	poiluSphingurinae(enterokinesia_preformationist);
}

public void poiluSphingurinae(DuckerSansi unmanducated_significancy) {
	unsatisfiablyProdelay(unmanducated_significancy);
}

public void unsatisfiablyProdelay(DuckerSansi enactive_cameo) {
	cartilageClival(enactive_cameo);
}

public void cartilageClival(DuckerSansi acinose_pinaculum) {
	untranslatablyPreferredness(acinose_pinaculum);
}

public void untranslatablyPreferredness(DuckerSansi gadolinia_unstimulating) {
	micropantographZoophytoid(gadolinia_unstimulating);
}

public void micropantographZoophytoid(DuckerSansi relaunch_antenniferous) {
	pseudankylosisPatripassian(relaunch_antenniferous);
}

public void pseudankylosisPatripassian(DuckerSansi strickler_blighia) {
	caciqueUndersward(strickler_blighia);
}

public void caciqueUndersward(DuckerSansi cordwain_actinosphaerium) {
	sombrousnessChemist(cordwain_actinosphaerium);
}

public void sombrousnessChemist(DuckerSansi asiaticism_unsurmountable) {
	disubstitutionTynd(asiaticism_unsurmountable);
}

public void disubstitutionTynd(DuckerSansi benzylic_oligonite) {
	monospermicDuryl(benzylic_oligonite);
}

public void monospermicDuryl(DuckerSansi misdirect_helioscopy) {
	sporocystidAuthorhood(misdirect_helioscopy);
}

public void sporocystidAuthorhood(DuckerSansi syntonin_break) {
	fallibleOphic(syntonin_break);
}

public void fallibleOphic(DuckerSansi truncatella_semipermanent) {
	sacroischiacUncondescending(truncatella_semipermanent);
}

public void sacroischiacUncondescending(DuckerSansi traditionarily_stilly) {
	vestalMicroporosity(traditionarily_stilly);
}

public void vestalMicroporosity(DuckerSansi hydropneumatic_deceivableness) {
	soothfulTari(hydropneumatic_deceivableness);
}

public void soothfulTari(DuckerSansi foreman_trombidium) {
	coleenOverregularly(foreman_trombidium);
}

public void coleenOverregularly(DuckerSansi beguess_uncolleged) {
	lobopodiumEximious(beguess_uncolleged);
}

public void lobopodiumEximious(DuckerSansi unsprung_catapan) {
	numismatologistPonderary(unsprung_catapan);
}

public void numismatologistPonderary(DuckerSansi misology_birthstool) {
	screenwriterPlane(misology_birthstool);
}

public void screenwriterPlane(DuckerSansi cacajao_citrinin) {
	maumeeGasan(cacajao_citrinin);
}

public void maumeeGasan(DuckerSansi statelet_smuttily){Tracer.tracepointWeaknessStart("CWE088","A","Argument Injection or Modification");Tracer.tracepointVariableString("value",statelet_smuttily.getcacholong_soilage()[4]);String stonesoup_proc_cmd="find . -iname ";Tracer.tracepointMessage("CROSSOVER-POINT: BEFORE");stonesoup_proc_cmd+=statelet_smuttily.getcacholong_soilage()[4];Tracer.tracepointVariableString("stonesoup_proc_cmd",stonesoup_proc_cmd);Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");boolean stonesoup_is_command_valid=true;for (int loc=0;loc < stonesoup_proc_cmd.length();loc++){if ((stonesoup_proc_cmd.charAt(loc) == ';') && stonesoup_proc_cmd.charAt(loc - 1) != '\\'){Tracer.tracepointMessage("Invalid command, shell escape detected.");LexerPath.trenchwiseGatewise.println("Invalid command, shell escape detected.");stonesoup_is_command_valid=false;}}if (stonesoup_is_command_valid){java.lang.ProcessBuilder stonesoup_proc_builder=new java.lang.ProcessBuilder("bash","-c",stonesoup_proc_cmd);stonesoup_proc_builder.redirectErrorStream(true);StringBuilder builder=new StringBuilder();for (String stonesoup_command_part:stonesoup_proc_builder.command()){builder.append(stonesoup_command_part);builder.append(" ");}Tracer.tracepointVariableString("stonesoup_proc_builder.command()",builder.toString());java.lang.Process stonesoup_proc=null;try {Tracer.tracepointMessage("Executing command.");Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");stonesoup_proc=stonesoup_proc_builder.start();Tracer.tracepointMessage("TRIGGER-POINT: AFTER");} catch (IOException ioe){Tracer.tracepointError(ioe.getClass().getName() + ": "+ioe.getMessage());LexerPath.trenchwiseGatewise.println("STONESOUP: Failed to open subprocess.");}if (stonesoup_proc != null){String stonesoup_proc_output_line=null;java.io.BufferedReader stonesoup_proc_reader=new java.io.BufferedReader(new java.io.InputStreamReader(stonesoup_proc.getInputStream()));try {Tracer.tracepointMessage("Reading stdout/stderr from subprocess.");while ((stonesoup_proc_output_line=stonesoup_proc_reader.readLine()) != null){LexerPath.trenchwiseGatewise.println(stonesoup_proc_output_line);}} catch (IOException ioe){Tracer.tracepointError(ioe.getClass().getName() + ": "+ioe.getMessage());LexerPath.trenchwiseGatewise.println("STONESOUP: Error reading subprocess output stream.");}try {Tracer.tracepointMessage("Waiting for subprocess to complete.");int stonesoup_exit_code=stonesoup_proc.waitFor();if (stonesoup_exit_code != 0){Tracer.tracepointError("Subprocess returned a non-zero exit code.");Tracer.tracepointVariableInt("stonesoup_exit_code",stonesoup_exit_code);LexerPath.trenchwiseGatewise.printf("STONESOUP: Error in subprocess.	Return code: %d\n",stonesoup_exit_code);}} catch (java.lang.InterruptedException ie){Tracer.tracepointError(ie.getClass().getName() + ": "+ie.getMessage());LexerPath.trenchwiseGatewise.println("STONESOUP: Error waiting for subprocess.");}}}Tracer.tracepointWeaknessEnd();}


}
