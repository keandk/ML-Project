# Tokenized code fragments for 155579-v1.0.0-bad
# Total center nodes processed: 63
# Total code fragments found: 291

CENTER_NODE: 68719477284
FRAGMENT_COUNT: 7
  ORIGINAL[0]: int i = end - 1
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = VAR2 - 1
  ORIGINAL[1]: i >= start
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= VAR2
  ORIGINAL[2]: i--
  TYPE[2]: CALL
  TOKENIZED[2]: i--
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476917
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: length
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640324
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: finally
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: finally

CENTER_NODE: 30064771551
FRAGMENT_COUNT: 15
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: int[][] newArray = new int[newSize][]
  TYPE[2]: CALL
  TOKENIZED[2]: int[][] VAR1 = new int[newSize][]
  ORIGINAL[3]: new int[newSize][]
  TYPE[3]: CALL
  TOKENIZED[3]: new int[newSize][]
  ORIGINAL[4]: System.arraycopy(array, 0, newArray, 0, newSize)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR4 )
  ORIGINAL[5]: if (newSize != array.length)
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: if ( VAR1 != VAR2 . VAR3 )
  ORIGINAL[6]: newSize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: newArray
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: newSize
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: System
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: array
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: newArray
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: newSize
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: newArray
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: array
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477267
FRAGMENT_COUNT: 7
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, newSize)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR4 )
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: System
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: newArray
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newSize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477153
FRAGMENT_COUNT: 6
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: boolean[] newArray = new boolean[oversize(minSize, 1)]
  TYPE[1]: CALL
  TOKENIZED[1]: boolean[] VAR1 = new boolean[oversize ( VAR2 , 1 ) ]
  ORIGINAL[2]: new boolean[oversize(minSize, 1)]
  TYPE[2]: CALL
  TOKENIZED[2]: new boolean[oversize ( VAR1 , 1 ) ]
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: newArray
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771475
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 + array.length
  TYPE[0]: CALL
  TOKENIZED[0]: 1 + VAR1 . VAR2
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476818
FRAGMENT_COUNT: 3
  ORIGINAL[0]: minTargetSize < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: new IllegalArgumentException(\
  TYPE[1]: CALL
  TOKENIZED[1]: new FUN1 ( \
  ORIGINAL[2]: $obj7
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: $obj7

CENTER_NODE: 68719477293
FRAGMENT_COUNT: 5
  ORIGINAL[0]: offsetLeft + length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 + VAR2
  ORIGINAL[1]: offsetLeft
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: length
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: length
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: length
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771693
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: toIndex - fromIndex
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: toIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fromIndex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771502
FRAGMENT_COUNT: 7
  ORIGINAL[0]: getShrinkSize(array.length, targetSize, 1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 . VAR2 , VAR3 , 1 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: length
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: targetSize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: array
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771676
FRAGMENT_COUNT: 9
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: toIndex - fromIndex
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: introSort(a, fromIndex, toIndex, ArrayUtil.<T>naturalComparator())
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 . <T>naturalComparator ( ) )
  ORIGINAL[3]: ArrayUtil.naturalComparator()
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . FUN1 ( )
  ORIGINAL[4]: if (toIndex - fromIndex <= 1)
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: if ( VAR1 - VAR2 <= 1 )
  ORIGINAL[5]: a
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fromIndex
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: toIndex
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ArrayUtil
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476737
FRAGMENT_COUNT: 3
  ORIGINAL[0]: chars.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: chars
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477248
FRAGMENT_COUNT: 8
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: System
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: array
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newArray
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: newArray
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640307
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 47244640309
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (true)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( true )

CENTER_NODE: 68719477162
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771699
FRAGMENT_COUNT: 3
  ORIGINAL[0]: PrintStream ArrayUtil.perforatedAlmondy = null
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 . VAR3 = null
  ORIGINAL[1]: ArrayUtil.perforatedAlmondy
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: perforatedAlmondy
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476848
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: minSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: minSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477367
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2
  ORIGINAL[1]: toIndex
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fromIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fromIndex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476958
FRAGMENT_COUNT: 4
  ORIGINAL[0]: RamUsageEstimator.NUM_BYTES_LONG
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: NUM_BYTES_LONG
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: targetSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: RamUsageEstimator
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771691
FRAGMENT_COUNT: 5
  ORIGINAL[0]: timSort(a, 0, a.length, comp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , VAR3 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: comp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771646
FRAGMENT_COUNT: 3
  ORIGINAL[0]: int upto = 0
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = 0
  ORIGINAL[1]: upto
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: $iterLocal0
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: $iterLocal0

CENTER_NODE: 68719476809
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !negative
  TYPE[0]: CALL
  TOKENIZED[0]: !negative
  ORIGINAL[1]: result = -result
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = -result
  ORIGINAL[2]: result < 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < 0
  ORIGINAL[3]: result
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: result
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: result
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476878
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: minSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: minSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771567
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 30064771706
FRAGMENT_COUNT: 5
  ORIGINAL[0]: Comparator ArrayUtil.NATURAL_COMPARATOR = new NaturalComparator()
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 . VAR3 = new FUN1 ( )
  ORIGINAL[1]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new NaturalComparator()
  TYPE[2]: CALL
  TOKENIZED[2]: new FUN1 ( )
  ORIGINAL[3]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: NATURAL_COMPARATOR
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477206
FRAGMENT_COUNT: 4
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, newSize)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR4 )
  ORIGINAL[2]: newArray
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640327
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719477111
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stonesoup_filePaths[stonesoup_i % stonesoup_numFilePaths]
  TYPE[0]: CALL
  TOKENIZED[0]: stonesoup_filePaths[stonesoup_i % stonesoup_numFilePaths]
  ORIGINAL[1]: stonesoup_filePaths[stonesoup_i] != null
  TYPE[1]: CALL
  TOKENIZED[1]: stonesoup_filePaths[stonesoup_i] != null
  ORIGINAL[2]: stonesoup_filePaths[stonesoup_i]
  TYPE[2]: CALL
  TOKENIZED[2]: stonesoup_filePaths[stonesoup_i]
  ORIGINAL[3]: stonesoup_filePaths[stonesoup_i]
  TYPE[3]: CALL
  TOKENIZED[3]: stonesoup_filePaths[stonesoup_i]
  ORIGINAL[4]: stonesoup_filePaths
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_filePaths
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771543
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 47244640288
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: if (array.length < minSize)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: if ( VAR1 . VAR2 < VAR3 )
  ORIGINAL[2]: else
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: else

CENTER_NODE: 68719477377
FRAGMENT_COUNT: 3
  ORIGINAL[0]: introSort(a, 0, a.length, comp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , VAR3 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: comp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771520
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 + array.length
  TYPE[0]: CALL
  TOKENIZED[0]: 1 + VAR1 . VAR2
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477273
FRAGMENT_COUNT: 7
  ORIGINAL[0]: int i = end - 1
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = VAR2 - 1
  ORIGINAL[1]: i >= start
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= VAR2
  ORIGINAL[2]: i--
  TYPE[2]: CALL
  TOKENIZED[2]: i--
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640296
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719476952
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640366
FRAGMENT_COUNT: 2
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: if (toIndex - fromIndex <= 1)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: if ( VAR1 - VAR2 <= 1 )

CENTER_NODE: 30064771510
FRAGMENT_COUNT: 22
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: char[] newArray = new char[oversize(minSize, RamUsageEstimator.NUM_BYTES_CHAR)]
  TYPE[2]: CALL
  TOKENIZED[2]: char[] VAR1 = new char[oversize ( VAR2 , VAR3 . VAR4 ) ]
  ORIGINAL[3]: new char[oversize(minSize, RamUsageEstimator.NUM_BYTES_CHAR)]
  TYPE[3]: CALL
  TOKENIZED[3]: new char[oversize ( VAR1 , VAR2 . VAR3 ) ]
  ORIGINAL[4]: oversize(minSize, RamUsageEstimator.NUM_BYTES_CHAR)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[5]: RamUsageEstimator.NUM_BYTES_CHAR
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[7]: array.length
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: if (array.length < minSize)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: if ( VAR1 . VAR2 < VAR3 )
  ORIGINAL[9]: NUM_BYTES_CHAR
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: length
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: minSize
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: newArray
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: this
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: this
  ORIGINAL[14]: minSize
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: RamUsageEstimator
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: System
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: array
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: newArray
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: array
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: newArray
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: array
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 30064771618
FRAGMENT_COUNT: 7
  ORIGINAL[0]: offsetLeft + length <= left.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[1]: offsetRight + length <= right.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[2]: offsetRight + length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + VAR2
  ORIGINAL[3]: right.length
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: offsetRight
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: length
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: right
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640316
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719476920
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477213
FRAGMENT_COUNT: 6
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[2]: minSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: this
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: this
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: RamUsageEstimator
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476749
FRAGMENT_COUNT: 5
  ORIGINAL[0]: chars == null || radix < Character.MIN_RADIX || radix > Character.MAX_RADIX
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == null || VAR2 < VAR3 . VAR4 || VAR2 > VAR3 . VAR5
  ORIGINAL[1]: throw new NumberFormatException();
  TYPE[1]: CALL
  TOKENIZED[1]: throw new FUN1 ( ) ;
  ORIGINAL[2]: int i = 0
  TYPE[2]: CALL
  TOKENIZED[2]: int VAR1 = 0
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476924
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_INT)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 . VAR2 , VAR3 , VAR4 . VAR5 )
  ORIGINAL[1]: newSize
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: this
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: this
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640299
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: finally
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: finally

CENTER_NODE: 30064771696
FRAGMENT_COUNT: 3
  ORIGINAL[0]: timSort(a, 0, a.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771663
FRAGMENT_COUNT: 4
  ORIGINAL[0]: arr[i] = arr[j]
  TYPE[0]: CALL
  TOKENIZED[0]: arr[i] = arr[j]
  ORIGINAL[1]: arr[i]
  TYPE[1]: CALL
  TOKENIZED[1]: arr[i]
  ORIGINAL[2]: arr[j]
  TYPE[2]: CALL
  TOKENIZED[2]: arr[j]
  ORIGINAL[3]: arr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771225
FRAGMENT_COUNT: 5
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: short[] newArray = new short[newSize]
  TYPE[1]: CALL
  TOKENIZED[1]: short[] VAR1 = new short[newSize]
  ORIGINAL[2]: new short[newSize]
  TYPE[2]: CALL
  TOKENIZED[2]: new short[newSize]
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476740
FRAGMENT_COUNT: 3
  ORIGINAL[0]: parseInt(chars, offset, len, 10)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 10 )
  ORIGINAL[1]: offset
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771176
FRAGMENT_COUNT: 4
  ORIGINAL[0]: newSize < currentSize / 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 / 2
  ORIGINAL[1]: currentSize / 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 / 2
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: currentSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477385
FRAGMENT_COUNT: 3
  ORIGINAL[0]: a.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771201
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 30064771628
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (offsetLeft + length <= left.length) && (offsetRight + length <= right.length)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 + VAR2 <= VAR3 . VAR2 ) && ( VAR4 + VAR2 <= VAR5 . VAR2 )
  ORIGINAL[1]: offsetLeft + length <= left.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[2]: offsetRight + length <= right.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[3]: int i = 0
  TYPE[3]: CALL
  TOKENIZED[3]: int VAR1 = 0
  ORIGINAL[4]: i < length
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 < VAR2
  ORIGINAL[5]: if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length))
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: if ( ( VAR1 + VAR2 <= VAR3 . VAR2 ) && ( VAR4 + VAR2 <= VAR5 . VAR2 ) )
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: length
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476889
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476860
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771659
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (Comparator<T>) NATURAL_COMPARATOR
  TYPE[0]: CALL
  TOKENIZED[0]: ( Comparator<T> ) VAR1
  ORIGINAL[1]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2

CENTER_NODE: 30064771701
FRAGMENT_COUNT: 5
  ORIGINAL[0]: java.util.concurrent.atomic.AtomicBoolean ArrayUtil.underearthParanthelion = new java.util.concurrent.atomic.AtomicBoolean(false)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 . VAR3 . VAR4 . VAR5 VAR6 . VAR7 = new VAR1 . VAR2 . VAR3 . VAR4 . FUN1 ( false )
  ORIGINAL[1]: ArrayUtil.underearthParanthelion
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new java.util.concurrent.atomic.AtomicBoolean(false)
  TYPE[2]: CALL
  TOKENIZED[2]: new VAR1 . VAR2 . VAR3 . VAR4 . FUN1 ( false )
  ORIGINAL[3]: ArrayUtil.underearthParanthelion
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: underearthParanthelion
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477354
FRAGMENT_COUNT: 3
  ORIGINAL[0]: o1.compareTo(o2)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . FUN1 ( VAR2 )
  ORIGINAL[1]: o1
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: o2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771476
FRAGMENT_COUNT: 3
  ORIGINAL[0]: assert targetSize >= 0 : \
  TYPE[0]: CALL
  TOKENIZED[0]: assert VAR1 >= 0 : \
  ORIGINAL[1]: targetSize >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640303
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719476867
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: RamUsageEstimator.NUM_BYTES_FLOAT
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: NUM_BYTES_FLOAT
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: minSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: RamUsageEstimator
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640312
FRAGMENT_COUNT: 4
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch
  ORIGINAL[2]: catch
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: catch
  ORIGINAL[3]: finally
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: finally

