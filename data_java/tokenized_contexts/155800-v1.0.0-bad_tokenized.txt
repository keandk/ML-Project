# Tokenized code fragments for 155800-v1.0.0-bad
# Total center nodes processed: 73
# Total code fragments found: 389

CENTER_NODE: 68719477284
FRAGMENT_COUNT: 7
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: int[][] newArray = new int[oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][]
  TYPE[1]: CALL
  TOKENIZED[1]: int[][] VAR1 = new int[oversize ( VAR2 , VAR3 . VAR4 ) ][]
  ORIGINAL[2]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[3]: array.length
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: System
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: array
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newArray
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771535
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 + array.length
  TYPE[0]: CALL
  TOKENIZED[0]: 1 + VAR1 . VAR2
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477063
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[2]: newArray
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: this
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: this
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476917
FRAGMENT_COUNT: 4
  ORIGINAL[0]: this.receivedBarrier.await()
  TYPE[0]: CALL
  TOKENIZED[0]: this . VAR1 . FUN1 ( )
  ORIGINAL[1]: new IOException(\
  TYPE[1]: CALL
  TOKENIZED[1]: new FUN1 ( \
  ORIGINAL[2]: $obj1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: $obj1
  ORIGINAL[3]: e
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771551
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: boolean[] newArray = new boolean[oversize(minSize, 1)]
  TYPE[1]: CALL
  TOKENIZED[1]: boolean[] VAR1 = new boolean[oversize ( VAR2 , 1 ) ]
  ORIGINAL[2]: new boolean[oversize(minSize, 1)]
  TYPE[2]: CALL
  TOKENIZED[2]: new boolean[oversize ( VAR1 , 1 ) ]
  ORIGINAL[3]: oversize(minSize, 1)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , 1 )
  ORIGINAL[4]: newArray
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477267
FRAGMENT_COUNT: 7
  ORIGINAL[0]: int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_CHAR)
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = FUN1 ( VAR2 . VAR3 , VAR4 , VAR5 . VAR6 )
  ORIGINAL[1]: newSize != array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2 . VAR3
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: newSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: array
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newSize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477293
FRAGMENT_COUNT: 6
  ORIGINAL[0]: assert targetSize >= 0 : \
  TYPE[0]: CALL
  TOKENIZED[0]: assert VAR1 >= 0 : \
  ORIGINAL[1]: int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)
  TYPE[1]: CALL
  TOKENIZED[1]: int VAR1 = FUN1 ( VAR2 . VAR3 , VAR4 , VAR5 . VAR6 )
  ORIGINAL[2]: getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 . VAR2 , VAR3 , VAR4 . VAR5 )
  ORIGINAL[3]: newSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: this
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: this
  ORIGINAL[5]: newSize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640321
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719476818
FRAGMENT_COUNT: 4
  ORIGINAL[0]: NanoHTTPD.Response
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: Response
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: response
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: NanoHTTPD
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476922
FRAGMENT_COUNT: 4
  ORIGINAL[0]: parseInt(chars, offset, len, 10)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 10 )
  ORIGINAL[1]: chars
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: offset
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771151
FRAGMENT_COUNT: 4
  ORIGINAL[0]: NanoHTTPD.Response response = new NanoHTTPD.Response(NanoHTTPD.Response.Status.METHOD_NOT_ALLOWED, NanoHTTPD.MIME_PLAINTEXT, body)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 VAR3 = new VAR1 . FUN1 ( VAR1 . VAR2 . VAR4 . VAR5 , VAR1 . VAR6 , VAR7 )
  ORIGINAL[1]: new NanoHTTPD.Response(NanoHTTPD.Response.Status.METHOD_NOT_ALLOWED, NanoHTTPD.MIME_PLAINTEXT, body)
  TYPE[1]: CALL
  TOKENIZED[1]: new VAR1 . FUN1 ( VAR1 . Response . VAR2 . VAR3 , VAR1 . VAR4 , VAR5 )
  ORIGINAL[2]: response
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: response
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477469
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2
  ORIGINAL[1]: toIndex
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fromIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fromIndex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477248
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: minSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: minSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771579
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 30064771566
FRAGMENT_COUNT: 5
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: boolean[] newArray = new boolean[newSize]
  TYPE[1]: CALL
  TOKENIZED[1]: boolean[] VAR1 = new boolean[newSize]
  ORIGINAL[2]: new boolean[newSize]
  TYPE[2]: CALL
  TOKENIZED[2]: new boolean[newSize]
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771719
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (Comparator<T>) NATURAL_COMPARATOR
  TYPE[0]: CALL
  TOKENIZED[0]: ( Comparator<T> ) VAR1
  ORIGINAL[1]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2

CENTER_NODE: 30064771396
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476803
FRAGMENT_COUNT: 12
  ORIGINAL[0]: String body = null
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 = null
  ORIGINAL[1]: body = String.format(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 . FUN1 ( \
  ORIGINAL[2]: format(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: \
  TYPE[3]: CALL
  TOKENIZED[3]: \
  ORIGINAL[4]: \
  TYPE[4]: CALL
  TOKENIZED[4]: \
  ORIGINAL[5]: getUri()
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( )
  ORIGINAL[6]: if (sendBody)
  TYPE[6]: CONTROL_STRUCTURE
  TOKENIZED[6]: if ( VAR1 )
  ORIGINAL[7]: sendBody
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: body
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: String
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: session
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: response
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064771119
FRAGMENT_COUNT: 3
  ORIGINAL[0]: this.responseWriter = writer
  TYPE[0]: CALL
  TOKENIZED[0]: this . VAR1 = VAR2
  ORIGINAL[1]: this.responseWriter
  TYPE[1]: CALL
  TOKENIZED[1]: this . VAR1
  ORIGINAL[2]: writer
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771762
FRAGMENT_COUNT: 3
  ORIGINAL[0]: java.util.concurrent.atomic.AtomicBoolean ArrayUtil.scogginLoutish = new java.util.concurrent.atomic.AtomicBoolean(false)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 . VAR3 . VAR4 . VAR5 VAR6 . VAR7 = new VAR1 . VAR2 . VAR3 . VAR4 . FUN1 ( false )
  ORIGINAL[1]: ArrayUtil.scogginLoutish
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new java.util.concurrent.atomic.AtomicBoolean(false)
  TYPE[2]: CALL
  TOKENIZED[2]: new VAR1 . VAR2 . VAR3 . VAR4 . FUN1 ( false )

CENTER_NODE: 68719477424
FRAGMENT_COUNT: 3
  ORIGINAL[0]: o1.compareTo(o2)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . FUN1 ( VAR2 )
  ORIGINAL[1]: o1
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: o2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771758
FRAGMENT_COUNT: 2
  ORIGINAL[0]: PrintStream ArrayUtil.disconnectionMethodize = null
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 . VAR3 = null
  ORIGINAL[1]: ArrayUtil.disconnectionMethodize
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2

CENTER_NODE: 30064771681
FRAGMENT_COUNT: 16
  ORIGINAL[0]: (offsetLeft + length <= left.length) && (offsetRight + length <= right.length)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 + VAR2 <= VAR3 . VAR2 ) && ( VAR4 + VAR2 <= VAR5 . VAR2 )
  ORIGINAL[1]: i < length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: left[offsetLeft + i] != right[offsetRight + i]
  TYPE[2]: CALL
  TOKENIZED[2]: left[offsetLeft + i] != right[offsetRight + i]
  ORIGINAL[3]: left[offsetLeft + i]
  TYPE[3]: CALL
  TOKENIZED[3]: left[offsetLeft + i]
  ORIGINAL[4]: offsetLeft + i
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + VAR2
  ORIGINAL[5]: right[offsetRight + i]
  TYPE[5]: CALL
  TOKENIZED[5]: right[offsetRight + i]
  ORIGINAL[6]: offsetRight + i
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 + VAR2
  ORIGINAL[7]: for (int i = 0; Some(i < length); i++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( int VAR1 = 0 ; FUN1 ( VAR1 < VAR2 ) ; i++ )
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: length
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: left
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: offsetLeft
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: right
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: offsetRight
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064771742
FRAGMENT_COUNT: 18
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: toIndex - fromIndex
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: sort(fromIndex, toIndex)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: $obj14 = new ArrayTimSorter<T>(a, comp, a.length / 64)
  TYPE[3]: CALL
  TOKENIZED[3]: $obj14 = new ArrayTimSorter<T> ( VAR1 , VAR2 , VAR1 . VAR3 / 64 )
  ORIGINAL[4]: new ArrayTimSorter<T>(a, comp, a.length / 64)
  TYPE[4]: CALL
  TOKENIZED[4]: new ArrayTimSorter<T> ( VAR1 , VAR2 , VAR1 . VAR3 / 64 )
  ORIGINAL[5]: new ArrayTimSorter<T>(a, comp, a.length / 64)
  TYPE[5]: CALL
  TOKENIZED[5]: new ArrayTimSorter<T> ( VAR1 , VAR2 , VAR1 . VAR3 / 64 )
  ORIGINAL[6]: a.length / 64
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2 / 64
  ORIGINAL[7]: a.length
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: if (toIndex - fromIndex <= 1)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: if ( VAR1 - VAR2 <= 1 )
  ORIGINAL[9]: length
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: $obj14
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: $obj14
  ORIGINAL[11]: $obj14
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: $obj14
  ORIGINAL[12]: a
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: comp
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: a
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: $obj14
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: $obj14
  ORIGINAL[16]: fromIndex
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: toIndex
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 68719477367
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (offsetLeft + length <= left.length) && (offsetRight + length <= right.length)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 + VAR2 <= VAR3 . VAR2 ) && ( VAR4 + VAR2 <= VAR5 . VAR2 )
  ORIGINAL[1]: int i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: int VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476958
FRAGMENT_COUNT: 6
  ORIGINAL[0]: int max = Integer.MIN_VALUE / radix
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = VAR2 . VAR3 / VAR4
  ORIGINAL[1]: int result = 0
  TYPE[1]: CALL
  TOKENIZED[1]: int VAR1 = 0
  ORIGINAL[2]: result
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: result
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: result
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: result
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477110
FRAGMENT_COUNT: 4
  ORIGINAL[0]: RamUsageEstimator.NUM_BYTES_INT
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: NUM_BYTES_INT
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: targetSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: RamUsageEstimator
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771646
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i >= start
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: code = code * 31 + array[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 * 31 + array[i]
  ORIGINAL[2]: code * 31 + array[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 31 + array[i]
  ORIGINAL[3]: code * 31
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 * 31
  ORIGINAL[4]: array[i]
  TYPE[4]: CALL
  TOKENIZED[4]: array[i]
  ORIGINAL[5]: code
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476878
FRAGMENT_COUNT: 5
  ORIGINAL[0]: String.format(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . FUN1 ( \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: <operator>.arrayInitializer
  TYPE[2]: CALL
  TOKENIZED[2]: <operator> . VAR1
  ORIGINAL[3]: body
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: String
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477128
FRAGMENT_COUNT: 7
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)]
  TYPE[1]: CALL
  TOKENIZED[1]: long[] VAR1 = new long[oversize ( VAR2 , VAR3 . VAR4 ) ]
  ORIGINAL[2]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[3]: array.length
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: System
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: array
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newArray
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476997
FRAGMENT_COUNT: 4
  ORIGINAL[0]: minTargetSize < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: minTargetSize
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: minTargetSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: minTargetSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771409
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640263
FRAGMENT_COUNT: 3
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch
  ORIGINAL[2]: catch
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: catch

CENTER_NODE: 30064771169
FRAGMENT_COUNT: 7
  ORIGINAL[0]: new NanoHTTPD.Response(NanoHTTPD.Response.Status.CREATED, NanoHTTPD.MIME_PLAINTEXT, body)
  TYPE[0]: CALL
  TOKENIZED[0]: new VAR1 . FUN1 ( VAR1 . Response . VAR2 . VAR3 , VAR1 . VAR4 , VAR5 )
  ORIGINAL[1]: NanoHTTPD.Response.Status.CREATED
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 . VAR3 . VAR4
  ORIGINAL[2]: NanoHTTPD.MIME_PLAINTEXT
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: MIME_PLAINTEXT
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: response
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: NanoHTTPD
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: body
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477206
FRAGMENT_COUNT: 6
  ORIGINAL[0]: assert targetSize >= 0 : \
  TYPE[0]: CALL
  TOKENIZED[0]: assert VAR1 >= 0 : \
  ORIGINAL[1]: int newSize = getShrinkSize(array.length, targetSize, 1)
  TYPE[1]: CALL
  TOKENIZED[1]: int VAR1 = FUN1 ( VAR2 . VAR3 , VAR4 , 1 )
  ORIGINAL[2]: getShrinkSize(array.length, targetSize, 1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 . VAR2 , VAR3 , 1 )
  ORIGINAL[3]: newSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: newSize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771723
FRAGMENT_COUNT: 4
  ORIGINAL[0]: arr[i] = arr[j]
  TYPE[0]: CALL
  TOKENIZED[0]: arr[i] = arr[j]
  ORIGINAL[1]: arr[i]
  TYPE[1]: CALL
  TOKENIZED[1]: arr[i]
  ORIGINAL[2]: arr[j]
  TYPE[2]: CALL
  TOKENIZED[2]: arr[j]
  ORIGINAL[3]: arr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771713
FRAGMENT_COUNT: 7
  ORIGINAL[0]: result[upto++] = v
  TYPE[0]: CALL
  TOKENIZED[0]: result[upto++] = VAR1
  ORIGINAL[1]: result[upto++]
  TYPE[1]: CALL
  TOKENIZED[1]: result[upto++]
  ORIGINAL[2]: upto++
  TYPE[2]: CALL
  TOKENIZED[2]: upto++
  ORIGINAL[3]: result
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: result
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: result
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640319
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: finally
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: finally

CENTER_NODE: 30064771076
FRAGMENT_COUNT: 4
  ORIGINAL[0]: tracepointVariableString(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: Tracer
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: convertism_catoptrite
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: convertism_catoptrite
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477027
FRAGMENT_COUNT: 3
  ORIGINAL[0]: newSize < currentSize / 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 / 2
  ORIGINAL[1]: newSize
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771463
FRAGMENT_COUNT: 7
  ORIGINAL[0]: int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_LONG)
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = FUN1 ( VAR2 . VAR3 , VAR4 , VAR5 . VAR6 )
  ORIGINAL[1]: getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_LONG)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 . VAR2 , VAR3 , VAR4 . VAR5 )
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: RamUsageEstimator.NUM_BYTES_LONG
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: this
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: this
  ORIGINAL[6]: targetSize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771765
FRAGMENT_COUNT: 3
  ORIGINAL[0]: Comparator ArrayUtil.NATURAL_COMPARATOR = new NaturalComparator()
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 . VAR3 = new FUN1 ( )
  ORIGINAL[1]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new NaturalComparator()
  TYPE[2]: CALL
  TOKENIZED[2]: new FUN1 ( )

CENTER_NODE: 30064771557
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 + array.length
  TYPE[0]: CALL
  TOKENIZED[0]: 1 + VAR1 . VAR2
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477176
FRAGMENT_COUNT: 6
  ORIGINAL[0]: rendrock_mandan = gee_unbrewed.getData()
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 . FUN1 ( )
  ORIGINAL[1]: gee_unbrewed = null
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = null
  ORIGINAL[2]: $obj11 = new RuntimeException(\
  TYPE[2]: CALL
  TOKENIZED[2]: $obj11 = new FUN1 ( \
  ORIGINAL[3]: new RuntimeException(\
  TYPE[3]: CALL
  TOKENIZED[3]: new FUN1 ( \
  ORIGINAL[4]: $obj11
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: $obj11
  ORIGINAL[5]: $obj11
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: $obj11

CENTER_NODE: 68719476919
FRAGMENT_COUNT: 2
  ORIGINAL[0]: parseInt(chars, 0, chars.length, 10)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , 10 )
  ORIGINAL[1]: chars
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771238
FRAGMENT_COUNT: 4
  ORIGINAL[0]: setRequestMethod(session.getMethod())
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 . FUN2 ( ) )
  ORIGINAL[1]: getMethod()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: response
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: session
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477104
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771750
FRAGMENT_COUNT: 4
  ORIGINAL[0]: timSort(a, 0, a.length, comp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , VAR3 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: comp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477031
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: minSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: minSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: minSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771618
FRAGMENT_COUNT: 22
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: float[][] newArray = new float[oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][]
  TYPE[2]: CALL
  TOKENIZED[2]: float[][] VAR1 = new float[oversize ( VAR2 , VAR3 . VAR4 ) ][]
  ORIGINAL[3]: new float[oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)][]
  TYPE[3]: CALL
  TOKENIZED[3]: new float[oversize ( VAR1 , VAR2 . VAR3 ) ][]
  ORIGINAL[4]: oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[5]: RamUsageEstimator.NUM_BYTES_OBJECT_REF
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[7]: array.length
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: if (array.length < minSize)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: if ( VAR1 . VAR2 < VAR3 )
  ORIGINAL[9]: NUM_BYTES_OBJECT_REF
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: length
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: minSize
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: newArray
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: this
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: this
  ORIGINAL[14]: minSize
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: RamUsageEstimator
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: System
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: array
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: newArray
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: array
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: newArray
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: array
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 68719477446
FRAGMENT_COUNT: 3
  ORIGINAL[0]: introSort(a, 0, a.length, comp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , VAR3 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: comp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771736
FRAGMENT_COUNT: 9
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: toIndex - fromIndex
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: introSort(a, fromIndex, toIndex, ArrayUtil.<T>naturalComparator())
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 . <T>naturalComparator ( ) )
  ORIGINAL[3]: ArrayUtil.naturalComparator()
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . FUN1 ( )
  ORIGINAL[4]: if (toIndex - fromIndex <= 1)
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: if ( VAR1 - VAR2 <= 1 )
  ORIGINAL[5]: a
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fromIndex
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: toIndex
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ArrayUtil
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640316
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719477436
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2
  ORIGINAL[1]: toIndex
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fromIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fromIndex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640269
FRAGMENT_COUNT: 3
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch
  ORIGINAL[2]: catch
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: catch

CENTER_NODE: 30064771097
FRAGMENT_COUNT: 19
  ORIGINAL[0]: stonesoup_str.length() > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . FUN1 ( ) > 0
  ORIGINAL[1]: stonesoup_str.charAt(0) == stonesoup_c
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( 0 ) == VAR2
  ORIGINAL[2]: stonesoup_str.charAt(0)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . FUN1 ( 0 )
  ORIGINAL[3]: stonesoup_nextIndex = 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = 1
  ORIGINAL[4]: int stonesoup_foundIndex = search(stonesoup_str.substring(stonesoup_nextIndex, stonesoup_str.length()), stonesoup_c)
  TYPE[4]: CALL
  TOKENIZED[4]: int VAR1 = FUN1 ( VAR2 . FUN2 ( VAR3 , VAR2 . FUN3 ( ) ) , VAR4 )
  ORIGINAL[5]: search(stonesoup_str.substring(stonesoup_nextIndex, stonesoup_str.length()), stonesoup_c)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 . FUN2 ( VAR2 , VAR1 . FUN3 ( ) ) , VAR3 )
  ORIGINAL[6]: stonesoup_str.substring(stonesoup_nextIndex, stonesoup_str.length())
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . FUN1 ( VAR2 , VAR1 . FUN2 ( ) )
  ORIGINAL[7]: stonesoup_str.length()
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . FUN1 ( )
  ORIGINAL[8]: stonesoup_foundIndex != -1
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 != -1
  ORIGINAL[9]: -1
  TYPE[9]: CALL
  TOKENIZED[9]: -1
  ORIGINAL[10]: if (stonesoup_str.charAt(0) == stonesoup_c)
  TYPE[10]: CONTROL_STRUCTURE
  TOKENIZED[10]: if ( VAR1 . FUN1 ( 0 ) == VAR2 )
  ORIGINAL[11]: stonesoup_c
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: stonesoup_nextIndex
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: stonesoup_foundIndex
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: stonesoup_str
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: stonesoup_nextIndex
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: stonesoup_str
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: stonesoup_c
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: stonesoup_foundIndex
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 68719477332
FRAGMENT_COUNT: 6
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: new float[newSize][]
  TYPE[1]: CALL
  TOKENIZED[1]: new float[newSize][]
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: newSize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476924
FRAGMENT_COUNT: 5
  ORIGINAL[0]: chars == null
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == null
  ORIGINAL[1]: chars[offset + i]
  TYPE[1]: CALL
  TOKENIZED[1]: chars[offset + i]
  ORIGINAL[2]: chars
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: chars
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: chars
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476902
FRAGMENT_COUNT: 3
  ORIGINAL[0]: method
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: PUT
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: matchCheckHeader
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640277
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719477474
FRAGMENT_COUNT: 2
  ORIGINAL[0]: timSort(a, 0, a.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 )
  ORIGINAL[1]: a
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771696
FRAGMENT_COUNT: 16
  ORIGINAL[0]: (offsetLeft + length <= left.length) && (offsetRight + length <= right.length)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 + VAR2 <= VAR3 . VAR2 ) && ( VAR4 + VAR2 <= VAR5 . VAR2 )
  ORIGINAL[1]: i < length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: left[offsetLeft + i] != right[offsetRight + i]
  TYPE[2]: CALL
  TOKENIZED[2]: left[offsetLeft + i] != right[offsetRight + i]
  ORIGINAL[3]: left[offsetLeft + i]
  TYPE[3]: CALL
  TOKENIZED[3]: left[offsetLeft + i]
  ORIGINAL[4]: offsetLeft + i
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + VAR2
  ORIGINAL[5]: right[offsetRight + i]
  TYPE[5]: CALL
  TOKENIZED[5]: right[offsetRight + i]
  ORIGINAL[6]: offsetRight + i
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 + VAR2
  ORIGINAL[7]: for (int i = 0; Some(i < length); i++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( int VAR1 = 0 ; FUN1 ( VAR1 < VAR2 ) ; i++ )
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: length
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: left
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: offsetLeft
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: right
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: offsetRight
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244640268
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719477075
FRAGMENT_COUNT: 6
  ORIGINAL[0]: assert targetSize >= 0 : \
  TYPE[0]: CALL
  TOKENIZED[0]: assert VAR1 >= 0 : \
  ORIGINAL[1]: int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT)
  TYPE[1]: CALL
  TOKENIZED[1]: int VAR1 = FUN1 ( VAR2 . VAR3 , VAR4 , VAR5 . VAR6 )
  ORIGINAL[2]: getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_SHORT)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 . VAR2 , VAR3 , VAR4 . VAR5 )
  ORIGINAL[3]: newSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: this
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: this
  ORIGINAL[5]: newSize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477454
FRAGMENT_COUNT: 3
  ORIGINAL[0]: a.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771628
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 + array.length
  TYPE[0]: CALL
  TOKENIZED[0]: 1 + VAR1 . VAR2
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771457
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477360
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i >= start
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: code
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: code
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: code
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771384
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 30064771430
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: oversize(minSize, RamUsageEstimator.NUM_BYTES_INT)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[2]: RamUsageEstimator.NUM_BYTES_INT
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: NUM_BYTES_INT
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: RamUsageEstimator
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476867
FRAGMENT_COUNT: 8
  ORIGINAL[0]: new PipedInputStream(this.responseWriter)
  TYPE[0]: CALL
  TOKENIZED[0]: new FUN1 ( this . VAR1 )
  ORIGINAL[1]: setResponseOptions(session, response)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: this
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: this
  ORIGINAL[3]: session
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: session
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: response
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: session
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: session
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771604
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 + array.length
  TYPE[0]: CALL
  TOKENIZED[0]: 1 + VAR1 . VAR2
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477056
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

