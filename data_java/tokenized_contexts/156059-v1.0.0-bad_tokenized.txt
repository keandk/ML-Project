# Tokenized code fragments for 156059-v1.0.0-bad
# Total center nodes processed: 59
# Total code fragments found: 268

CENTER_NODE: 68719477284
FRAGMENT_COUNT: 7
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, newSize)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR4 )
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: System
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: array
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: newArray
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newSize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771344
FRAGMENT_COUNT: 3
  ORIGINAL[0]: assert minSize >= 0 : \
  TYPE[0]: CALL
  TOKENIZED[0]: assert VAR1 >= 0 : \
  ORIGINAL[1]: minSize >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771551
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[2]: RamUsageEstimator.NUM_BYTES_OBJECT_REF
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: NUM_BYTES_OBJECT_REF
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: RamUsageEstimator
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477293
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i >= start
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: code = code * 31 + array[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 * 31 + array[i]
  ORIGINAL[2]: code * 31 + array[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 31 + array[i]
  ORIGINAL[3]: code
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: code
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: code
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477153
FRAGMENT_COUNT: 3
  ORIGINAL[0]: targetSize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: targetSize
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: targetSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477267
FRAGMENT_COUNT: 4
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[2]: newArray
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476998
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771693
FRAGMENT_COUNT: 4
  ORIGINAL[0]: introSort(a, 0, a.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: length
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771502
FRAGMENT_COUNT: 5
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: boolean[] newArray = new boolean[oversize(minSize, 1)]
  TYPE[1]: CALL
  TOKENIZED[1]: boolean[] VAR1 = new boolean[oversize ( VAR2 , 1 ) ]
  ORIGINAL[2]: new boolean[oversize(minSize, 1)]
  TYPE[2]: CALL
  TOKENIZED[2]: new boolean[oversize ( VAR1 , 1 ) ]
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: System
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771189
FRAGMENT_COUNT: 3
  ORIGINAL[0]: parseInt(chars, 0, chars.length, 10)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , 10 )
  ORIGINAL[1]: chars.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: chars
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771676
FRAGMENT_COUNT: 7
  ORIGINAL[0]: arr[i] = arr[j]
  TYPE[0]: CALL
  TOKENIZED[0]: arr[i] = arr[j]
  ORIGINAL[1]: arr[i]
  TYPE[1]: CALL
  TOKENIZED[1]: arr[i]
  ORIGINAL[2]: arr[j]
  TYPE[2]: CALL
  TOKENIZED[2]: arr[j]
  ORIGINAL[3]: arr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: arr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: arr
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477400
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: ArrayUtil.naturalComparator()
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( )
  ORIGINAL[2]: toIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ArrayUtil
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477248
FRAGMENT_COUNT: 6
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: int[][] newArray = new int[newSize][]
  TYPE[1]: CALL
  TOKENIZED[1]: int[][] VAR1 = new int[newSize][]
  ORIGINAL[2]: new int[newSize][]
  TYPE[2]: CALL
  TOKENIZED[2]: new int[newSize][]
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: newArray
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640307
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 30064771579
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 68719477151
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771686
FRAGMENT_COUNT: 4
  ORIGINAL[0]: introSort(a, 0, a.length, comp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , VAR3 )
  ORIGINAL[1]: a.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: comp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477239
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476977
FRAGMENT_COUNT: 7
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: float[] newArray = new float[oversize(minSize, RamUsageEstimator.NUM_BYTES_FLOAT)]
  TYPE[1]: CALL
  TOKENIZED[1]: float[] VAR1 = new float[oversize ( VAR2 , VAR3 . VAR4 ) ]
  ORIGINAL[2]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[3]: array.length
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: System
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: array
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newArray
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477060
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476969
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771681
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: toIndex - fromIndex
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: toIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fromIndex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477367
FRAGMENT_COUNT: 4
  ORIGINAL[0]: result[upto++] = v
  TYPE[0]: CALL
  TOKENIZED[0]: result[upto++] = VAR1
  ORIGINAL[1]: result[upto++]
  TYPE[1]: CALL
  TOKENIZED[1]: result[upto++]
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477110
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ArrayUtil.rancidityGarston != null
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 != null
  ORIGINAL[1]: String ballotage_uropsile = System.getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 VAR2 = VAR3 . FUN1 ( \
  ORIGINAL[2]: ballotage_uropsile == null
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == null
  ORIGINAL[3]: ballotage_uropsile
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ballotage_uropsile
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ballotage_uropsile
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476958
FRAGMENT_COUNT: 6
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: short[] newArray = new short[oversize(minSize, RamUsageEstimator.NUM_BYTES_SHORT)]
  TYPE[1]: CALL
  TOKENIZED[1]: short[] VAR1 = new short[oversize ( VAR2 , VAR3 . VAR4 ) ]
  ORIGINAL[2]: new short[oversize(minSize, RamUsageEstimator.NUM_BYTES_SHORT)]
  TYPE[2]: CALL
  TOKENIZED[2]: new short[oversize ( VAR1 , VAR2 . VAR3 ) ]
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: this
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: this
  ORIGINAL[5]: newArray
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771646
FRAGMENT_COUNT: 7
  ORIGINAL[0]: offsetLeft + length <= left.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[1]: offsetRight + length <= right.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[2]: offsetRight + length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + VAR2
  ORIGINAL[3]: right.length
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: length
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: right
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: right
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477422
FRAGMENT_COUNT: 2
  ORIGINAL[0]: timSort(a, 0, a.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 )
  ORIGINAL[1]: a
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771711
FRAGMENT_COUNT: 3
  ORIGINAL[0]: PrintStream ArrayUtil.rancidityGarston = null
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 . VAR3 = null
  ORIGINAL[1]: ArrayUtil.rancidityGarston
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: rancidityGarston
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640266
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 68719477301
FRAGMENT_COUNT: 7
  ORIGINAL[0]: int i = end - 1
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = VAR2 - 1
  ORIGINAL[1]: i >= start
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= VAR2
  ORIGINAL[2]: i--
  TYPE[2]: CALL
  TOKENIZED[2]: i--
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640310
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: finally
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: finally

CENTER_NODE: 68719477179
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: length
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477206
FRAGMENT_COUNT: 3
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771355
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: 1 + array.length
  TYPE[1]: CALL
  TOKENIZED[1]: 1 + VAR1 . VAR2
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2

CENTER_NODE: 30064771713
FRAGMENT_COUNT: 5
  ORIGINAL[0]: java.util.concurrent.atomic.AtomicBoolean ArrayUtil.centererNonaerating = new java.util.concurrent.atomic.AtomicBoolean(false)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 . VAR3 . VAR4 . VAR5 VAR6 . VAR7 = new VAR1 . VAR2 . VAR3 . VAR4 . FUN1 ( false )
  ORIGINAL[1]: ArrayUtil.centererNonaerating
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new java.util.concurrent.atomic.AtomicBoolean(false)
  TYPE[2]: CALL
  TOKENIZED[2]: new VAR1 . VAR2 . VAR3 . VAR4 . FUN1 ( false )
  ORIGINAL[3]: ArrayUtil.centererNonaerating
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: centererNonaerating
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771076
FRAGMENT_COUNT: 4
  ORIGINAL[0]: String stonesoup_psql_host = System.getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 VAR2 = VAR3 . FUN1 ( \
  ORIGINAL[1]: System.getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( \
  ORIGINAL[2]: stonesoup_psql_host
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_psql_user
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476849
FRAGMENT_COUNT: 3
  ORIGINAL[0]: parseInt(chars, offset, len, 10)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 10 )
  ORIGINAL[1]: offset
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477014
FRAGMENT_COUNT: 4
  ORIGINAL[0]: newSize != array.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 . VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, newSize)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR4 )
  ORIGINAL[2]: newArray
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477207
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476952
FRAGMENT_COUNT: 4
  ORIGINAL[0]: currentSize / 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 / 2
  ORIGINAL[1]: newSize
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: currentSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: currentSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477031
FRAGMENT_COUNT: 3
  ORIGINAL[0]: targetSize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: targetSize
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: targetSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771618
FRAGMENT_COUNT: 16
  ORIGINAL[0]: (offsetLeft + length <= left.length) && (offsetRight + length <= right.length)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 + VAR2 <= VAR3 . VAR2 ) && ( VAR4 + VAR2 <= VAR5 . VAR2 )
  ORIGINAL[1]: i < length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: left[offsetLeft + i] != right[offsetRight + i]
  TYPE[2]: CALL
  TOKENIZED[2]: left[offsetLeft + i] != right[offsetRight + i]
  ORIGINAL[3]: left[offsetLeft + i]
  TYPE[3]: CALL
  TOKENIZED[3]: left[offsetLeft + i]
  ORIGINAL[4]: offsetLeft + i
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + VAR2
  ORIGINAL[5]: right[offsetRight + i]
  TYPE[5]: CALL
  TOKENIZED[5]: right[offsetRight + i]
  ORIGINAL[6]: offsetRight + i
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 + VAR2
  ORIGINAL[7]: for (int i = 0; Some(i < length); i++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( int VAR1 = 0 ; FUN1 ( VAR1 < VAR2 ) ; i++ )
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: length
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: left
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: offsetLeft
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: right
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: offsetRight
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064771510
FRAGMENT_COUNT: 3
  ORIGINAL[0]: assert targetSize >= 0 : \
  TYPE[0]: CALL
  TOKENIZED[0]: assert VAR1 >= 0 : \
  ORIGINAL[1]: targetSize >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0
  ORIGINAL[2]: newSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771322
FRAGMENT_COUNT: 22
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: double[] newArray = new double[oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)]
  TYPE[2]: CALL
  TOKENIZED[2]: double[] VAR1 = new double[oversize ( VAR2 , VAR3 . VAR4 ) ]
  ORIGINAL[3]: new double[oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)]
  TYPE[3]: CALL
  TOKENIZED[3]: new double[oversize ( VAR1 , VAR2 . VAR3 ) ]
  ORIGINAL[4]: oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[5]: RamUsageEstimator.NUM_BYTES_DOUBLE
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[7]: array.length
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: if (array.length < minSize)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: if ( VAR1 . VAR2 < VAR3 )
  ORIGINAL[9]: NUM_BYTES_DOUBLE
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: length
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: minSize
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: newArray
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: this
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: this
  ORIGINAL[14]: minSize
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: RamUsageEstimator
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: System
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: array
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: newArray
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: array
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: newArray
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: array
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 30064771670
FRAGMENT_COUNT: 3
  ORIGINAL[0]: o1.compareTo(o2)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . FUN1 ( VAR2 )
  ORIGINAL[1]: o1
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: o2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477421
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: ArrayUtil.naturalComparator()
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( )
  ORIGINAL[2]: toIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ArrayUtil
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477213
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_CHAR)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 . VAR2 , VAR3 , VAR4 . VAR5 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: targetSize
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: targetSize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: RamUsageEstimator
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476924
FRAGMENT_COUNT: 5
  ORIGINAL[0]: minTargetSize < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: $obj7 = new IllegalArgumentException(\
  TYPE[1]: CALL
  TOKENIZED[1]: $obj7 = new FUN1 ( \
  ORIGINAL[2]: new IllegalArgumentException(\
  TYPE[2]: CALL
  TOKENIZED[2]: new FUN1 ( \
  ORIGINAL[3]: $obj7
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: $obj7
  ORIGINAL[4]: $obj7
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: $obj7

CENTER_NODE: 68719476902
FRAGMENT_COUNT: 5
  ORIGINAL[0]: max > result
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: $obj4 = new NumberFormatException(\
  TYPE[1]: CALL
  TOKENIZED[1]: $obj4 = new FUN1 ( \
  ORIGINAL[2]: new NumberFormatException(\
  TYPE[2]: CALL
  TOKENIZED[2]: new FUN1 ( \
  ORIGINAL[3]: $obj4
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: $obj4
  ORIGINAL[4]: $obj4
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: $obj4

CENTER_NODE: 30064771671
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (Comparator<T>) NATURAL_COMPARATOR
  TYPE[0]: CALL
  TOKENIZED[0]: ( Comparator<T> ) VAR1
  ORIGINAL[1]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2

CENTER_NODE: 68719477413
FRAGMENT_COUNT: 2
  ORIGINAL[0]: timSort(a, 0, a.length, comp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , VAR1 . VAR2 , VAR3 )
  ORIGINAL[1]: a
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771696
FRAGMENT_COUNT: 4
  ORIGINAL[0]: toIndex - fromIndex <= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 <= 1
  ORIGINAL[1]: sort(fromIndex, toIndex)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: fromIndex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: toIndex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640314
FRAGMENT_COUNT: 2
  ORIGINAL[0]: try
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: try
  ORIGINAL[1]: catch
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: catch

CENTER_NODE: 30064771628
FRAGMENT_COUNT: 6
  ORIGINAL[0]: offsetLeft + length <= left.length
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 + VAR2 <= VAR3 . VAR2
  ORIGINAL[1]: offsetLeft + length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2
  ORIGINAL[2]: left.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: length
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: left
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: left
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476983
FRAGMENT_COUNT: 3
  ORIGINAL[0]: grow(array, 1 + array.length)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 + VAR1 . VAR2 )
  ORIGINAL[1]: array.length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: array
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771384
FRAGMENT_COUNT: 7
  ORIGINAL[0]: int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_LONG)
  TYPE[0]: CALL
  TOKENIZED[0]: int VAR1 = FUN1 ( VAR2 . VAR3 , VAR4 , VAR5 . VAR6 )
  ORIGINAL[1]: getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_LONG)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 . VAR2 , VAR3 , VAR4 . VAR5 )
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: RamUsageEstimator.NUM_BYTES_LONG
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: newSize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: this
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: this
  ORIGINAL[6]: targetSize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771720
FRAGMENT_COUNT: 2
  ORIGINAL[0]: new NaturalComparator()
  TYPE[0]: CALL
  TOKENIZED[0]: new FUN1 ( )
  ORIGINAL[1]: ArrayUtil.NATURAL_COMPARATOR
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2

CENTER_NODE: 30064771199
FRAGMENT_COUNT: 3
  ORIGINAL[0]: chars == null || radix < Character.MIN_RADIX || radix > Character.MAX_RADIX
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == null || VAR2 < VAR3 . VAR4 || VAR2 > VAR3 . VAR5
  ORIGINAL[1]: throw new NumberFormatException();
  TYPE[1]: CALL
  TOKENIZED[1]: throw new FUN1 ( ) ;
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477056
FRAGMENT_COUNT: 8
  ORIGINAL[0]: array.length < minSize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 < VAR3
  ORIGINAL[1]: System.arraycopy(array, 0, newArray, 0, array.length)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . FUN1 ( VAR2 , 0 , VAR3 , 0 , VAR2 . VAR4 )
  ORIGINAL[2]: array.length
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: newArray
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: System
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: array
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: newArray
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: newArray
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

