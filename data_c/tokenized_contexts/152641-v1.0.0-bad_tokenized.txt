# Tokenized code fragments for 152641-v1.0.0-bad
# Total center nodes processed: 133
# Total code fragments found: 527

CENTER_NODE: 30064773085
FRAGMENT_COUNT: 11
  ORIGINAL[0]: dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_last_dts = dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: ctx -> pts_correction_last_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pts_correction_last_dts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064773513
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avctx -> pkt = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: avctx -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772865
FRAGMENT_COUNT: 9
  ORIGINAL[0]: frame -> nb_samples > avctx -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > VAR3 -> VAR4
  ORIGINAL[1]: !(avctx -> codec -> capabilities & 0x10000)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 -> VAR3 & 0x10000 )
  ORIGINAL[2]: frame -> nb_samples != avctx -> frame_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 != VAR3 -> VAR4
  ORIGINAL[3]: !ret
  TYPE[3]: CALL
  TOKENIZED[3]: !ret
  ORIGINAL[4]: *got_packet_ptr
  TYPE[4]: CALL
  TOKENIZED[4]: *got_packet_ptr
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: got_packet_ptr
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avpkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479145
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_vlog(avc,24,msg,argument_list)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , VAR2 , VAR3 )
  ORIGINAL[1]: msg
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: msg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argument_list
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476861
FRAGMENT_COUNT: 4
  ORIGINAL[0]: min_size > 18446744073709551615UL - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 18446744073709551615UL - 16
  ORIGINAL[1]: av_freep(p)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478546
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avcodec_close(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479164
FRAGMENT_COUNT: 6
  ORIGINAL[0]: hwaccel = av_hwaccel_next(hwaccel)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: hwaccel -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: hwaccel -> pix_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hwaccel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773662
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771101
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stat(dirpath, &st) == -1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[1]: retval = mkdir(dirpath, 0700)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[2]: mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[3]: retval
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640609
FRAGMENT_COUNT: 1
  ORIGINAL[0]: avctx -> sub_charenc_mode != 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 1

CENTER_NODE: 30064774012
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !avci -> buffer
  TYPE[0]: CALL
  TOKENIZED[0]: !avci -> VAR1
  ORIGINAL[1]: avci -> buffer_count
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_log(s,24,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[3]: avci -> buffer_count
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: buffer_count
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buffer_count
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avci
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avci
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771691
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < 8
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 8
  ORIGINAL[1]: buf -> data[i] = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] = ( ( void * ) 0 )
  ORIGINAL[2]: buf -> data[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0

CENTER_NODE: 30064772078
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771998
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (desc -> flags) & 8
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) & 8
  ORIGINAL[1]: desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: flags
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774359
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_bprint_finalize(buf,&str)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &str )
  ORIGINAL[1]: &str
  TYPE[1]: CALL
  TOKENIZED[1]: &str
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: str
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640348
FRAGMENT_COUNT: 3
  ORIGINAL[0]: buf -> data[0] == pic -> data[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ 0 ] == VAR3 -> VAR2 [ 0 ]
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774245
FRAGMENT_COUNT: 5
  ORIGINAL[0]: tab[i][0] == a && tab[i][1] == b
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] [ 0 ] == VAR3 && VAR1 [ VAR2 ] [ 1 ] == VAR4
  ORIGINAL[1]: tab[i][0] == a
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] [ 0 ] == VAR3
  ORIGINAL[2]: tab[i][1] == b
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] [ 1 ] == VAR3
  ORIGINAL[3]: tab[i][1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] [ 1 ]
  ORIGINAL[4]: b
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640355
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477557
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476881
FRAGMENT_COUNT: 3
  ORIGINAL[0]: initialized = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: initialized
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: initialized
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774383
FRAGMENT_COUNT: 3
  ORIGINAL[0]: stonesoup_is_valid = 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 1
  ORIGINAL[1]: stonesoup_is_valid
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stonesoup_i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772059
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> best_effort_timestamp = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> best_effort_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: best_effort_timestamp
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479203
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *ff_lockmgr_cb
  TYPE[0]: CALL
  TOKENIZED[0]: *ff_lockmgr_cb
  ORIGINAL[1]: <global> ff_lockmgr_cb
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719477547
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !ptr
  TYPE[0]: CALL
  TOKENIZED[0]: !ptr
  ORIGINAL[1]: min_size = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: min_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478001
FRAGMENT_COUNT: 16
  ORIGINAL[0]: *frame
  TYPE[0]: CALL
  TOKENIZED[0]: *frame
  ORIGINAL[1]: (ret = av_samples_get_buffer_size(&frame -> linesize[0],s -> channels,s -> frame_size,s -> sample_fmt,0)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( &frame -> VAR2 [ 0 ] , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR3 -> VAR6 , 0 ) ) < 0
  ORIGINAL[2]: !(buf = (av_malloc(ret)))
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 = ( FUN1 ( VAR2 ) ) )
  ORIGINAL[3]: frame -> nb_samples
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (ret = avcodec_fill_audio_frame(frame,s -> channels,s -> sample_fmt,buf,ret,0)) < 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR6 , VAR1 , 0 ) ) < 0
  ORIGINAL[5]: (ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0
  ORIGINAL[6]: frame -> extended_data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (ret = av_samples_set_silence(frame -> extended_data,src -> nb_samples,frame -> nb_samples - src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 -> VAR5 , VAR2 -> VAR5 - VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0
  ORIGINAL[8]: frame -> extended_data
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: frame -> nb_samples
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: frame -> extended_data
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: frame -> data
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: data
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: frame
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: frame
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: frame
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064774047
FRAGMENT_COUNT: 4
  ORIGINAL[0]: map[AV_SAMPLE_FMT_NB][2] = {[0UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}, [1UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}, [2UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}, [3UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}, [4UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}, [5UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}, [6UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}, [7UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}, [8UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}, [9UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] [ 2 ] = { [ 0UL ] { ( VAR3 ) , ( VAR3 ) } , [ 1UL ] { ( VAR4 ) , ( VAR5 ) } , [ 2UL ] { ( VAR6 ) , ( VAR7 ) } , [ 3UL ] { ( VAR8 ) , ( VAR9 ) } , [ 4UL ] { ( VAR10 ) , ( VAR11 ) } , [ 5UL ] { ( VAR3 ) , ( VAR3 ) } , [ 6UL ] { ( VAR4 ) , ( VAR5 ) } , [ 7UL ] { ( VAR6 ) , ( VAR7 ) } , [ 8UL ] { ( VAR8 ) , ( VAR9 ) } , [ 9UL ] { ( VAR10 ) , ( VAR11 ) } }
  ORIGINAL[1]: map[AV_SAMPLE_FMT_NB][2] = {[0UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}, [1UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}, [2UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}, [3UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}, [4UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}, [5UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}, [6UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}, [7UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}, [8UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}, [9UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}}
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] [ 2 ] = { [ 0UL ] { ( VAR3 ) , ( VAR3 ) } , [ 1UL ] { ( VAR4 ) , ( VAR5 ) } , [ 2UL ] { ( VAR6 ) , ( VAR7 ) } , [ 3UL ] { ( VAR8 ) , ( VAR9 ) } , [ 4UL ] { ( VAR10 ) , ( VAR11 ) } , [ 5UL ] { ( VAR3 ) , ( VAR3 ) } , [ 6UL ] { ( VAR4 ) , ( VAR5 ) } , [ 7UL ] { ( VAR6 ) , ( VAR7 ) } , [ 8UL ] { ( VAR8 ) , ( VAR9 ) } , [ 9UL ] { ( VAR10 ) , ( VAR11 ) } }
  ORIGINAL[2]: map
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: map
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640535
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774288
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &codec_mutex
  TYPE[0]: CALL
  TOKENIZED[0]: &codec_mutex
  ORIGINAL[1]: ff_lockmgr_cb(&codec_mutex,AV_LOCK_CREATE)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &codec_mutex , VAR1 )
  ORIGINAL[2]: &codec_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &codec_mutex
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> codec_mutex
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: AV_LOCK_CREATE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640675
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477551
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477541
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640741
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&codec_mutex,AV_LOCK_OBTAIN)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &codec_mutex , VAR1 )

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ch > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0

CENTER_NODE: 30064772074
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> sample_rate = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sample_rate
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640349
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640671
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771358
FRAGMENT_COUNT: 6
  ORIGINAL[0]: align = (linesize_align[0] > linesize_align[3]?linesize_align[0] : linesize_align[3])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( VAR2 [ 0 ] > VAR2 [ 3 ] ?linesize_align [ 0 ] : VAR2 [ 3 ] )
  ORIGINAL[1]: linesize_align[0] > linesize_align[3]?linesize_align[0] : linesize_align[3]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ] > VAR1 [ 3 ] ?linesize_align [ 0 ] : VAR1 [ 3 ]
  ORIGINAL[2]: linesize_align[0] > linesize_align[3]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] > VAR1 [ 3 ]
  ORIGINAL[3]: linesize_align[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]
  ORIGINAL[4]: linesize_align[3]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 3 ]
  ORIGINAL[5]: align
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773955
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p++
  TYPE[0]: CALL
  TOKENIZED[0]: p++
  ORIGINAL[1]: p -> profile == profile
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == VAR2
  ORIGINAL[2]: for (p = codec -> profiles;p -> profile != - 'c';p++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = VAR2 -> VAR3 ; VAR1 -> VAR4 != - 'c' ; p++ )
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771124
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fflush(stonesoup_printf_context)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064774354
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !(!s -> internal)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( !s -> VAR1 )
  ORIGINAL[1]: !s -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1

CENTER_NODE: 47244640481
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477564
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478932
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F32BE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772088
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_timebase = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_timebase
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_timebase
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774335
FRAGMENT_COUNT: 3
  ORIGINAL[0]: x >> 8 & 0xff
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >> 8 & 0xff
  ORIGINAL[1]: x >> 8
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >> 8
  ORIGINAL[2]: x
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772067
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477545
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773563
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: sub -> rects[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: sub -> rects[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: sub -> rects[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: sub -> rects[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: sub -> rects[i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[6]: &sub -> rects[i] -> ass
  TYPE[6]: CALL
  TOKENIZED[6]: &sub -> VAR1 [ VAR2 ] -> VAR3
  ORIGINAL[7]: sub -> rects[i] -> ass
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[8]: sub -> rects[i]
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[9]: sub -> rects[i]
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[10]: ass
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640275
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_fast_malloc ( VAR1 , VAR2 , VAR3 + 16 , 1 )

CENTER_NODE: 68719479209
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_RELEASE)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: &avformat_mutex
  TYPE[1]: CALL
  TOKENIZED[1]: &avformat_mutex
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: AV_LOCK_RELEASE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773982
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 92 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 92 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 92 << 8

CENTER_NODE: 30064771793
FRAGMENT_COUNT: 6
  ORIGINAL[0]: frame -> type = 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = 1
  ORIGINAL[1]: frame -> type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: type
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772060
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478933
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F64LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F64LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F64BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774040
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *avci = avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: *avci = VAR1 -> VAR2
  ORIGINAL[1]: avctx -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: internal
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773961
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(AV_CODEC_ID_PCM_S8_PLANAR == 65563)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 65563 )
  ORIGINAL[1]: AV_CODEC_ID_PCM_S8_PLANAR == 65563
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 65563
  ORIGINAL[2]: AV_CODEC_ID_PCM_S8_PLANAR
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773260
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> codec -> capabilities & 0x20 || avpkt -> size || avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x20 || VAR4 -> VAR5 || VAR1 -> VAR6 & 1
  ORIGINAL[1]: add_metadata_from_side_data(avctx,picture)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: picture
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772072
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774229
FRAGMENT_COUNT: 4
  ORIGINAL[0]: v >= 0xff
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0xff
  ORIGINAL[1]: *(s++) = 0xff
  TYPE[1]: CALL
  TOKENIZED[1]: * ( s++ ) = 0xff
  ORIGINAL[2]: *(s++)
  TYPE[2]: CALL
  TOKENIZED[2]: * ( s++ )
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476845
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 17 * min_size / 16 + 32 > min_size?17 * min_size / 16 + 32 : min_size
  TYPE[0]: CALL
  TOKENIZED[0]: 17 * VAR1 / 16 + 32 > min_size?17 * VAR1 / 16 + 32 : VAR1
  ORIGINAL[1]: 17 * min_size / 16 + 32 > min_size
  TYPE[1]: CALL
  TOKENIZED[1]: 17 * VAR1 / 16 + 32 > VAR1
  ORIGINAL[2]: min_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: min_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: min_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771240
FRAGMENT_COUNT: 8
  ORIGINAL[0]: codec -> encode_sub || codec -> encode2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 || VAR1 -> VAR3
  ORIGINAL[1]: codec -> encode_sub
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec -> encode2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: encode_sub
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: encode2
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771859
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 47244640330
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477552
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640409
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773932
FRAGMENT_COUNT: 4
  ORIGINAL[0]: enc -> flags & 0x0400
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0400
  ORIGINAL[1]: buf + strlen(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + FUN1 ( VAR1 )
  ORIGINAL[2]: strlen(buf)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771763
FRAGMENT_COUNT: 6
  ORIGINAL[0]: p < (desc -> nb_components)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( VAR2 -> VAR3 )
  ORIGINAL[1]: -frame -> width >> ((is_chroma?(desc -> log2_chroma_w) : 0))
  TYPE[1]: CALL
  TOKENIZED[1]: -frame -> VAR1 >> ( ( is_chroma? ( VAR2 -> VAR3 ) : 0 ) )
  ORIGINAL[2]: -frame -> width
  TYPE[2]: CALL
  TOKENIZED[2]: -frame -> VAR1
  ORIGINAL[3]: frame -> width
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: is_chroma?(desc -> log2_chroma_w) : 0
  TYPE[4]: CALL
  TOKENIZED[4]: is_chroma? ( VAR1 -> VAR2 ) : 0
  ORIGINAL[5]: is_chroma
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772063
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476857
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: min_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640537
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771982
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: r = func(c,(((char *)arg) + i * size))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , ( ( ( char * ) VAR3 ) + VAR4 * VAR5 ) )
  ORIGINAL[2]: func(c,(((char *)arg) + i * size))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( ( ( char * ) VAR2 ) + VAR3 * VAR4 ) )
  ORIGINAL[3]: ((char *)arg) + i * size
  TYPE[3]: CALL
  TOKENIZED[3]: ( ( char * ) VAR1 ) + VAR2 * VAR3
  ORIGINAL[4]: r
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: func
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: c
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640677
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773069
FRAGMENT_COUNT: 2
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 30064772057
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478883
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_G722
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772085
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: &frame -> VAR1
  ORIGINAL[1]: frame -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771389
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: needed_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stonesoup_tainted_file != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: *stonesoup_tainted_buff = ((char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1))))
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_tainted_buff = ( ( char * ) ( FUN1 ( sizeof ( char ) * ( VAR1 + 1 ) ) ) )
  ORIGINAL[2]: *stonesoup_tainted_buff
  TYPE[2]: CALL
  TOKENIZED[2]: *stonesoup_tainted_buff
  ORIGINAL[3]: (char *)(malloc(sizeof(char ) * (stonesoup_lsize + 1)))
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) ( FUN1 ( sizeof ( char ) * ( VAR1 + 1 ) ) )
  ORIGINAL[4]: stonesoup_tainted_buff
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773407
FRAGMENT_COUNT: 10
  ORIGINAL[0]: avctx -> pkt_timebase . num && avctx -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 && VAR1 -> VAR4
  ORIGINAL[1]: frame -> pkt_dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: frame -> pkt_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: frame -> pkt_dts += diff_ts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 += VAR3
  ORIGINAL[5]: frame -> pkt_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt_dts
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: diff_ts
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: frame
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640343
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640743
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774005
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> pts_correction_last_dts = - 9223372036854775807L - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = - 9223372036854775807L - 1
  ORIGINAL[1]: avctx -> pts_correction_last_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: - 9223372036854775807L - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 9223372036854775807L - 1
  ORIGINAL[3]: pts_correction_last_dts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774044
FRAGMENT_COUNT: 12
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: video_free_buffers(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: audio_free_buffers(avctx)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: break;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: break ;
  ORIGINAL[5]: break;
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: break ;
  ORIGINAL[6]: codec_type
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: AVMEDIA_TYPE_VIDEO
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: AVMEDIA_TYPE_AUDIO
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: avctx
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064774054
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [1UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 1UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[2]: AV_CODEC_ID_FIRST_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S16BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478271
FRAGMENT_COUNT: 5
  ORIGINAL[0]: side_metadata < end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: *key = side_metadata
  TYPE[1]: CALL
  TOKENIZED[1]: *key = VAR1
  ORIGINAL[2]: key
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: side_metadata
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: key
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772041
FRAGMENT_COUNT: 8
  ORIGINAL[0]: frame == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: frame -> extended_data = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: extended_data
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477097
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *avci = avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: *avci = VAR1 -> VAR2
  ORIGINAL[1]: avctx -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avci -> audio_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avci
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avci
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477561
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771314
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (s -> codec_id) == AV_CODEC_ID_IFF_ILBM || (s -> codec_id) == AV_CODEC_ID_IFF_BYTERUN1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: (s -> codec_id) == AV_CODEC_ID_IFF_ILBM
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: (s -> codec_id) == AV_CODEC_ID_IFF_BYTERUN1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: w_align = (w_align > 8?w_align : 8)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = ( VAR1 > 8?w_align : 8 )
  ORIGINAL[4]: w_align > 8?w_align : 8
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 > 8?w_align : 8
  ORIGINAL[5]: w_align > 8
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 > 8
  ORIGINAL[6]: w_align
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: w_align
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: width
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064774065
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [7UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 7UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 68719477542
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477378
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> reordered_opaque
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> codec -> type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: s -> sample_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> sample_fmt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> channel_layout
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> channels
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: channels
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772101
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: bits_per_sample = av_get_bits_per_sample(ctx -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: av_get_bits_per_sample(ctx -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: bits_per_sample
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bit_rate
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772083
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_size = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_size
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640678
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )

CENTER_NODE: 68719478233
FRAGMENT_COUNT: 4
  ORIGINAL[0]: flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & VAR2
  ORIGINAL[1]: avctx -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: channels
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640695
FRAGMENT_COUNT: 1
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064773991
FRAGMENT_COUNT: 3
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: sizeof(\
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( \

CENTER_NODE: 47244640368
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !frame || !( *frame)
  TYPE[0]: CALL
  TOKENIZED[0]: !frame || ! ( *frame )

CENTER_NODE: 30064771910
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !((s -> codec_type) == AVMEDIA_TYPE_VIDEO)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( ( VAR1 -> VAR2 ) == VAR3 )
  ORIGINAL[1]: (s -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: s -> codec_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: AVMEDIA_TYPE_VIDEO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478633
FRAGMENT_COUNT: 8
  ORIGINAL[0]: av_log(((void *)0),24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 24 , \
  ORIGINAL[1]: codec = avcodec_find_decoder(id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[2]: avcodec_find_decoder(id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: codec -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: cd
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: id
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771270
FRAGMENT_COUNT: 5
  ORIGINAL[0]: -width >> s -> lowres
  TYPE[0]: CALL
  TOKENIZED[0]: -width >> VAR1 -> VAR2
  ORIGINAL[1]: -width
  TYPE[1]: CALL
  TOKENIZED[1]: -width
  ORIGINAL[2]: s -> lowres
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: width
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772689
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !avpkt -> data || avpkt -> size < size
  TYPE[0]: CALL
  TOKENIZED[0]: !avpkt -> VAR1 || VAR2 -> VAR3 < VAR3
  ORIGINAL[1]: !avpkt -> data
  TYPE[1]: CALL
  TOKENIZED[1]: !avpkt -> VAR1
  ORIGINAL[2]: avpkt -> size < size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 < VAR2
  ORIGINAL[3]: avpkt -> size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478579
FRAGMENT_COUNT: 6
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_OPUS_DEPRECATED
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_OPUS
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_TAK_DEPRECATED
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_TAK
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772112
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ff_unlock_avcodec()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772726
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avpkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477566
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> codec_descriptor
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640673
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 1
  ORIGINAL[0]: avctx -> codec -> sample_fmts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 30064771243
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec && codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: codec -> decode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decode
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774344
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *c = avcodec_find_decoder(codec_id)
  TYPE[0]: CALL
  TOKENIZED[0]: *c = FUN1 ( VAR1 )
  ORIGINAL[1]: avcodec_find_decoder(codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479247
FRAGMENT_COUNT: 4
  ORIGINAL[0]: precisianist_advertize != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: folacins_catnaper . uranometrical_diplomacies
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: uranometrical_diplomacies
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: folacins_catnaper
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774311
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064773707
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 4
  ORIGINAL[1]: (codec_tag & 0xff) >= 48 && (codec_tag & 0xff) <= '9' || (codec_tag & 0xff) >= 'a' && (codec_tag & 0xff) <= 'z' || (codec_tag & 0xff) >= 'A' && (codec_tag & 0xff) <= 'Z'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 & 0xff ) >= 48 && ( VAR1 & 0xff ) <= '9' || ( VAR1 & 0xff ) >= 'a' && ( VAR1 & 0xff ) <= 'z' || ( VAR1 & 0xff ) >= 'A' && ( VAR1 & 0xff ) <= 'Z'
  ORIGINAL[2]: (codec_tag & 0xff) >= 48 && (codec_tag & 0xff) <= '9' || (codec_tag & 0xff) >= 'a' && (codec_tag & 0xff) <= 'z'
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 & 0xff ) >= 48 && ( VAR1 & 0xff ) <= '9' || ( VAR1 & 0xff ) >= 'a' && ( VAR1 & 0xff ) <= 'z'
  ORIGINAL[3]: (codec_tag & 0xff) >= 48 && (codec_tag & 0xff) <= '9'
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 & 0xff ) >= 48 && ( VAR1 & 0xff ) <= '9'
  ORIGINAL[4]: (codec_tag & 0xff) >= 'a' && (codec_tag & 0xff) <= 'z'
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 & 0xff ) >= 'a' && ( VAR1 & 0xff ) <= 'z'
  ORIGINAL[5]: (codec_tag & 0xff) >= 'A' && (codec_tag & 0xff) <= 'Z'
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 & 0xff ) >= 'A' && ( VAR1 & 0xff ) <= 'Z'
  ORIGINAL[6]: (codec_tag & 0xff) >= 'A'
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 & 0xff ) >= 'A'
  ORIGINAL[7]: codec_tag & 0xff
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 & 0xff
  ORIGINAL[8]: codec_tag
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772031
FRAGMENT_COUNT: 3
  ORIGINAL[0]: frame -> extended_data = frame -> data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR1 -> VAR3
  ORIGINAL[1]: frame -> extended_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: frame -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 30064772956
FRAGMENT_COUNT: 12
  ORIGINAL[0]: !user_pkt . data
  TYPE[0]: CALL
  TOKENIZED[0]: !user_pkt . VAR1
  ORIGINAL[1]: user_pkt . data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: user_pkt . data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: user_pkt . data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: data
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: user_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: user_pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: user_pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: user_pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: user_pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: user_pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: user_pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640676
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(AV_CODEC_ID_SRT == 94216)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 94216 )

CENTER_NODE: 30064774264
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *p = hwaccel
  TYPE[0]: CALL
  TOKENIZED[0]: *p = VAR1
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hwaccel
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479138
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: avc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: feature
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477382
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (avctx -> get_buffer)(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[1]: avctx -> get_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771993
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret[i] = r
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[1]: ret[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: r
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640745
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773638
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avctx -> codec = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: avctx -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773645
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *experimental = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *experimental = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: experimental
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772079
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477567
FRAGMENT_COUNT: 5
  ORIGINAL[0]: memset(sub,0,sizeof(( *sub)))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , sizeof ( ( *sub ) ) )
  ORIGINAL[1]: sizeof(( *sub))
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( ( *sub ) )
  ORIGINAL[2]: *sub
  TYPE[2]: CALL
  TOKENIZED[2]: *sub
  ORIGINAL[3]: sub
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sub
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640366
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *fmt ) != VAR1 && FUN1 ( *fmt )
  ORIGINAL[1]: ++fmt
  TYPE[1]: CALL
  TOKENIZED[1]: ++fmt
  ORIGINAL[2]: while (( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( ( *fmt ) != VAR1 && FUN1 ( *fmt ) )

CENTER_NODE: 30064773967
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_ADPCM_G722 == 69660)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 69660 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 68719478925
FRAGMENT_COUNT: 5
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_U8
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_U8
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U8
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U8
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772061
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478615
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

