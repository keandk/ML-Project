# Tokenized code fragments for 152223-v1.0.0-bad
# Total center nodes processed: 33
# Total code fragments found: 203

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 1
  ORIGINAL[0]: apr_pool_create_ex(&pool,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &pool , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )

CENTER_NODE: 68719477018
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_handle_warning2(stream,err,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: stream
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476849
FRAGMENT_COUNT: 5
  ORIGINAL[0]: err1 && err2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2
  ORIGINAL[1]: err1
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: err2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: err1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: err1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476769
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ev == MG_AUTH
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: MG_TRUE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771073
FRAGMENT_COUNT: 5
  ORIGINAL[0]: mg_vprintf_data((struct mg_connection*) stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( struct mg_connection* ) VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: (struct mg_connection*) stonesoup_printf_context
  TYPE[1]: CALL
  TOKENIZED[1]: ( struct mg_connection* ) VAR1
  ORIGINAL[2]: format
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477076
FRAGMENT_COUNT: 4
  ORIGINAL[0]: old_malfunction_handler = malfunction_handler
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2
  ORIGINAL[1]: old_malfunction_handler
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: <global> malfunction_handler
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: malfunction_handler
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771140
FRAGMENT_COUNT: 8
  ORIGINAL[0]: err -> message = (apr_pstrdup(err -> pool,message))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( FUN1 ( VAR1 -> VAR3 , VAR2 ) )
  ORIGINAL[1]: err -> message
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: apr_pstrdup(err -> pool,message)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[3]: message
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: message
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: err
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: err
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476848
FRAGMENT_COUNT: 1
  ORIGINAL[0]: err
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477040
FRAGMENT_COUNT: 7
  ORIGINAL[0]: defn -> errdesc != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[1]: defn -> errdesc
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: defn -> errcode
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: errcode
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: defn
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: defn
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: defn
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476867
FRAGMENT_COUNT: 13
  ORIGINAL[0]: chain -> pool
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: chain -> child
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: chain -> child
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: chain -> child
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: *chain
  TYPE[4]: CALL
  TOKENIZED[4]: *chain
  ORIGINAL[5]: chain -> message
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: chain -> pool
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: child
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: chain
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: new_err
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pool
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: chain
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: chain
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719476974
FRAGMENT_COUNT: 4
  ORIGINAL[0]: err -> apr_err > 20000 + 50000 + 50000 && err -> apr_err <= 20000 + 50000 + 50000 + 50000 * 10
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 20000 + 50000 + 50000 && VAR1 -> VAR2 <= 20000 + 50000 + 50000 + 50000 * 10
  ORIGINAL[1]: sizeof(errbuf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: errbuf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errbuf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476771
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: NULL
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477072
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *err = svn_error_raise_on_malfunction(!0,file,line,expr)
  TYPE[0]: CALL
  TOKENIZED[0]: *err = FUN1 ( !0 , VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: svn_handle_error2(err,stderr,0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , 0 , \
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: err
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stderr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: err
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476818
FRAGMENT_COUNT: 34
  ORIGINAL[0]: err = make_error_internal(status,((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , ( ( void * ) 0 ) )
  ORIGINAL[1]: apr_strerror(status,errbuf,sizeof(errbuf))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , sizeof ( VAR2 ) )
  ORIGINAL[2]: sizeof(errbuf)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: utf8_err = svn_utf_cstring_to_utf8(&msg_apr,errbuf,err -> pool)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = FUN1 ( &msg_apr , VAR2 , VAR3 -> VAR4 )
  ORIGINAL[4]: svn_utf_cstring_to_utf8(&msg_apr,errbuf,err -> pool)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( &msg_apr , VAR1 , VAR2 -> VAR3 )
  ORIGINAL[5]: &msg_apr
  TYPE[5]: CALL
  TOKENIZED[5]: &msg_apr
  ORIGINAL[6]: err -> pool
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: svn_error_clear(utf8_err)
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 )
  ORIGINAL[8]: __builtin_va_start(ap,fmt)
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[9]: msg = (apr_pvsprintf(err -> pool,fmt,ap))
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 = ( FUN1 ( VAR2 -> VAR3 , VAR4 , VAR5 ) )
  ORIGINAL[10]: apr_pvsprintf(err -> pool,fmt,ap)
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( VAR1 -> VAR2 , VAR3 , VAR4 )
  ORIGINAL[11]: err -> pool
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: __builtin_va_end(ap)
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( VAR1 )
  ORIGINAL[13]: pool
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pool
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: fmt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: status
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: errbuf
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: errbuf
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: utf8_err
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: msg_apr
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: errbuf
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: err
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: utf8_err
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: utf8_err
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: ap
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: fmt
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: msg
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: err
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: fmt
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: ap
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: ap
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: msg_apr
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: err
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1

CENTER_NODE: 68719477082
FRAGMENT_COUNT: 5
  ORIGINAL[0]: malfunction_handler(can_return,file,line,expr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: can_return
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: file
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: line
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: expr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640316
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_error__is_tracing_link(err)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: err = err -> child
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 -> VAR2
  ORIGINAL[2]: while (svn_error__is_tracing_link(err))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( FUN1 ( VAR1 ) )

CENTER_NODE: 30064771272
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *new_err = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *new_err = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: new_err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477027
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_error_clear(svn_cmdline_fprintf(stream,err -> pool,(dgettext(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( FUN2 ( VAR1 , VAR2 -> VAR3 , ( FUN3 ( \
  ORIGINAL[1]: fflush(stream)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: stream
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476882
FRAGMENT_COUNT: 4
  ORIGINAL[0]: err -> child
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: child
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: err
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 30
  ORIGINAL[0]: !new_err
  TYPE[0]: CALL
  TOKENIZED[0]: !new_err
  ORIGINAL[1]: new_err = (apr_palloc(pool,sizeof(( *new_err))))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 , sizeof ( ( *new_err ) ) ) )
  ORIGINAL[2]: apr_palloc(pool,sizeof(( *new_err)))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , sizeof ( ( *new_err ) ) )
  ORIGINAL[3]: sizeof(( *new_err))
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( ( *new_err ) )
  ORIGINAL[4]: *new_err
  TYPE[4]: CALL
  TOKENIZED[4]: *new_err
  ORIGINAL[5]: tmp_err = new_err
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = VAR2
  ORIGINAL[6]: tmp_err -> child = (apr_palloc(pool,sizeof(( *tmp_err -> child))))
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 = ( FUN1 ( VAR3 , sizeof ( ( *tmp_err -> VAR2 ) ) ) )
  ORIGINAL[7]: tmp_err -> child
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: apr_palloc(pool,sizeof(( *tmp_err -> child)))
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 , sizeof ( ( *tmp_err -> VAR2 ) ) )
  ORIGINAL[9]: sizeof(( *tmp_err -> child))
  TYPE[9]: CALL
  TOKENIZED[9]: sizeof ( ( *tmp_err -> VAR1 ) )
  ORIGINAL[10]: *tmp_err -> child
  TYPE[10]: CALL
  TOKENIZED[10]: *tmp_err -> VAR1
  ORIGINAL[11]: tmp_err -> child
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: tmp_err = tmp_err -> child
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 = VAR1 -> VAR2
  ORIGINAL[13]: tmp_err -> child
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: child
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: child
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: child
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: err
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: new_err
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: new_err
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pool
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: new_err
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: tmp_err
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: new_err
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: tmp_err
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: pool
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: tmp_err
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: tmp_err
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: tmp_err
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: tmp_err
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1

CENTER_NODE: 30064771421
FRAGMENT_COUNT: 10
  ORIGINAL[0]: defn -> errdesc != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[1]: (defn -> errcode) == ((svn_errno_t )statcode)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == ( ( VAR3 ) VAR4 )
  ORIGINAL[2]: defn -> errcode
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (svn_errno_t )statcode
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) VAR2
  ORIGINAL[4]: errcode
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: defn
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: defn
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: defn
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: defn
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: defn
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771449
FRAGMENT_COUNT: 4
  ORIGINAL[0]: status = 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 12
  ORIGINAL[1]: zerr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: status
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: zmsg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719476889
FRAGMENT_COUNT: 8
  ORIGINAL[0]: child = child -> child
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR1 -> VAR1
  ORIGINAL[1]: child -> child
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR1
  ORIGINAL[2]: child -> apr_err == apr_err
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == VAR2
  ORIGINAL[3]: child -> apr_err
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: child
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: child
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: child
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: child
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771433
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_error_createf(SVN_ERR_ASSERTION_FAIL,((void *)0),(dgettext(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , ( FUN2 ( \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: expr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476810
FRAGMENT_COUNT: 4
  ORIGINAL[0]: err -> message = (apr_pvsprintf(err -> pool,fmt,ap))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( FUN1 ( VAR1 -> VAR3 , VAR4 , VAR5 ) )
  ORIGINAL[1]: __builtin_va_end(ap)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ap
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ap
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719476921
FRAGMENT_COUNT: 4
  ORIGINAL[0]: err -> pool
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pool
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: err
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 3
  ORIGINAL[0]: fflush(stream)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: stream
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fatal
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476922
FRAGMENT_COUNT: 7
  ORIGINAL[0]: err && err -> message
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: err -> message
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: err -> message
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: message
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: err
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: err
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476845
FRAGMENT_COUNT: 5
  ORIGINAL[0]: child == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: child -> apr_err
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: apr_err
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: child
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771346
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_handle_error2(err,stream,fatal,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , \
  ORIGINAL[1]: err
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stream
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fatal
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640342
FRAGMENT_COUNT: 3
  ORIGINAL[0]: mysql_real_connect(stonesoup_conn,stonesoup_dbhost,stonesoup_dbuser,stonesoup_dbpassword,0,stonesoup_dbport,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 , 0 , VAR5 , \
  ORIGINAL[1]: if (mysql_real_connect(stonesoup_conn,stonesoup_dbhost,stonesoup_dbuser,stonesoup_dbpassword,0,stonesoup_dbport,\
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: if ( FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 , 0 , VAR5 , \
  ORIGINAL[2]: else
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: else

