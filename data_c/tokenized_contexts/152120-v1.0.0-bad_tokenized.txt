# Tokenized code fragments for 152120-v1.0.0-bad
# Total center nodes processed: 32
# Total code fragments found: 145

CENTER_NODE: 47244640376
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640377
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640364
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476826
FRAGMENT_COUNT: 7
  ORIGINAL[0]: num >= den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: num / den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 / VAR2
  ORIGINAL[2]: num
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: val
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: num
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: num
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477689
FRAGMENT_COUNT: 8
  ORIGINAL[0]: strlen(str) >= shmsz
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) >= VAR2
  ORIGINAL[1]: fprintf(stderr, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: errors++
  TYPE[2]: CALL
  TOKENIZED[2]: errors++
  ORIGINAL[3]: errors
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: errors
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: errors
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: errors
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: errors
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640439
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477515
FRAGMENT_COUNT: 12
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: s -> nb_streams == stream_count
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == VAR3
  ORIGINAL[2]: flush = 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 1
  ORIGINAL[3]: !flush
  TYPE[3]: CALL
  TOKENIZED[3]: !flush
  ORIGINAL[4]: s -> nb_streams == (stream_count + noninterleaved_count) && delta_dts_max > (20 * 1000000)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 == ( VAR3 + VAR4 ) && VAR5 > ( 20 * 1000000 )
  ORIGINAL[5]: flush = 1
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = 1
  ORIGINAL[6]: stream_count && flush
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 && VAR2
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stream_count
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: stream_count
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: stream_count
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: flush
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064771953
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret >= 0 && s -> pb && s -> pb -> error < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 -> VAR3 && VAR2 -> VAR3 -> VAR4 < 0
  ORIGINAL[1]: s -> pb -> error
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: ret = s -> pb -> error
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3 -> VAR4
  ORIGINAL[3]: s -> pb -> error
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: s -> pb
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: error
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 2
  ORIGINAL[0]: s -> oformat -> interleave_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064771934
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> oformat -> write_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> oformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: oformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: write_packet
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772147
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && ( VAR3 -> VAR4 -> VAR5 ) == VAR6 != ( ( VAR7 -> VAR4 -> VAR5 ) == VAR6 )
  ORIGINAL[1]: ts2 = av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 -> VAR5 , ( ( VAR6 ) { ( 1 ) , ( 1000000 ) } ) ) - ( VAR7 -> VAR8 * ( ( VAR4 -> VAR9 -> VAR10 ) == VAR11 ) )
  ORIGINAL[2]: av_rescale_q(next -> dts,st2 -> time_base,((AVRational ){(1), (1000000)})) - (s -> audio_preload * ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR4 , ( ( VAR5 ) { ( 1 ) , ( 1000000 ) } ) ) - ( VAR6 -> VAR7 * ( ( VAR3 -> VAR8 -> VAR9 ) == VAR10 ) )
  ORIGINAL[3]: ts2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476789
FRAGMENT_COUNT: 3
  ORIGINAL[0]: stonesoup_printf_context != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476803
FRAGMENT_COUNT: 7
  ORIGINAL[0]: sscanf(stonesoup_envKey, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: &stonesoup_key
  TYPE[1]: CALL
  TOKENIZED[1]: &stonesoup_key
  ORIGINAL[2]: shmget(stonesoup_key, stonesoup_shmsz, 0666)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , 0666 )
  ORIGINAL[3]: stonesoup_key
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_shmid
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_key
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_shmsz
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772399
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 0
  ORIGINAL[1]: pkt = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( void * ) 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771230
FRAGMENT_COUNT: 9
  ORIGINAL[0]: q . den / q . num < min_precission && q . den < 1 << 24
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4 && VAR1 . VAR2 < 1 << 24
  ORIGINAL[1]: q . den / q . num < min_precission
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4
  ORIGINAL[2]: q . den / q . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 / VAR1 . VAR3
  ORIGINAL[3]: q . den < 1 << 24
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 < 1 << 24
  ORIGINAL[4]: q . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: 1 << 24
  TYPE[5]: CALL
  TOKENIZED[5]: 1 << 24
  ORIGINAL[6]: den
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: min_precission
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: q
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640441
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640338
FRAGMENT_COUNT: 1
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 30064771668
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> oformat -> write_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ret = ((s -> oformat -> write_header)(s))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 ) )
  ORIGINAL[2]: (s -> oformat -> write_header)(s)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476766
FRAGMENT_COUNT: 6
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: size_filepath = strlen(dirpath) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 ) + FUN1 ( \
  ORIGINAL[2]: filepath = (char*) malloc (size_filepath * sizeof(char))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( char* ) FUN1 ( VAR2 * sizeof ( char ) )
  ORIGINAL[3]: (char*) malloc (size_filepath * sizeof(char))
  TYPE[3]: CALL
  TOKENIZED[3]: ( char* ) FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[4]: filepath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filepath
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771185
FRAGMENT_COUNT: 20
  ORIGINAL[0]: num < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: f -> val += num / den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 += VAR3 / VAR4
  ORIGINAL[2]: f -> val
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: num / den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 / VAR2
  ORIGINAL[4]: num = num % den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = VAR1 % VAR2
  ORIGINAL[5]: num % den
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 % VAR2
  ORIGINAL[6]: num < 0
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 < 0
  ORIGINAL[7]: num >= den
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 >= VAR2
  ORIGINAL[8]: val
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: num
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: f
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: num
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: den
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: num
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: num
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: den
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: num
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: num
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: den
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: f
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 47244640434
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477168
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: delay
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640363
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477036
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !validate_codec_tag(s,st)
  TYPE[0]: CALL
  TOKENIZED[0]: !validate_codec_tag ( VAR1 , VAR2 )
  ORIGINAL[1]: av_get_codec_tag_string(tagbuf,sizeof(tagbuf),codec -> codec_tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , sizeof ( VAR1 ) , VAR2 -> VAR3 )
  ORIGINAL[2]: av_get_codec_tag_string(cortag,sizeof(cortag),av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , sizeof ( VAR1 ) , FUN2 ( VAR2 -> VAR3 -> VAR4 , VAR5 -> VAR6 ) )
  ORIGINAL[3]: sizeof(cortag)
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 )
  ORIGINAL[4]: av_codec_get_tag(s -> oformat -> codec_tag,codec -> codec_id)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 -> VAR3 , VAR4 -> VAR5 )
  ORIGINAL[5]: cortag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: cortag
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: cortag
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640440
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477356
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> interleaver_chunk_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> interleaver_chunk_duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> max_chunk_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> interleaver_chunk_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: interleaver_chunk_size
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772468
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s -> oformat || !s -> oformat -> get_output_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || !s -> VAR1 -> VAR2
  ORIGINAL[1]: !s -> oformat
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1
  ORIGINAL[2]: !s -> oformat -> get_output_timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: !s -> VAR1 -> VAR2
  ORIGINAL[3]: s -> oformat -> get_output_timestamp
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 30064771240
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *s = avformat_alloc_context()
  TYPE[0]: CALL
  TOKENIZED[0]: *s = FUN1 ( )
  ORIGINAL[1]: avformat_alloc_context()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640435
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640446
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477620
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !ret
  TYPE[0]: CALL
  TOKENIZED[0]: !ret
  ORIGINAL[1]: &pkt
  TYPE[1]: CALL
  TOKENIZED[1]: &pkt
  ORIGINAL[2]: ret >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0
  ORIGINAL[3]: s -> streams[pkt . stream_index] -> nb_frames++
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 . VAR4 ] -> nb_frames++
  ORIGINAL[4]: &pkt
  TYPE[4]: CALL
  TOKENIZED[4]: &pkt
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771316
FRAGMENT_COUNT: 7
  ORIGINAL[0]: (avctag -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: st -> codec -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> codec -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: codec
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tag
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

