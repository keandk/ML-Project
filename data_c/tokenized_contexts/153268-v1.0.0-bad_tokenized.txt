# Tokenized code fragments for 153268-v1.0.0-bad
# Total center nodes processed: 37
# Total code fragments found: 200

CENTER_NODE: 30064771230
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> oformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> oformat -> priv_data_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: !s -> priv_data
  TYPE[2]: CALL
  TOKENIZED[2]: !s -> VAR1
  ORIGINAL[3]: s -> oformat -> priv_class
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: s -> oformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: oformat
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: priv_class
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640364
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771275
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 ) == FUN1 ( VAR3 -> VAR4 -> VAR5 )
  ORIGINAL[1]: st -> codec -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: codec
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_id
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477038
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: den != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[2]: den <= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 0
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771174
FRAGMENT_COUNT: 11
  ORIGINAL[0]: j < 14
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 14
  ORIGINAL[1]: q . den / q . num < min_precission && q . num % j == 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4 && VAR1 . VAR3 % VAR5 == 0
  ORIGINAL[2]: q . den / q . num < min_precission
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4
  ORIGINAL[3]: q . den / q . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 / VAR1 . VAR3
  ORIGINAL[4]: q . num % j == 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2 % VAR3 == 0
  ORIGINAL[5]: q . num % j
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2 % VAR3
  ORIGINAL[6]: q . num
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: num
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: min_precission
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: q
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: j
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771513
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> nb_streams && !(s -> streams[0] -> codec -> flags & 0x00800000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && ! ( VAR1 -> VAR3 [ 0 ] -> VAR4 -> VAR5 & 0x00800000 )
  ORIGINAL[1]: av_dict_set(&s -> metadata,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &s -> VAR1 , \
  ORIGINAL[2]: &s -> metadata
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: options
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640260
FRAGMENT_COUNT: 4
  ORIGINAL[0]: data_size < buffer_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: stonesoup_exit_flag = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;
  ORIGINAL[3]: <global> stonesoup_printf_context
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 47244640428
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477470
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> oformat -> interleave_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: (s -> oformat -> interleave_packet)(s,out,in,flush)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: out
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: in
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: flush
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: in
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640421
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771681
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL) && delay <= 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 == ( ( VAR3 ) 0x8000000000000000UL ) && VAR5 <= 16
  ORIGINAL[1]: pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts == ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: delay <= 16
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 16
  ORIGINAL[3]: delay
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640363
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477359
FRAGMENT_COUNT: 6
  ORIGINAL[0]: next -> dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ts == ts2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12 ) * VAR13 -> VAR4 . VAR12
  ORIGINAL[3]: next -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: dts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: next
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477233
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret >= 0 && s -> pb && s -> pb -> error < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 -> VAR3 && VAR2 -> VAR3 -> VAR4 < 0
  ORIGINAL[1]: ret = s -> pb -> error
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 -> VAR4
  ORIGINAL[2]: s -> pb -> error
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477206
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_packet_merge_side_data(pkt)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: did_split
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771116
FRAGMENT_COUNT: 1
  ORIGINAL[0]: base_path[20]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 20 ]

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640264
FRAGMENT_COUNT: 2
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: if (getenv(\
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: if ( FUN1 ( \

CENTER_NODE: 30064772207
FRAGMENT_COUNT: 17
  ORIGINAL[0]: s -> avoid_negative_ts > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 0
  ORIGINAL[1]: out -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: out -> dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: !st -> mux_ts_offset && out -> dts < 0
  TYPE[4]: CALL
  TOKENIZED[4]: !st -> VAR1 && VAR2 -> VAR3 < 0
  ORIGINAL[5]: !st -> mux_ts_offset
  TYPE[5]: CALL
  TOKENIZED[5]: !st -> VAR1
  ORIGINAL[6]: st -> mux_ts_offset
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: out -> dts += st -> mux_ts_offset
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 += VAR3 -> VAR4
  ORIGINAL[8]: out -> dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> mux_ts_offset
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: mux_ts_offset
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: dts
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: mux_ts_offset
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: out
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: out
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064772400
FRAGMENT_COUNT: 54
  ORIGINAL[0]: strlen(electrolyse_monogamy) < 20
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) < 20
  ORIGINAL[1]: strlen(electrolyse_monogamy)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: stonesoup_i = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: stonesoup_i < 20
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 20
  ORIGINAL[4]: stonesoup_data.buff_pointer = stonesoup_data.base_path
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2 = VAR1 . VAR3
  ORIGINAL[5]: stonesoup_data.buff_pointer
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: stonesoup_data.base_path
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[8]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[9]: realpath(electrolyse_monogamy, stonesoup_data.base_path)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 , VAR2 . VAR3 )
  ORIGINAL[10]: stonesoup_data.base_path
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 . VAR2
  ORIGINAL[11]: stonesoup_opt_var = strlen( stonesoup_data.buff_pointer)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 = FUN1 ( VAR2 . VAR3 )
  ORIGINAL[12]: strlen( stonesoup_data.buff_pointer)
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( VAR1 . VAR2 )
  ORIGINAL[13]: stonesoup_data.buff_pointer
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 . VAR2
  ORIGINAL[14]: tracepoint(stonesoup_trace, variable_signed_integral, \
  TYPE[14]: CALL
  TOKENIZED[14]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[15]: &stonesoup_opt_var
  TYPE[15]: CALL
  TOKENIZED[15]: &stonesoup_opt_var
  ORIGINAL[16]: stonesoup_oc_i < stonesoup_opt_var
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 < VAR2
  ORIGINAL[17]: stonesoup_printf(\
  TYPE[17]: CALL
  TOKENIZED[17]: FUN1 ( \
  ORIGINAL[18]: stonesoup_data.base_path
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 . VAR2
  ORIGINAL[19]: stonesoup_printf(\
  TYPE[19]: CALL
  TOKENIZED[19]: FUN1 ( \
  ORIGINAL[20]: stonesoup_data.buff_pointer
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 . VAR2
  ORIGINAL[21]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[21]: CALL
  TOKENIZED[21]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[22]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[22]: CALL
  TOKENIZED[22]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[23]: buff_pointer
  TYPE[23]: FIELD_IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: base_path
  TYPE[24]: FIELD_IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: base_path
  TYPE[25]: FIELD_IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: buff_pointer
  TYPE[26]: FIELD_IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: base_path
  TYPE[27]: FIELD_IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: buff_pointer
  TYPE[28]: FIELD_IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: stonesoup_i
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: stonesoup_i
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: stonesoup_data
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: stonesoup_data
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: stonesoup_trace
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: trace_point
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: stonesoup_trace
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: trace_point
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: electrolyse_monogamy
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: stonesoup_data
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: stonesoup_opt_var
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: stonesoup_data
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: stonesoup_trace
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: variable_signed_integral
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: stonesoup_opt_var
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: stonesoup_opt_var
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: stonesoup_oc_i
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: stonesoup_opt_var
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: stonesoup_data
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: stonesoup_data
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: stonesoup_trace
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: trace_point
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: stonesoup_trace
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: trace_point
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: stonesoup_trace
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1

CENTER_NODE: 30064772300
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ret >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: s -> streams[opkt . stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 . VAR4 ]
  ORIGINAL[2]: opkt . stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: stream_index
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: opkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: opkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: opkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640426
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476781
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772387
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ottillia_nuculacea != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: stanberry_armatoles = ((void *)ottillia_nuculacea)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( void * ) VAR2 )
  ORIGINAL[2]: (void *)ottillia_nuculacea
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) VAR1
  ORIGINAL[3]: stanberry_armatoles
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ottillia_nuculacea
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640422
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064771584
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret >= 0 && s -> pb && s -> pb -> error < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 -> VAR3 && VAR2 -> VAR3 -> VAR4 < 0
  ORIGINAL[1]: ret = s -> pb -> error
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 -> VAR4
  ORIGINAL[2]: s -> pb -> error
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476804
FRAGMENT_COUNT: 6
  ORIGINAL[0]: f -> num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: f -> den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: num < 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < 0
  ORIGINAL[3]: f -> val
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: val
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: f
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640351
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772368
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> priv_data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_freep((&s -> priv_data))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[2]: &s -> priv_data
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s -> priv_data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 68719477242
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *st = s -> streams[pkt -> stream_index]
  TYPE[0]: CALL
  TOKENIZED[0]: *st = VAR1 -> VAR2 [ VAR3 -> VAR4 ]
  ORIGINAL[1]: chunked = s -> max_chunk_size || s -> max_chunk_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 || VAR2 -> VAR4
  ORIGINAL[2]: s -> max_chunk_size || s -> max_chunk_duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 || VAR1 -> VAR3
  ORIGINAL[3]: chunked
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chunked
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477564
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !s -> oformat || !s -> oformat -> get_output_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || !s -> VAR1 -> VAR2
  ORIGINAL[1]: (s -> oformat -> get_output_timestamp)(s,stream,dts,wall)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: wall
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640433
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640427
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476736
FRAGMENT_COUNT: 4
  ORIGINAL[0]: va_start(argptr, format)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: format
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719476782
FRAGMENT_COUNT: 5
  ORIGINAL[0]: num += den >> 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 += VAR2 >> 1
  ORIGINAL[1]: den >> 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >> 1
  ORIGINAL[2]: num
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: den
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: num
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

