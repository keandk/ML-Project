# Tokenized code fragments for 152246-v1.0.0-bad
# Total center nodes processed: 91
# Total code fragments found: 396

CENTER_NODE: 68719477303
FRAGMENT_COUNT: 8
  ORIGINAL[0]: j < l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: l -> nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_freep((&l -> groups[j] . opts))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( &l -> VAR1 [ VAR2 ] . VAR3 ) )
  ORIGINAL[3]: l -> groups
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: l -> groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: groups
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: l
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: l
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719478537
FRAGMENT_COUNT: 5
  ORIGINAL[0]: **pool = (s -> opaque)
  TYPE[0]: CALL
  TOKENIZED[0]: **pool = ( VAR1 -> VAR2 )
  ORIGINAL[1]: s -> opaque
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> width
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: width
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477957
FRAGMENT_COUNT: 7
  ORIGINAL[0]: desc = avcodec_descriptor_get_by_name(name)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: codec = next_codec_for_id(desc -> id,codec,encoder)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , VAR4 )
  ORIGINAL[2]: desc -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477967
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_find_input_format(name)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: fmt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640441
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771136
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: * stonesoup_tainted_file = 0
  TYPE[1]: CALL
  TOKENIZED[1]: * VAR1 = 0
  ORIGINAL[2]: stonesoup_tainted_file
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_result
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478470
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !desc
  TYPE[0]: CALL
  TOKENIZED[0]: !desc
  ORIGINAL[1]: desc -> comp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: comp
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pixel_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477993
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (fmt -> audio_codec) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: desc = avcodec_descriptor_get(fmt -> audio_codec)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: avcodec_descriptor_get(fmt -> audio_codec)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: desc -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: desc -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773043
FRAGMENT_COUNT: 11
  ORIGINAL[0]: check_stream_specifier(s,st,(p + 1))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , ( VAR3 + 1 ) )
  ORIGINAL[1]: av_opt_find((&cc),(t -> key),((void *)0),flags,0x00002)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &cc ) , ( VAR1 -> VAR2 ) , ( ( void * ) 0 ) , VAR3 , 0x00002 )
  ORIGINAL[2]: &cc
  TYPE[2]: CALL
  TOKENIZED[2]: &cc
  ORIGINAL[3]: t -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: &cc
  TYPE[5]: CALL
  TOKENIZED[5]: &cc
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: cc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: t
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: flags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: cc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064772181
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(((void *)0),16,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errbuf_ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640434
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477211
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: p -> sep && !strcmp(p -> sep,opt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && !strcmp ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477945
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: av_get_sample_fmt_string(fmt_str,(sizeof(fmt_str)),i)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 )
  ORIGINAL[2]: sizeof(fmt_str)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt_str
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772360
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 30064771808
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < octx -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: octx -> groups[i] . group_def = &groups[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] . VAR4 = &groups [ VAR3 ]
  ORIGINAL[2]: octx -> groups[i] . group_def
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] . VAR4
  ORIGINAL[3]: octx -> groups[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: &groups[i]
  TYPE[4]: CALL
  TOKENIZED[4]: &groups [ VAR1 ]
  ORIGINAL[5]: group_def
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: groups
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773711
FRAGMENT_COUNT: 6
  ORIGINAL[0]: frame -> type != 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 2
  ORIGINAL[1]: i < sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[2]: sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 -> VAR2 ) / sizeof ( VAR1 -> VAR2 [ 0 ] )
  ORIGINAL[3]: sizeof(frame -> data)
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 -> VAR2 )
  ORIGINAL[4]: frame -> data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771781
FRAGMENT_COUNT: 7
  ORIGINAL[0]: g -> opts[g -> nb_opts - 1] . opt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4
  ORIGINAL[1]: g -> opts[g -> nb_opts - 1] . key
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4
  ORIGINAL[2]: g -> opts[g -> nb_opts - 1] . val
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4
  ORIGINAL[3]: g -> opts[g -> nb_opts - 1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ]
  ORIGINAL[4]: g -> opts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: g -> nb_opts - 1
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 - 1
  ORIGINAL[6]: val
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478047
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !( *bufptr)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *bufptr )
  ORIGINAL[1]: *bufptr
  TYPE[1]: CALL
  TOKENIZED[1]: *bufptr
  ORIGINAL[2]: *bufptr
  TYPE[2]: CALL
  TOKENIZED[2]: *bufptr
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bufptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476745
FRAGMENT_COUNT: 3
  ORIGINAL[0]: size_filepath = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: retval = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: retval
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772573
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719476828
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772885
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c = getchar()
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( )
  ORIGINAL[1]: getchar()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: yesno
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772154
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064772688
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 47244640323
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ( *(cur_opt++)) != '-'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( cur_opt++ ) ) != '-'
  ORIGINAL[1]: continue;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: continue ;
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772523
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (( *da) -> type) != (( *db) -> type)?(( *da) -> type) - (( *db) -> type) : strcmp(( *da) -> name,( *db) -> name)
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( *da ) -> VAR1 ) != ( ( *db ) -> VAR1 ) ? ( ( *da ) -> VAR1 ) - ( ( *db ) -> VAR1 ) : FUN1 ( ( *da ) -> VAR2 , ( *db ) -> VAR2 )
  ORIGINAL[1]: (( *da) -> type) != (( *db) -> type)
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( *da ) -> VAR1 ) != ( ( *db ) -> VAR1 )
  ORIGINAL[2]: (( *da) -> type) - (( *db) -> type)
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( *da ) -> VAR1 ) - ( ( *db ) -> VAR1 )
  ORIGINAL[3]: ( *da) -> type
  TYPE[3]: CALL
  TOKENIZED[3]: ( *da ) -> VAR1
  ORIGINAL[4]: ( *db) -> type
  TYPE[4]: CALL
  TOKENIZED[4]: ( *db ) -> VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640586
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !buf -> refcount
  TYPE[0]: CALL
  TOKENIZED[0]: !buf -> VAR1

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772359
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 30064772436
FRAGMENT_COUNT: 3
  ORIGINAL[0]: c -> capabilities & (0x1000 | 0x2000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & ( 0x1000 | 0x2000 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;

CENTER_NODE: 47244640394
FRAGMENT_COUNT: 1
  ORIGINAL[0]: count
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477188
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &cc
  TYPE[0]: CALL
  TOKENIZED[0]: &cc
  ORIGINAL[1]: opt[0] == 'v' || opt[0] == 'a' || opt[0] == 's'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ] == 'v' || VAR1 [ 0 ] == 'a' || VAR1 [ 0 ] == 's'
  ORIGINAL[2]: &cc
  TYPE[2]: CALL
  TOKENIZED[2]: &cc
  ORIGINAL[3]: cc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: cc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: o
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: cc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640472
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477507
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_parse_cpu_caps(&flags,arg)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &flags , VAR1 )
  ORIGINAL[1]: &flags
  TYPE[1]: CALL
  TOKENIZED[1]: &flags
  ORIGINAL[2]: arg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771173
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_dict_free(&swr_opts)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &swr_opts )
  ORIGINAL[1]: &swr_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &swr_opts
  ORIGINAL[2]: <global> swr_opts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719477915
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < 63
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 63
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: !name
  TYPE[2]: CALL
  TOKENIZED[2]: !name
  ORIGINAL[3]: printf(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: continue;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: continue ;
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477127
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *p) < 32 || ( *p) > '~'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) < 32 || ( *p ) > '~'
  ORIGINAL[1]: fputc(( *p),report_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( *p ) , VAR1 )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: <global> report_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> report_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: <global> report_file
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1
  ORIGINAL[6]: <global> report_file
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: <global> VAR1
  ORIGINAL[7]: <global> report_file
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: <global> VAR1

CENTER_NODE: 68719478099
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avformat_match_stream_specifier(s,st,spec)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: s
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: spec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771218
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: is_duration?\
  TYPE[3]: CALL
  TOKENIZED[3]: is_duration?\
  ORIGINAL[4]: context
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772696
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719477775
FRAGMENT_COUNT: 2
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AVMEDIA_TYPE_AUDIO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771716
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *g = octx -> cur_group
  TYPE[0]: CALL
  TOKENIZED[0]: *g = VAR1 -> VAR2
  ORIGINAL[1]: *g
  TYPE[1]: CALL
  TOKENIZED[1]: *g
  ORIGINAL[2]: octx -> cur_group
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: octx -> cur_group
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: cur_group
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: octx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: octx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: octx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772713
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064771378
FRAGMENT_COUNT: 8
  ORIGINAL[0]: po -> u . func_arg
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3
  ORIGINAL[1]: ret = po -> u . func_arg(optctx,opt,arg)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 . FUN1 ( VAR4 , VAR5 , VAR6 )
  ORIGINAL[2]: po -> u . func_arg(optctx,opt,arg)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . FUN1 ( VAR3 , VAR4 , VAR5 )
  ORIGINAL[3]: po -> u . func_arg
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: optctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: arg
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772860
FRAGMENT_COUNT: 4
  ORIGINAL[0]: topic = av_strdup((arg?arg : \
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( ( arg?arg : \
  ORIGINAL[1]: av_strdup((arg?arg : \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( arg?arg : \
  ORIGINAL[2]: arg?arg : \
  TYPE[2]: CALL
  TOKENIZED[2]: arg?arg : \
  ORIGINAL[3]: topic
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772352
FRAGMENT_COUNT: 3
  ORIGINAL[0]: print_program_info(1 | 8,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 | 8 , 32 )
  ORIGINAL[1]: 1 | 8
  TYPE[1]: CALL
  TOKENIZED[1]: 1 | 8
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640409
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771482
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i < g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: o -> key
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: write_option(optctx,o -> opt,o -> key,o -> val)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 -> VAR3 , VAR2 -> VAR4 , VAR2 -> VAR5 )
  ORIGINAL[3]: o -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: key
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: o
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: o
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: o
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: o
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: o
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: o
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477550
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags & 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 4
  ORIGINAL[1]: strcmp(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: cfg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: cfg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: cfg
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477045
FRAGMENT_COUNT: 4
  ORIGINAL[0]: opt[1] == '-' && opt[2] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '-' && VAR1 [ 2 ] == '\\0'
  ORIGINAL[1]: parse_option(optctx,opt,argv[optindex],options)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 [ VAR4 ] , VAR5 )
  ORIGINAL[2]: argv[optindex]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: options
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477450
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_bprint_chars(bp,c,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , 1 )
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: bp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478091
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !f && codec_name
  TYPE[0]: CALL
  TOKENIZED[0]: !f && VAR1
  ORIGINAL[1]: base[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i != 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 != 1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477672
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772687
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 68719477158
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: dump_argument(argv[i])
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 [ VAR2 ] )
  ORIGINAL[2]: i < argc - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 - 1
  ORIGINAL[3]: argc - 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - 1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: argc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772159
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: exit(1)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( 1 )
  ORIGINAL[4]: tail
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: arg
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477012
FRAGMENT_COUNT: 8
  ORIGINAL[0]: opt[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: opt[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: !po -> name
  TYPE[2]: CALL
  TOKENIZED[2]: !po -> VAR1
  ORIGINAL[3]: av_log(((void *)0),16,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: opt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477430
FRAGMENT_COUNT: 7
  ORIGINAL[0]: log_levels[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: *tail
  TYPE[1]: CALL
  TOKENIZED[1]: *tail
  ORIGINAL[2]: i < sizeof(log_levels) / sizeof(log_levels[0])
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < sizeof ( VAR2 ) / sizeof ( VAR2 [ 0 ] )
  ORIGINAL[3]: sizeof(log_levels)
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 )
  ORIGINAL[4]: log_levels[0]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 0 ]
  ORIGINAL[5]: log_levels
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: log_levels
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476821
FRAGMENT_COUNT: 3
  ORIGINAL[0]: sws_opts = sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( 16 , 16 , VAR2 , 16 , 16 , VAR2 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[2]: <global> sws_opts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 47244640359
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771253
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064773367
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 == 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 == 1
  ORIGINAL[1]: unreefed_haliplid = unreefed_haliplid + 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 + 2
  ORIGINAL[2]: unreefed_haliplid + 2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 2
  ORIGINAL[3]: unreefed_haliplid
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: unreefed_haliplid
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477699
FRAGMENT_COUNT: 7
  ORIGINAL[0]: name == ((void *)0) || strcmp(ifmt -> name,name) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 ) || FUN1 ( VAR2 -> VAR1 , VAR1 ) < 0
  ORIGINAL[1]: strcmp(ifmt -> name,last_name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[2]: ifmt -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: last_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: last_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: last_name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: last_name
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772358
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 30064772657
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec = next_codec_for_id(desc -> id,codec,encoder)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , VAR4 )
  ORIGINAL[1]: codec -> capabilities & 0x1000?\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x1000?\
  ORIGINAL[2]: codec -> capabilities & 0x1000
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x1000
  ORIGINAL[3]: codec -> capabilities
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 30064773725
FRAGMENT_COUNT: 2
  ORIGINAL[0]: unref_buffer(buf)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771258
FRAGMENT_COUNT: 7
  ORIGINAL[0]: class -> option
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_opt_show2((&class),((void *)0),flags,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &class ) , ( ( void * ) 0 ) , VAR1 , 0 )
  ORIGINAL[2]: &class
  TYPE[2]: CALL
  TOKENIZED[2]: &class
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: class
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: flags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: class
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476873
FRAGMENT_COUNT: 12
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: d < min || d > max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 || VAR1 > VAR3
  ORIGINAL[2]: type == 0x0400 && ((int64_t )d) != d
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == 0x0400 && ( ( VAR2 ) VAR3 ) != VAR3
  ORIGINAL[3]: type == 0x80 && ((int )d) != d
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == 0x80 && ( ( int ) VAR2 ) != VAR2
  ORIGINAL[4]: av_log(((void *)0),8,error,context,numstr,min,max)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( ( void * ) 0 ) , 8 , VAR1 , VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[5]: (void *)0
  TYPE[5]: CALL
  TOKENIZED[5]: ( void * ) 0
  ORIGINAL[6]: max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: error
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: context
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: numstr
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: min
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: max
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719477912
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772709
FRAGMENT_COUNT: 4
  ORIGINAL[0]: **filter __attribute__((unused))  = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: **filter FUN1 ( ( VAR1 ) ) = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: filter
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: descr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476840
FRAGMENT_COUNT: 9
  ORIGINAL[0]: av_log_format_line(ptr,level,fmt,vl2,line,(sizeof(line)),&print_prefix)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 , VAR5 , ( sizeof ( VAR5 ) ) , &print_prefix )
  ORIGINAL[1]: sizeof(line)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: &print_prefix
  TYPE[2]: CALL
  TOKENIZED[2]: &print_prefix
  ORIGINAL[3]: level
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: level
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: vl2
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: line
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640584
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772582
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: *desc = codecs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: *desc = VAR1 [ VAR2 ]
  ORIGINAL[2]: codecs[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: codecs
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codecs
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codecs
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640268
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476894
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (po -> flags & req_flags) != req_flags || alt_flags && !(po -> flags & alt_flags)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 & VAR3 ) != VAR3 || VAR4 && ! ( VAR1 -> VAR2 & VAR4 )
  ORIGINAL[1]: po -> flags & rej_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & VAR3
  ORIGINAL[2]: po -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: rej_flags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640581
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476925
FRAGMENT_COUNT: 9
  ORIGINAL[0]: len = (p?(p - name) : strlen(name))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( p? ( VAR2 - VAR3 ) : FUN1 ( VAR3 ) )
  ORIGINAL[1]: po -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: !strncmp(name,po -> name,len) && strlen(po -> name) == len
  TYPE[2]: CALL
  TOKENIZED[2]: !strncmp ( VAR1 , VAR2 -> VAR1 , VAR3 ) && FUN1 ( VAR2 -> VAR1 ) == VAR3
  ORIGINAL[3]: po -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po++
  TYPE[5]: CALL
  TOKENIZED[5]: po++
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640414
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771970
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret != -((int )((0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != - ( ( int ) ( ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24 ) )
  ORIGINAL[1]: av_log(((void *)0),16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: argv[optindex]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: opt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478623
FRAGMENT_COUNT: 21
  ORIGINAL[0]: *buf =  *pool
  TYPE[0]: CALL
  TOKENIZED[0]: *buf = *pool
  ORIGINAL[1]: *pool = buf -> next
  TYPE[1]: CALL
  TOKENIZED[1]: *pool = VAR1 -> VAR2
  ORIGINAL[2]: *pool
  TYPE[2]: CALL
  TOKENIZED[2]: *pool
  ORIGINAL[3]: buf -> next
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_freep((&buf -> base[0]))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( &buf -> VAR1 [ 0 ] ) )
  ORIGINAL[5]: &buf -> base[0]
  TYPE[5]: CALL
  TOKENIZED[5]: &buf -> VAR1 [ 0 ]
  ORIGINAL[6]: buf -> base[0]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[7]: buf -> base
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: av_free(buf)
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 )
  ORIGINAL[9]: buf =  *pool
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 = *pool
  ORIGINAL[10]: *pool
  TYPE[10]: CALL
  TOKENIZED[10]: *pool
  ORIGINAL[11]: while (buf)
  TYPE[11]: CONTROL_STRUCTURE
  TOKENIZED[11]: while ( VAR1 )
  ORIGINAL[12]: next
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: base
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: buf
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pool
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: buf
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: buf
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: buf
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: buf
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pool
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 47244640474
FRAGMENT_COUNT: 3
  ORIGINAL[0]: codec = next_codec_for_id(id,codec,encoder)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR1 , VAR3 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: while (codec = next_codec_for_id(id,codec,encoder))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( VAR1 = FUN1 ( VAR2 , VAR1 , VAR3 ) )

CENTER_NODE: 68719477819
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *rcodecs = codecs
  TYPE[0]: CALL
  TOKENIZED[0]: *rcodecs = VAR1
  ORIGINAL[1]: nb_codecs
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: nb_codecs
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477780
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_codec_next(prev)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: (prev -> id) == id && ((encoder?av_codec_is_encoder(prev) : av_codec_is_decoder(prev)))
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR2 && ( ( encoder?av_codec_is_encoder ( VAR1 ) : FUN1 ( VAR1 ) ) )
  ORIGINAL[2]: prev
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: prev
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477906
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: sws_isSupportedOutput(pix_fmt)?'O' : '.'
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) ?'O' : ' . '
  ORIGINAL[2]: 0 ? 'O' : '.'
  TYPE[2]: CALL
  TOKENIZED[2]: 0 ? 'O' : ' . '
  ORIGINAL[3]: pix_desc -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pix_desc -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pix_desc -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pix_desc -> nb_components
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: flags
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pix_desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pix_desc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064773473
FRAGMENT_COUNT: 3
  ORIGINAL[0]: new_size >= 2147483647 / elem_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 2147483647 / VAR2
  ORIGINAL[1]: av_log(((void *)0),16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 68719477890
FRAGMENT_COUNT: 6
  ORIGINAL[0]: bsf = av_bitstream_filter_next(bsf)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: av_bitstream_filter_next(bsf)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: bsf -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bsf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bsf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: bsf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772702
FRAGMENT_COUNT: 6
  ORIGINAL[0]: name = avio_enum_protocols(&opaque,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &opaque , 0 )
  ORIGINAL[1]: avio_enum_protocols(&opaque,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &opaque , 0 )
  ORIGINAL[2]: &opaque
  TYPE[2]: CALL
  TOKENIZED[2]: &opaque
  ORIGINAL[3]: &opaque
  TYPE[3]: CALL
  TOKENIZED[3]: &opaque
  ORIGINAL[4]: opaque
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: opaque
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640366
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640404
FRAGMENT_COUNT: 0

