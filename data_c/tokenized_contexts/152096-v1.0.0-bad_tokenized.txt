# Tokenized code fragments for 152096-v1.0.0-bad
# Total center nodes processed: 129
# Total code fragments found: 607

CENTER_NODE: 68719477935
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: avpkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640476
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479164
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *s = v
  TYPE[0]: CALL
  TOKENIZED[0]: *s = VAR1
  ORIGINAL[1]: n++
  TYPE[1]: CALL
  TOKENIZED[1]: n++
  ORIGINAL[2]: n
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: n
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: n
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: n
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773540
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = avcodec_close(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: avcodec_close(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772039
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> metadata = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477532
FRAGMENT_COUNT: 3
  ORIGINAL[0]: frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774025
FRAGMENT_COUNT: 3
  ORIGINAL[0]: 1 && avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 && VAR1 -> VAR2 & 1
  ORIGINAL[1]: avctx -> active_thread_type & 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 1
  ORIGINAL[2]: avctx -> active_thread_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 68719478916
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_8SVX_FIB
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719476771
FRAGMENT_COUNT: 6
  ORIGINAL[0]: filepath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: sprintf(filepath, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: filepath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filepath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filepath
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *fmt ) != VAR1 && FUN1 ( *fmt )
  ORIGINAL[1]: ++fmt
  TYPE[1]: CALL
  TOKENIZED[1]: ++fmt
  ORIGINAL[2]: while (( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( ( *fmt ) != VAR1 && FUN1 ( *fmt ) )

CENTER_NODE: 68719476818
FRAGMENT_COUNT: 5
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: min_size = (17 * min_size / 16 + 32 > min_size?17 * min_size / 16 + 32 : min_size)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( 17 * VAR1 / 16 + 32 > min_size?17 * VAR1 / 16 + 32 : VAR1 )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772062
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: bit_rate = ctx -> bit_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR1
  ORIGINAL[2]: ctx -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bit_rate
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bit_rate
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773557
FRAGMENT_COUNT: 27
  ORIGINAL[0]: 1 && avctx -> thread_opaque
  TYPE[0]: CALL
  TOKENIZED[0]: 1 && VAR1 -> VAR2
  ORIGINAL[1]: avctx -> thread_opaque
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: thread_opaque
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: avctx
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: avctx
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: avctx
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: avctx
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: avctx
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: avctx
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: avctx
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: avctx
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: avctx
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: avctx
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: avctx
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: avctx
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: avctx
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: avctx
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: avctx
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: avctx
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1

CENTER_NODE: 30064774359
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_toupper((x & 0xff)) + (av_toupper((x >> 8 & 0xff)) << 8) + (av_toupper((x >> 16 & 0xff)) << 16) + (av_toupper((x >> 24 & 0xff)) << 24)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 & 0xff ) ) + ( FUN1 ( ( VAR1 >> 8 & 0xff ) ) << 8 ) + ( FUN1 ( ( VAR1 >> 16 & 0xff ) ) << 16 ) + ( FUN1 ( ( VAR1 >> 24 & 0xff ) ) << 24 )
  ORIGINAL[1]: av_toupper((x & 0xff)) + (av_toupper((x >> 8 & 0xff)) << 8) + (av_toupper((x >> 16 & 0xff)) << 16)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 & 0xff ) ) + ( FUN1 ( ( VAR1 >> 8 & 0xff ) ) << 8 ) + ( FUN1 ( ( VAR1 >> 16 & 0xff ) ) << 16 )
  ORIGINAL[2]: av_toupper((x & 0xff)) + (av_toupper((x >> 8 & 0xff)) << 8)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( VAR1 & 0xff ) ) + ( FUN1 ( ( VAR1 >> 8 & 0xff ) ) << 8 )
  ORIGINAL[3]: av_toupper((x >> 16 & 0xff)) << 16
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( VAR1 >> 16 & 0xff ) ) << 16
  ORIGINAL[4]: x
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772037
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772019
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479242
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *ff_lockmgr_cb
  TYPE[0]: CALL
  TOKENIZED[0]: *ff_lockmgr_cb
  ORIGINAL[1]: <global> ff_lockmgr_cb
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064774312
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ff_lockmgr_cb(&codec_mutex,AV_LOCK_DESTROY)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &codec_mutex , VAR1 )
  ORIGINAL[1]: &codec_mutex
  TYPE[1]: CALL
  TOKENIZED[1]: &codec_mutex
  ORIGINAL[2]: &codec_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &codec_mutex
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> codec_mutex
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: AV_LOCK_DESTROY
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477512
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479206
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (hwaccel -> id) == codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: (hwaccel -> pix_fmt) == pix_fmt
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[2]: hwaccel -> pix_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pix_fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772032
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_fast_malloc ( VAR1 , VAR2 , VAR3 + 16 , 1 )
  ORIGINAL[1]: memset(( *p + min_size),0,16)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( *p + VAR1 ) , 0 , 16 )
  ORIGINAL[2]: *p + min_size
  TYPE[2]: CALL
  TOKENIZED[2]: *p + VAR1
  ORIGINAL[3]: *p
  TYPE[3]: CALL
  TOKENIZED[3]: *p
  ORIGINAL[4]: min_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774377
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !c
  TYPE[0]: CALL
  TOKENIZED[0]: !c
  ORIGINAL[1]: c = avcodec_find_encoder(codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[2]: avcodec_find_encoder(codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: c
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773636
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774279
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < size && !(tab[i][0] == a && tab[i][1] == b)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] [ 0 ] == VAR4 && VAR3 [ VAR1 ] [ 1 ] == VAR5 )
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < size && !(tab[i][0] == a && tab[i][1] == b);i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] [ 0 ] == VAR4 && VAR3 [ VAR1 ] [ 1 ] == VAR5 ) ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 5
  ORIGINAL[0]: planar && nb_channels > 8
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 > 8
  ORIGINAL[1]: !(frame -> extended_data = (av_mallocz(nb_channels * sizeof(( *frame -> extended_data)))))
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 = ( FUN1 ( VAR3 * sizeof ( ( *frame -> VAR2 ) ) ) ) )
  ORIGINAL[2]: (uint8_t *)((intptr_t )buf)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 * ) ( ( VAR2 ) VAR3 )
  ORIGINAL[3]: (intptr_t )buf
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) VAR2
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772024
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_duration
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478164
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (avctx -> codec -> encode_sub)(avctx,buf,buf_size,sub)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: sub
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773927
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !(AV_CODEC_ID_ADPCM_G722 == 69660)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 69660 )
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_G722 == 69660
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 69660
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 68719478907
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: internal
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avci
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774077
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: audio_free_buffers(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772052
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> codec_descriptor
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640746
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640487
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(buf = (av_malloc(ret)))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 = ( FUN1 ( VAR2 ) ) )
  ORIGINAL[1]: ret = - '\\f'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - '\\f'
  ORIGINAL[2]: goto fail;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: goto VAR1 ;

CENTER_NODE: 30064772034
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774388
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = av_bprint_finalize(buf,&str)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , &str )
  ORIGINAL[1]: av_bprint_finalize(buf,&str)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &str )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774354
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_RELEASE)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: *ff_lockmgr_cb
  TYPE[1]: CALL
  TOKENIZED[1]: *ff_lockmgr_cb
  ORIGINAL[2]: &avformat_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &avformat_mutex
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1
  ORIGINAL[4]: <global> ff_lockmgr_cb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: AV_LOCK_RELEASE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477536
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477516
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476848
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_fast_malloc ( VAR1 , VAR2 , VAR3 + 16 , 1 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773938
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )
  ORIGINAL[1]: 100 >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 100 >= 100

CENTER_NODE: 68719477082
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> sample_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: !frame -> data[0]
  TYPE[3]: CALL
  TOKENIZED[3]: !frame -> VAR1 [ 0 ]
  ORIGINAL[4]: avctx -> channels
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: channels
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640666
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771604
FRAGMENT_COUNT: 12
  ORIGINAL[0]: buf -> base[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: buf -> base[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[2]: buf -> base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i < 4 && size[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 4 && VAR2 [ VAR1 ]
  ORIGINAL[4]: buf -> base[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: buf -> base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: buf -> base[i]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[7]: buf -> base[i]
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[8]: base
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: buf
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: buf
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772969
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avctx -> internal -> frame_thread_encoder
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: avpkt -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> internal -> byte_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: avctx -> internal
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: internal
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: byte_buffer
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773912
FRAGMENT_COUNT: 6
  ORIGINAL[0]: profile == - 'c' || !codec -> profiles
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 'c' || !codec -> VAR2
  ORIGINAL[1]: p = codec -> profiles
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3
  ORIGINAL[2]: codec -> profiles
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: for (p = codec -> profiles;p -> profile != - 'c';p++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = VAR2 -> VAR3 ; VAR1 -> VAR4 != - 'c' ; p++ )
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772044
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477917
FRAGMENT_COUNT: 11
  ORIGINAL[0]: avpkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avpkt -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avpkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avpkt -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avpkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avpkt -> data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: *destruct = (avpkt -> destruct)
  TYPE[6]: CALL
  TOKENIZED[6]: *destruct = ( VAR1 -> VAR2 )
  ORIGINAL[7]: avpkt -> destruct
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avpkt -> size
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: size
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avpkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477522
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476860
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479124
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ba - 4 * ch
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - 4 * VAR2
  ORIGINAL[2]: 4 * ch
  TYPE[2]: CALL
  TOKENIZED[2]: 4 * VAR1
  ORIGINAL[3]: ba
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ba
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478964
FRAGMENT_COUNT: 5
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_U8
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_U8
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U8
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U8
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477275
FRAGMENT_COUNT: 9
  ORIGINAL[0]: desc -> flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: p < (desc -> nb_components)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < ( VAR2 -> VAR3 )
  ORIGINAL[2]: desc -> nb_components
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: desc -> log2_chroma_w
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: desc -> log2_chroma_h
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: nb_components
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773131
FRAGMENT_COUNT: 5
  ORIGINAL[0]: side_metadata < end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: *val = side_metadata + strlen(key) + 1
  TYPE[1]: CALL
  TOKENIZED[1]: *val = VAR1 + FUN1 ( VAR2 ) + 1
  ORIGINAL[2]: side_metadata + strlen(key) + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + FUN1 ( VAR2 ) + 1
  ORIGINAL[3]: side_metadata + strlen(key)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + FUN1 ( VAR2 )
  ORIGINAL[4]: val
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640532
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771251
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (s -> codec_id) == AV_CODEC_ID_SVQ1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: h_align = 64
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 64
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;
  ORIGINAL[3]: h_align
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771343
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *width =  *width + align - 1 & ~(align - 1)
  TYPE[0]: CALL
  TOKENIZED[0]: *width = *width + VAR1 - 1 & ~ ( VAR1 - 1 )
  ORIGINAL[1]: *width
  TYPE[1]: CALL
  TOKENIZED[1]: *width
  ORIGINAL[2]: *width + align - 1 & ~(align - 1)
  TYPE[2]: CALL
  TOKENIZED[2]: *width + VAR1 - 1 & ~ ( VAR1 - 1 )

CENTER_NODE: 30064774291
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *p
  TYPE[0]: CALL
  TOKENIZED[0]: *p
  ORIGINAL[1]: p = &( *p) -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = & ( *p ) -> VAR2
  ORIGINAL[2]: &( *p) -> next
  TYPE[2]: CALL
  TOKENIZED[2]: & ( *p ) -> VAR1
  ORIGINAL[3]: ( *p) -> next
  TYPE[3]: CALL
  TOKENIZED[3]: ( *p ) -> VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477529
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773531
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: sub -> rects[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: sub -> rects
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: rects
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sub
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477539
FRAGMENT_COUNT: 5
  ORIGINAL[0]: memset(sub,0,sizeof(( *sub)))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , sizeof ( ( *sub ) ) )
  ORIGINAL[1]: sizeof(( *sub))
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( ( *sub ) )
  ORIGINAL[2]: *sub
  TYPE[2]: CALL
  TOKENIZED[2]: *sub
  ORIGINAL[3]: sub
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sub
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640347
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773656
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec -> name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: name
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640530
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640342
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buf -> data[0] == pic -> data[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ 0 ] == VAR3 -> VAR2 [ 0 ]

CENTER_NODE: 30064772546
FRAGMENT_COUNT: 6
  ORIGINAL[0]: avctx -> codec -> init && (!(avctx -> active_thread_type & 1) || avctx -> internal -> frame_thread_encoder)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 && ( ! ( VAR1 -> VAR4 & 1 ) || VAR1 -> VAR5 -> VAR6 )
  ORIGINAL[1]: (avctx -> codec -> init)(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[2]: avctx -> codec -> init
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: avctx -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: init
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477526
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774091
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [4UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 4UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[2]: AV_CODEC_ID_PCM_F64LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F64BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640325
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478968
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_S32LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773416
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> sub_charenc_mode != 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 1
  ORIGINAL[1]: avctx -> sub_charenc_mode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sub_charenc_mode
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476867
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *p = codec
  TYPE[0]: CALL
  TOKENIZED[0]: *p = VAR1
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479273
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: internal
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774094
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [6UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 6UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 30064773934
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_SRT == 94216)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 94216 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064772050
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_timebase = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_timebase
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_timebase
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771782
FRAGMENT_COUNT: 4
  ORIGINAL[0]: frame -> reordered_opaque = s -> reordered_opaque
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3 -> VAR2
  ORIGINAL[1]: frame -> reordered_opaque
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> reordered_opaque
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773942
FRAGMENT_COUNT: 2
  ORIGINAL[0]: '6' << 16 | 92 << 8 | 100
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8 | 100
  ORIGINAL[1]: '6' << 16 | 92 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 92 << 8

CENTER_NODE: 68719477533
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771812
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (avctx -> get_buffer)(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[1]: avctx -> get_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: get_buffer
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478981
FRAGMENT_COUNT: 7
  ORIGINAL[0]: fmt < 0 || fmt >= AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 >= VAR2
  ORIGINAL[1]: be < 0 || be > 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0 || VAR1 > 1
  ORIGINAL[2]: be = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: map[fmt]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: map
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: map
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478175
FRAGMENT_COUNT: 7
  ORIGINAL[0]: dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_last_dts = dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: ctx -> pts_correction_last_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: dts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771203
FRAGMENT_COUNT: 6
  ORIGINAL[0]: codec -> encode_sub || codec -> encode2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 || VAR1 -> VAR3
  ORIGINAL[1]: codec -> encode_sub
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec -> encode2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: encode2
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772010
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !frame || !( *frame)
  TYPE[0]: CALL
  TOKENIZED[0]: !frame || ! ( *frame )
  ORIGINAL[1]: f =  *frame
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = *frame
  ORIGINAL[2]: *frame
  TYPE[2]: CALL
  TOKENIZED[2]: *frame
  ORIGINAL[3]: f
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: f
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772022
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479179
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: av_log_ask_for_sample(avc,((void *)0))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( void * ) 0 ) )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: want_sample
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771821
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 30064771873
FRAGMENT_COUNT: 22
  ORIGINAL[0]: (s -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: s -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec_type
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_VIDEO
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: s
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: s
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: s
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 47244640670
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774098
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [8UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 8UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 47244640672
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773191
FRAGMENT_COUNT: 22
  ORIGINAL[0]: 1 && avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 && VAR1 -> VAR2 & 1
  ORIGINAL[1]: picture -> pkt_dts = avpkt -> dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 -> VAR4
  ORIGINAL[2]: picture -> pkt_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avpkt -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: picture -> pkt_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt_dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: picture
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avpkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: picture
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: picture
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: picture
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: picture
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: picture
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: picture
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: picture
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: picture
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: picture
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: picture
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: picture
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: picture
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: picture
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: picture
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 30064773686
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (codec_tag & 0xff) >= 48 && (codec_tag & 0xff) <= '9' || (codec_tag & 0xff) >= 'a' && (codec_tag & 0xff) <= 'z' || (codec_tag & 0xff) >= 'A' && (codec_tag & 0xff) <= 'Z'
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 & 0xff ) >= 48 && ( VAR1 & 0xff ) <= '9' || ( VAR1 & 0xff ) >= 'a' && ( VAR1 & 0xff ) <= 'z' || ( VAR1 & 0xff ) >= 'A' && ( VAR1 & 0xff ) <= 'Z'
  ORIGINAL[1]: (codec_tag & 0xff) == '.' || (codec_tag & 0xff) == 32 || (codec_tag & 0xff) == '-' || (codec_tag & 0xff) == '_'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 & 0xff ) == ' . ' || ( VAR1 & 0xff ) == 32 || ( VAR1 & 0xff ) == '-' || ( VAR1 & 0xff ) == '_'
  ORIGINAL[2]: (codec_tag & 0xff) == '.' || (codec_tag & 0xff) == 32 || (codec_tag & 0xff) == '-'
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 & 0xff ) == ' . ' || ( VAR1 & 0xff ) == 32 || ( VAR1 & 0xff ) == '-'
  ORIGINAL[3]: (codec_tag & 0xff) == '.' || (codec_tag & 0xff) == 32
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 & 0xff ) == ' . ' || ( VAR1 & 0xff ) == 32
  ORIGINAL[4]: (codec_tag & 0xff) == '-'
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 & 0xff ) == '-'
  ORIGINAL[5]: (codec_tag & 0xff) == '_'
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 & 0xff ) == '_'
  ORIGINAL[6]: codec_tag & 0xff
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 & 0xff
  ORIGINAL[7]: codec_tag
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719478576
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477311
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771954
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: r = func(c,arg,i,0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , 0 )
  ORIGINAL[2]: func(c,arg,i,0)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[3]: r
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: func
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: arg
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477469
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *desc = av_pix_fmt_desc_get(pix_fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: *desc = FUN1 ( VAR1 )
  ORIGINAL[1]: av_pix_fmt_desc_get(pix_fmt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: desc -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pix_fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773742
FRAGMENT_COUNT: 28
  ORIGINAL[0]: !buf || buf_size <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: !buf || VAR1 <= 0
  ORIGINAL[1]: enc -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: tag_buf[32]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 32 ]
  ORIGINAL[3]: tag_buf[32]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 32 ]
  ORIGINAL[4]: av_get_codec_tag_string(tag_buf,sizeof(tag_buf),enc -> codec_tag)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , sizeof ( VAR1 ) , VAR2 -> VAR3 )
  ORIGINAL[5]: sizeof(tag_buf)
  TYPE[5]: CALL
  TOKENIZED[5]: sizeof ( VAR1 )
  ORIGINAL[6]: enc -> codec_tag
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: snprintf(buf + strlen(buf),buf_size - strlen(buf),\
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 + FUN2 ( VAR1 ) , VAR2 - FUN2 ( VAR1 ) , \
  ORIGINAL[8]: buf + strlen(buf)
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 + FUN1 ( VAR1 )
  ORIGINAL[9]: strlen(buf)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 )
  ORIGINAL[10]: buf_size - strlen(buf)
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 - FUN1 ( VAR2 )
  ORIGINAL[11]: strlen(buf)
  TYPE[11]: CALL
  TOKENIZED[11]: FUN1 ( VAR1 )
  ORIGINAL[12]: enc -> codec_tag
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: codec_tag
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: codec_tag
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: codec_tag
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: enc
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: tag_buf
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: tag_buf
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: tag_buf
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: enc
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: buf
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: buf
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: buf_size
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: buf
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: tag_buf
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: enc
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: enc
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1

CENTER_NODE: 30064771142
FRAGMENT_COUNT: 6
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: !ptr
  TYPE[1]: CALL
  TOKENIZED[1]: !ptr
  ORIGINAL[2]: min_size = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: min_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640749
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked

CENTER_NODE: 68719477566
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_lock_avcodec(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771170
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: ptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: min_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478817
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *bombarde_bewrapt = 0
  TYPE[0]: CALL
  TOKENIZED[0]: *bombarde_bewrapt = 0
  ORIGINAL[1]: &renaming_comment
  TYPE[1]: CALL
  TOKENIZED[1]: &renaming_comment
  ORIGINAL[2]: <global> renaming_comment
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: renaming_comment
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772025
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477514
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640748
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> lowres
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: -height >> s -> lowres
  TYPE[1]: CALL
  TOKENIZED[1]: -height >> VAR1 -> VAR2
  ORIGINAL[2]: -height
  TYPE[2]: CALL
  TOKENIZED[2]: -height
  ORIGINAL[3]: s -> lowres
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: lowres
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772042
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decode_error_flags
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640338
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773110
FRAGMENT_COUNT: 11
  ORIGINAL[0]: size < 8
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 8
  ORIGINAL[1]: avctx -> height = (bytestream_get_le32(&data))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( FUN1 ( &data ) )
  ORIGINAL[2]: avctx -> height
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bytestream_get_le32(&data)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &data )
  ORIGINAL[4]: avctx -> height
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: height
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: data
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064772031
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478423
FRAGMENT_COUNT: 25
  ORIGINAL[0]: avctx -> frame_number
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> sample_fmt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> channel_layout
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: frame -> nb_samples <= avctx -> internal -> skip_samples
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 <= VAR3 -> VAR4 -> VAR5
  ORIGINAL[5]: avctx -> channels
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avctx -> pkt_timebase . num && avctx -> sample_rate
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 . VAR3 && VAR1 -> VAR4
  ORIGINAL[7]: avctx -> sample_rate
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avctx -> sample_rate
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: avctx -> pkt_timebase
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: av_frame_get_pkt_duration(frame) >= diff_ts
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( VAR1 ) >= VAR2
  ORIGINAL[11]: av_frame_set_pkt_duration(frame,av_frame_get_pkt_duration(frame) - diff_ts)
  TYPE[11]: CALL
  TOKENIZED[11]: FUN1 ( VAR1 , FUN2 ( VAR1 ) - VAR2 )
  ORIGINAL[12]: av_log(avctx,24,\
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[13]: av_log(avctx,48,\
  TYPE[13]: CALL
  TOKENIZED[13]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[14]: avctx -> internal -> skip_samples
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[15]: frame -> nb_samples
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: avctx -> internal
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: avctx -> internal
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: avctx
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: avctx
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: avctx
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: avctx
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: avctx
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: avctx
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: avctx
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1

CENTER_NODE: 30064774022
FRAGMENT_COUNT: 3
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: sizeof(\
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( \

CENTER_NODE: 68719479187
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_vlog(avc,24,msg,argument_list)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , VAR2 , VAR3 )
  ORIGINAL[1]: av_log(avc,24,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[2]: msg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640499
FRAGMENT_COUNT: 2
  ORIGINAL[0]: avctx -> codec -> capabilities & 0x0040
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x0040
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064773925
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(AV_CODEC_ID_PCM_S8_PLANAR == 65563)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 65563 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064771990
FRAGMENT_COUNT: 4
  ORIGINAL[0]: frame -> format = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = - 1
  ORIGINAL[1]: frame -> format
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640344
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477494
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: frame -> extended_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: extended_data
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774053
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avci -> buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: i < 32 + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 32 + 1
  ORIGINAL[2]: avci -> buffer[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: avci -> buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: buffer
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avci
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avci
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477447
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: func(c,(((char *)arg) + i * size))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( ( char * ) VAR2 ) + VAR3 * VAR4 ) )
  ORIGINAL[2]: r
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: func
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477506
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771198
FRAGMENT_COUNT: 4
  ORIGINAL[0]: initialized != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: initialized = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: ff_dsputil_static_init()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: initialized
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640698
FRAGMENT_COUNT: 1
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640668
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773484
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *got_sub_ptr
  TYPE[0]: CALL
  TOKENIZED[0]: *got_sub_ptr
  ORIGINAL[1]: avctx -> frame_number++
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> frame_number++
  ORIGINAL[2]: avctx -> frame_number
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640404
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478556
FRAGMENT_COUNT: 2
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

