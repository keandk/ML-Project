# Tokenized code fragments for 152793-v1.0.0-bad
# Total center nodes processed: 33
# Total code fragments found: 179

CENTER_NODE: 47244640366
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477611
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !s -> oformat || !s -> oformat -> get_output_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || !s -> VAR1 -> VAR2
  ORIGINAL[1]: (s -> oformat -> get_output_timestamp)(s,stream,dts,wall)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: wall
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771101
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stat(dirpath, &st) == -1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[1]: retval = mkdir(dirpath, 0700)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[2]: mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[3]: retval
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640428
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772435
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: lammergeir_coronate
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640393
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 5
  ORIGINAL[0]: num = f -> num + incr
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 -> VAR1 + VAR3
  ORIGINAL[1]: f -> num + incr
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 + VAR3
  ORIGINAL[2]: f -> num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: num
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: incr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *warrenlike_seafoam = 0
  TYPE[0]: CALL
  TOKENIZED[0]: *warrenlike_seafoam = 0
  ORIGINAL[1]: broadness_lepismoid = 89
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 89
  ORIGINAL[2]: broadness_lepismoid
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: broadness_lepismoid
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640365
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771585
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: den = ((int64_t )st -> time_base . num) * st -> codec -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 ) VAR3 -> VAR4 . VAR5 ) * VAR3 -> VAR6 -> VAR4 . VAR1
  ORIGINAL[2]: ((int64_t )st -> time_base . num) * st -> codec -> time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( VAR1 ) VAR2 -> VAR3 . VAR4 ) * VAR2 -> VAR5 -> VAR3 . VAR6
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: den
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772195
FRAGMENT_COUNT: 58
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i] -> last_in_packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: delta_dts = av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}))
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = FUN1 ( VAR2 -> VAR3 [ VAR4 ] -> VAR5 -> VAR6 . VAR7 , VAR2 -> VAR3 [ VAR4 ] -> VAR8 , ( ( VAR9 ) { ( 1 ) , ( 1000000 ) } ) ) - FUN1 ( VAR2 -> VAR10 -> VAR6 . VAR7 , VAR2 -> VAR3 [ VAR2 -> VAR10 -> VAR6 . VAR11 ] -> VAR8 , ( ( VAR9 ) { ( 1 ) , ( 1000000 ) } ) )
  ORIGINAL[4]: av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)})) - av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5 . VAR6 , VAR1 -> VAR2 [ VAR3 ] -> VAR7 , ( ( VAR8 ) { ( 1 ) , ( 1000000 ) } ) ) - FUN1 ( VAR1 -> VAR9 -> VAR5 . VAR6 , VAR1 -> VAR2 [ VAR1 -> VAR9 -> VAR5 . VAR10 ] -> VAR7 , ( ( VAR8 ) { ( 1 ) , ( 1000000 ) } ) )
  ORIGINAL[5]: av_rescale_q(s -> streams[i] -> last_in_packet_buffer -> pkt . dts,s -> streams[i] -> time_base,((AVRational ){(1), (1000000)}))
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5 . VAR6 , VAR1 -> VAR2 [ VAR3 ] -> VAR7 , ( ( VAR8 ) { ( 1 ) , ( 1000000 ) } ) )
  ORIGINAL[6]: s -> streams[i] -> last_in_packet_buffer -> pkt . dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5 . VAR6
  ORIGINAL[7]: s -> streams[i] -> last_in_packet_buffer -> pkt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5
  ORIGINAL[8]: s -> streams[i] -> last_in_packet_buffer
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[9]: s -> streams[i]
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[10]: s -> streams
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: s -> streams[i] -> time_base
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[12]: s -> streams[i]
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[13]: s -> streams
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: (AVRational ){(1), (1000000)}
  TYPE[14]: CALL
  TOKENIZED[14]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[15]: {(1), (1000000)}
  TYPE[15]: CALL
  TOKENIZED[15]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[16]: av_rescale_q(s -> packet_buffer -> pkt . dts,s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base,((AVRational ){(1), (1000000)}))
  TYPE[16]: CALL
  TOKENIZED[16]: FUN1 ( VAR1 -> VAR2 -> VAR3 . VAR4 , VAR1 -> VAR5 [ VAR1 -> VAR2 -> VAR3 . VAR6 ] -> VAR7 , ( ( VAR8 ) { ( 1 ) , ( 1000000 ) } ) )
  ORIGINAL[17]: s -> packet_buffer -> pkt . dts
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[18]: s -> packet_buffer -> pkt
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[19]: s -> packet_buffer
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: s -> streams[s -> packet_buffer -> pkt . stream_index] -> time_base
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2 [ VAR1 -> VAR3 -> VAR4 . VAR5 ] -> VAR6
  ORIGINAL[21]: s -> streams[s -> packet_buffer -> pkt . stream_index]
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2 [ VAR1 -> VAR3 -> VAR4 . VAR5 ]
  ORIGINAL[22]: s -> streams
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: s -> packet_buffer -> pkt . stream_index
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[24]: s -> packet_buffer -> pkt
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[25]: s -> packet_buffer
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2
  ORIGINAL[26]: (AVRational ){(1), (1000000)}
  TYPE[26]: CALL
  TOKENIZED[26]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[27]: {(1), (1000000)}
  TYPE[27]: CALL
  TOKENIZED[27]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[28]: delta_dts_max = (delta_dts_max > delta_dts?delta_dts_max : delta_dts)
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 = ( VAR1 > delta_dts?delta_dts_max : VAR2 )
  ORIGINAL[29]: delta_dts_max > delta_dts?delta_dts_max : delta_dts
  TYPE[29]: CALL
  TOKENIZED[29]: VAR1 > delta_dts?delta_dts_max : VAR2
  ORIGINAL[30]: delta_dts_max > delta_dts
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 > VAR2
  ORIGINAL[31]: last_in_packet_buffer
  TYPE[31]: FIELD_IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: streams
  TYPE[32]: FIELD_IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: last_in_packet_buffer
  TYPE[33]: FIELD_IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: pkt
  TYPE[34]: FIELD_IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: dts
  TYPE[35]: FIELD_IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: streams
  TYPE[36]: FIELD_IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: time_base
  TYPE[37]: FIELD_IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: packet_buffer
  TYPE[38]: FIELD_IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: pkt
  TYPE[39]: FIELD_IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: dts
  TYPE[40]: FIELD_IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: streams
  TYPE[41]: FIELD_IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: packet_buffer
  TYPE[42]: FIELD_IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: pkt
  TYPE[43]: FIELD_IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: stream_index
  TYPE[44]: FIELD_IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: time_base
  TYPE[45]: FIELD_IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: i
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: delta_dts
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: s
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: i
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: s
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: i
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: s
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: s
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: s
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1
  ORIGINAL[55]: delta_dts_max
  TYPE[55]: IDENTIFIER
  TOKENIZED[55]: VAR1
  ORIGINAL[56]: delta_dts_max
  TYPE[56]: IDENTIFIER
  TOKENIZED[56]: VAR1
  ORIGINAL[57]: delta_dts
  TYPE[57]: IDENTIFIER
  TOKENIZED[57]: VAR1

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0666 ) ) >= 0
  ORIGINAL[1]: (stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)) != (char *) -1
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) != ( char * ) -1
  ORIGINAL[2]: stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 , 0 )
  ORIGINAL[3]: (char *) -1
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) -1
  ORIGINAL[4]: -1
  TYPE[4]: CALL
  TOKENIZED[4]: -1

CENTER_NODE: 68719477672
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stonesoup_is_valid == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 1
  ORIGINAL[1]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: trace_point
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_trace
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: trace_point
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: trace_point
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640430
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771910
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ret >= 0 && s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 -> VAR3
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> pb -> error
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pb
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: error
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772356
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &opkt
  TYPE[0]: CALL
  TOKENIZED[0]: &opkt
  ORIGINAL[1]: ret <= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 <= 0
  ORIGINAL[2]: &opkt
  TYPE[2]: CALL
  TOKENIZED[2]: &opkt
  ORIGINAL[3]: av_free_packet(&opkt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &opkt )
  ORIGINAL[4]: &opkt
  TYPE[4]: CALL
  TOKENIZED[4]: &opkt
  ORIGINAL[5]: opkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771890
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = ((s -> oformat -> write_packet)(s,pkt))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 ) )
  ORIGINAL[1]: (s -> oformat -> write_packet)(s,pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: did_split
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772381
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !ret
  TYPE[0]: CALL
  TOKENIZED[0]: !ret
  ORIGINAL[1]: av_free_packet(&pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &pkt )
  ORIGINAL[2]: &pkt
  TYPE[2]: CALL
  TOKENIZED[2]: &pkt
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771317
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 ) == FUN1 ( VAR3 -> VAR4 -> VAR5 )
  ORIGINAL[1]: id = avctag -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR1
  ORIGINAL[2]: avctag -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771243
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *avctx = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *avctx = ( ( void * ) 0 )
  ORIGINAL[1]: *avctx
  TYPE[1]: CALL
  TOKENIZED[1]: *avctx
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 1
  ORIGINAL[0]: in
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640275
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719476826
FRAGMENT_COUNT: 7
  ORIGINAL[0]: num >= den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: num / den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 / VAR2
  ORIGINAL[2]: num
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: val
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: num
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: num
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771479
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_codec_get_tag(of -> codec_tag,codec -> codec_id) == 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR4 ) == 0
  ORIGINAL[1]: ((unsigned int )32) << 24
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( unsigned int ) 32 ) << 24
  ORIGINAL[2]: (unsigned int )32
  TYPE[2]: CALL
  TOKENIZED[2]: ( unsigned int ) 32

CENTER_NODE: 30064771691
FRAGMENT_COUNT: 5
  ORIGINAL[0]: den && num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2
  ORIGINAL[1]: den * ((int64_t )st -> time_base . num)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * ( ( VAR2 ) VAR3 -> VAR4 . VAR5 )
  ORIGINAL[2]: (int64_t )st -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) VAR2 -> VAR3 . VAR4
  ORIGINAL[3]: st -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: den
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772151
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st2 -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ts == ts2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: (st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[3]: st2 -> codec -> codec_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st2 -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_type
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: AVMEDIA_TYPE_AUDIO
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772558
FRAGMENT_COUNT: 21
  ORIGINAL[0]: (shmid = shmget(key, shmsz, IPC_CREAT | 0666)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 | 0666 ) ) < 0
  ORIGINAL[1]: (shm = shmat(shmid, NULL, 0)) == (char *) -1
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) == ( char * ) -1
  ORIGINAL[2]: shm = shmat(shmid, NULL, 0)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 , 0 )
  ORIGINAL[3]: (char *) -1
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) -1
  ORIGINAL[4]: fprintf(stderr, \
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , \
  ORIGINAL[5]: s = shm
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = VAR2
  ORIGINAL[6]: memset(s, 0, shmsz)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , 0 , VAR2 )
  ORIGINAL[7]: strcpy(shm, str)
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[8]: fprintf(stderr, \
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 , \
  ORIGINAL[9]: getchar()
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( )
  ORIGINAL[10]: fprintf(stderr, \
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( VAR1 , \
  ORIGINAL[11]: stderr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: shm
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: shmsz
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: shm
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: str
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: out_filename
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: stderr
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: stderr
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 47244640423
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640435
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

