# Tokenized code fragments for 153427-v1.0.0-bad
# Total center nodes processed: 134
# Total code fragments found: 843

CENTER_NODE: 30064771840
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> codec -> type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: frame -> sample_aspect_ratio = s -> sample_aspect_ratio
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 -> VAR2
  ORIGINAL[2]: frame -> sample_aspect_ratio
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> sample_aspect_ratio
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: sample_aspect_ratio
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640747
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772070
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640730
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < size && !(tab[i][0] == a && tab[i][1] == b)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] [ 0 ] == VAR4 && VAR3 [ VAR1 ] [ 1 ] == VAR5 )
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < size && !(tab[i][0] == a && tab[i][1] == b);i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] [ 0 ] == VAR4 && VAR3 [ VAR1 ] [ 1 ] == VAR5 ) ; i++ )

CENTER_NODE: 68719478113
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &padded_frame
  TYPE[0]: CALL
  TOKENIZED[0]: &padded_frame
  ORIGINAL[1]: av_freep((&padded_frame -> data[0]))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &padded_frame -> VAR1 [ 0 ] ) )
  ORIGINAL[2]: padded_frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: extended_data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: padded_frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: padded_frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: padded_frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: padded_frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640331
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479167
FRAGMENT_COUNT: 6
  ORIGINAL[0]: hwaccel?hwaccel -> next : first_hwaccel
  TYPE[0]: CALL
  TOKENIZED[0]: hwaccel?hwaccel -> VAR1 : VAR2
  ORIGINAL[1]: hwaccel -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: next
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hwaccel
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: <global> first_hwaccel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1

CENTER_NODE: 68719478605
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ((encoder?av_codec_is_encoder(p) : av_codec_is_decoder(p))) && (p -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( encoder?av_codec_is_encoder ( VAR1 ) : FUN1 ( VAR1 ) ) ) && ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: p -> capabilities & 0x0200 && !experimental
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x0200 && !experimental
  ORIGINAL[2]: experimental = p
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: p = p -> next
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = VAR1 -> VAR2
  ORIGINAL[4]: p -> next
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: p
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773968
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(AV_CODEC_ID_PCM_S8_PLANAR == 65563)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 65563 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 68719476813
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *stonesoup_tainted_buff != 0
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_tainted_buff != 0
  ORIGINAL[1]: fread(*stonesoup_tainted_buff,1,stonesoup_lsize,stonesoup_tainted_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( *stonesoup_tainted_buff , 1 , VAR1 , VAR2 )
  ORIGINAL[2]: *stonesoup_tainted_buff
  TYPE[2]: CALL
  TOKENIZED[2]: *stonesoup_tainted_buff
  ORIGINAL[3]: stonesoup_lsize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_lsize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_tainted_file
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_lsize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774394
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_heap_buffer_64 = (char*) malloc(64 * sizeof(char))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( char* ) FUN1 ( 64 * sizeof ( char ) )
  ORIGINAL[1]: (char*) malloc(64 * sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: ( char* ) FUN1 ( 64 * sizeof ( char ) )
  ORIGINAL[2]: malloc(64 * sizeof(char))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( 64 * sizeof ( char ) )
  ORIGINAL[3]: stonesoup_heap_buffer_64
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774067
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [2UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 2UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640410
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640676
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477554
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478925
FRAGMENT_COUNT: 5
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_U8
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_U8
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U8
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U8
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774244
FRAGMENT_COUNT: 4
  ORIGINAL[0]: v >= 0xff
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0xff
  ORIGINAL[1]: n++
  TYPE[1]: CALL
  TOKENIZED[1]: n++
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: n
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771269
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> coded_height = height
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> coded_height
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: coded_height
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: height
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477542
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773180
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: side_metadata = val + strlen(val) + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + FUN1 ( VAR2 ) + 1
  ORIGINAL[2]: val + strlen(val) + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + FUN1 ( VAR1 ) + 1
  ORIGINAL[3]: side_metadata
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: side_metadata
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771779
FRAGMENT_COUNT: 5
  ORIGINAL[0]: y < -(-frame -> height >> ((is_chroma?(desc -> log2_chroma_h) : 0)))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < - ( -frame -> VAR2 >> ( ( is_chroma? ( VAR3 -> VAR4 ) : 0 ) ) )
  ORIGINAL[1]: y++
  TYPE[1]: CALL
  TOKENIZED[1]: y++
  ORIGINAL[2]: for (y = 0;y < -(-frame -> height >> ((is_chroma?(desc -> log2_chroma_h) : 0)));y++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < - ( -frame -> VAR2 >> ( ( is_chroma? ( VAR3 -> VAR4 ) : 0 ) ) ) ; y++ )
  ORIGINAL[3]: y
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: y
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773983
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 68719477589
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ctx -> codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ctx -> bit_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: bit_rate
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: bits_per_sample
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479232
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id <= AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= VAR2
  ORIGINAL[1]: AVMEDIA_TYPE_UNKNOWN
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774091
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_get_exact_bits_per_sample(codec_id)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: codec_id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec_id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640677
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(AV_CODEC_ID_SRT == 94216)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 94216 )

CENTER_NODE: 68719478619
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719478449
FRAGMENT_COUNT: 27
  ORIGINAL[0]: frame -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: frame -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: frame -> sample_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: frame -> sample_rate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: frame -> extended_data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: frame -> extended_data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: frame -> nb_samples
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: frame -> format
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avctx -> pkt_timebase . num && avctx -> sample_rate
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 . VAR3 && VAR1 -> VAR4
  ORIGINAL[9]: frame -> pkt_pts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: frame -> pkt_pts
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: frame -> pkt_dts != ((int64_t )0x8000000000000000UL)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[12]: frame -> pkt_dts
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: frame -> pkt_dts += diff_ts
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 += VAR3
  ORIGINAL[14]: frame -> pkt_dts
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: av_frame_get_pkt_duration(frame)
  TYPE[15]: CALL
  TOKENIZED[15]: FUN1 ( VAR1 )
  ORIGINAL[16]: frame -> nb_samples
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: frame -> nb_samples
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: frame -> format
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2
  ORIGINAL[19]: frame
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: frame
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: frame
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: frame
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: frame
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: frame
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: frame
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: frame
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1

CENTER_NODE: 30064773992
FRAGMENT_COUNT: 5
  ORIGINAL[0]: mkdir(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: tracepoint(stonesoup_trace,trace_location,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: stonesoup_setup_printf_context()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: stonesoup_trace
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: trace_location
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772087
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_size = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_size
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772083
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buf != last
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2

CENTER_NODE: 68719478199
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ret = ((avctx -> codec -> encode_sub)(avctx,buf,buf_size,sub))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 , VAR6 , VAR7 ) )
  ORIGINAL[2]: avctx -> frame_number
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: frame_number
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479243
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: internal
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773986
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 92 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 92 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 92 << 8

CENTER_NODE: 30064771109
FRAGMENT_COUNT: 5
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: filepath = (char*) malloc (size_filepath * sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( char* ) FUN1 ( VAR2 * sizeof ( char ) )
  ORIGINAL[2]: (char*) malloc (size_filepath * sizeof(char))
  TYPE[2]: CALL
  TOKENIZED[2]: ( char* ) FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[3]: malloc (size_filepath * sizeof(char))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[4]: filepath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772090
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479215
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_RELEASE)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: *ff_lockmgr_cb
  TYPE[1]: CALL
  TOKENIZED[1]: *ff_lockmgr_cb
  ORIGINAL[2]: &avformat_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &avformat_mutex
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> ff_lockmgr_cb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: <global> avformat_mutex
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1
  ORIGINAL[6]: AV_LOCK_RELEASE
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476889
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> encode_sub
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: encode_sub
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478262
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &size
  TYPE[0]: CALL
  TOKENIZED[0]: &size
  ORIGINAL[1]: size < 8
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 8
  ORIGINAL[2]: avcodec_set_dimensions(avctx,avctx -> width,avctx -> height)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR1 -> VAR2 , VAR1 -> VAR3 )
  ORIGINAL[3]: size -= 8
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -= 8
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478608
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477502
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_pix_fmt_desc_get(pix_fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: desc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pix_fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774086
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fmt < 0 || fmt >= AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 >= VAR2
  ORIGINAL[1]: be < 0 || be > 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0 || VAR1 > 1
  ORIGINAL[2]: be < 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < 0
  ORIGINAL[3]: be > 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 > 1
  ORIGINAL[4]: be
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: be
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774005
FRAGMENT_COUNT: 3
  ORIGINAL[0]: 1 && avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 && VAR1 -> VAR2 & 1
  ORIGINAL[1]: avctx -> active_thread_type & 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 1
  ORIGINAL[2]: avctx -> active_thread_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 68719479204
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked
  ORIGINAL[1]: <global> ff_avcodec_locked
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064774371
FRAGMENT_COUNT: 15
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avctx -> extradata = str
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: avctx -> extradata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> extradata_size = (buf -> len)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 = ( VAR3 -> VAR4 )
  ORIGINAL[4]: avctx -> extradata_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: buf -> len
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: extradata
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: extradata_size
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: len
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ret
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ret
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: avctx
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: str
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: avctx
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: buf
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244640674
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773458
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> sub_charenc_mode != 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 1
  ORIGINAL[1]: avctx -> sub_charenc_mode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sub_charenc_mode
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477567
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_timebase
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772073
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774378
FRAGMENT_COUNT: 4
  ORIGINAL[0]: misceability_heterochronic = {0}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { 0 }
  ORIGINAL[1]: {0}
  TYPE[1]: CALL
  TOKENIZED[1]: { 0 }
  ORIGINAL[2]: misceability_heterochronic
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: <global> stonesoup_global_variable
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 68719478931
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F32LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F32BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477386
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (avctx -> get_buffer)(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[1]: avctx -> get_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640482
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774001
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 68719477545
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 5
  ORIGINAL[0]: initialized != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: initialized = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: ff_dsputil_static_init()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: initialized
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: initialized
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478927
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_FIRST_AUDIO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S16BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S16BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477570
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> codec_descriptor
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772060
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !frame || !( *frame)
  TYPE[0]: CALL
  TOKENIZED[0]: !frame || ! ( *frame )
  ORIGINAL[1]: av_freep(frame)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478909
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_PCM_S24LE_PLANAR
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774265
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: avc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: argument_list
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477539
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> best_effort_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773969
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !(AV_CODEC_ID_ADPCM_G722 == 69660)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 69660 )
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_G722 == 69660
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 69660
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 30064772080
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640551
FRAGMENT_COUNT: 1
  ORIGINAL[0]: new_data
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064771247
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec && codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: codec -> decode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decode
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772072
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> channel_layout = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: channel_layout
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478828
FRAGMENT_COUNT: 4
  ORIGINAL[0]: profile == - 'c'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 'c'
  ORIGINAL[1]: - 'c'
  TYPE[1]: CALL
  TOKENIZED[1]: - 'c'
  ORIGINAL[2]: profile
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: profile
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640678
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771182
FRAGMENT_COUNT: 5
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: ptr = av_realloc(ptr,min_size)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: av_realloc(ptr,min_size)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477103
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *avci = avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: *avci = VAR1 -> VAR2
  ORIGINAL[1]: avci -> audio_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: audio_data
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avci
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772045
FRAGMENT_COUNT: 8
  ORIGINAL[0]: frame == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: frame -> extended_data = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: extended_data
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719478653
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (codec_tag & 0xff) >= 48
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 & 0xff ) >= 48
  ORIGINAL[1]: codec_tag & 0xff
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 & 0xff
  ORIGINAL[2]: codec_tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec_tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec_tag
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_tag
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_tag
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772093
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771234
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_fast_malloc ( VAR1 , VAR2 , VAR3 + 16 , 1 )
  ORIGINAL[1]: memset(( *p),0,min_size + 16)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( *p ) , 0 , VAR1 + 16 )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: min_size + 16
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 16

CENTER_NODE: 30064773832
FRAGMENT_COUNT: 10
  ORIGINAL[0]: enc -> sample_aspect_ratio . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3
  ORIGINAL[1]: av_reduce(&display_aspect_ratio . num,&display_aspect_ratio . den,(enc -> width * enc -> sample_aspect_ratio . num),(enc -> height * enc -> sample_aspect_ratio . den),(1024 * 1024))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &display_aspect_ratio . VAR1 , &display_aspect_ratio . VAR2 , ( VAR3 -> VAR4 * VAR3 -> VAR5 . VAR1 ) , ( VAR3 -> VAR6 * VAR3 -> VAR5 . VAR2 ) , ( 1024 * 1024 ) )
  ORIGINAL[2]: &display_aspect_ratio . num
  TYPE[2]: CALL
  TOKENIZED[2]: &display_aspect_ratio . VAR1
  ORIGINAL[3]: display_aspect_ratio . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: &display_aspect_ratio . den
  TYPE[4]: CALL
  TOKENIZED[4]: &display_aspect_ratio . VAR1
  ORIGINAL[5]: enc -> width * enc -> sample_aspect_ratio . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 * VAR1 -> VAR3 . VAR4
  ORIGINAL[6]: enc -> height * enc -> sample_aspect_ratio . den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 * VAR1 -> VAR3 . VAR4
  ORIGINAL[7]: 1024 * 1024
  TYPE[7]: CALL
  TOKENIZED[7]: 1024 * 1024
  ORIGINAL[8]: display_aspect_ratio . num
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 . VAR2
  ORIGINAL[9]: display_aspect_ratio
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640536
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478588
FRAGMENT_COUNT: 2
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772730
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avpkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772085
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640691
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: video_free_buffers(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;

CENTER_NODE: 30064772079
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477512
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame -> pts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: frame -> pkt_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_dts
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771170
FRAGMENT_COUNT: 3
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c - 32
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - 32
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771984
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < count;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640737
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_lockmgr_cb(&codec_mutex,AV_LOCK_DESTROY)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &codec_mutex , VAR1 )

CENTER_NODE: 68719477537
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640338
FRAGMENT_COUNT: 1
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640672
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771863
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 30064772064
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640538
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478205
FRAGMENT_COUNT: 5
  ORIGINAL[0]: dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_last_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pts_correction_last_dts
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640745
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771915
FRAGMENT_COUNT: 22
  ORIGINAL[0]: (s -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: s -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec_type
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_VIDEO
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: s
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: s
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: s
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 68719477543
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477644
FRAGMENT_COUNT: 298
  ORIGINAL[0]: avctx -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> extradata_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> extradata_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avctx -> internal
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec -> priv_data_size > 0
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 > 0
  ORIGINAL[7]: avctx -> priv_data
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avctx -> priv_data
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: avctx -> priv_data
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: codec -> priv_class && (ret = av_opt_set_dict(avctx -> priv_data,&tmp)) < 0
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 && ( VAR3 = FUN1 ( VAR4 -> VAR5 , &tmp ) ) < 0
  ORIGINAL[11]: avctx -> priv_data
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: avctx -> priv_data
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: av_opt_set_dict(avctx,&tmp)
  TYPE[13]: CALL
  TOKENIZED[13]: FUN1 ( VAR1 , &tmp )
  ORIGINAL[14]: &tmp
  TYPE[14]: CALL
  TOKENIZED[14]: &tmp
  ORIGINAL[15]: avctx -> coded_width
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: avctx -> coded_height
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: avctx -> width
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: avctx -> height
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2
  ORIGINAL[19]: avctx -> codec_id
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: avctx -> coded_width
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2
  ORIGINAL[21]: avctx -> coded_height
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2
  ORIGINAL[22]: avctx -> coded_width
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: avctx -> coded_height
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2
  ORIGINAL[24]: avctx -> width
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2
  ORIGINAL[25]: avctx -> height
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2
  ORIGINAL[26]: avctx -> width
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 -> VAR2
  ORIGINAL[27]: avctx -> height
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 -> VAR2
  ORIGINAL[28]: avctx -> coded_width
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 -> VAR2
  ORIGINAL[29]: avctx -> coded_height
  TYPE[29]: CALL
  TOKENIZED[29]: VAR1 -> VAR2
  ORIGINAL[30]: avctx -> width
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 -> VAR2
  ORIGINAL[31]: avctx -> height
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 -> VAR2
  ORIGINAL[32]: avctx -> coded_width
  TYPE[32]: CALL
  TOKENIZED[32]: VAR1 -> VAR2
  ORIGINAL[33]: avctx -> coded_height
  TYPE[33]: CALL
  TOKENIZED[33]: VAR1 -> VAR2
  ORIGINAL[34]: avctx -> subtitle_header
  TYPE[34]: CALL
  TOKENIZED[34]: VAR1 -> VAR2
  ORIGINAL[35]: avctx -> channels
  TYPE[35]: CALL
  TOKENIZED[35]: VAR1 -> VAR2
  ORIGINAL[36]: avctx -> codec_type
  TYPE[36]: CALL
  TOKENIZED[36]: VAR1 -> VAR2
  ORIGINAL[37]: avctx -> codec_type
  TYPE[37]: CALL
  TOKENIZED[37]: VAR1 -> VAR2
  ORIGINAL[38]: avctx -> codec_id
  TYPE[38]: CALL
  TOKENIZED[38]: VAR1 -> VAR2
  ORIGINAL[39]: avctx -> codec_id
  TYPE[39]: CALL
  TOKENIZED[39]: VAR1 -> VAR2
  ORIGINAL[40]: avctx -> codec_type
  TYPE[40]: CALL
  TOKENIZED[40]: VAR1 -> VAR2
  ORIGINAL[41]: avctx -> codec_type
  TYPE[41]: CALL
  TOKENIZED[41]: VAR1 -> VAR2
  ORIGINAL[42]: avctx -> codec_id
  TYPE[42]: CALL
  TOKENIZED[42]: VAR1 -> VAR2
  ORIGINAL[43]: avctx -> codec
  TYPE[43]: CALL
  TOKENIZED[43]: VAR1 -> VAR2
  ORIGINAL[44]: avctx -> strict_std_compliance
  TYPE[44]: CALL
  TOKENIZED[44]: VAR1 -> VAR2
  ORIGINAL[45]: avctx -> codec_type
  TYPE[45]: CALL
  TOKENIZED[45]: VAR1 -> VAR2
  ORIGINAL[46]: avctx -> time_base
  TYPE[46]: CALL
  TOKENIZED[46]: VAR1 -> VAR2
  ORIGINAL[47]: avctx -> time_base
  TYPE[47]: CALL
  TOKENIZED[47]: VAR1 -> VAR2
  ORIGINAL[48]: avctx -> time_base
  TYPE[48]: CALL
  TOKENIZED[48]: VAR1 -> VAR2
  ORIGINAL[49]: avctx -> time_base
  TYPE[49]: CALL
  TOKENIZED[49]: VAR1 -> VAR2
  ORIGINAL[50]: avctx -> sample_rate
  TYPE[50]: CALL
  TOKENIZED[50]: VAR1 -> VAR2
  ORIGINAL[51]: avctx -> thread_opaque
  TYPE[51]: CALL
  TOKENIZED[51]: VAR1 -> VAR2
  ORIGINAL[52]: avctx -> internal
  TYPE[52]: CALL
  TOKENIZED[52]: VAR1 -> VAR2
  ORIGINAL[53]: avctx -> active_thread_type
  TYPE[53]: CALL
  TOKENIZED[53]: VAR1 -> VAR2
  ORIGINAL[54]: avctx -> codec
  TYPE[54]: CALL
  TOKENIZED[54]: VAR1 -> VAR2
  ORIGINAL[55]: avctx -> lowres
  TYPE[55]: CALL
  TOKENIZED[55]: VAR1 -> VAR2
  ORIGINAL[56]: avctx -> lowres
  TYPE[56]: CALL
  TOKENIZED[56]: VAR1 -> VAR2
  ORIGINAL[57]: avctx -> codec
  TYPE[57]: CALL
  TOKENIZED[57]: VAR1 -> VAR2
  ORIGINAL[58]: avctx -> codec
  TYPE[58]: CALL
  TOKENIZED[58]: VAR1 -> VAR2
  ORIGINAL[59]: avctx -> codec
  TYPE[59]: CALL
  TOKENIZED[59]: VAR1 -> VAR2
  ORIGINAL[60]: avctx -> codec
  TYPE[60]: CALL
  TOKENIZED[60]: VAR1 -> VAR2
  ORIGINAL[61]: avctx -> sample_fmt
  TYPE[61]: CALL
  TOKENIZED[61]: VAR1 -> VAR2
  ORIGINAL[62]: avctx -> codec
  TYPE[62]: CALL
  TOKENIZED[62]: VAR1 -> VAR2
  ORIGINAL[63]: avctx -> channels
  TYPE[63]: CALL
  TOKENIZED[63]: VAR1 -> VAR2
  ORIGINAL[64]: avctx -> sample_fmt
  TYPE[64]: CALL
  TOKENIZED[64]: VAR1 -> VAR2
  ORIGINAL[65]: avctx -> codec
  TYPE[65]: CALL
  TOKENIZED[65]: VAR1 -> VAR2
  ORIGINAL[66]: avctx -> codec
  TYPE[66]: CALL
  TOKENIZED[66]: VAR1 -> VAR2
  ORIGINAL[67]: avctx -> codec
  TYPE[67]: CALL
  TOKENIZED[67]: VAR1 -> VAR2
  ORIGINAL[68]: avctx -> sample_fmt
  TYPE[68]: CALL
  TOKENIZED[68]: VAR1 -> VAR2
  ORIGINAL[69]: avctx -> sample_fmt
  TYPE[69]: CALL
  TOKENIZED[69]: VAR1 -> VAR2
  ORIGINAL[70]: avctx -> codec
  TYPE[70]: CALL
  TOKENIZED[70]: VAR1 -> VAR2
  ORIGINAL[71]: avctx -> codec
  TYPE[71]: CALL
  TOKENIZED[71]: VAR1 -> VAR2
  ORIGINAL[72]: avctx -> pix_fmt
  TYPE[72]: CALL
  TOKENIZED[72]: VAR1 -> VAR2
  ORIGINAL[73]: avctx -> codec
  TYPE[73]: CALL
  TOKENIZED[73]: VAR1 -> VAR2
  ORIGINAL[74]: avctx -> codec
  TYPE[74]: CALL
  TOKENIZED[74]: VAR1 -> VAR2
  ORIGINAL[75]: avctx -> codec_id
  TYPE[75]: CALL
  TOKENIZED[75]: VAR1 -> VAR2
  ORIGINAL[76]: avctx -> codec_id
  TYPE[76]: CALL
  TOKENIZED[76]: VAR1 -> VAR2
  ORIGINAL[77]: avctx -> strict_std_compliance
  TYPE[77]: CALL
  TOKENIZED[77]: VAR1 -> VAR2
  ORIGINAL[78]: avctx -> pix_fmt
  TYPE[78]: CALL
  TOKENIZED[78]: VAR1 -> VAR2
  ORIGINAL[79]: avctx -> pix_fmt
  TYPE[79]: CALL
  TOKENIZED[79]: VAR1 -> VAR2
  ORIGINAL[80]: avctx -> codec
  TYPE[80]: CALL
  TOKENIZED[80]: VAR1 -> VAR2
  ORIGINAL[81]: avctx -> codec
  TYPE[81]: CALL
  TOKENIZED[81]: VAR1 -> VAR2
  ORIGINAL[82]: avctx -> sample_rate
  TYPE[82]: CALL
  TOKENIZED[82]: VAR1 -> VAR2
  ORIGINAL[83]: avctx -> codec
  TYPE[83]: CALL
  TOKENIZED[83]: VAR1 -> VAR2
  ORIGINAL[84]: avctx -> codec
  TYPE[84]: CALL
  TOKENIZED[84]: VAR1 -> VAR2
  ORIGINAL[85]: avctx -> sample_rate
  TYPE[85]: CALL
  TOKENIZED[85]: VAR1 -> VAR2
  ORIGINAL[86]: avctx -> codec
  TYPE[86]: CALL
  TOKENIZED[86]: VAR1 -> VAR2
  ORIGINAL[87]: avctx -> channel_layout
  TYPE[87]: CALL
  TOKENIZED[87]: VAR1 -> VAR2
  ORIGINAL[88]: avctx -> codec
  TYPE[88]: CALL
  TOKENIZED[88]: VAR1 -> VAR2
  ORIGINAL[89]: avctx -> channel_layout
  TYPE[89]: CALL
  TOKENIZED[89]: VAR1 -> VAR2
  ORIGINAL[90]: avctx -> codec
  TYPE[90]: CALL
  TOKENIZED[90]: VAR1 -> VAR2
  ORIGINAL[91]: avctx -> codec
  TYPE[91]: CALL
  TOKENIZED[91]: VAR1 -> VAR2
  ORIGINAL[92]: avctx -> channel_layout
  TYPE[92]: CALL
  TOKENIZED[92]: VAR1 -> VAR2
  ORIGINAL[93]: avctx -> channel_layout
  TYPE[93]: CALL
  TOKENIZED[93]: VAR1 -> VAR2
  ORIGINAL[94]: avctx -> channels
  TYPE[94]: CALL
  TOKENIZED[94]: VAR1 -> VAR2
  ORIGINAL[95]: avctx -> channel_layout
  TYPE[95]: CALL
  TOKENIZED[95]: VAR1 -> VAR2
  ORIGINAL[96]: avctx -> channels
  TYPE[96]: CALL
  TOKENIZED[96]: VAR1 -> VAR2
  ORIGINAL[97]: avctx -> channel_layout
  TYPE[97]: CALL
  TOKENIZED[97]: VAR1 -> VAR2
  ORIGINAL[98]: avctx -> channels
  TYPE[98]: CALL
  TOKENIZED[98]: VAR1 -> VAR2
  ORIGINAL[99]: avctx -> channel_layout
  TYPE[99]: CALL
  TOKENIZED[99]: VAR1 -> VAR2
  ORIGINAL[100]: avctx -> codec_type
  TYPE[100]: CALL
  TOKENIZED[100]: VAR1 -> VAR2
  ORIGINAL[101]: avctx -> codec_id
  TYPE[101]: CALL
  TOKENIZED[101]: VAR1 -> VAR2
  ORIGINAL[102]: avctx -> width
  TYPE[102]: CALL
  TOKENIZED[102]: VAR1 -> VAR2
  ORIGINAL[103]: avctx -> height
  TYPE[103]: CALL
  TOKENIZED[103]: VAR1 -> VAR2
  ORIGINAL[104]: avctx -> codec_type
  TYPE[104]: CALL
  TOKENIZED[104]: VAR1 -> VAR2
  ORIGINAL[105]: avctx -> codec_type
  TYPE[105]: CALL
  TOKENIZED[105]: VAR1 -> VAR2
  ORIGINAL[106]: avctx -> bit_rate
  TYPE[106]: CALL
  TOKENIZED[106]: VAR1 -> VAR2
  ORIGINAL[107]: avctx -> bit_rate
  TYPE[107]: CALL
  TOKENIZED[107]: VAR1 -> VAR2
  ORIGINAL[108]: avctx -> bit_rate
  TYPE[108]: CALL
  TOKENIZED[108]: VAR1 -> VAR2
  ORIGINAL[109]: avctx -> bit_rate
  TYPE[109]: CALL
  TOKENIZED[109]: VAR1 -> VAR2
  ORIGINAL[110]: avctx -> rc_initial_buffer_occupancy
  TYPE[110]: CALL
  TOKENIZED[110]: VAR1 -> VAR2
  ORIGINAL[111]: avctx -> rc_buffer_size
  TYPE[111]: CALL
  TOKENIZED[111]: VAR1 -> VAR2
  ORIGINAL[112]: avctx -> codec
  TYPE[112]: CALL
  TOKENIZED[112]: VAR1 -> VAR2
  ORIGINAL[113]: avctx -> active_thread_type
  TYPE[113]: CALL
  TOKENIZED[113]: VAR1 -> VAR2
  ORIGINAL[114]: avctx -> internal
  TYPE[114]: CALL
  TOKENIZED[114]: VAR1 -> VAR2
  ORIGINAL[115]: avctx -> codec
  TYPE[115]: CALL
  TOKENIZED[115]: VAR1 -> VAR2
  ORIGINAL[116]: avctx -> codec
  TYPE[116]: CALL
  TOKENIZED[116]: VAR1 -> VAR2
  ORIGINAL[117]: avctx -> bit_rate
  TYPE[117]: CALL
  TOKENIZED[117]: VAR1 -> VAR2
  ORIGINAL[118]: avctx -> channel_layout
  TYPE[118]: CALL
  TOKENIZED[118]: VAR1 -> VAR2
  ORIGINAL[119]: avctx -> channels
  TYPE[119]: CALL
  TOKENIZED[119]: VAR1 -> VAR2
  ORIGINAL[120]: avctx -> channels
  TYPE[120]: CALL
  TOKENIZED[120]: VAR1 -> VAR2
  ORIGINAL[121]: avctx -> channel_layout
  TYPE[121]: CALL
  TOKENIZED[121]: VAR1 -> VAR2
  ORIGINAL[122]: avctx -> channels
  TYPE[122]: CALL
  TOKENIZED[122]: VAR1 -> VAR2
  ORIGINAL[123]: avctx -> channels
  TYPE[123]: CALL
  TOKENIZED[123]: VAR1 -> VAR2
  ORIGINAL[124]: avctx -> channels
  TYPE[124]: CALL
  TOKENIZED[124]: VAR1 -> VAR2
  ORIGINAL[125]: avctx -> channels
  TYPE[125]: CALL
  TOKENIZED[125]: VAR1 -> VAR2
  ORIGINAL[126]: avctx -> codec_type
  TYPE[126]: CALL
  TOKENIZED[126]: VAR1 -> VAR2
  ORIGINAL[127]: avctx -> codec_descriptor
  TYPE[127]: CALL
  TOKENIZED[127]: VAR1 -> VAR2
  ORIGINAL[128]: avctx -> codec_descriptor
  TYPE[128]: CALL
  TOKENIZED[128]: VAR1 -> VAR2
  ORIGINAL[129]: avctx -> sub_charenc_mode
  TYPE[129]: CALL
  TOKENIZED[129]: VAR1 -> VAR2
  ORIGINAL[130]: avctx -> sub_charenc_mode
  TYPE[130]: CALL
  TOKENIZED[130]: VAR1 -> VAR2
  ORIGINAL[131]: avctx -> priv_data
  TYPE[131]: CALL
  TOKENIZED[131]: VAR1 -> VAR2
  ORIGINAL[132]: avctx -> internal
  TYPE[132]: CALL
  TOKENIZED[132]: VAR1 -> VAR2
  ORIGINAL[133]: avctx
  TYPE[133]: IDENTIFIER
  TOKENIZED[133]: VAR1
  ORIGINAL[134]: ret
  TYPE[134]: IDENTIFIER
  TOKENIZED[134]: VAR1
  ORIGINAL[135]: avctx
  TYPE[135]: IDENTIFIER
  TOKENIZED[135]: VAR1
  ORIGINAL[136]: tmp
  TYPE[136]: IDENTIFIER
  TOKENIZED[136]: VAR1
  ORIGINAL[137]: avctx
  TYPE[137]: IDENTIFIER
  TOKENIZED[137]: VAR1
  ORIGINAL[138]: avctx
  TYPE[138]: IDENTIFIER
  TOKENIZED[138]: VAR1
  ORIGINAL[139]: avctx
  TYPE[139]: IDENTIFIER
  TOKENIZED[139]: VAR1
  ORIGINAL[140]: avctx
  TYPE[140]: IDENTIFIER
  TOKENIZED[140]: VAR1
  ORIGINAL[141]: avctx
  TYPE[141]: IDENTIFIER
  TOKENIZED[141]: VAR1
  ORIGINAL[142]: avctx
  TYPE[142]: IDENTIFIER
  TOKENIZED[142]: VAR1
  ORIGINAL[143]: avctx
  TYPE[143]: IDENTIFIER
  TOKENIZED[143]: VAR1
  ORIGINAL[144]: avctx
  TYPE[144]: IDENTIFIER
  TOKENIZED[144]: VAR1
  ORIGINAL[145]: avctx
  TYPE[145]: IDENTIFIER
  TOKENIZED[145]: VAR1
  ORIGINAL[146]: avctx
  TYPE[146]: IDENTIFIER
  TOKENIZED[146]: VAR1
  ORIGINAL[147]: avctx
  TYPE[147]: IDENTIFIER
  TOKENIZED[147]: VAR1
  ORIGINAL[148]: avctx
  TYPE[148]: IDENTIFIER
  TOKENIZED[148]: VAR1
  ORIGINAL[149]: avctx
  TYPE[149]: IDENTIFIER
  TOKENIZED[149]: VAR1
  ORIGINAL[150]: avctx
  TYPE[150]: IDENTIFIER
  TOKENIZED[150]: VAR1
  ORIGINAL[151]: avctx
  TYPE[151]: IDENTIFIER
  TOKENIZED[151]: VAR1
  ORIGINAL[152]: avctx
  TYPE[152]: IDENTIFIER
  TOKENIZED[152]: VAR1
  ORIGINAL[153]: avctx
  TYPE[153]: IDENTIFIER
  TOKENIZED[153]: VAR1
  ORIGINAL[154]: avctx
  TYPE[154]: IDENTIFIER
  TOKENIZED[154]: VAR1
  ORIGINAL[155]: avctx
  TYPE[155]: IDENTIFIER
  TOKENIZED[155]: VAR1
  ORIGINAL[156]: avctx
  TYPE[156]: IDENTIFIER
  TOKENIZED[156]: VAR1
  ORIGINAL[157]: avctx
  TYPE[157]: IDENTIFIER
  TOKENIZED[157]: VAR1
  ORIGINAL[158]: avctx
  TYPE[158]: IDENTIFIER
  TOKENIZED[158]: VAR1
  ORIGINAL[159]: avctx
  TYPE[159]: IDENTIFIER
  TOKENIZED[159]: VAR1
  ORIGINAL[160]: avctx
  TYPE[160]: IDENTIFIER
  TOKENIZED[160]: VAR1
  ORIGINAL[161]: avctx
  TYPE[161]: IDENTIFIER
  TOKENIZED[161]: VAR1
  ORIGINAL[162]: avctx
  TYPE[162]: IDENTIFIER
  TOKENIZED[162]: VAR1
  ORIGINAL[163]: avctx
  TYPE[163]: IDENTIFIER
  TOKENIZED[163]: VAR1
  ORIGINAL[164]: avctx
  TYPE[164]: IDENTIFIER
  TOKENIZED[164]: VAR1
  ORIGINAL[165]: avctx
  TYPE[165]: IDENTIFIER
  TOKENIZED[165]: VAR1
  ORIGINAL[166]: avctx
  TYPE[166]: IDENTIFIER
  TOKENIZED[166]: VAR1
  ORIGINAL[167]: avctx
  TYPE[167]: IDENTIFIER
  TOKENIZED[167]: VAR1
  ORIGINAL[168]: avctx
  TYPE[168]: IDENTIFIER
  TOKENIZED[168]: VAR1
  ORIGINAL[169]: avctx
  TYPE[169]: IDENTIFIER
  TOKENIZED[169]: VAR1
  ORIGINAL[170]: avctx
  TYPE[170]: IDENTIFIER
  TOKENIZED[170]: VAR1
  ORIGINAL[171]: avctx
  TYPE[171]: IDENTIFIER
  TOKENIZED[171]: VAR1
  ORIGINAL[172]: avctx
  TYPE[172]: IDENTIFIER
  TOKENIZED[172]: VAR1
  ORIGINAL[173]: avctx
  TYPE[173]: IDENTIFIER
  TOKENIZED[173]: VAR1
  ORIGINAL[174]: avctx
  TYPE[174]: IDENTIFIER
  TOKENIZED[174]: VAR1
  ORIGINAL[175]: avctx
  TYPE[175]: IDENTIFIER
  TOKENIZED[175]: VAR1
  ORIGINAL[176]: avctx
  TYPE[176]: IDENTIFIER
  TOKENIZED[176]: VAR1
  ORIGINAL[177]: avctx
  TYPE[177]: IDENTIFIER
  TOKENIZED[177]: VAR1
  ORIGINAL[178]: avctx
  TYPE[178]: IDENTIFIER
  TOKENIZED[178]: VAR1
  ORIGINAL[179]: avctx
  TYPE[179]: IDENTIFIER
  TOKENIZED[179]: VAR1
  ORIGINAL[180]: avctx
  TYPE[180]: IDENTIFIER
  TOKENIZED[180]: VAR1
  ORIGINAL[181]: avctx
  TYPE[181]: IDENTIFIER
  TOKENIZED[181]: VAR1
  ORIGINAL[182]: avctx
  TYPE[182]: IDENTIFIER
  TOKENIZED[182]: VAR1
  ORIGINAL[183]: avctx
  TYPE[183]: IDENTIFIER
  TOKENIZED[183]: VAR1
  ORIGINAL[184]: avctx
  TYPE[184]: IDENTIFIER
  TOKENIZED[184]: VAR1
  ORIGINAL[185]: avctx
  TYPE[185]: IDENTIFIER
  TOKENIZED[185]: VAR1
  ORIGINAL[186]: avctx
  TYPE[186]: IDENTIFIER
  TOKENIZED[186]: VAR1
  ORIGINAL[187]: avctx
  TYPE[187]: IDENTIFIER
  TOKENIZED[187]: VAR1
  ORIGINAL[188]: avctx
  TYPE[188]: IDENTIFIER
  TOKENIZED[188]: VAR1
  ORIGINAL[189]: avctx
  TYPE[189]: IDENTIFIER
  TOKENIZED[189]: VAR1
  ORIGINAL[190]: avctx
  TYPE[190]: IDENTIFIER
  TOKENIZED[190]: VAR1
  ORIGINAL[191]: avctx
  TYPE[191]: IDENTIFIER
  TOKENIZED[191]: VAR1
  ORIGINAL[192]: avctx
  TYPE[192]: IDENTIFIER
  TOKENIZED[192]: VAR1
  ORIGINAL[193]: avctx
  TYPE[193]: IDENTIFIER
  TOKENIZED[193]: VAR1
  ORIGINAL[194]: avctx
  TYPE[194]: IDENTIFIER
  TOKENIZED[194]: VAR1
  ORIGINAL[195]: avctx
  TYPE[195]: IDENTIFIER
  TOKENIZED[195]: VAR1
  ORIGINAL[196]: avctx
  TYPE[196]: IDENTIFIER
  TOKENIZED[196]: VAR1
  ORIGINAL[197]: avctx
  TYPE[197]: IDENTIFIER
  TOKENIZED[197]: VAR1
  ORIGINAL[198]: avctx
  TYPE[198]: IDENTIFIER
  TOKENIZED[198]: VAR1
  ORIGINAL[199]: avctx
  TYPE[199]: IDENTIFIER
  TOKENIZED[199]: VAR1
  ORIGINAL[200]: avctx
  TYPE[200]: IDENTIFIER
  TOKENIZED[200]: VAR1
  ORIGINAL[201]: avctx
  TYPE[201]: IDENTIFIER
  TOKENIZED[201]: VAR1
  ORIGINAL[202]: avctx
  TYPE[202]: IDENTIFIER
  TOKENIZED[202]: VAR1
  ORIGINAL[203]: avctx
  TYPE[203]: IDENTIFIER
  TOKENIZED[203]: VAR1
  ORIGINAL[204]: avctx
  TYPE[204]: IDENTIFIER
  TOKENIZED[204]: VAR1
  ORIGINAL[205]: avctx
  TYPE[205]: IDENTIFIER
  TOKENIZED[205]: VAR1
  ORIGINAL[206]: avctx
  TYPE[206]: IDENTIFIER
  TOKENIZED[206]: VAR1
  ORIGINAL[207]: avctx
  TYPE[207]: IDENTIFIER
  TOKENIZED[207]: VAR1
  ORIGINAL[208]: avctx
  TYPE[208]: IDENTIFIER
  TOKENIZED[208]: VAR1
  ORIGINAL[209]: avctx
  TYPE[209]: IDENTIFIER
  TOKENIZED[209]: VAR1
  ORIGINAL[210]: avctx
  TYPE[210]: IDENTIFIER
  TOKENIZED[210]: VAR1
  ORIGINAL[211]: avctx
  TYPE[211]: IDENTIFIER
  TOKENIZED[211]: VAR1
  ORIGINAL[212]: avctx
  TYPE[212]: IDENTIFIER
  TOKENIZED[212]: VAR1
  ORIGINAL[213]: avctx
  TYPE[213]: IDENTIFIER
  TOKENIZED[213]: VAR1
  ORIGINAL[214]: avctx
  TYPE[214]: IDENTIFIER
  TOKENIZED[214]: VAR1
  ORIGINAL[215]: avctx
  TYPE[215]: IDENTIFIER
  TOKENIZED[215]: VAR1
  ORIGINAL[216]: avctx
  TYPE[216]: IDENTIFIER
  TOKENIZED[216]: VAR1
  ORIGINAL[217]: avctx
  TYPE[217]: IDENTIFIER
  TOKENIZED[217]: VAR1
  ORIGINAL[218]: avctx
  TYPE[218]: IDENTIFIER
  TOKENIZED[218]: VAR1
  ORIGINAL[219]: avctx
  TYPE[219]: IDENTIFIER
  TOKENIZED[219]: VAR1
  ORIGINAL[220]: avctx
  TYPE[220]: IDENTIFIER
  TOKENIZED[220]: VAR1
  ORIGINAL[221]: avctx
  TYPE[221]: IDENTIFIER
  TOKENIZED[221]: VAR1
  ORIGINAL[222]: avctx
  TYPE[222]: IDENTIFIER
  TOKENIZED[222]: VAR1
  ORIGINAL[223]: avctx
  TYPE[223]: IDENTIFIER
  TOKENIZED[223]: VAR1
  ORIGINAL[224]: avctx
  TYPE[224]: IDENTIFIER
  TOKENIZED[224]: VAR1
  ORIGINAL[225]: avctx
  TYPE[225]: IDENTIFIER
  TOKENIZED[225]: VAR1
  ORIGINAL[226]: avctx
  TYPE[226]: IDENTIFIER
  TOKENIZED[226]: VAR1
  ORIGINAL[227]: avctx
  TYPE[227]: IDENTIFIER
  TOKENIZED[227]: VAR1
  ORIGINAL[228]: avctx
  TYPE[228]: IDENTIFIER
  TOKENIZED[228]: VAR1
  ORIGINAL[229]: avctx
  TYPE[229]: IDENTIFIER
  TOKENIZED[229]: VAR1
  ORIGINAL[230]: avctx
  TYPE[230]: IDENTIFIER
  TOKENIZED[230]: VAR1
  ORIGINAL[231]: avctx
  TYPE[231]: IDENTIFIER
  TOKENIZED[231]: VAR1
  ORIGINAL[232]: avctx
  TYPE[232]: IDENTIFIER
  TOKENIZED[232]: VAR1
  ORIGINAL[233]: avctx
  TYPE[233]: IDENTIFIER
  TOKENIZED[233]: VAR1
  ORIGINAL[234]: avctx
  TYPE[234]: IDENTIFIER
  TOKENIZED[234]: VAR1
  ORIGINAL[235]: avctx
  TYPE[235]: IDENTIFIER
  TOKENIZED[235]: VAR1
  ORIGINAL[236]: avctx
  TYPE[236]: IDENTIFIER
  TOKENIZED[236]: VAR1
  ORIGINAL[237]: avctx
  TYPE[237]: IDENTIFIER
  TOKENIZED[237]: VAR1
  ORIGINAL[238]: avctx
  TYPE[238]: IDENTIFIER
  TOKENIZED[238]: VAR1
  ORIGINAL[239]: avctx
  TYPE[239]: IDENTIFIER
  TOKENIZED[239]: VAR1
  ORIGINAL[240]: avctx
  TYPE[240]: IDENTIFIER
  TOKENIZED[240]: VAR1
  ORIGINAL[241]: avctx
  TYPE[241]: IDENTIFIER
  TOKENIZED[241]: VAR1
  ORIGINAL[242]: avctx
  TYPE[242]: IDENTIFIER
  TOKENIZED[242]: VAR1
  ORIGINAL[243]: avctx
  TYPE[243]: IDENTIFIER
  TOKENIZED[243]: VAR1
  ORIGINAL[244]: avctx
  TYPE[244]: IDENTIFIER
  TOKENIZED[244]: VAR1
  ORIGINAL[245]: avctx
  TYPE[245]: IDENTIFIER
  TOKENIZED[245]: VAR1
  ORIGINAL[246]: avctx
  TYPE[246]: IDENTIFIER
  TOKENIZED[246]: VAR1
  ORIGINAL[247]: avctx
  TYPE[247]: IDENTIFIER
  TOKENIZED[247]: VAR1
  ORIGINAL[248]: avctx
  TYPE[248]: IDENTIFIER
  TOKENIZED[248]: VAR1
  ORIGINAL[249]: avctx
  TYPE[249]: IDENTIFIER
  TOKENIZED[249]: VAR1
  ORIGINAL[250]: avctx
  TYPE[250]: IDENTIFIER
  TOKENIZED[250]: VAR1
  ORIGINAL[251]: avctx
  TYPE[251]: IDENTIFIER
  TOKENIZED[251]: VAR1
  ORIGINAL[252]: avctx
  TYPE[252]: IDENTIFIER
  TOKENIZED[252]: VAR1
  ORIGINAL[253]: avctx
  TYPE[253]: IDENTIFIER
  TOKENIZED[253]: VAR1
  ORIGINAL[254]: avctx
  TYPE[254]: IDENTIFIER
  TOKENIZED[254]: VAR1
  ORIGINAL[255]: avctx
  TYPE[255]: IDENTIFIER
  TOKENIZED[255]: VAR1
  ORIGINAL[256]: avctx
  TYPE[256]: IDENTIFIER
  TOKENIZED[256]: VAR1
  ORIGINAL[257]: avctx
  TYPE[257]: IDENTIFIER
  TOKENIZED[257]: VAR1
  ORIGINAL[258]: avctx
  TYPE[258]: IDENTIFIER
  TOKENIZED[258]: VAR1
  ORIGINAL[259]: avctx
  TYPE[259]: IDENTIFIER
  TOKENIZED[259]: VAR1
  ORIGINAL[260]: avctx
  TYPE[260]: IDENTIFIER
  TOKENIZED[260]: VAR1
  ORIGINAL[261]: avctx
  TYPE[261]: IDENTIFIER
  TOKENIZED[261]: VAR1
  ORIGINAL[262]: avctx
  TYPE[262]: IDENTIFIER
  TOKENIZED[262]: VAR1
  ORIGINAL[263]: avctx
  TYPE[263]: IDENTIFIER
  TOKENIZED[263]: VAR1
  ORIGINAL[264]: avctx
  TYPE[264]: IDENTIFIER
  TOKENIZED[264]: VAR1
  ORIGINAL[265]: avctx
  TYPE[265]: IDENTIFIER
  TOKENIZED[265]: VAR1
  ORIGINAL[266]: avctx
  TYPE[266]: IDENTIFIER
  TOKENIZED[266]: VAR1
  ORIGINAL[267]: avctx
  TYPE[267]: IDENTIFIER
  TOKENIZED[267]: VAR1
  ORIGINAL[268]: avctx
  TYPE[268]: IDENTIFIER
  TOKENIZED[268]: VAR1
  ORIGINAL[269]: avctx
  TYPE[269]: IDENTIFIER
  TOKENIZED[269]: VAR1
  ORIGINAL[270]: avctx
  TYPE[270]: IDENTIFIER
  TOKENIZED[270]: VAR1
  ORIGINAL[271]: avctx
  TYPE[271]: IDENTIFIER
  TOKENIZED[271]: VAR1
  ORIGINAL[272]: avctx
  TYPE[272]: IDENTIFIER
  TOKENIZED[272]: VAR1
  ORIGINAL[273]: avctx
  TYPE[273]: IDENTIFIER
  TOKENIZED[273]: VAR1
  ORIGINAL[274]: avctx
  TYPE[274]: IDENTIFIER
  TOKENIZED[274]: VAR1
  ORIGINAL[275]: avctx
  TYPE[275]: IDENTIFIER
  TOKENIZED[275]: VAR1
  ORIGINAL[276]: avctx
  TYPE[276]: IDENTIFIER
  TOKENIZED[276]: VAR1
  ORIGINAL[277]: avctx
  TYPE[277]: IDENTIFIER
  TOKENIZED[277]: VAR1
  ORIGINAL[278]: avctx
  TYPE[278]: IDENTIFIER
  TOKENIZED[278]: VAR1
  ORIGINAL[279]: avctx
  TYPE[279]: IDENTIFIER
  TOKENIZED[279]: VAR1
  ORIGINAL[280]: avctx
  TYPE[280]: IDENTIFIER
  TOKENIZED[280]: VAR1
  ORIGINAL[281]: avctx
  TYPE[281]: IDENTIFIER
  TOKENIZED[281]: VAR1
  ORIGINAL[282]: avctx
  TYPE[282]: IDENTIFIER
  TOKENIZED[282]: VAR1
  ORIGINAL[283]: avctx
  TYPE[283]: IDENTIFIER
  TOKENIZED[283]: VAR1
  ORIGINAL[284]: avctx
  TYPE[284]: IDENTIFIER
  TOKENIZED[284]: VAR1
  ORIGINAL[285]: avctx
  TYPE[285]: IDENTIFIER
  TOKENIZED[285]: VAR1
  ORIGINAL[286]: avctx
  TYPE[286]: IDENTIFIER
  TOKENIZED[286]: VAR1
  ORIGINAL[287]: avctx
  TYPE[287]: IDENTIFIER
  TOKENIZED[287]: VAR1
  ORIGINAL[288]: avctx
  TYPE[288]: IDENTIFIER
  TOKENIZED[288]: VAR1
  ORIGINAL[289]: avctx
  TYPE[289]: IDENTIFIER
  TOKENIZED[289]: VAR1
  ORIGINAL[290]: avctx
  TYPE[290]: IDENTIFIER
  TOKENIZED[290]: VAR1
  ORIGINAL[291]: avctx
  TYPE[291]: IDENTIFIER
  TOKENIZED[291]: VAR1
  ORIGINAL[292]: avctx
  TYPE[292]: IDENTIFIER
  TOKENIZED[292]: VAR1
  ORIGINAL[293]: avctx
  TYPE[293]: IDENTIFIER
  TOKENIZED[293]: VAR1
  ORIGINAL[294]: avctx
  TYPE[294]: IDENTIFIER
  TOKENIZED[294]: VAR1
  ORIGINAL[295]: avctx
  TYPE[295]: IDENTIFIER
  TOKENIZED[295]: VAR1
  ORIGINAL[296]: avctx
  TYPE[296]: IDENTIFIER
  TOKENIZED[296]: VAR1
  ORIGINAL[297]: avctx
  TYPE[297]: IDENTIFIER
  TOKENIZED[297]: VAR1

CENTER_NODE: 30064772118
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = avcodec_open2(avctx,codec,options)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcodec_open2(avctx,codec,options)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477552
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773541
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: sub -> rects[i] -> pict . data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 . VAR5
  ORIGINAL[2]: &sub -> rects[i] -> pict . data[1]
  TYPE[2]: CALL
  TOKENIZED[2]: &sub -> VAR1 [ VAR2 ] -> VAR3 . VAR4 [ 1 ]
  ORIGINAL[3]: sub -> rects[i] -> pict . data[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 . VAR5 [ 1 ]
  ORIGINAL[4]: sub -> rects[i] -> pict . data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 . VAR5
  ORIGINAL[5]: sub -> rects[i] -> pict . data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 . VAR5
  ORIGINAL[6]: sub -> rects[i] -> pict . data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 . VAR5

CENTER_NODE: 68719478572
FRAGMENT_COUNT: 11
  ORIGINAL[0]: avcodec_is_open(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: avctx -> thread_count
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> thread_opaque
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> coded_frame
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: av_freep((&avctx -> internal))
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( ( &avctx -> VAR1 ) )
  ORIGINAL[6]: avctx -> internal
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: avctx -> metadata
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: metadata
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640326
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 68719478008
FRAGMENT_COUNT: 16
  ORIGINAL[0]: *frame
  TYPE[0]: CALL
  TOKENIZED[0]: *frame
  ORIGINAL[1]: (ret = av_samples_get_buffer_size(&frame -> linesize[0],s -> channels,s -> frame_size,s -> sample_fmt,0)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( &frame -> VAR2 [ 0 ] , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR3 -> VAR6 , 0 ) ) < 0
  ORIGINAL[2]: !(buf = (av_malloc(ret)))
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 = ( FUN1 ( VAR2 ) ) )
  ORIGINAL[3]: frame -> nb_samples
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (ret = avcodec_fill_audio_frame(frame,s -> channels,s -> sample_fmt,buf,ret,0)) < 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR6 , VAR1 , 0 ) ) < 0
  ORIGINAL[5]: (ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0
  ORIGINAL[6]: (ret = av_samples_set_silence(frame -> extended_data,src -> nb_samples,frame -> nb_samples - src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 -> VAR5 , VAR2 -> VAR5 - VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0
  ORIGINAL[7]: frame -> nb_samples
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: frame -> extended_data
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: frame -> data
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: frame -> extended_data
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: av_freep((&buf))
  TYPE[11]: CALL
  TOKENIZED[11]: FUN1 ( ( &buf ) )
  ORIGINAL[12]: &frame
  TYPE[12]: CALL
  TOKENIZED[12]: &frame
  ORIGINAL[13]: frame
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: frame
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: frame
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064774049
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !avci -> buffer
  TYPE[0]: CALL
  TOKENIZED[0]: !avci -> VAR1
  ORIGINAL[1]: avci -> buffer_count = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = 0
  ORIGINAL[2]: avci -> buffer_count
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: buffer_count
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avci
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772089
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: &frame -> VAR1
  ORIGINAL[1]: frame -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773579
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ff_unlock_avcodec()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640344
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771370
FRAGMENT_COUNT: 4
  ORIGINAL[0]: linesize_align[2] <<= chroma_shift
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 2 ] <<= VAR2
  ORIGINAL[1]: linesize_align[2]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 2 ]
  ORIGINAL[2]: chroma_shift
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: align
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774352
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_toupper((x >> 24 & 0xff)) << 24
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 >> 24 & 0xff ) ) << 24
  ORIGINAL[1]: av_toupper((x >> 24 & 0xff))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 >> 24 & 0xff ) )
  ORIGINAL[2]: x >> 24 & 0xff
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >> 24 & 0xff

CENTER_NODE: 30064774050
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *avci = avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: *avci = VAR1 -> VAR2
  ORIGINAL[1]: avctx -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avci
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478932
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F64LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F64BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F64LE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476864
FRAGMENT_COUNT: 5
  ORIGINAL[0]: **p = ptr
  TYPE[0]: CALL
  TOKENIZED[0]: **p = VAR1
  ORIGINAL[1]: min_size > 18446744073709551615UL - 16
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 18446744073709551615UL - 16
  ORIGINAL[2]: 18446744073709551615UL - 16
  TYPE[2]: CALL
  TOKENIZED[2]: 18446744073709551615UL - 16
  ORIGINAL[3]: min_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: min_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771331
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *width + w_align
  TYPE[0]: CALL
  TOKENIZED[0]: *width + VAR1
  ORIGINAL[1]: *width
  TYPE[1]: CALL
  TOKENIZED[1]: *width
  ORIGINAL[2]: width
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: w_align
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640367
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *fmt ) != VAR1 && FUN1 ( *fmt )
  ORIGINAL[1]: ++fmt
  TYPE[1]: CALL
  TOKENIZED[1]: ++fmt
  ORIGINAL[2]: while (( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( ( *fmt ) != VAR1 && FUN1 ( *fmt ) )

CENTER_NODE: 47244640356
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772075
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> channels = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: channels
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771192
FRAGMENT_COUNT: 7
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: min_size = (17 * min_size / 16 + 32 > min_size?17 * min_size / 16 + 32 : min_size)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( 17 * VAR1 / 16 + 32 > min_size?17 * VAR1 / 16 + 32 : VAR1 )
  ORIGINAL[2]: 17 * min_size / 16 + 32 > min_size?17 * min_size / 16 + 32 : min_size
  TYPE[2]: CALL
  TOKENIZED[2]: 17 * VAR1 / 16 + 32 > min_size?17 * VAR1 / 16 + 32 : VAR1
  ORIGINAL[3]: 17 * min_size / 16 + 32 > min_size
  TYPE[3]: CALL
  TOKENIZED[3]: 17 * VAR1 / 16 + 32 > VAR1
  ORIGINAL[4]: 17 * min_size / 16 + 32
  TYPE[4]: CALL
  TOKENIZED[4]: 17 * VAR1 / 16 + 32
  ORIGINAL[5]: min_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: min_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640480
FRAGMENT_COUNT: 1
  ORIGINAL[0]: size < 0 || avpkt -> size < 0 || size > 2147483647 - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR2 -> VAR1 < 0 || VAR1 > 2147483647 - 16

CENTER_NODE: 68719476859
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: ptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771124
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fflush(stonesoup_printf_context)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064772082
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479114
FRAGMENT_COUNT: 6
  ORIGINAL[0]: avctx -> codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: bps < 4
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 4
  ORIGINAL[2]: bps
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_DVD
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bps
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: bps
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640641
FRAGMENT_COUNT: 1
  ORIGINAL[0]: codec
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477071
FRAGMENT_COUNT: 6
  ORIGINAL[0]: buf_size < needed_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: av_sample_fmt_is_planar(sample_fmt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: sample_fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: planar
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sample_fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: sample_fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478296
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (avctx -> codec -> type) != AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4
  ORIGINAL[1]: *got_picture_ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *got_picture_ptr
  ORIGINAL[2]: got_picture_ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479172
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_hwaccel_next(hwaccel)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: (hwaccel -> id) == codec_id && (hwaccel -> pix_fmt) == pix_fmt
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3 && ( VAR1 -> VAR4 ) == VAR4
  ORIGINAL[2]: hwaccel -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: hwaccel -> pix_fmt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hwaccel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: hwaccel
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479148
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: avc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: feature
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: memset(sub,0,sizeof(( *sub)))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , sizeof ( ( *sub ) ) )
  ORIGINAL[1]: sizeof(( *sub))
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( ( *sub ) )
  ORIGINAL[2]: *sub
  TYPE[2]: CALL
  TOKENIZED[2]: *sub
  ORIGINAL[3]: sub
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479212
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *ff_lockmgr_cb
  TYPE[0]: CALL
  TOKENIZED[0]: *ff_lockmgr_cb
  ORIGINAL[1]: <global> ff_lockmgr_cb
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064771998
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret[i] = r
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[1]: ret[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: r
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773514
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avctx -> codec_descriptor -> props
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: avctx -> codec_descriptor
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_descriptor
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: props
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

