# Tokenized code fragments for 152143-v1.0.0-bad
# Total center nodes processed: 91
# Total code fragments found: 367

CENTER_NODE: 30064772750
FRAGMENT_COUNT: 5
  ORIGINAL[0]: desc = avcodec_descriptor_get_by_name(name)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: avcodec_descriptor_get_by_name(name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477023
FRAGMENT_COUNT: 9
  ORIGINAL[0]: opt[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: opt[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: opt[1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ]
  ORIGINAL[3]: opt[2]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 2 ]
  ORIGINAL[4]: parse_arg_function(optctx,opt)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[5]: opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: parse_arg_function
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: optctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: opt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771136
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_dict_free(&format_opts)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &format_opts )
  ORIGINAL[1]: &format_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &format_opts
  ORIGINAL[2]: <global> codec_opts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719476805
FRAGMENT_COUNT: 5
  ORIGINAL[0]: print_prefix = 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 1
  ORIGINAL[1]: __builtin_va_copy(vl2,vl)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: vl2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: vl2
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773043
FRAGMENT_COUNT: 4
  ORIGINAL[0]: mkdir(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: tracepoint(stonesoup_trace,trace_location,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: stonesoup_setup_printf_context()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: barrage_wickenburg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477211
FRAGMENT_COUNT: 3
  ORIGINAL[0]: g -> codec_opts = codec_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR2
  ORIGINAL[1]: g -> codec_opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: <global> codec_opts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064773227
FRAGMENT_COUNT: 11
  ORIGINAL[0]: av_image_check_size((s -> width),(s -> height),0,s) || (s -> pix_fmt) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , ( VAR1 -> VAR3 ) , 0 , VAR1 ) || ( VAR1 -> VAR4 ) < 0
  ORIGINAL[1]: !( *pool) && (ret = alloc_buffer(pool,s,pool)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( *pool ) && ( VAR1 = FUN1 ( VAR2 , VAR3 , VAR2 ) ) < 0
  ORIGINAL[2]: !( *pool)
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( *pool )
  ORIGINAL[3]: *pool
  TYPE[3]: CALL
  TOKENIZED[3]: *pool
  ORIGINAL[4]: (ret = alloc_buffer(pool,s,pool)) < 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 = FUN1 ( VAR2 , VAR3 , VAR2 ) ) < 0
  ORIGINAL[5]: ret = alloc_buffer(pool,s,pool)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR2 )
  ORIGINAL[6]: alloc_buffer(pool,s,pool)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , VAR2 , VAR1 )
  ORIGINAL[7]: ret
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pool
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pool
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719478075
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: av_log(s,16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[2]: spec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: spec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640278
FRAGMENT_COUNT: 1
  ORIGINAL[0]: class -> option
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 30064772320
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 68719477759
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *const *da = a
  TYPE[0]: CALL
  TOKENIZED[0]: *const *da = VAR1
  ORIGINAL[1]: da
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: da
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: da
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: da
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771781
FRAGMENT_COUNT: 7
  ORIGINAL[0]: octx -> global_opts . group_def
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3
  ORIGINAL[1]: octx -> global_opts . arg
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: octx -> global_opts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: global_opts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: arg
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: octx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: octx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478341
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *buf = (fb -> priv)
  TYPE[0]: CALL
  TOKENIZED[0]: *buf = ( VAR1 -> VAR2 )
  ORIGINAL[1]: fb -> priv
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476921
FRAGMENT_COUNT: 5
  ORIGINAL[0]: po -> flags & 0x8000
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x8000
  ORIGINAL[1]: *dstcount
  TYPE[1]: CALL
  TOKENIZED[1]: *dstcount
  ORIGINAL[2]: dstcount
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dstcount
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dstcount
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772700
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719476745
FRAGMENT_COUNT: 3
  ORIGINAL[0]: size_filepath = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: retval = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: retval
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640263
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477872
FRAGMENT_COUNT: 4
  ORIGINAL[0]: **filter __attribute__((unused))  = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: **filter FUN1 ( ( VAR1 ) ) = ( ( void * ) 0 )
  ORIGINAL[1]: descr[64]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 64 ]
  ORIGINAL[2]: descr[64]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 64 ]
  ORIGINAL[3]: descr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772885
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *size == ((size_t )(- 1))
  TYPE[0]: CALL
  TOKENIZED[0]: *size == ( ( VAR1 ) ( - 1 ) )
  ORIGINAL[1]: -( *__errno_location())
  TYPE[1]: CALL
  TOKENIZED[1]: - ( *__errno_location ( ) )
  ORIGINAL[2]: *__errno_location()
  TYPE[2]: CALL
  TOKENIZED[2]: *__errno_location ( )
  ORIGINAL[3]: __errno_location()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064772693
FRAGMENT_COUNT: 9
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: pix_desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (pix_desc -> flags) & 2
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) & 2
  ORIGINAL[3]: pix_desc -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pix_desc -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: flags
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pix_desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pix_desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pix_desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773302
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(buf -> refcount > 0)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 > 0 )
  ORIGINAL[1]: buf -> refcount > 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 > 0
  ORIGINAL[2]: buf -> refcount
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477655
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ofmt = av_oformat_next(ofmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: name == ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: name
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: name
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: name
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477642
FRAGMENT_COUNT: 8
  ORIGINAL[0]: idx = locate_option(argc,argv,options,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , \
  ORIGINAL[1]: print_program_info(1 | 8,32)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( 1 | 8 , 32 )
  ORIGINAL[2]: 1 | 8
  TYPE[2]: CALL
  TOKENIZED[2]: 1 | 8
  ORIGINAL[3]: print_all_libs_info(1 | 4,32)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( 1 | 4 , 32 )
  ORIGINAL[4]: 1 | 4
  TYPE[4]: CALL
  TOKENIZED[4]: 1 | 4
  ORIGINAL[5]: print_all_libs_info(1 | 2,32)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( 1 | 2 , 32 )
  ORIGINAL[6]: 1 | 2
  TYPE[6]: CALL
  TOKENIZED[6]: 1 | 2
  ORIGINAL[7]: idx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772436
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *p != 0
  TYPE[0]: CALL
  TOKENIZED[0]: *p != 0
  ORIGINAL[1]: p++
  TYPE[1]: CALL
  TOKENIZED[1]: p++
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477188
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p -> sep
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: p -> sep
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sep
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772130
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret = av_parse_cpu_caps(&flags,arg)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &flags , VAR2 )
  ORIGINAL[1]: av_parse_cpu_caps(&flags,arg)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &flags , VAR1 )
  ORIGINAL[2]: &flags
  TYPE[2]: CALL
  TOKENIZED[2]: &flags
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: arg
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640354
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477953
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt -> long_name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: long_name
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477775
FRAGMENT_COUNT: 8
  ORIGINAL[0]: desc = avcodec_descriptor_next(desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: codecs = (av_calloc(nb_codecs,sizeof(( *codecs))))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 , sizeof ( ( *codecs ) ) ) )
  ORIGINAL[2]: av_calloc(nb_codecs,sizeof(( *codecs)))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , sizeof ( ( *codecs ) ) )
  ORIGINAL[3]: codecs
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: nb_codecs
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codecs
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codecs
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codecs
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771746
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: &g -> VAR1
  ORIGINAL[1]: g -> nb_opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: g -> nb_opts - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 - 1
  ORIGINAL[3]: g -> nb_opts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: nb_opts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: g
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: g
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772670
FRAGMENT_COUNT: 5
  ORIGINAL[0]: name = avio_enum_protocols(&opaque,1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &opaque , 1 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: while (name = avio_enum_protocols(&opaque,1))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( VAR1 = FUN1 ( &opaque , 1 ) )
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640570
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771378
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !po -> name
  TYPE[0]: CALL
  TOKENIZED[0]: !po -> VAR1
  ORIGINAL[1]: - 22
  TYPE[1]: CALL
  TOKENIZED[1]: - 22

CENTER_NODE: 30064771215
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719476802
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772323
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772529
FRAGMENT_COUNT: 3
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: encoder?\
  TYPE[1]: CALL
  TOKENIZED[1]: encoder?\
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640409
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772649
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 68719477384
FRAGMENT_COUNT: 4
  ORIGINAL[0]: log_levels[] = {{\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ ] = { { \
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772118
FRAGMENT_COUNT: 4
  ORIGINAL[0]: max = (strtol(arg,&tail,'\\n'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , &tail , '\\n' ) )
  ORIGINAL[1]: strtol(arg,&tail,'\\n')
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &tail , '\\n' )
  ORIGINAL[2]: max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tail
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772535
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719477045
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: ( *(cur_opt++)) != '-'
  TYPE[1]: CALL
  TOKENIZED[1]: ( * ( cur_opt++ ) ) != '-'
  ORIGINAL[2]: !po -> name && !strcmp(cur_opt,optname) || po -> name && !strcmp(optname,po -> name)
  TYPE[2]: CALL
  TOKENIZED[2]: !po -> VAR1 && !strcmp ( VAR2 , VAR3 ) || VAR4 -> VAR1 && !strcmp ( VAR3 , VAR4 -> VAR1 )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771803
FRAGMENT_COUNT: 7
  ORIGINAL[0]: j < l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: l -> groups[j] . opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] . VAR4
  ORIGINAL[2]: l -> groups[j] . codec_opts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] . VAR4
  ORIGINAL[3]: l -> groups[j]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: l -> groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_opts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: j
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477070
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p = a
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2
  ORIGINAL[1]: p
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: a
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640467
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772117
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719476794
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: AV_PIX_FMT_YUV420P
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_PIX_FMT_YUV420P
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477913
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i < AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_SAMPLE_FMT_NB
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773331
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame -> type != 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 2
  ORIGINAL[1]: i < sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[2]: sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 -> VAR2 ) / sizeof ( VAR1 -> VAR2 [ 0 ] )
  ORIGINAL[3]: sizeof(frame -> data[0])
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 -> VAR2 [ 0 ] )
  ORIGINAL[4]: frame -> data[0]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ 0 ]

CENTER_NODE: 30064772322
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 30064773109
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *size < new_size
  TYPE[0]: CALL
  TOKENIZED[0]: *size < VAR1
  ORIGINAL[1]: *size = new_size
  TYPE[1]: CALL
  TOKENIZED[1]: *size = VAR1
  ORIGINAL[2]: *size
  TYPE[2]: CALL
  TOKENIZED[2]: *size
  ORIGINAL[3]: new_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tmp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772973
FRAGMENT_COUNT: 4
  ORIGINAL[0]: flags = s -> oformat?1 : 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 -> oformat?1 : 2
  ORIGINAL[1]: s -> oformat?1 : 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> oformat?1 : 2
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: prefix
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772049
FRAGMENT_COUNT: 7
  ORIGINAL[0]: env &&  *env
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && *env
  ORIGINAL[1]: ret = av_opt_get_key_value(&env,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( &env , \
  ORIGINAL[2]: av_opt_get_key_value(&env,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &env , \
  ORIGINAL[3]: &env
  TYPE[3]: CALL
  TOKENIZED[3]: &env
  ORIGINAL[4]: &key
  TYPE[4]: CALL
  TOKENIZED[4]: &key
  ORIGINAL[5]: &val
  TYPE[5]: CALL
  TOKENIZED[5]: &val
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772138
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_strerror(err,errbuf,sizeof(errbuf))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , sizeof ( VAR2 ) )
  ORIGINAL[1]: sizeof(errbuf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errbuf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: errbuf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773367
FRAGMENT_COUNT: 4
  ORIGINAL[0]: dalesfolk_simulars = ((char *)((char *)pyobacillosis_overprosperous))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( char * ) ( ( char * ) VAR2 ) )
  ORIGINAL[1]: (char *)((char *)pyobacillosis_overprosperous)
  TYPE[1]: CALL
  TOKENIZED[1]: ( char * ) ( ( char * ) VAR1 )
  ORIGINAL[2]: dalesfolk_simulars
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_trace
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772675
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772172
FRAGMENT_COUNT: 9
  ORIGINAL[0]: flags & 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 2
  ORIGINAL[1]: av_log(((void *)0),level,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , VAR1 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: version >> 16
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 >> 16
  ORIGINAL[4]: version >> 8 & 0xFF
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 >> 8 & 0xFF
  ORIGINAL[5]: version & 0xFF
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 & 0xFF
  ORIGINAL[6]: level
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: indent
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772321
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 68719476873
FRAGMENT_COUNT: 13
  ORIGINAL[0]: (po -> flags & req_flags) != req_flags || alt_flags && !(po -> flags & alt_flags) || po -> flags & rej_flags
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 & VAR3 ) != VAR3 || VAR4 && ! ( VAR1 -> VAR2 & VAR4 ) || VAR1 -> VAR2 & VAR5
  ORIGINAL[1]: po -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: po -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: po -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_strlcpy(buf,po -> name,sizeof(buf))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 -> VAR3 , sizeof ( VAR1 ) )
  ORIGINAL[5]: po -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: po -> argname
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: po -> argname
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: po -> help
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: argname
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: po
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: po
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: po
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719478233
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> flags & 0x4000 || !buf -> linesize[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x4000 || !buf -> VAR3 [ VAR4 ]
  ORIGINAL[1]: buf -> base[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: buf -> base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640377
FRAGMENT_COUNT: 2
  ORIGINAL[0]: c = ( *(template++))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( * ( template++ ) )
  ORIGINAL[1]: while (c = ( *(template++)))
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( VAR1 = ( * ( template++ ) ) )

CENTER_NODE: 30064772653
FRAGMENT_COUNT: 2
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: bsf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719476840
FRAGMENT_COUNT: 6
  ORIGINAL[0]: type == 0x80 && ((int )d) != d
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0x80 && ( ( int ) VAR2 ) != VAR2
  ORIGINAL[1]: d
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: d
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: d
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: d
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: d
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477837
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: nb_codecs
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: nb_codecs
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772650
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 30064772961
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !f && codec_name
  TYPE[0]: CALL
  TOKENIZED[0]: !f && VAR1
  ORIGINAL[1]: snprintf(filename,filename_size,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: base[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: i != 1?\
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 != 1?\
  ORIGINAL[4]: i != 1
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 != 1
  ORIGINAL[5]: filename
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: filename_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_name
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: preset_name
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772582
FRAGMENT_COUNT: 16
  ORIGINAL[0]: codec = next_codec_for_id(desc -> id,codec,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , 0 )
  ORIGINAL[1]: next_codec_for_id(desc -> id,codec,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 , 0 )
  ORIGINAL[2]: desc -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: strcmp(codec -> name,desc -> name)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR2 )
  ORIGINAL[4]: codec -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: desc -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: print_codecs_for_id(desc -> id,0)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 -> VAR2 , 0 )
  ORIGINAL[7]: desc -> id
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: break;
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: break ;
  ORIGINAL[9]: id
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: id
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: codec
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: desc
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: codec
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: desc
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: codec
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476894
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p - name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2
  ORIGINAL[1]: p
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772850
FRAGMENT_COUNT: 4
  ORIGINAL[0]: yesno = av_toupper(c) == 'Y'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 ) == 'Y'
  ORIGINAL[1]: av_toupper(c) == 'Y'
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) == 'Y'
  ORIGINAL[2]: av_toupper(c)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: yesno
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771182
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0
  ORIGINAL[1]: exit(1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( 1 )
  ORIGINAL[2]: us
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640461
FRAGMENT_COUNT: 1
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477987
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *topic
  TYPE[0]: CALL
  TOKENIZED[0]: *topic
  ORIGINAL[1]: !strcmp(topic,\
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 , \
  ORIGINAL[2]: strcmp(topic,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: topic
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: topic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: topic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: topic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640414
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771970
FRAGMENT_COUNT: 3
  ORIGINAL[0]: octx -> cur_group . nb_opts || codec_opts || format_opts || resample_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 || VAR4 || VAR5 || VAR6
  ORIGINAL[1]: av_log(((void *)0),24,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 24 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 68719477754
FRAGMENT_COUNT: 4
  ORIGINAL[0]: prev = (av_codec_next(prev))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR1 ) )
  ORIGINAL[1]: (prev -> id) == id
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[2]: prev -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477946
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt -> long_name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> extensions
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: printf(\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( \
  ORIGINAL[5]: fmt -> extensions
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: fmt -> priv_class
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: priv_class
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771431
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: *o = &g -> opts[i]
  TYPE[1]: CALL
  TOKENIZED[1]: *o = &g -> VAR1 [ VAR2 ]
  ORIGINAL[2]: &g -> opts[i]
  TYPE[2]: CALL
  TOKENIZED[2]: &g -> VAR1 [ VAR2 ]
  ORIGINAL[3]: o
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772658
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772702
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < 63;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < 63 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640573
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771584
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(p = (strchr(opt,':')))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 = ( FUN1 ( VAR2 , ':' ) ) )
  ORIGINAL[1]: p = opt + strlen(opt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + FUN1 ( VAR2 )
  ORIGINAL[2]: opt + strlen(opt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + FUN1 ( VAR1 )
  ORIGINAL[3]: strlen(opt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640399
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771562
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: fputc((i < argc - 1?32 : '\\n'),report_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 < VAR2 - 1?32 : '\\n' ) , VAR3 )
  ORIGINAL[2]: i < argc - 1?32 : '\\n'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 - 1?32 : '\\n'
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: <global> report_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 47244640404
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773350
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_freep((&buf -> base[0]))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &buf -> VAR1 [ 0 ] ) )
  ORIGINAL[1]: &buf -> base[0]
  TYPE[1]: CALL
  TOKENIZED[1]: &buf -> VAR1 [ 0 ]
  ORIGINAL[2]: buf -> base[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[3]: buf -> base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

