# Tokenized code fragments for 153175-v1.0.0-bad
# Total center nodes processed: 198
# Total code fragments found: 799

CENTER_NODE: 30064771654
FRAGMENT_COUNT: 18
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> iformat -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: !s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: !s -> VAR1
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: &s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: &s -> VAR1
  ORIGINAL[6]: s -> iformat
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 68719476737
FRAGMENT_COUNT: 4
  ORIGINAL[0]: va_start(argptr, format)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: format
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: format
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477561
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481133
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &time1
  TYPE[0]: CALL
  TOKENIZED[0]: &time1
  ORIGINAL[1]: time1
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: time1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: time1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772981
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *pkt_buf_end = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf_end = ( ( void * ) 0 )
  ORIGINAL[1]: *pkt_buf_end
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buf_end
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064776295
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244640812
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480250
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !streams
  TYPE[0]: CALL
  TOKENIZED[0]: !streams
  ORIGINAL[1]: s -> streams = streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR2
  ORIGINAL[2]: st = (av_mallocz(sizeof(AVStream )))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( FUN1 ( sizeof ( VAR2 ) ) )
  ORIGINAL[3]: av_mallocz(sizeof(AVStream ))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( sizeof ( VAR1 ) )
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVStream
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640607
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774972
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> chapters[i] -> end == ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == ( ( VAR5 ) 0x8000000000000000UL )
  ORIGINAL[2]: s -> chapters[i] -> end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 47244641156
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476852
FRAGMENT_COUNT: 6
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: av_strncasecmp(name,names,len)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: names
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771885
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> request_probe > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 0
  ORIGINAL[1]: av_log(s,48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[2]: st -> index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> probe_packets
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> probe_packets
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: probe_packets
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772595
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: st -> cur_dts = cur_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR2
  ORIGINAL[2]: st -> cur_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: cur_dts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: cur_dts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773650
FRAGMENT_COUNT: 5
  ORIGINAL[0]: timestamp == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: entries = (av_fast_realloc(( *index_entries),index_entries_allocated_size,( *nb_index_entries + 1) * sizeof(AVIndexEntry )))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( ( *index_entries ) , VAR2 , ( *nb_index_entries + 1 ) * sizeof ( VAR3 ) ) )
  ORIGINAL[2]: av_fast_realloc(( *index_entries),index_entries_allocated_size,( *nb_index_entries + 1) * sizeof(AVIndexEntry ))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( *index_entries ) , VAR1 , ( *nb_index_entries + 1 ) * sizeof ( VAR2 ) )
  ORIGINAL[3]: entries
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: entries
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774230
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: for (i = 0;i < ic -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641124
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771116
FRAGMENT_COUNT: 1
  ORIGINAL[0]: before[200]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 200 ]

CENTER_NODE: 30064776359
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter
  ORIGINAL[1]: !chapter
  TYPE[1]: CALL
  TOKENIZED[1]: !chapter
  ORIGINAL[2]: chapter -> time_base = time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR2
  ORIGINAL[3]: chapter -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: time_base
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chapter
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: time_base
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: chapter
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: chapter
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: chapter
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641144
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771491
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ic -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ic -> iformat -> read_header
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: ic -> iformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: iformat
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: read_header
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640787
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771120
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: 'h' >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 'h' >= 100

CENTER_NODE: 30064771344
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: old_size = pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: old_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477049
FRAGMENT_COUNT: 3
  ORIGINAL[0]: score = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477240
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl -> pkt =  *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = *pkt
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773775
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774894
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: tags -> tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: tag
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477587
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (st -> first_dts) < (1LL << st -> pts_wrap_bits) - (1LL << st -> pts_wrap_bits - 3)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) < ( 1LL << VAR1 -> VAR3 ) - ( 1LL << VAR1 -> VAR3 - 3 )
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> pts_wrap_bits
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> pts_wrap_bits
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pts_wrap_bits
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640698
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773512
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &s -> packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: &s -> VAR1
  ORIGINAL[1]: s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: packet_buffer
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771094
FRAGMENT_COUNT: 4
  ORIGINAL[0]: data_size < buffer_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: stonesoup_exit_flag = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;
  ORIGINAL[3]: <global> stonesoup_exit_flag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 68719477253
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> streams[i] -> disposition & 0x0400 && (s -> streams[i] -> discard) < AVDISCARD_ALL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 & 0x0400 && ( VAR1 -> VAR2 [ VAR3 ] -> VAR5 ) < VAR6
  ORIGINAL[1]: copy = s -> streams[i] -> attached_pic
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[2]: copy . destruct
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: &copy
  TYPE[3]: CALL
  TOKENIZED[3]: &copy
  ORIGINAL[4]: destruct
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: copy
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: copy
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479518
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776604
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719479482
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_F64BE : AV_CODEC_ID_PCM_F64LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_F64BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F64BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_F64LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777096
FRAGMENT_COUNT: 16
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: &new_tb . num
  TYPE[1]: CALL
  TOKENIZED[1]: &new_tb . VAR1
  ORIGINAL[2]: &new_tb . den
  TYPE[2]: CALL
  TOKENIZED[2]: &new_tb . VAR1
  ORIGINAL[3]: new_tb . num != pts_num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 != VAR3
  ORIGINAL[4]: new_tb . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: av_log(((void *)0),24,\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( ( ( void * ) 0 ) , 24 , \
  ORIGINAL[6]: (void *)0
  TYPE[6]: CALL
  TOKENIZED[6]: ( void * ) 0
  ORIGINAL[7]: s -> index
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: num
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: index
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pts_num
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pts_den
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: new_tb
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pts_num
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: new_tb
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244641167
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776443
FRAGMENT_COUNT: 5
  ORIGINAL[0]: sizeof(tmp) > len + 1?len + 1 : sizeof(tmp)
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( VAR1 ) > VAR2 + 1?len + 1 : sizeof ( VAR1 )
  ORIGINAL[1]: sizeof(tmp) > len + 1
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 ) > VAR2 + 1
  ORIGINAL[2]: len + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: len + 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640687
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774178
FRAGMENT_COUNT: 3
  ORIGINAL[0]: stream_index == - 1 && s -> nb_streams == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 1 && VAR2 -> VAR3 == 1
  ORIGINAL[1]: (AVRational ){(1), (1000000)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[2]: {(1), (1000000)}
  TYPE[2]: CALL
  TOKENIZED[2]: { ( 1 ) , ( 1000000 ) }

CENTER_NODE: 30064771608
FRAGMENT_COUNT: 7
  ORIGINAL[0]: score <= 100 / 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 100 / 4
  ORIGINAL[1]: av_log(logctx,48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[2]: ( *fmt) -> name
  TYPE[2]: CALL
  TOKENIZED[2]: ( *fmt ) -> VAR1
  ORIGINAL[3]: probe_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: logctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: probe_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064775022
FRAGMENT_COUNT: 8
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: c -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: c -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: 101L * c -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: 101L * VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: c -> time_base . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: c -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: c -> time_base
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: den
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641129
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774903
FRAGMENT_COUNT: 7
  ORIGINAL[0]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[1]: tags[i] . id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[2]: tags[i] . tag
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[3]: tags[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: tag
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479206
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ic -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640677
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641024
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 1
  ORIGINAL[0]: fmt -> name && short_name && match_format(short_name,fmt -> name)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 && FUN1 ( VAR3 , VAR1 -> VAR2 )

CENTER_NODE: 68719481197
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640532
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641022
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481200
FRAGMENT_COUNT: 19
  ORIGINAL[0]: undef = {(0), (1)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( 0 ) , ( 1 ) }
  ORIGINAL[1]: stream_sample_aspect_ratio = stream?stream -> sample_aspect_ratio : undef
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = stream?stream -> VAR2 : VAR3
  ORIGINAL[2]: stream?stream -> sample_aspect_ratio : undef
  TYPE[2]: CALL
  TOKENIZED[2]: stream?stream -> VAR1 : VAR2
  ORIGINAL[3]: stream_sample_aspect_ratio . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: stream_sample_aspect_ratio . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: stream_sample_aspect_ratio . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: stream_sample_aspect_ratio . den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: stream_sample_aspect_ratio . num
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: stream_sample_aspect_ratio . den
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 . VAR2
  ORIGINAL[9]: stream_sample_aspect_ratio
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: stream
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: stream_sample_aspect_ratio
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: stream_sample_aspect_ratio
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: stream_sample_aspect_ratio
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: stream_sample_aspect_ratio
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: stream_sample_aspect_ratio
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: stream_sample_aspect_ratio
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: stream_sample_aspect_ratio
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: stream_sample_aspect_ratio
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 68719480893
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[1]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[2]: hex_table_uc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064775879
FRAGMENT_COUNT: 12
  ORIGINAL[0]: i < ic -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> programs[i] == last
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] == VAR4
  ORIGINAL[3]: !last
  TYPE[3]: CALL
  TOKENIZED[3]: !last
  ORIGINAL[4]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[5]: nb_programs
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719479181
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: 8 * filesize
  TYPE[1]: CALL
  TOKENIZED[1]: 8 * VAR1
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: time_base
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719479515
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: tags
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479538
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: id = ff_codec_get_id(tags[i],tag)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 [ VAR3 ] , VAR4 )
  ORIGINAL[2]: ff_codec_get_id(tags[i],tag)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 [ VAR2 ] , VAR3 )
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640835
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641336
FRAGMENT_COUNT: 1
  ORIGINAL[0]: match_host_pattern(start,hostname)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )

CENTER_NODE: 30064774426
FRAGMENT_COUNT: 11
  ORIGINAL[0]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> duration = av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 -> VAR2 , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR1 -> VAR5 )
  ORIGINAL[2]: st -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , ( ( VAR3 ) { ( 1 ) , ( 1000000 ) } ) , VAR4 -> VAR5 )
  ORIGINAL[4]: duration
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640661
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641054
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641150
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481198
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640662
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476900
FRAGMENT_COUNT: 2
  ORIGINAL[0]: type == AVMEDIA_TYPE_SUBTITLE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: AV_CODEC_ID_NONE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064776933
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avcl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: level
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dump_payload
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771115
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: mg_destroy_server(&stonesoup_server)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &stonesoup_server )
  ORIGINAL[2]: &stonesoup_server
  TYPE[2]: CALL
  TOKENIZED[2]: &stonesoup_server
  ORIGINAL[3]: stonesoup_server
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477549
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: frame_size <= 0 || st -> codec -> sample_rate <= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 <= 0 || VAR2 -> VAR3 -> VAR4 <= 0
  ORIGINAL[2]: *pden
  TYPE[2]: CALL
  TOKENIZED[2]: *pden
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772232
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pktl == s -> parse_queue_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 -> VAR3
  ORIGINAL[1]: s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: packet_buffer
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640550
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772029
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (pkt -> stream_index) >= ((unsigned int )(s -> nb_streams))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) >= ( ( unsigned int ) ( VAR3 -> VAR4 ) )
  ORIGINAL[1]: st = s -> streams[pkt -> stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 -> VAR5 ]
  ORIGINAL[2]: s -> streams[pkt -> stream_index]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 -> VAR4 ]
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771130
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: sizeof(\
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( \

CENTER_NODE: 47244641178
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771284
FRAGMENT_COUNT: 8
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: match_format(short_name,fmt -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: fmt -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: name
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640666
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641153
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641181
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777371
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags |= AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 |= VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sample_rate
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774766
FRAGMENT_COUNT: 3
  ORIGINAL[0]: got_picture = 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 1
  ORIGINAL[1]: got_picture
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641296
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640809
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771126
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 63 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 63 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 63 << 8

CENTER_NODE: 30064773533
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774677
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_log(ic,48,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[1]: ((double )(ic -> start_time)) / 1000000
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( double ) ( VAR1 -> VAR2 ) ) / 1000000
  ORIGINAL[2]: (double )(ic -> start_time)
  TYPE[2]: CALL
  TOKENIZED[2]: ( double ) ( VAR1 -> VAR2 )
  ORIGINAL[3]: ((double )(ic -> duration)) / 1000000
  TYPE[3]: CALL
  TOKENIZED[3]: ( ( double ) ( VAR1 -> VAR2 ) ) / 1000000
  ORIGINAL[4]: ic -> bit_rate / 1000
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 / 1000
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771131
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774304
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p -> start_time == ((int64_t )0x8000000000000000UL) || p -> start_time > start_time1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR2 > VAR4
  ORIGINAL[1]: p -> start_time = start_time1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: p -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: start_time1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478427
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ((unsigned int )(st -> nb_index_entries)) >= max_entries
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( unsigned int ) ( VAR1 -> VAR2 ) ) >= VAR3
  ORIGINAL[1]: 2 * i < st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: 2 * VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: 2 * i
  TYPE[2]: CALL
  TOKENIZED[2]: 2 * VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719480707
FRAGMENT_COUNT: 4
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: level
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777084
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c >= 'A' && c <= 'F'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 'A' && VAR1 <= 'F'
  ORIGINAL[1]: c >= 'A'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 'A'
  ORIGINAL[2]: c <= 'F'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 'F'
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640844
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641175
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772482
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> first_dts != ((int64_t )0x8000000000000000UL) || dts == ((int64_t )0x8000000000000000UL) || st -> cur_dts == ((int64_t )0x8000000000000000UL) || is_relative(dts)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR4 == ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR5 == ( ( VAR3 ) 0x8000000000000000UL ) || FUN1 ( VAR4 )
  ORIGINAL[1]: st -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: st -> start_time = pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = VAR3
  ORIGINAL[5]: st -> start_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: start_time
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pts
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772999
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !pkt
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt
  ORIGINAL[1]: av_init_packet(&flush_pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &flush_pkt )
  ORIGINAL[2]: &flush_pkt
  TYPE[2]: CALL
  TOKENIZED[2]: &flush_pkt
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777658
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: hailes_overquietness
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641227
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641147
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772875
FRAGMENT_COUNT: 11
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL) || pkt -> dts != ((int64_t )0x8000000000000000UL) || pkt -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR5
  ORIGINAL[1]: pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: update_initial_timestamps(s,pkt -> stream_index,pkt -> pts,pkt -> pts,pkt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 , VAR2 -> VAR4 , VAR2 -> VAR4 , VAR2 )
  ORIGINAL[4]: pkt -> pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> pts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pts
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719476833
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *q = '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: *q = '\\0'
  ORIGINAL[1]: av_strcasecmp(ext1,ext)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: ( *p) == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *p ) == '\\0'
  ORIGINAL[3]: ext
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ext1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ext1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ext1
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ext
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772106
FRAGMENT_COUNT: 8
  ORIGINAL[0]: enc -> bit_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (enc -> codec_id) == AV_CODEC_ID_WMAV1 || (enc -> codec_id) == AV_CODEC_ID_WMAV2
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[2]: ((int64_t )size) * 8 * (enc -> sample_rate) / (enc -> bit_rate)
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( VAR1 ) VAR2 ) * 8 * ( VAR3 -> VAR4 ) / ( VAR3 -> VAR5 )
  ORIGINAL[3]: ((int64_t )size) * 8 * (enc -> sample_rate)
  TYPE[3]: CALL
  TOKENIZED[3]: ( ( VAR1 ) VAR2 ) * 8 * ( VAR3 -> VAR4 )
  ORIGINAL[4]: enc -> bit_rate
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: bit_rate
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: enc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: enc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773606
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> time_base . num * ((int64_t )ref_st -> time_base . den)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[2]: st -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: st -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (int64_t )ref_st -> time_base . den
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) VAR2 -> VAR3 . VAR4
  ORIGINAL[5]: num
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640806
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641107
FRAGMENT_COUNT: 2
  ORIGINAL[0]: c == '%'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '%'
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719477340
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> video_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640268
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773432
FRAGMENT_COUNT: 6
  ORIGINAL[0]: eof && next_pkt -> pts == ((int64_t )0x8000000000000000UL) && last_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 -> VAR3 == ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: next_pkt -> pts = last_dts + (next_pkt -> duration)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 + ( VAR1 -> VAR4 )
  ORIGINAL[2]: next_pkt -> pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: last_dts + (next_pkt -> duration)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + ( VAR2 -> VAR3 )
  ORIGINAL[4]: next_pkt -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: last_dts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641049
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771118
FRAGMENT_COUNT: 1
  ORIGINAL[0]: after[200]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 200 ]

CENTER_NODE: 68719476982
FRAGMENT_COUNT: 9
  ORIGINAL[0]: buf[1024]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1024 ]
  ORIGINAL[1]: filename && av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && FUN1 ( VAR2 , ( sizeof ( VAR2 ) ) , VAR1 , 1 ) >= 0
  ORIGINAL[2]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[3]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[4]: sizeof(buf)
  TYPE[4]: CALL
  TOKENIZED[4]: sizeof ( VAR1 )
  ORIGINAL[5]: filename
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: buf
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: filename
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064777681
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_i < 128
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 128
  ORIGINAL[1]: stonesoup_data.buffer[stonesoup_i] = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 [ VAR3 ] = 0
  ORIGINAL[2]: stonesoup_data.buffer[stonesoup_i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 [ VAR3 ]
  ORIGINAL[3]: stonesoup_i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640828
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641141
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641208
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719476936
FRAGMENT_COUNT: 4
  ORIGINAL[0]: orig_size = size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2
  ORIGINAL[1]: orig_size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: orig_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480560
FRAGMENT_COUNT: 15
  ORIGINAL[0]: ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ic -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ic -> start_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ic -> bit_rate
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ic -> nb_chapters
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: j < ic -> nb_programs
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 < VAR2 -> VAR3
  ORIGINAL[9]: ic -> nb_programs
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: ic -> programs
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: programs
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: name
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ic
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ic
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719481257
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *(spec++)) == ':'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( spec++ ) ) == ':'
  ORIGINAL[1]: index = (strtol(spec,((void *)0),0))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 , ( ( void * ) 0 ) , 0 ) )
  ORIGINAL[2]: i = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478927
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(s -> iformat -> flags & 0x4000)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 -> VAR3 & 0x4000 )
  ORIGINAL[1]: ff_read_frame_flush(s)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: seek_frame_generic(s,stream_index,timestamp,flags)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640382
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat -> priv_class
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 47244641133
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640595
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640821
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641164
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640807
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478547
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640736
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ret >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0

CENTER_NODE: 30064776829
FRAGMENT_COUNT: 11
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: av_log(avcl,level,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: buf[i + j]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 + VAR3 ]
  ORIGINAL[3]: i + j
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + VAR2
  ORIGINAL[4]: buf[i + j]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 + VAR3 ]
  ORIGINAL[5]: buf[i + j]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 + VAR3 ]
  ORIGINAL[6]: avcl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: level
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: buf
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: buf
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: buf
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719480123
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !decoder
  TYPE[1]: CALL
  TOKENIZED[1]: !decoder
  ORIGINAL[2]: avctx -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bit_rate
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: decoder_ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: bitrate
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773754
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !(flags & 4)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 & 4 )
  ORIGINAL[1]: m >= 0 && m < nb_entries && !(entries[m] . flags & 0x1)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0 && VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] . VAR4 & 0x1 )
  ORIGINAL[2]: m >= 0 && m < nb_entries
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0 && VAR1 < VAR2
  ORIGINAL[3]: m >= 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 >= 0
  ORIGINAL[4]: m < nb_entries
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 < VAR2
  ORIGINAL[5]: m
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: m
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: nb_entries
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776857
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481332
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> codec -> width == 1440
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1440
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777617
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !strcmp(pattern,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: pattern[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: pattern[0] == '.'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] == ' . '
  ORIGINAL[3]: pattern[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]
  ORIGINAL[4]: pattern
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pattern
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pattern
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pattern
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pattern
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pattern
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640282
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640815
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641149
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719477060
FRAGMENT_COUNT: 3
  ORIGINAL[0]: {(\
  TYPE[0]: CALL
  TOKENIZED[0]: { ( \
  ORIGINAL[1]: AV_CODEC_ID_EAC3
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AVMEDIA_TYPE_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776063
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&st -> priv_data))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &st -> VAR1 ) )
  ORIGINAL[1]: &st -> priv_data
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719480981
FRAGMENT_COUNT: 6
  ORIGINAL[0]: local_pkt . stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: local_pkt . pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: pts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: local_pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: local_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640657
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776412
FRAGMENT_COUNT: 5
  ORIGINAL[0]: v % (100 * 1000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % ( 100 * 1000 )
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: d / 1000
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 / 1000
  ORIGINAL[4]: postfix
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064775147
FRAGMENT_COUNT: 9
  ORIGINAL[0]: &thread_opt
  TYPE[0]: CALL
  TOKENIZED[0]: &thread_opt
  ORIGINAL[1]: &thread_opt
  TYPE[1]: CALL
  TOKENIZED[1]: &thread_opt
  ORIGINAL[2]: options?&options[i] : &thread_opt
  TYPE[2]: CALL
  TOKENIZED[2]: options?&options [ VAR1 ] : &thread_opt
  ORIGINAL[3]: &thread_opt
  TYPE[3]: CALL
  TOKENIZED[3]: &thread_opt
  ORIGINAL[4]: &thread_opt
  TYPE[4]: CALL
  TOKENIZED[4]: &thread_opt
  ORIGINAL[5]: thread_opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: options
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: thread_opt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: thread_opt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064776370
FRAGMENT_COUNT: 14
  ORIGINAL[0]: idx >= ac -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2 -> VAR3
  ORIGINAL[1]: i < ac -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: ac -> nb_programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ac -> programs[i] -> id != progid
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 != VAR5
  ORIGINAL[4]: ac -> programs[i] -> id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: ac -> programs[i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[6]: ac -> programs
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: for (i = 0;i < ac -> nb_programs;i++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[8]: programs
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: id
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ac
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: progid
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244640423
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777344
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ofmt -> codec_tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !(!av_codec_get_tag(ofmt -> codec_tag,codec_id))
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( !av_codec_get_tag ( VAR1 -> VAR2 , VAR3 ) )
  ORIGINAL[2]: !av_codec_get_tag(ofmt -> codec_tag,codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: !av_codec_get_tag ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[3]: av_codec_get_tag(ofmt -> codec_tag,codec_id)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , VAR3 )

CENTER_NODE: 68719480238
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> iformat -> read_close
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: (s -> iformat -> read_close)(s)
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[6]: avformat_free_context(s)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 )
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719479340
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771289
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: remaining = s -> maxsize - avio_tell(s)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 - FUN1 ( VAR2 )
  ORIGINAL[2]: s -> maxsize - avio_tell(s)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 - FUN1 ( VAR1 )
  ORIGINAL[3]: s -> maxsize
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avio_tell(s)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: remaining
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776531
FRAGMENT_COUNT: 24
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: st -> codec -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> avg_frame_rate . den && st -> avg_frame_rate . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 && VAR1 -> VAR2 . VAR4
  ORIGINAL[3]: st -> avg_frame_rate . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: st -> avg_frame_rate
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> time_base . den && st -> time_base . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3 && VAR1 -> VAR2 . VAR4
  ORIGINAL[6]: st -> time_base . den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 . VAR3
  ORIGINAL[7]: st -> time_base
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> codec -> time_base . den && st -> codec -> time_base . num
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 -> VAR3 . VAR4 && VAR1 -> VAR2 -> VAR3 . VAR5
  ORIGINAL[9]: st -> codec -> time_base . den
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[10]: st -> codec -> time_base
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[11]: st -> codec
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: avg_frame_rate
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: den
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: time_base
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: den
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: codec
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: time_base
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: den
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: AVMEDIA_TYPE_VIDEO
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: st
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: st
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: st
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244640908
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480777
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064777220
FRAGMENT_COUNT: 5
  ORIGINAL[0]: dest && dest < dest_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 < VAR2
  ORIGINAL[1]: *(dest++) = ptr[1]
  TYPE[1]: CALL
  TOKENIZED[1]: * ( dest++ ) = VAR1 [ 1 ]
  ORIGINAL[2]: *(dest++)
  TYPE[2]: CALL
  TOKENIZED[2]: * ( dest++ )
  ORIGINAL[3]: ptr[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640416
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640670
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640658
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771183
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: p = &( *p) -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = & ( *p ) -> VAR2
  ORIGINAL[2]: &( *p) -> next
  TYPE[2]: CALL
  TOKENIZED[2]: & ( *p ) -> VAR1
  ORIGINAL[3]: while (*p != ((void *)0))
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: while ( *p != ( ( void * ) 0 ) )
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641043
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640665
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640272
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640669
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480971
FRAGMENT_COUNT: 7
  ORIGINAL[0]: authorization && authorization[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ 0 ]
  ORIGINAL[1]: av_strlcatf(str,size,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: authorization
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719480165
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478646
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (ret = avio_seek(s -> pb,pos,0)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 , 0 ) ) < 0
  ORIGINAL[2]: ff_update_cur_dts(s,st,ts)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771117
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[128]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 128 ]

CENTER_NODE: 30064774009
FRAGMENT_COUNT: 6
  ORIGINAL[0]: avio_size(s -> pb)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481079
FRAGMENT_COUNT: 4
  ORIGINAL[0]: rel[1] == '/'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '/'
  ORIGINAL[1]: sep[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: sep
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: sep
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641104
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064777008
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ( *p) == '[' && (brk = (strchr(p,']'))) && brk < ls
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) == ' [ ' && ( VAR1 = ( FUN1 ( VAR2 , ' ] ' ) ) ) && VAR1 < VAR3
  ORIGINAL[1]: hostname_size > brk - p?brk - p : hostname_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2 - p?brk - VAR3 : VAR1
  ORIGINAL[2]: hostname_size > brk - p
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > VAR2 - VAR3
  ORIGINAL[3]: brk - p
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: brk - p
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 - VAR2
  ORIGINAL[5]: hostname_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: brk
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: hostname_size
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771438
FRAGMENT_COUNT: 5
  ORIGINAL[0]: score_ret >  *score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > *score_max
  ORIGINAL[1]: *score_max = score_ret
  TYPE[1]: CALL
  TOKENIZED[1]: *score_max = VAR1
  ORIGINAL[2]: *score_max
  TYPE[2]: CALL
  TOKENIZED[2]: *score_max
  ORIGINAL[3]: score_ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773724
FRAGMENT_COUNT: 5
  ORIGINAL[0]: &st -> index_entries_allocated_size
  TYPE[0]: CALL
  TOKENIZED[0]: &st -> VAR1
  ORIGINAL[1]: st -> index_entries_allocated_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: index_entries_allocated_size
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640699
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775014
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: (const int [6UL]){(24), (30), (60), (12), (15), (48)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }
  ORIGINAL[2]: {(24), (30), (60), (12), (15), (48)}
  TYPE[2]: CALL
  TOKENIZED[2]: { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }

CENTER_NODE: 30064772067
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: (avctx -> codec_id) == AV_CODEC_ID_MP1
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[4]: avctx -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: AV_CODEC_ID_MP1
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: AV_CODEC_ID_MP2
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640808
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771407
FRAGMENT_COUNT: 21
  ORIGINAL[0]: fmt1 -> read_probe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: fmt1 -> extensions && av_match_ext(lpd . filename,fmt1 -> extensions)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && FUN1 ( VAR3 . VAR4 , VAR1 -> VAR2 )
  ORIGINAL[2]: fmt1 -> extensions
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_match_ext(lpd . filename,fmt1 -> extensions)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 . VAR2 , VAR3 -> VAR4 )
  ORIGINAL[4]: lpd . filename
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: fmt1 -> extensions
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: fmt1 -> extensions
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: extensions
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: filename
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: extensions
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: fmt1
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt1
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: fmt1
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: fmt1
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: fmt1
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: fmt1
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: lpd
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: fmt1
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: fmt1
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: fmt1
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: fmt1
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 47244640818
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478396
FRAGMENT_COUNT: 11
  ORIGINAL[0]: st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> last_IP_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> first_dts == ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> cur_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> cur_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> reference_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> probe_packets
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: cur_dts
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244641044
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772209
FRAGMENT_COUNT: 8
  ORIGINAL[0]: desc -> props & 1 << 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 1 << 0
  ORIGINAL[1]: desc -> props
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: 1 << 0
  TYPE[2]: CALL
  TOKENIZED[2]: 1 << 0
  ORIGINAL[3]: props
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777255
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: s -> streams[i] -> id == id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773174
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pkt = pktl -> pkt
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt = VAR1 -> VAR2
  ORIGINAL[1]: *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt_buffer
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640531
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478846
FRAGMENT_COUNT: 11
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (ret = avio_seek(s -> pb,ie -> pos,0)) < 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 -> VAR5 , 0 ) ) < 0
  ORIGINAL[3]: ff_update_cur_dts(s,st,ie -> timestamp)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 , VAR3 -> VAR4 )
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ie
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640824
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478674
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ts_max == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: pos_max - step
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: &pos_max
  TYPE[2]: CALL
  TOKENIZED[2]: &pos_max
  ORIGINAL[3]: ts_max == ((int64_t )0x8000000000000000UL) && 2 * limit > step
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL ) && 2 * VAR3 > VAR4
  ORIGINAL[4]: pos_max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_max
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: step
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pos_max
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641136
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776021
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_pause(s -> pb,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , 1 )
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640551
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776093
FRAGMENT_COUNT: 27
  ORIGINAL[0]: s -> iformat && s -> iformat -> priv_class && s -> priv_data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 && VAR1 -> VAR4
  ORIGINAL[1]: s -> priv_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_opt_free(s -> priv_data)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: s -> priv_data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: &s -> priv_data
  TYPE[4]: CALL
  TOKENIZED[4]: &s -> VAR1
  ORIGINAL[5]: s -> priv_data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: priv_data
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: s
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: s
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: s
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: s
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: s
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: s
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: s
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: s
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1

CENTER_NODE: 30064776764
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_gettime() / 1000 * 1000
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[1]: av_gettime() / 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000
  ORIGINAL[2]: av_gettime()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

