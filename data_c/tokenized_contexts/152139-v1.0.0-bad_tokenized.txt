# Tokenized code fragments for 152139-v1.0.0-bad
# Total center nodes processed: 133
# Total code fragments found: 562

CENTER_NODE: 47244640701
FRAGMENT_COUNT: 2
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;

CENTER_NODE: 68719479201
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: av_log_ask_for_sample(avc,((void *)0))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( void * ) 0 ) )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: want_sample
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771323
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (s -> codec_id) == AV_CODEC_ID_IFF_ILBM || (s -> codec_id) == AV_CODEC_ID_IFF_BYTERUN1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: (s -> codec_id) == AV_CODEC_ID_IFF_ILBM
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: (s -> codec_id) == AV_CODEC_ID_IFF_BYTERUN1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: w_align = (w_align > 8?w_align : 8)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = ( VAR1 > 8?w_align : 8 )
  ORIGINAL[4]: w_align > 8?w_align : 8
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 > 8?w_align : 8
  ORIGINAL[5]: w_align > 8
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 > 8
  ORIGINAL[6]: w_align
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: w_align
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: width
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477206
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !buf -> base[0]
  TYPE[0]: CALL
  TOKENIZED[0]: !buf -> VAR1 [ 0 ]
  ORIGINAL[1]: picture . linesize
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: picture . linesize
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: linesize
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: picture
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478537
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: av_freep((&sub -> rects[i]))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( &sub -> VAR1 [ VAR2 ] ) )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477588
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: AVMEDIA_TYPE_AUDIO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: bits_per_sample
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774350
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ff_lockmgr_cb(&codec_mutex,AV_LOCK_DESTROY)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &codec_mutex , VAR1 )
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 30064772070
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774062
FRAGMENT_COUNT: 3
  ORIGINAL[0]: 1 && avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 && VAR1 -> VAR2 & 1
  ORIGINAL[1]: avctx -> active_thread_type & 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 1
  ORIGINAL[2]: avctx -> active_thread_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 30064774111
FRAGMENT_COUNT: 5
  ORIGINAL[0]: &avci -> audio_data
  TYPE[0]: CALL
  TOKENIZED[0]: &avci -> VAR1
  ORIGINAL[1]: avci -> audio_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: audio_data
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avci
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772979
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> flags & 0x0200 && avctx -> stats_out
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0200 && VAR1 -> VAR3
  ORIGINAL[1]: avctx -> stats_out[0] = '\\0'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ] = '\\0'
  ORIGINAL[2]: avctx -> stats_out[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772078
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771230
FRAGMENT_COUNT: 4
  ORIGINAL[0]: **p = ptr
  TYPE[0]: CALL
  TOKENIZED[0]: **p = VAR1
  ORIGINAL[1]: p
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: min_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476847
FRAGMENT_COUNT: 4
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: *size = min_size
  TYPE[1]: CALL
  TOKENIZED[1]: *size = VAR1
  ORIGINAL[2]: ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772056
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !frame
  TYPE[0]: CALL
  TOKENIZED[0]: !frame
  ORIGINAL[1]: !( *frame)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( *frame )
  ORIGINAL[2]: *frame
  TYPE[2]: CALL
  TOKENIZED[2]: *frame
  ORIGINAL[3]: *frame
  TYPE[3]: CALL
  TOKENIZED[3]: *frame
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640539
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477512
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *fmt ) != VAR1 && FUN1 ( *fmt )
  ORIGINAL[1]: ( *fmt) != AV_PIX_FMT_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: ( *fmt ) != VAR1
  ORIGINAL[2]: *fmt
  TYPE[2]: CALL
  TOKENIZED[2]: *fmt
  ORIGINAL[3]: AV_PIX_FMT_NONE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773957
FRAGMENT_COUNT: 7
  ORIGINAL[0]: profile == - 'c'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 'c'
  ORIGINAL[1]: !codec -> profiles
  TYPE[1]: CALL
  TOKENIZED[1]: !codec -> VAR1
  ORIGINAL[2]: codec -> profiles
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec -> profiles
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: profiles
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771890
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(i < avci -> buffer_count)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 < VAR2 -> VAR3 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 68719477565
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477547
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477579
FRAGMENT_COUNT: 2
  ORIGINAL[0]: *sub
  TYPE[0]: CALL
  TOKENIZED[0]: *sub
  ORIGINAL[1]: sub
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772024
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_frame_set_best_effort_timestamp(frame,((int64_t )0x8000000000000000UL))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( VAR2 ) 0x8000000000000000UL ) )
  ORIGINAL[1]: (int64_t )0x8000000000000000UL
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640675
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477492
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772095
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479213
FRAGMENT_COUNT: 6
  ORIGINAL[0]: **p = &first_hwaccel
  TYPE[0]: CALL
  TOKENIZED[0]: **p = &first_hwaccel
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: p = &( *p) -> next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = & ( *p ) -> VAR2
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773077
FRAGMENT_COUNT: 3
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_log(avctx,16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476782
FRAGMENT_COUNT: 4
  ORIGINAL[0]: va_start(argptr, format)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: format
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: format
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774388
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_OBTAIN)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: *ff_lockmgr_cb
  TYPE[1]: CALL
  TOKENIZED[1]: *ff_lockmgr_cb
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> avformat_mutex
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 68719477564
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640256
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ss_tc_root != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2

CENTER_NODE: 30064772735
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avpkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478339
FRAGMENT_COUNT: 14
  ORIGINAL[0]: avctx -> coded_width
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> coded_height
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> coded_width
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> coded_height
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> active_thread_type
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avctx -> pkt
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avctx -> active_thread_type
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: avctx -> has_b_frames
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: !picture -> sample_aspect_ratio . num
  TYPE[8]: CALL
  TOKENIZED[8]: !picture -> VAR1 . VAR2
  ORIGINAL[9]: picture -> sample_aspect_ratio
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: avctx -> sample_aspect_ratio
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: sample_aspect_ratio
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: avctx
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: avctx
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719476868
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: min_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478845
FRAGMENT_COUNT: 2
  ORIGINAL[0]: AV_CODEC_ID_ADPCM_G722 == 69660
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 69660
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_G722
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772067
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> best_effort_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640275
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_fast_malloc ( VAR1 , VAR2 , VAR3 + 16 , 1 )

CENTER_NODE: 30064771275
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> width = -(-width >> s -> lowres)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = - ( -width >> VAR1 -> VAR3 )
  ORIGINAL[1]: s -> width
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: -(-width >> s -> lowres)
  TYPE[2]: CALL
  TOKENIZED[2]: - ( -width >> VAR1 -> VAR2 )
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774142
FRAGMENT_COUNT: 7
  ORIGINAL[0]: fmt < 0 || fmt >= AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 >= VAR2
  ORIGINAL[1]: be < 0 || be > 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0 || VAR1 > 1
  ORIGINAL[2]: be < 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < 0
  ORIGINAL[3]: be > 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 > 1
  ORIGINAL[4]: be = 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = 0
  ORIGINAL[5]: be
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: map
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478967
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_PCM_U32BE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640611
FRAGMENT_COUNT: 1
  ORIGINAL[0]: avctx -> sub_charenc_mode != 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 1

CENTER_NODE: 30064773971
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_PCM_S8_PLANAR == 65563)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 65563 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064774129
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [5UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 5UL ] { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR1 ) }

CENTER_NODE: 47244640354
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477570
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640357
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773141
FRAGMENT_COUNT: 10
  ORIGINAL[0]: &data
  TYPE[0]: CALL
  TOKENIZED[0]: &data
  ORIGINAL[1]: &data
  TYPE[1]: CALL
  TOKENIZED[1]: &data
  ORIGINAL[2]: size < 8
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < 8
  ORIGINAL[3]: bytestream_get_le64(&data)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &data )
  ORIGINAL[4]: &data
  TYPE[4]: CALL
  TOKENIZED[4]: &data
  ORIGINAL[5]: &data
  TYPE[5]: CALL
  TOKENIZED[5]: &data
  ORIGINAL[6]: &data
  TYPE[6]: CALL
  TOKENIZED[6]: &data
  ORIGINAL[7]: data
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: data
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: data
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771251
FRAGMENT_COUNT: 3
  ORIGINAL[0]: codec && codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: codec -> decode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771924
FRAGMENT_COUNT: 32
  ORIGINAL[0]: pic -> data[0] && (pic -> width != s -> width || pic -> height != s -> height || pic -> format != (s -> pix_fmt))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ 0 ] && ( VAR1 -> VAR3 != VAR4 -> VAR3 || VAR1 -> VAR5 != VAR4 -> VAR5 || VAR1 -> VAR6 != ( VAR4 -> VAR7 ) )
  ORIGINAL[1]: pic -> data[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[2]: pic -> width != s -> width || pic -> height != s -> height || pic -> format != (s -> pix_fmt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 != VAR3 -> VAR2 || VAR1 -> VAR4 != VAR3 -> VAR4 || VAR1 -> VAR5 != ( VAR3 -> VAR6 )
  ORIGINAL[3]: av_log(s,24,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[4]: pic -> width
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pic -> height
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: av_get_pix_fmt_name((pic -> format))
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( ( VAR1 -> VAR2 ) )
  ORIGINAL[7]: pic -> format
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: s -> width
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: s -> height
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: av_get_pix_fmt_name(s -> pix_fmt)
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[11]: s -> pix_fmt
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: (s -> release_buffer)(s,pic)
  TYPE[12]: CALL
  TOKENIZED[12]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[13]: s -> release_buffer
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: width
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: height
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: format
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: width
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: height
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pix_fmt
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: release_buffer
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: s
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: pic
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: pic
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: pic
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: s
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: s
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: s
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: s
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: s
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: pic
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: s
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1

CENTER_NODE: 68719477577
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> codec_descriptor
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477132
FRAGMENT_COUNT: 6
  ORIGINAL[0]: frame -> nb_samples
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> debug & 0x8000
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x8000
  ORIGINAL[2]: av_log(avctx,48,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772072
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478593
FRAGMENT_COUNT: 3
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_TAK_DEPRECATED
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_TAK
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640351
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640755
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771174
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ptrs[i] != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] != 0
  ORIGINAL[1]: fclose(ptrs[i])
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 [ VAR2 ] )
  ORIGINAL[2]: ptrs[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774310
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: tab[i][0] == a && tab[i][1] == b
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] [ 0 ] == VAR3 && VAR1 [ VAR2 ] [ 1 ] == VAR4
  ORIGINAL[2]: tab[i][0] == a
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] [ 0 ] == VAR3
  ORIGINAL[3]: tab[i][0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] [ 0 ]
  ORIGINAL[4]: tab[i][1] == b
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ] [ 1 ] == VAR3
  ORIGINAL[5]: tab[i][1]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ] [ 1 ]
  ORIGINAL[6]: tab[i]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 [ VAR2 ]
  ORIGINAL[7]: a
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: tab
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: b
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719476804
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stonesoup_tainted_file != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: fseek(stonesoup_tainted_file,0L,2)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 0L , 2 )
  ORIGINAL[2]: stonesoup_lsize = ftell(stonesoup_tainted_file)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[3]: ftell(stonesoup_tainted_file)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: stonesoup_lsize
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_tainted_file
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_lsize
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772006
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (desc -> flags) & 8
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) & 8
  ORIGINAL[1]: desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2

CENTER_NODE: 47244640537
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640677
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640483
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771806
FRAGMENT_COUNT: 2
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 30064773792
FRAGMENT_COUNT: 6
  ORIGINAL[0]: enc -> codec_tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_get_codec_tag_string(tag_buf,sizeof(tag_buf),enc -> codec_tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , sizeof ( VAR1 ) , VAR2 -> VAR3 )
  ORIGINAL[2]: sizeof(tag_buf)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: enc -> codec_tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: tag_buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772084
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477571
FRAGMENT_COUNT: 3
  ORIGINAL[0]: frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478558
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_lock_avcodec(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774320
FRAGMENT_COUNT: 4
  ORIGINAL[0]: __builtin_va_start(argument_list,msg)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: argument_list
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: msg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: msg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478679
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 4
  ORIGINAL[1]: ret += len
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2
  ORIGINAL[2]: codec_tag >>= 8
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >>= 8
  ORIGINAL[3]: codec_tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec_tag
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774393
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_RELEASE)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: &avformat_mutex
  TYPE[1]: CALL
  TOKENIZED[1]: &avformat_mutex
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> avformat_mutex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: AV_LOCK_RELEASE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774087
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 32 + 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 32 + 1
  ORIGINAL[1]: *buf = &avci -> buffer[i]
  TYPE[1]: CALL
  TOKENIZED[1]: *buf = &avci -> VAR1 [ VAR2 ]
  ORIGINAL[2]: &avci -> buffer[i]
  TYPE[2]: CALL
  TOKENIZED[2]: &avci -> VAR1 [ VAR2 ]
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773671
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719479224
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_hwaccel_next(hwaccel)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: (hwaccel -> id) == codec_id && (hwaccel -> pix_fmt) == pix_fmt
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3 && ( VAR1 -> VAR4 ) == VAR4
  ORIGINAL[2]: hwaccel -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: hwaccel -> pix_fmt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hwaccel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: hwaccel
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ba > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0

CENTER_NODE: 30064771248
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec && (codec -> encode_sub || codec -> encode2)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ( VAR1 -> VAR2 || VAR1 -> VAR3 )
  ORIGINAL[1]: codec -> encode_sub || codec -> encode2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 || VAR1 -> VAR3
  ORIGINAL[2]: codec -> encode_sub
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec -> encode2
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477359
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> pkt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: frame -> pkt_pts = s -> pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 -> VAR4 -> VAR5
  ORIGINAL[2]: frame -> pkt_pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_frame_set_pkt_pos(frame,s -> pkt -> pos)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 -> VAR4 )
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772073
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771244
FRAGMENT_COUNT: 5
  ORIGINAL[0]: initialized != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: initialized = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: ff_dsputil_static_init()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: initialized
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: initialized
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477560
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772682
FRAGMENT_COUNT: 4
  ORIGINAL[0]: size < 0 || avpkt -> size < 0 || size > 2147483647 - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR2 -> VAR1 < 0 || VAR1 > 2147483647 - 16
  ORIGINAL[1]: av_log(avctx,16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772904
FRAGMENT_COUNT: 29
  ORIGINAL[0]: avpkt -> data && avpkt -> data == avctx -> internal -> byte_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 == VAR3 -> VAR4 -> VAR5
  ORIGINAL[1]: user_pkt . data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: user_pkt . size >= avpkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 >= VAR3 -> VAR2
  ORIGINAL[3]: user_pkt . size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: avpkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avpkt -> data = user_pkt . data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 = VAR3 . VAR2
  ORIGINAL[6]: avpkt -> data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: user_pkt . data
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: avpkt -> destruct = user_pkt . destruct
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 = VAR3 . VAR2
  ORIGINAL[9]: avpkt -> destruct
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: user_pkt . destruct
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 . VAR2
  ORIGINAL[11]: av_dup_packet(avpkt) < 0
  TYPE[11]: CALL
  TOKENIZED[11]: FUN1 ( VAR1 ) < 0
  ORIGINAL[12]: av_dup_packet(avpkt)
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( VAR1 )
  ORIGINAL[13]: data
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: size
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: size
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: data
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: data
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: destruct
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: destruct
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: user_pkt
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: user_pkt
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: avpkt
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: avpkt
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: user_pkt
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: avpkt
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: user_pkt
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: avpkt
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: ret
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1

CENTER_NODE: 30064772050
FRAGMENT_COUNT: 8
  ORIGINAL[0]: frame == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: frame -> extended_data = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: extended_data
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640753
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477097
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (ret = av_samples_fill_arrays(frame -> extended_data,&frame -> linesize[0],((uint8_t *)((intptr_t )buf)),nb_channels,frame -> nb_samples,sample_fmt,align)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , &frame -> VAR4 [ 0 ] , ( ( VAR5 * ) ( ( VAR6 ) VAR7 ) ) , VAR8 , VAR2 -> VAR9 , VAR10 , VAR11 ) ) < 0
  ORIGINAL[1]: frame -> extended_data != frame -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR1 -> VAR3
  ORIGINAL[2]: av_freep((&frame -> extended_data))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( &frame -> VAR1 ) )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774134
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [7UL]{(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 7UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640679
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774125
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [3UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 3UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 68719477554
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773990
FRAGMENT_COUNT: 4
  ORIGINAL[0]: '6' << 16 | 92 << 8 | 100
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8 | 100
  ORIGINAL[1]: '6' << 16 | 92 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 92 << 8
  ORIGINAL[2]: '6' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: '6' << 16
  ORIGINAL[3]: 92 << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 92 << 8

CENTER_NODE: 30064774421
FRAGMENT_COUNT: 6
  ORIGINAL[0]: codec_id < AV_CODEC_ID_FIRST_SUBTITLE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: codec_id < AV_CODEC_ID_FIRST_UNKNOWN
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: codec_id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_FIRST_UNKNOWN
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_SUBTITLE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVMEDIA_TYPE_UNKNOWN
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773693
FRAGMENT_COUNT: 9
  ORIGINAL[0]: av_codec_is_decoder(p) && strcmp(name,p -> name) == 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) && FUN2 ( VAR2 , VAR1 -> VAR2 ) == 0
  ORIGINAL[1]: p = p -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 -> VAR2
  ORIGINAL[2]: p -> next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: next
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: p
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640411
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479006
FRAGMENT_COUNT: 10
  ORIGINAL[0]: av_get_exact_bits_per_sample(codec_id)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: codec_id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_ADPCM_SBPRO_2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_ADPCM_SBPRO_3
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_ADPCM_SBPRO_4
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_CODEC_ID_ADPCM_IMA_WAV
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: AV_CODEC_ID_ADPCM_IMA_QT
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_ADPCM_SWF
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: AV_CODEC_ID_ADPCM_MS
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: codec_id
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478846
FRAGMENT_COUNT: 2
  ORIGINAL[0]: AV_CODEC_ID_SRT == 94216
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 94216
  ORIGINAL[1]: AV_CODEC_ID_SRT
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774424
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: s -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: internal
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772771
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (ret = avcodec_fill_audio_frame(frame,s -> channels,s -> sample_fmt,buf,ret,0)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR6 , VAR1 , 0 ) ) < 0
  ORIGINAL[1]: (ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0
  ORIGINAL[2]: ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 )
  ORIGINAL[3]: av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , ( VAR3 -> VAR2 ) , 0 , 0 , VAR3 -> VAR4 , VAR5 -> VAR6 , VAR5 -> VAR7 )
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774429
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avctx -> extradata = str
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: avctx -> extradata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774132
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [6UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 6UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[2]: AV_CODEC_ID_FIRST_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S16BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774058
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 68719477499
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: r = func(c,arg,i,0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , 0 )
  ORIGINAL[2]: func(c,arg,i,0)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[3]: r
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: func
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: r
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771857
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_init_buffer_info(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: avctx
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477038
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *desc = av_pix_fmt_desc_get(s -> pix_fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: *desc = FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[1]: chroma_shift = (desc -> log2_chroma_w)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> VAR3 )
  ORIGINAL[2]: desc -> log2_chroma_w
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: chroma_shift
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chroma_shift
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772075
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772300
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> codec -> capabilities & 0x0200 && avctx -> strict_std_compliance > - 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x0200 && VAR1 -> VAR4 > - 2
  ORIGINAL[1]: av_codec_is_encoder(codec)?\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) ?\
  ORIGINAL[2]: av_codec_is_encoder(codec)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773683
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774127
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [4UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 4UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 30064772098
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771770
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p < (desc -> nb_components)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( VAR2 -> VAR3 )
  ORIGINAL[1]: bytes = -(-frame -> width >> ((is_chroma?(desc -> log2_chroma_w) : 0)))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - ( -frame -> VAR2 >> ( ( is_chroma? ( VAR3 -> VAR4 ) : 0 ) ) )
  ORIGINAL[2]: -(-frame -> width >> ((is_chroma?(desc -> log2_chroma_w) : 0)))
  TYPE[2]: CALL
  TOKENIZED[2]: - ( -frame -> VAR1 >> ( ( is_chroma? ( VAR2 -> VAR3 ) : 0 ) ) )
  ORIGINAL[3]: -frame -> width >> ((is_chroma?(desc -> log2_chroma_w) : 0))
  TYPE[3]: CALL
  TOKENIZED[3]: -frame -> VAR1 >> ( ( is_chroma? ( VAR2 -> VAR3 ) : 0 ) )
  ORIGINAL[4]: bytes
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478499
FRAGMENT_COUNT: 13
  ORIGINAL[0]: avpkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: &tmp
  TYPE[1]: CALL
  TOKENIZED[1]: &tmp
  ORIGINAL[2]: pkt_recoded = tmp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: tmp . data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: tmp . size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: tmp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tmp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt_recoded
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: tmp
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tmp
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: tmp
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: tmp
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: tmp
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064774403
FRAGMENT_COUNT: 3
  ORIGINAL[0]: x >> 8 & 0xff
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >> 8 & 0xff
  ORIGINAL[1]: x >> 8
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >> 8
  ORIGINAL[2]: x
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640673
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773984
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )
  ORIGINAL[1]: 100 >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 100 >= 100
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 68719477602
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avcodec_open2(avctx,codec,options)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: avctx
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: options
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479187
FRAGMENT_COUNT: 3
  ORIGINAL[0]: n++
  TYPE[0]: CALL
  TOKENIZED[0]: n++
  ORIGINAL[1]: n
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: n
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774380
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 68719477568
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771206
FRAGMENT_COUNT: 5
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: av_free( *p)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( *p )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478649
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avcodec_find_encoder(id)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477559
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477573
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773097
FRAGMENT_COUNT: 5
  ORIGINAL[0]: reordered_pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_num_faulty_pts += (reordered_pts <= ctx -> pts_correction_last_pts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 += ( VAR3 <= VAR1 -> VAR4 )
  ORIGINAL[2]: ctx -> pts_correction_num_faulty_pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: reordered_pts <= ctx -> pts_correction_last_pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 <= VAR2 -> VAR3
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640332
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772079
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477544
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774434
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: kelyphite_reinquiring
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774039
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stonesoup_file == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: stonesoup_file_list[stonesoup_ssi % 10] = stonesoup_file
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 % 10 ] = VAR3
  ORIGINAL[2]: stonesoup_file_list[stonesoup_ssi % 10]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 % 10 ]
  ORIGINAL[3]: stonesoup_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_ssi
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771868
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 68719477567
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640573
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;

CENTER_NODE: 47244640628
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_codec_is_encoder(avctx -> codec)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 )

CENTER_NODE: 47244640345
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773350
FRAGMENT_COUNT: 22
  ORIGINAL[0]: !av_frame_get_channels(frame)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_frame_get_channels ( VAR1 )
  ORIGINAL[1]: av_frame_set_channels(frame,avctx -> channels)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: avctx -> channels
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> channels
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: channels
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: avctx
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: avctx
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: avctx
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: avctx
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: avctx
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: avctx
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: avctx
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: avctx
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: avctx
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: avctx
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: avctx
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

