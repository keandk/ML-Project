# Tokenized code fragments for 152655-v1.0.0-bad
# Total center nodes processed: 93
# Total code fragments found: 412

CENTER_NODE: 30064771271
FRAGMENT_COUNT: 11
  ORIGINAL[0]: po -> name != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[1]: po -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: !strncmp(name,po -> name,len) && strlen(po -> name) == len
  TYPE[3]: CALL
  TOKENIZED[3]: !strncmp ( VAR1 , VAR2 -> VAR1 , VAR3 ) && FUN1 ( VAR2 -> VAR1 ) == VAR3
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: po
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719478138
FRAGMENT_COUNT: 13
  ORIGINAL[0]: check_stream_specifier(s,st,(p + 1))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , ( VAR3 + 1 ) )
  ORIGINAL[1]: av_opt_find((&cc),(t -> key),((void *)0),flags,0x00002)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &cc ) , ( VAR1 -> VAR2 ) , ( ( void * ) 0 ) , VAR3 , 0x00002 )
  ORIGINAL[2]: &cc
  TYPE[2]: CALL
  TOKENIZED[2]: &cc
  ORIGINAL[3]: t -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: flags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: flags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: flags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: p
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: flags
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: flags
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: flags
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064771471
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: &g -> opts[i]
  TYPE[1]: CALL
  TOKENIZED[1]: &g -> VAR1 [ VAR2 ]
  ORIGINAL[2]: g -> opts[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: g -> opts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477085
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !po -> name && cur_opt[0] == 'n' && cur_opt[1] == 'o'
  TYPE[0]: CALL
  TOKENIZED[0]: !po -> VAR1 && VAR2 [ 0 ] == 'n' && VAR2 [ 1 ] == 'o'
  ORIGINAL[1]: po = find_option(options,cur_opt + 2)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 + 2 )
  ORIGINAL[2]: find_option(options,cur_opt + 2)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 + 2 )
  ORIGINAL[3]: po -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: po -> flags
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: options
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: po
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: po
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: po
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244640534
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640441
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640434
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772181
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(((void *)0),16,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errbuf_ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640539
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0

CENTER_NODE: 68719477888
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *bsf = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *bsf = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: bsf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: bsf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772360
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 47244640278
FRAGMENT_COUNT: 4
  ORIGINAL[0]: po = options
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2
  ORIGINAL[1]: po -> name != ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[2]: po++
  TYPE[2]: CALL
  TOKENIZED[2]: po++
  ORIGINAL[3]: for (po = options;po -> name != ((void *)0);po++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = VAR2 ; VAR1 -> VAR3 != ( ( void * ) 0 ) ; po++ )

CENTER_NODE: 68719477941
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i < AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_SAMPLE_FMT_NB
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 4
  ORIGINAL[0]: line[1024]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1024 ]
  ORIGINAL[1]: line[1024]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1024 ]
  ORIGINAL[2]: line
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: print_prefix
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771683
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: p -> sep && !strcmp(p -> sep,opt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && !strcmp ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[2]: for (i = 0;i < nb_groups;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772727
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: (pix_desc -> flags) & 8?'H' : '.'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) & 8?'H' : ' . '
  ORIGINAL[2]: (pix_desc -> flags) & 8
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) & 8
  ORIGINAL[3]: pix_desc -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 30064773185
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < sizeof(buf -> data) / sizeof(buf -> data[0])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[1]: i == 0?0 : h_chroma_shift
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 0?0 : VAR2
  ORIGINAL[2]: i == 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == 0
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: h_chroma_shift
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772573
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719477196
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (o = av_opt_find((&cc),opt_stripped,((void *)0),0,0x0001 | 0x00002)) || (opt[0] == 'v' || opt[0] == 'a' || opt[0] == 's') && (o = av_opt_find((&cc),opt + 1,((void *)0),0,0x00002))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( ( &cc ) , VAR2 , ( ( void * ) 0 ) , 0 , 0x0001 | 0x00002 ) ) || ( VAR3 [ 0 ] == 'v' || VAR3 [ 0 ] == 'a' || VAR3 [ 0 ] == 's' ) && ( VAR1 = FUN1 ( ( &cc ) , VAR3 + 1 , ( ( void * ) 0 ) , 0 , 0x00002 ) )
  ORIGINAL[1]: consumed = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: o = av_opt_find((&fc),opt,((void *)0),0,0x0001 | 0x00002)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( ( &fc ) , VAR2 , ( ( void * ) 0 ) , 0 , 0x0001 | 0x00002 )
  ORIGINAL[3]: av_opt_find((&fc),opt,((void *)0),0,0x0001 | 0x00002)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( &fc ) , VAR1 , ( ( void * ) 0 ) , 0 , 0x0001 | 0x00002 )
  ORIGINAL[4]: o -> type
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: o
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: o
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772155
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064772365
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *ofmt = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *ofmt = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: ofmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772896
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *f = fopen(filename,\
  TYPE[0]: CALL
  TOKENIZED[0]: *f = FUN1 ( VAR1 , \
  ORIGINAL[1]: fopen(filename,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: f
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772688
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 68719477966
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *fmt = (av_find_input_format(name))
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = ( FUN1 ( VAR1 ) )
  ORIGINAL[1]: av_find_input_format(name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772891
FRAGMENT_COUNT: 6
  ORIGINAL[0]: c != '\\n' && c != - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != '\\n' && VAR1 != - 1
  ORIGINAL[1]: c != '\\n'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != '\\n'
  ORIGINAL[2]: c != - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 != - 1
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772359
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 30064772170
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (ret = av_parse_cpu_caps(&flags,arg)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( &flags , VAR2 ) ) < 0
  ORIGINAL[1]: av_force_cpu_flags(flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771384
FRAGMENT_COUNT: 11
  ORIGINAL[0]: po -> flags & 0x0008
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0008
  ORIGINAL[1]: po -> flags & 0x00002 || po -> flags & 0x80
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x00002 || VAR1 -> VAR2 & 0x80
  ORIGINAL[2]: po -> flags & 0x0400
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x0400
  ORIGINAL[3]: po -> flags & 0x10000
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 & 0x10000
  ORIGINAL[4]: po -> flags & 0x00100
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 & 0x00100
  ORIGINAL[5]: po -> flags & 0x20000
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 & 0x20000
  ORIGINAL[6]: po -> u . func_arg
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 . VAR3
  ORIGINAL[7]: ret < 0
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 < 0
  ORIGINAL[8]: po -> flags & 0x0800
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 & 0x0800
  ORIGINAL[9]: po -> flags
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: exit(0)
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( 0 )

CENTER_NODE: 68719478353
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame -> type != 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 2
  ORIGINAL[1]: i < sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[2]: unref_buffer(buf)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477774
FRAGMENT_COUNT: 2
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640472
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477794
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (( *da) -> type) != (( *db) -> type)
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( *da ) -> VAR1 ) != ( ( *db ) -> VAR1 )
  ORIGINAL[1]: ( *da) -> type
  TYPE[1]: CALL
  TOKENIZED[1]: ( *da ) -> VAR1
  ORIGINAL[2]: *db
  TYPE[2]: CALL
  TOKENIZED[2]: *db
  ORIGINAL[3]: db
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: db
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772696
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772565
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *codec = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *codec = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477035
FRAGMENT_COUNT: 7
  ORIGINAL[0]: handleoptions && opt[0] == '-'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 [ 0 ] == '-'
  ORIGINAL[1]: opt[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: opt[1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ]
  ORIGINAL[3]: opt[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: opt[2]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 2 ]
  ORIGINAL[5]: opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773129
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *size < new_size
  TYPE[0]: CALL
  TOKENIZED[0]: *size < VAR1
  ORIGINAL[1]: *size = new_size
  TYPE[1]: CALL
  TOKENIZED[1]: *size = VAR1
  ORIGINAL[2]: *size
  TYPE[2]: CALL
  TOKENIZED[2]: *size
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: new_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771766
FRAGMENT_COUNT: 10
  ORIGINAL[0]: &g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: &g -> VAR1
  ORIGINAL[1]: g -> nb_opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: g -> nb_opts + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 + 1
  ORIGINAL[3]: g -> nb_opts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: g -> nb_opts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: nb_opts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: g
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: g
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: g
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: g
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772713
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064771215
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0
  ORIGINAL[1]: av_parse_time(&us,timestr,is_duration)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &us , VAR1 , VAR2 )
  ORIGINAL[2]: &us
  TYPE[2]: CALL
  TOKENIZED[2]: &us
  ORIGINAL[3]: timestr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: is_duration
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476911
FRAGMENT_COUNT: 4
  ORIGINAL[0]: class -> option
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: &class
  TYPE[1]: CALL
  TOKENIZED[1]: &class
  ORIGINAL[2]: class
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: class
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771082
FRAGMENT_COUNT: 22
  ORIGINAL[0]: ss_tc_root != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: size_dirpath = strlen(ss_tc_root) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 ) + FUN1 ( \
  ORIGINAL[2]: strlen(ss_tc_root) + strlen(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[3]: strlen(ss_tc_root) + strlen(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[4]: strlen(ss_tc_root)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: strlen(\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( \
  ORIGINAL[6]: dirpath = (char*) malloc (size_dirpath * sizeof(char))
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 = ( char* ) FUN1 ( VAR2 * sizeof ( char ) )
  ORIGINAL[7]: (char*) malloc (size_dirpath * sizeof(char))
  TYPE[7]: CALL
  TOKENIZED[7]: ( char* ) FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[8]: malloc (size_dirpath * sizeof(char))
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[9]: size_dirpath * sizeof(char)
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 * sizeof ( char )
  ORIGINAL[10]: sizeof(char)
  TYPE[10]: CALL
  TOKENIZED[10]: sizeof ( char )
  ORIGINAL[11]: dirpath != NULL
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 != VAR2
  ORIGINAL[12]: ss_tc_root
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: NULL
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: size_dirpath
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ss_tc_root
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: dirpath
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: size_dirpath
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: char
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: char
  ORIGINAL[19]: dirpath
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: NULL
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: <global> stonesoup_printf_context
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: <global> VAR1

CENTER_NODE: 30064772710
FRAGMENT_COUNT: 3
  ORIGINAL[0]: **filter __attribute__((unused))  = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: **filter FUN1 ( ( VAR1 ) ) = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: filter
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640409
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771176
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_dict_free(&codec_opts)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &codec_opts )
  ORIGINAL[1]: &codec_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &codec_opts
  ORIGINAL[2]: <global> resample_opts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 47244640556
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1

CENTER_NODE: 68719477607
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags & 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 4
  ORIGINAL[1]: strcmp(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: cfg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: cfg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: cfg
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771393
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !po -> name && opt[0] == 'n'
  TYPE[0]: CALL
  TOKENIZED[0]: !po -> VAR1 && VAR2 [ 0 ] == 'n'
  ORIGINAL[1]: !po -> name
  TYPE[1]: CALL
  TOKENIZED[1]: !po -> VAR1
  ORIGINAL[2]: opt[0] == 'n'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] == 'n'
  ORIGINAL[3]: opt[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]

CENTER_NODE: 30064772687
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 68719477369
FRAGMENT_COUNT: 10
  ORIGINAL[0]: opt[1]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ]
  ORIGINAL[1]: opt[2]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 2 ]
  ORIGINAL[2]: opt[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: opt[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: !arg
  TYPE[4]: CALL
  TOKENIZED[4]: !arg
  ORIGINAL[5]: av_log(((void *)0),16,\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[6]: (void *)0
  TYPE[6]: CALL
  TOKENIZED[6]: ( void * ) 0
  ORIGINAL[7]: opt[1]
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 [ 1 ]
  ORIGINAL[8]: opt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: opt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719477850
FRAGMENT_COUNT: 12
  ORIGINAL[0]: desc -> type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: desc -> props
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: desc -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: desc -> long_name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: desc -> long_name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec = next_codec_for_id(desc -> id,codec,0)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , 0 )
  ORIGINAL[6]: desc -> id
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: codec -> name
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: desc -> name
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: name
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: desc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: desc
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064772159
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: exit(1)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( 1 )
  ORIGINAL[4]: tail
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: arg
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: strcmp(getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( FUN2 ( \
  ORIGINAL[2]: strcmp(getenv(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( FUN2 ( \
  ORIGINAL[3]: getenv(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \

CENTER_NODE: 30064772508
FRAGMENT_COUNT: 8
  ORIGINAL[0]: prev = (av_codec_next(prev))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR1 ) )
  ORIGINAL[1]: av_codec_next(prev)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: (prev -> id) == id && ((encoder?av_codec_is_encoder(prev) : av_codec_is_decoder(prev)))
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR2 && ( ( encoder?av_codec_is_encoder ( VAR1 ) : FUN1 ( VAR1 ) ) )
  ORIGINAL[3]: (prev -> id) == id
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[4]: encoder?av_codec_is_encoder(prev) : av_codec_is_decoder(prev)
  TYPE[4]: CALL
  TOKENIZED[4]: encoder?av_codec_is_encoder ( VAR1 ) : FUN1 ( VAR1 )
  ORIGINAL[5]: prev
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: prev
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: prev
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772877
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !strcmp(topic,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: !strcmp(topic,\
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 , \
  ORIGINAL[2]: strcmp(topic,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: topic
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772682
FRAGMENT_COUNT: 10
  ORIGINAL[0]: codec = next_codec_for_id(desc -> id,codec,encoder)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , VAR4 )
  ORIGINAL[1]: strcmp(codec -> name,desc -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR2 )
  ORIGINAL[2]: desc -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: desc -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: name
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: desc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772050
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < sizeof(log_levels) / sizeof(log_levels[0])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < sizeof ( VAR2 ) / sizeof ( VAR2 [ 0 ] )
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: log_levels[i] . name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] . VAR3

CENTER_NODE: 30064772539
FRAGMENT_COUNT: 5
  ORIGINAL[0]: desc = avcodec_descriptor_next(desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: nb_codecs++
  TYPE[1]: CALL
  TOKENIZED[1]: nb_codecs++
  ORIGINAL[2]: while (desc = avcodec_descriptor_next(desc))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( VAR1 = FUN1 ( VAR1 ) )
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: nb_codecs
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640359
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771253
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064773327
FRAGMENT_COUNT: 7
  ORIGINAL[0]: buf -> refcount
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: buf -> refcount--
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> refcount--
  ORIGINAL[2]: buf -> refcount
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: buf -> refcount
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: refcount
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772358
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 30064772468
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *p != 0
  TYPE[0]: CALL
  TOKENIZED[0]: *p != 0
  ORIGINAL[1]: name[16]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 16 ]
  ORIGINAL[2]: name[16]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 16 ]
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477912
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771855
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j < l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: &l -> groups[j] . swr_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &l -> VAR1 [ VAR2 ] . VAR3
  ORIGINAL[2]: l -> groups[j] . swr_opts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] . VAR4
  ORIGINAL[3]: l -> groups[j]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: swr_opts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771212
FRAGMENT_COUNT: 11
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: d < min || d > max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 || VAR1 > VAR3
  ORIGINAL[2]: type == 0x0400 && ((int64_t )d) != d
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == 0x0400 && ( ( VAR2 ) VAR3 ) != VAR3
  ORIGINAL[3]: type == 0x80 && ((int )d) != d
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == 0x80 && ( ( int ) VAR2 ) != VAR2
  ORIGINAL[4]: av_log(((void *)0),8,error,context,numstr,min,max)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( ( void * ) 0 ) , 8 , VAR1 , VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[5]: (void *)0
  TYPE[5]: CALL
  TOKENIZED[5]: ( void * ) 0
  ORIGINAL[6]: error
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: context
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: numstr
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: min
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: max
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477287
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *octx
  TYPE[0]: CALL
  TOKENIZED[0]: *octx
  ORIGINAL[1]: octx -> groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i < octx -> nb_groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 -> VAR3
  ORIGINAL[3]: octx -> nb_groups
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: octx -> global_opts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: global_opts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: octx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: octx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476829
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772789
FRAGMENT_COUNT: 4
  ORIGINAL[0]: desc = avcodec_descriptor_get_by_name(name)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: printed = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: printed
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640571
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buf -> w != s -> width || buf -> h != s -> height || (buf -> pix_fmt) != (s -> pix_fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != VAR3 -> VAR4 || VAR1 -> VAR5 != VAR3 -> VAR6 || ( VAR1 -> VAR7 ) != ( VAR3 -> VAR7 )

CENTER_NODE: 68719477462
FRAGMENT_COUNT: 6
  ORIGINAL[0]: env &&  *env
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && *env
  ORIGINAL[1]: ret = av_opt_get_key_value(&env,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( &env , \
  ORIGINAL[2]: av_opt_get_key_value(&env,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &env , \
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: env
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477160
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: fputc((i < argc - 1?32 : '\\n'),report_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 < VAR2 - 1?32 : '\\n' ) , VAR3 )
  ORIGINAL[2]: i < argc - 1?32 : '\\n'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 - 1?32 : '\\n'
  ORIGINAL[3]: <global> report_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> report_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: <global> report_file
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1

CENTER_NODE: 30064771714
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *g = octx -> cur_group
  TYPE[0]: CALL
  TOKENIZED[0]: *g = VAR1 -> VAR2
  ORIGINAL[1]: *g
  TYPE[1]: CALL
  TOKENIZED[1]: *g
  ORIGINAL[2]: octx -> cur_group
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: g
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478361
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *pool
  TYPE[0]: CALL
  TOKENIZED[0]: *pool
  ORIGINAL[1]: *pool
  TYPE[1]: CALL
  TOKENIZED[1]: *pool
  ORIGINAL[2]: *pool
  TYPE[2]: CALL
  TOKENIZED[2]: *pool
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478357
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_free(fb)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: unref_buffer(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640268
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478369
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_setup_printf_context()
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( )
  ORIGINAL[1]: &schizostelic_bowly
  TYPE[1]: CALL
  TOKENIZED[1]: &schizostelic_bowly
  ORIGINAL[2]: schizostelic_bowly
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: schizostelic_bowly
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772825
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: fmt -> extensions
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: printf(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: fmt -> extensions
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: extensions
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: extensions
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640414
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771573
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *p) < 32 || ( *p) > '~'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) < 32 || ( *p ) > '~'
  ORIGINAL[1]: fputc(( *p),report_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( *p ) , VAR1 )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: <global> report_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 30064772357
FRAGMENT_COUNT: 3
  ORIGINAL[0]: print_all_libs_info(1 | 2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 | 2 , 32 )
  ORIGINAL[1]: 1 | 2
  TYPE[1]: CALL
  TOKENIZED[1]: 1 | 2
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477894
FRAGMENT_COUNT: 6
  ORIGINAL[0]: name = avio_enum_protocols(&opaque,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &opaque , 0 )
  ORIGINAL[1]: &opaque
  TYPE[1]: CALL
  TOKENIZED[1]: &opaque
  ORIGINAL[2]: opaque
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: opaque
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: opaque
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773412
FRAGMENT_COUNT: 12
  ORIGINAL[0]: stonesoup_i < strlen(kogai_gilliette)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < FUN1 ( VAR2 )
  ORIGINAL[1]: strlen(kogai_gilliette)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ++stonesoup_i
  TYPE[2]: CALL
  TOKENIZED[2]: ++stonesoup_i
  ORIGINAL[3]: kogai_gilliette[stonesoup_i] == ';'
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] == ' ; '
  ORIGINAL[4]: kogai_gilliette[stonesoup_i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: stonesoup_i == 0 || kogai_gilliette[stonesoup_i - 1] != '\\\\'
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 == 0 || VAR2 [ VAR1 - 1 ] != '\\\\'
  ORIGINAL[6]: stonesoup_i == 0
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 == 0
  ORIGINAL[7]: stonesoup_i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: kogai_gilliette
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: stonesoup_i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: stonesoup_i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: stonesoup_is_valid
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640573
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640366
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772361
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772757
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !av_get_standard_channel_layout(i,&layout,&name)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_get_standard_channel_layout ( VAR1 , &layout , &name )
  ORIGINAL[1]: av_get_standard_channel_layout(i,&layout,&name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &layout , &name )
  ORIGINAL[2]: &layout
  TYPE[2]: CALL
  TOKENIZED[2]: &layout
  ORIGINAL[3]: &name
  TYPE[3]: CALL
  TOKENIZED[3]: &name
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: layout
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: name
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: layout
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: layout
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640576
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477453
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c == '%'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '%'
  ORIGINAL[1]: av_bprint_chars(bp,c,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , 1 )
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: bp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640404
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771169
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: AV_PIX_FMT_YUV420P
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_PIX_FMT_YUV420P
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

