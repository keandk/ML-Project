# Tokenized code fragments for 152079-v1.0.0-bad
# Total center nodes processed: 195
# Total code fragments found: 771

CENTER_NODE: 30064776554
FRAGMENT_COUNT: 10
  ORIGINAL[0]: tag = av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: strcmp(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: tag -> key
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: tag -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: key
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tag
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tag
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: tag
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tag
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640687
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773541
FRAGMENT_COUNT: 12
  ORIGINAL[0]: &pktl -> pkt
  TYPE[0]: CALL
  TOKENIZED[0]: &pktl -> VAR1
  ORIGINAL[1]: pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pktl -> pkt . stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: av_compare_mod(pktl -> pkt . pts,pktl -> pkt . dts,(2 << wrap_bits - 1))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 . VAR3 , VAR1 -> VAR2 . VAR4 , ( 2 << VAR5 - 1 ) )
  ORIGINAL[4]: pktl -> pkt . pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: pktl -> pkt . dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3
  ORIGINAL[6]: pktl -> pkt . dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 . VAR3
  ORIGINAL[7]: pktl -> pkt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: dts
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pktl
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pktl
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064773678
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_streams
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772302
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> codec -> time_base . num * 1000LL > st -> codec -> time_base . den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 . VAR4 * 1000LL > VAR1 -> VAR2 -> VAR3 . VAR5
  ORIGINAL[1]: st -> codec -> ticks_per_frame
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ticks_per_frame
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480390
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avcodec_alloc_context3(c)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641172
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640851
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> info -> found_decoder >= 0 && !st -> nb_decoded_frames && (avctx -> codec_id) == AV_CODEC_ID_DTS
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 >= 0 && !st -> VAR4 && ( VAR5 -> VAR6 ) == VAR7
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640702
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641203
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640817
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;
  ORIGINAL[2]: end_time
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640730
FRAGMENT_COUNT: 1
  ORIGINAL[0]: pos > pos_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2

CENTER_NODE: 47244640683
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777256
FRAGMENT_COUNT: 8
  ORIGINAL[0]: authorization && authorization[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ 0 ]
  ORIGINAL[1]: authorization[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: av_strlcatf(str,size,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[3]: authorization
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: str
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: authorization
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: str
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641049
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640389
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064777337
FRAGMENT_COUNT: 15
  ORIGINAL[0]: ( *ptr) == '\\\
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ptr ) == '\\\
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: *ptr && ( *ptr) != '\\\
  TYPE[2]: CALL
  TOKENIZED[2]: *ptr && ( *ptr ) != '\\\
  ORIGINAL[3]: *ptr
  TYPE[3]: CALL
  TOKENIZED[3]: *ptr
  ORIGINAL[4]: ( *ptr) != '\\\
  TYPE[4]: CALL
  TOKENIZED[4]: ( *ptr ) != '\\\
  ORIGINAL[5]: *ptr
  TYPE[5]: CALL
  TOKENIZED[5]: *ptr
  ORIGINAL[6]: ( *ptr) == '\\\\'
  TYPE[6]: CALL
  TOKENIZED[6]: ( *ptr ) == '\\\\'
  ORIGINAL[7]: *ptr
  TYPE[7]: CALL
  TOKENIZED[7]: *ptr
  ORIGINAL[8]: !ptr[1]
  TYPE[8]: CALL
  TOKENIZED[8]: !ptr [ 1 ]
  ORIGINAL[9]: *ptr
  TYPE[9]: CALL
  TOKENIZED[9]: *ptr
  ORIGINAL[10]: *ptr
  TYPE[10]: CALL
  TOKENIZED[10]: *ptr
  ORIGINAL[11]: ptr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ptr
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ptr
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ptr
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244640856
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640843
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641079
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774123
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pos_min < pos_limit
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: pos = (flags & 1?pos_min : pos_max)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 & 1?pos_min : VAR3 )
  ORIGINAL[2]: flags & 1?pos_min : pos_max
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 & 1?pos_min : VAR2
  ORIGINAL[3]: flags & 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 & 1
  ORIGINAL[4]: pos
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_min
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pos_max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477085
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: size
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: old_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775074
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;tags && tags[i];i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR2 && VAR2 [ VAR1 ] ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641196
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772196
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: avctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_MP2
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477207
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fmt -> name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: fmt_id_type[i] . name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[2]: fmt -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: name
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640441
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641200
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480909
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641074
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640690
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641154
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776529
FRAGMENT_COUNT: 4
  ORIGINAL[0]: v = (lrintf((d * 100)))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( ( VAR2 * 100 ) ) )
  ORIGINAL[1]: lrintf((d * 100))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 * 100 ) )
  ORIGINAL[2]: d * 100
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 100
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777536
FRAGMENT_COUNT: 9
  ORIGINAL[0]: &stream_sample_aspect_ratio . num
  TYPE[0]: CALL
  TOKENIZED[0]: &stream_sample_aspect_ratio . VAR1
  ORIGINAL[1]: stream_sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: stream_sample_aspect_ratio . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: num
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_sample_aspect_ratio
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_sample_aspect_ratio
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_sample_aspect_ratio
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stream_sample_aspect_ratio
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stream_sample_aspect_ratio
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477512
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pd -> buf
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pd -> buf
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pd -> buf_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pd -> buf_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pd -> buf_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: (st -> codec -> codec_id) != AV_CODEC_ID_NONE && score > 100 / 4 || end
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4 && VAR5 > 100 / 4 || VAR6
  ORIGINAL[6]: pd -> buf_size
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: buf_size
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pd
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pd
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719479067
FRAGMENT_COUNT: 3
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719480904
FRAGMENT_COUNT: 17
  ORIGINAL[0]: pkt -> stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> stream_index
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> dts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> pts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pkt -> pts
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> pts
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: !f
  TYPE[12]: CALL
  TOKENIZED[12]: !f
  ORIGINAL[13]: pkt -> size
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: pkt -> size
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: size
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 47244640680
FRAGMENT_COUNT: 1
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0

CENTER_NODE: 68719480367
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: iformat
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776984
FRAGMENT_COUNT: 6
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avcl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: level
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640599
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771338
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !name || !names
  TYPE[0]: CALL
  TOKENIZED[0]: !name || !names
  ORIGINAL[1]: !name
  TYPE[1]: CALL
  TOKENIZED[1]: !name
  ORIGINAL[2]: !names
  TYPE[2]: CALL
  TOKENIZED[2]: !names
  ORIGINAL[3]: names
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772486
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> first_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (int64_t )0x8000000000000000UL
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 30064776784
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ic -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064777728
FRAGMENT_COUNT: 18
  ORIGINAL[0]: !size
  TYPE[0]: CALL
  TOKENIZED[0]: !size
  ORIGINAL[1]: !st -> codec -> extradata
  TYPE[1]: CALL
  TOKENIZED[1]: !st -> VAR1 -> VAR2
  ORIGINAL[2]: st -> codec -> extradata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: memcpy((st -> codec -> extradata),data,size)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( VAR1 -> VAR2 -> VAR3 ) , VAR4 , VAR5 )
  ORIGINAL[4]: st -> codec -> extradata
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> codec -> extradata_size = size
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3 = VAR4
  ORIGINAL[7]: st -> codec -> extradata_size
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[8]: st -> codec
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: codec
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: extradata
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: codec
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: extradata_size
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: data
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: size
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: size
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 47244641233
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772104
FRAGMENT_COUNT: 12
  ORIGINAL[0]: st -> request_probe <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: s -> raw_packet_buffer_remaining_size += pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 += VAR3 -> VAR4
  ORIGINAL[2]: s -> raw_packet_buffer_remaining_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: size
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640713
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476864
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: stonesoup_envKey != NULL
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2
  ORIGINAL[2]: stonesoup_envKey
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: NULL
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_envKey
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478496
FRAGMENT_COUNT: 4
  ORIGINAL[0]: first_audio_index = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = - 1
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_streams
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772213
FRAGMENT_COUNT: 7
  ORIGINAL[0]: enc -> frame_size > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 1
  ORIGINAL[1]: !mux && enc -> bit_rate > 0 && size > 0
  TYPE[1]: CALL
  TOKENIZED[1]: !mux && VAR1 -> VAR2 > 0 && VAR3 > 0
  ORIGINAL[2]: !mux && enc -> bit_rate > 0
  TYPE[2]: CALL
  TOKENIZED[2]: !mux && VAR1 -> VAR2 > 0
  ORIGINAL[3]: !mux
  TYPE[3]: CALL
  TOKENIZED[3]: !mux
  ORIGINAL[4]: enc -> bit_rate > 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 > 0
  ORIGINAL[5]: size > 0
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 > 0
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641158
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777244
FRAGMENT_COUNT: 11
  ORIGINAL[0]: &new_tb . num
  TYPE[0]: CALL
  TOKENIZED[0]: &new_tb . VAR1
  ORIGINAL[1]: new_tb . num <= 0 || new_tb . den <= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 <= 0 || VAR1 . VAR3 <= 0
  ORIGINAL[2]: new_tb . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: av_log(((void *)0),16,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: new_tb . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: new_tb . den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: s -> index
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: num
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: new_tb
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: new_tb
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771109
FRAGMENT_COUNT: 21
  ORIGINAL[0]: (shmid = shmget(key, shmsz, IPC_CREAT | 0666)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 | 0666 ) ) < 0
  ORIGINAL[1]: (shm = shmat(shmid, NULL, 0)) == (char *) -1
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) == ( char * ) -1
  ORIGINAL[2]: shm = shmat(shmid, NULL, 0)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 , 0 )
  ORIGINAL[3]: (char *) -1
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) -1
  ORIGINAL[4]: fprintf(stderr, \
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , \
  ORIGINAL[5]: s = shm
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = VAR2
  ORIGINAL[6]: memset(s, 0, shmsz)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , 0 , VAR2 )
  ORIGINAL[7]: strcpy(shm, str)
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[8]: fprintf(stderr, \
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 , \
  ORIGINAL[9]: getchar()
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( )
  ORIGINAL[10]: fprintf(stderr, \
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( VAR1 , \
  ORIGINAL[11]: stderr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: shm
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: shmsz
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: shm
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: str
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: out_filename
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: stderr
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: stderr
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 30064775125
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j != i && next_start > ch -> start && next_start < end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2 && VAR3 > VAR4 -> VAR5 && VAR3 < VAR6
  ORIGINAL[1]: j != i && next_start > ch -> start
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2 && VAR3 > VAR4 -> VAR5
  ORIGINAL[2]: next_start < end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2
  ORIGINAL[3]: next_start
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: end
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776132
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat -> read_play
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: iformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: read_play
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640833
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479647
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: tags
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478162
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: *pktl =  *pkt_buf
  TYPE[1]: CALL
  TOKENIZED[1]: *pktl = *pkt_buf
  ORIGINAL[2]: *pkt_buf
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buf
  ORIGINAL[3]: *pkt_buf
  TYPE[3]: CALL
  TOKENIZED[3]: *pkt_buf
  ORIGINAL[4]: pkt_buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480938
FRAGMENT_COUNT: 11
  ORIGINAL[0]: p = (strchr(url,':'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ':' ) )
  ORIGINAL[1]: av_strlcpy(proto,url,(proto_size > p + 1 - url?p + 1 - url : proto_size))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , ( VAR3 > VAR4 + 1 - url?p + 1 - VAR2 : VAR3 ) )
  ORIGINAL[2]: p++
  TYPE[2]: CALL
  TOKENIZED[2]: p++
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: p
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: p
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: p
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064776142
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: (s -> iformat -> read_pause)(s)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[2]: s -> iformat -> read_pause
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771370
FRAGMENT_COUNT: 15
  ORIGINAL[0]: fmt = av_oformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> mime_type && mime_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR2
  ORIGINAL[2]: fmt -> mime_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> mime_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: mime_type
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: mime_type
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: fmt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: fmt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: fmt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 30064772334
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !(desc -> props & 1 << 0)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 & 1 << 0 )
  ORIGINAL[1]: desc -> props & 1 << 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 1 << 0
  ORIGINAL[2]: desc -> props
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: 1 << 0
  TYPE[3]: CALL
  TOKENIZED[3]: 1 << 0
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640742
FRAGMENT_COUNT: 1
  ORIGINAL[0]: pkt . flags & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 & 0x1

CENTER_NODE: 30064771331
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !av_strcasecmp(ext1,ext)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_strcasecmp ( VAR1 , VAR2 )
  ORIGINAL[1]: av_strcasecmp(ext1,ext)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: ( *p) == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *p ) == '\\0'
  ORIGINAL[3]: *p
  TYPE[3]: CALL
  TOKENIZED[3]: *p
  ORIGINAL[4]: ext
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773632
FRAGMENT_COUNT: 4
  ORIGINAL[0]: free_packet_buffer(&s -> parse_queue,&s -> parse_queue_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> parse_queue
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> parse_queue
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641178
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478205
FRAGMENT_COUNT: 18
  ORIGINAL[0]: pkt -> data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: size > 0 || pkt == &flush_pkt && got_output
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > 0 || VAR2 == &flush_pkt && VAR3
  ORIGINAL[3]: pkt -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> pos
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> pts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> pos
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> flags
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> data
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pkt -> size
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> destruct
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: pos
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064771810
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640292
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640864
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641206
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776634
FRAGMENT_COUNT: 10
  ORIGINAL[0]: st -> sample_aspect_ratio . num && av_cmp_q(st -> sample_aspect_ratio,st -> codec -> sample_aspect_ratio)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 && FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR4 -> VAR2 )
  ORIGINAL[1]: av_reduce(&display_aspect_ratio . num,&display_aspect_ratio . den,(st -> codec -> width * st -> sample_aspect_ratio . num),(st -> codec -> height * st -> sample_aspect_ratio . den),(1024 * 1024))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &display_aspect_ratio . VAR1 , &display_aspect_ratio . VAR2 , ( VAR3 -> VAR4 -> VAR5 * VAR3 -> VAR6 . VAR1 ) , ( VAR3 -> VAR4 -> VAR7 * VAR3 -> VAR6 . VAR2 ) , ( 1024 * 1024 ) )
  ORIGINAL[2]: &display_aspect_ratio . num
  TYPE[2]: CALL
  TOKENIZED[2]: &display_aspect_ratio . VAR1
  ORIGINAL[3]: display_aspect_ratio . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: &display_aspect_ratio . den
  TYPE[4]: CALL
  TOKENIZED[4]: &display_aspect_ratio . VAR1
  ORIGINAL[5]: st -> codec -> width * st -> sample_aspect_ratio . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3 * VAR1 -> VAR4 . VAR5
  ORIGINAL[6]: st -> codec -> height * st -> sample_aspect_ratio . den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3 * VAR1 -> VAR4 . VAR5
  ORIGINAL[7]: 1024 * 1024
  TYPE[7]: CALL
  TOKENIZED[7]: 1024 * 1024
  ORIGINAL[8]: display_aspect_ratio . num
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 . VAR2
  ORIGINAL[9]: display_aspect_ratio
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064776888
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: av_gettime() / 1000 * 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[2]: 2208988800ULL * 1000000ULL
  TYPE[2]: CALL
  TOKENIZED[2]: 2208988800ULL * 1000000ULL

CENTER_NODE: 68719477228
FRAGMENT_COUNT: 4
  ORIGINAL[0]: filename?filename : \
  TYPE[0]: CALL
  TOKENIZED[0]: filename?filename : \
  ORIGINAL[1]: pd
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064775150
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: c -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: 101L * c -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: 101L * VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: c -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3

CENTER_NODE: 30064771840
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !s && !(s = avformat_alloc_context())
  TYPE[0]: CALL
  TOKENIZED[0]: !s && ! ( VAR1 = FUN1 ( ) )
  ORIGINAL[1]: !s
  TYPE[1]: CALL
  TOKENIZED[1]: !s
  ORIGINAL[2]: !(s = avformat_alloc_context())
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 = FUN1 ( ) )
  ORIGINAL[3]: - 12
  TYPE[3]: CALL
  TOKENIZED[3]: - 12
  ORIGINAL[4]: !s -> av_class
  TYPE[4]: CALL
  TOKENIZED[4]: !s -> VAR1
  ORIGINAL[5]: s -> av_class
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: av_class
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640632
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719481222
FRAGMENT_COUNT: 5
  ORIGINAL[0]: rel[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: !base || strstr(rel,\
  TYPE[1]: CALL
  TOKENIZED[1]: !base || FUN1 ( VAR1 , \
  ORIGINAL[2]: rel[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: rel
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: rel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777763
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !hostname
  TYPE[0]: CALL
  TOKENIZED[0]: !hostname
  ORIGINAL[1]: buf = av_strdup(no_proxy)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[2]: av_strdup(no_proxy)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641321
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478572
FRAGMENT_COUNT: 6
  ORIGINAL[0]: is_relative(timestamp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: timestamp -= 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -= 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: 9223372036854775807L - (1LL << 48)
  TYPE[2]: CALL
  TOKENIZED[2]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640892
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2

CENTER_NODE: 47244640837
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772929
FRAGMENT_COUNT: 11
  ORIGINAL[0]: av_log(((void *)0),48,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 48 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: av_ts_make_string(((char [32]){(0)}),pkt -> pts)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[3]: av_ts_make_string(((char [32]){(0)}),pkt -> dts)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[4]: (char [32]){(0)}
  TYPE[4]: CALL
  TOKENIZED[4]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[5]: pkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: av_ts_make_string(((char [32]){(0)}),st -> cur_dts)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[7]: pkt -> stream_index
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> duration
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: presentation_delayed
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719480434
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: program = (av_mallocz(sizeof(AVProgram )))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( sizeof ( VAR2 ) ) )
  ORIGINAL[2]: !program
  TYPE[2]: CALL
  TOKENIZED[2]: !program
  ORIGINAL[3]: program
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: program
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: program
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771609
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ic -> pb && !ic -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !ic -> VAR3
  ORIGINAL[1]: ic -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: !ic -> data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: !ic -> VAR1
  ORIGINAL[3]: ic -> data_offset
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 1
  ORIGINAL[0]: score == score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2

CENTER_NODE: 30064777783
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: endemic_mayoralties
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776901
FRAGMENT_COUNT: 9
  ORIGINAL[0]: c == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '\\0'
  ORIGINAL[1]: c == '%'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == '%'
  ORIGINAL[2]: q - buf + len > (buf_size - 1)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2 + VAR3 > ( VAR4 - 1 )
  ORIGINAL[3]: !percentd_found
  TYPE[3]: CALL
  TOKENIZED[3]: !percentd_found
  ORIGINAL[4]: break;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: break ;
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: c
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: c
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: percentd_found
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641068
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641189
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640334
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064777200
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ( *p) == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) == '\\0'
  ORIGINAL[1]: av_toupper(((unsigned char )( *(p++))))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( unsigned char ) ( * ( p++ ) ) ) )
  ORIGINAL[2]: (unsigned char )( *(p++))
  TYPE[2]: CALL
  TOKENIZED[2]: ( unsigned char ) ( * ( p++ ) )
  ORIGINAL[3]: *(p++)
  TYPE[3]: CALL
  TOKENIZED[3]: * ( p++ )

CENTER_NODE: 30064774244
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stream_index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: timestamp = av_rescale(timestamp,st -> time_base . den,1000000 * ((int64_t )st -> time_base . num))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 , 1000000 * ( ( VAR5 ) VAR2 -> VAR3 . VAR6 ) )
  ORIGINAL[2]: av_rescale(timestamp,st -> time_base . den,1000000 * ((int64_t )st -> time_base . num))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 , 1000000 * ( ( VAR5 ) VAR2 -> VAR3 . VAR6 ) )
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772366
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63 && st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63 && VAR3 -> VAR5 == ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[1]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63
  ORIGINAL[2]: st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> pts_wrap_reference
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (int64_t )0x8000000000000000UL
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 47244640860
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479142
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771242
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 30064771240
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 63 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 63 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 63 << 8

CENTER_NODE: 68719481329
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477694
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (st -> codec -> codec_id) != AV_CODEC_ID_H264
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4
  ORIGINAL[1]: st -> codec -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: AV_CODEC_ID_H264
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776729
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719478392
FRAGMENT_COUNT: 15
  ORIGINAL[0]: *pkt
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt
  ORIGINAL[1]: pkt -> dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> pos
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: *pkt
  TYPE[5]: CALL
  TOKENIZED[5]: *pkt
  ORIGINAL[6]: s -> debug & 0x1
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 & 0x1
  ORIGINAL[7]: pkt -> pts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: (char [32]){(0)}
  TYPE[8]: CALL
  TOKENIZED[8]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[9]: pkt -> dts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: dts
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244641252
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771264
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> pts_wrap_behavior == 1 && timestamp < st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == 1 && VAR3 < VAR1 -> VAR4
  ORIGINAL[1]: timestamp + (1ULL << st -> pts_wrap_bits)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + ( 1ULL << VAR2 -> VAR3 )
  ORIGINAL[2]: 1ULL << st -> pts_wrap_bits
  TYPE[2]: CALL
  TOKENIZED[2]: 1ULL << VAR1 -> VAR2
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640330
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !s -> maxsize || s -> maxsize < newsize
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || VAR2 -> VAR1 < VAR3

CENTER_NODE: 47244641298
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !pkt
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt

CENTER_NODE: 68719480473
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter
  ORIGINAL[1]: *( *_tab) == _elem
  TYPE[1]: CALL
  TOKENIZED[1]: * ( *_tab ) == VAR1
  ORIGINAL[2]: *( *_tab)
  TYPE[2]: CALL
  TOKENIZED[2]: * ( *_tab )
  ORIGINAL[3]: _elem
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: _elem
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: _elem
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775031
FRAGMENT_COUNT: 8
  ORIGINAL[0]: tags[i] . id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[1]: tag == tags[i] . tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2 [ VAR3 ] . VAR1
  ORIGINAL[2]: tags[i] . tag
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[3]: tags[i] . id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[4]: tags[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640691
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640557
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640834
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480262
FRAGMENT_COUNT: 7
  ORIGINAL[0]: best_multiframe > multiframe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: best_multiframe == multiframe
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: multiframe
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: best_multiframe
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: multiframe
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: multiframe
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: multiframe
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777669
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *spec) == '#'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *spec ) == '#'
  ORIGINAL[1]: sid = (strtol(spec + 1,&endptr,0))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 + 1 , &endptr , 0 ) )
  ORIGINAL[2]: strtol(spec + 1,&endptr,0)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 + 1 , &endptr , 0 )
  ORIGINAL[3]: sid
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: endptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477103
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[1]: filename
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641181
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776521
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !tmp
  TYPE[0]: CALL
  TOKENIZED[0]: !tmp
  ORIGINAL[1]: program -> stream_index = tmp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: program -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: tmp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: program
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640556
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771237
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 68719479114
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> iformat -> read_seek || 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 || 1
  ORIGINAL[1]: av_seek_frame(s,stream_index,ts,flags | dir)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 | VAR5 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641185
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641129
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776979
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: !f
  TYPE[1]: CALL
  TOKENIZED[1]: !f
  ORIGINAL[2]: av_log(avcl,level,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[3]: fprintf(f,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , \
  ORIGINAL[4]: f
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avcl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: level
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: f
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771296
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 47244640686
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479720
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: (const int [6UL]){(24), (30), (60), (12), (15), (48)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }
  ORIGINAL[2]: i - 60 * 12
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 60 * 12
  ORIGINAL[3]: 60 * 12
  TYPE[3]: CALL
  TOKENIZED[3]: 60 * 12
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481278
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ofmt -> query_codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ofmt -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec_tag
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ofmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777294
FRAGMENT_COUNT: 8
  ORIGINAL[0]: pkt -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: local_pkt . duration = (av_rescale_q((pkt -> duration),src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 = ( FUN1 ( ( VAR3 -> VAR2 ) , VAR4 -> VAR5 [ VAR3 -> VAR6 ] -> VAR7 , VAR8 -> VAR5 [ VAR9 ] -> VAR7 ) )
  ORIGINAL[2]: local_pkt . duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: av_rescale_q((pkt -> duration),src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( VAR1 -> VAR2 ) , VAR3 -> VAR4 [ VAR1 -> VAR5 ] -> VAR6 , VAR7 -> VAR4 [ VAR8 ] -> VAR6 )
  ORIGINAL[4]: duration
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: local_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: local_pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640575
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777750
FRAGMENT_COUNT: 6
  ORIGINAL[0]: len_p > len_h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: !strcmp(pattern,&hostname[len_h - len_p])
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 , &hostname [ VAR2 - VAR3 ] )
  ORIGINAL[2]: strcmp(pattern,&hostname[len_h - len_p])
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &hostname [ VAR2 - VAR3 ] )
  ORIGINAL[3]: len_h == len_p
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == VAR2
  ORIGINAL[4]: len_h
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len_p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478283
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pkt_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buffer
  ORIGINAL[1]: *pkt = pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt = VAR1 -> VAR2
  ORIGINAL[2]: *pkt_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buffer
  ORIGINAL[3]: pkt_buffer
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641166
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774938
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: st -> info -> found_decoder = - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = - 1
  ORIGINAL[2]: st -> info -> found_decoder
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> info
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: - 1
  TYPE[4]: CALL
  TOKENIZED[4]: - 1
  ORIGINAL[5]: found_decoder
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775071
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (codec_tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: *tag = codec_tags -> tag
  TYPE[1]: CALL
  TOKENIZED[1]: *tag = VAR1 -> VAR2
  ORIGINAL[2]: *tag
  TYPE[2]: CALL
  TOKENIZED[2]: *tag
  ORIGINAL[3]: codec_tags -> tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: tag
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476889
FRAGMENT_COUNT: 3
  ORIGINAL[0]: tracepoint(stonesoup_trace, trace_location, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: stonesoup_trace
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: trace_location
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641149
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641175
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641161
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641169
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640737
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772635
FRAGMENT_COUNT: 9
  ORIGINAL[0]: pktl -> pkt . stream_index == stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 == VAR3
  ORIGINAL[1]: pktl -> pkt . stream_index
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: pktl -> pkt . pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pktl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064777788
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *stonesoup_file_list[10]
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_file_list [ 10 ]
  ORIGINAL[1]: *stonesoup_file_list[10]
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_file_list [ 10 ]
  ORIGINAL[2]: stonesoup_file_list
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479293
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477165
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *score_max
  TYPE[0]: CALL
  TOKENIZED[0]: *score_max
  ORIGINAL[1]: score_ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: score_max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478661
FRAGMENT_COUNT: 5
  ORIGINAL[0]: timestamp <= wanted_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= VAR2
  ORIGINAL[1]: a = m
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: m
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773755
FRAGMENT_COUNT: 7
  ORIGINAL[0]: 2 * i < st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: 2 * VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> index_entries[i] = st -> index_entries[2 * i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] = VAR1 -> VAR2 [ 2 * VAR3 ]
  ORIGINAL[2]: st -> index_entries[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: st -> index_entries
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> index_entries[2 * i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ 2 * VAR3 ]
  ORIGINAL[5]: st -> index_entries
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: 2 * i
  TYPE[6]: CALL
  TOKENIZED[6]: 2 * VAR1

CENTER_NODE: 47244640694
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640724
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773725
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 * ( ( VAR5 ) VAR6 -> VAR3 . VAR7 ) , VAR2 -> VAR3 . VAR7 * ( ( VAR5 ) VAR6 -> VAR3 . VAR4 ) )
  ORIGINAL[2]: st -> time_base . den * ((int64_t )ref_st -> time_base . num)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[3]: st -> time_base . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: (int64_t )ref_st -> time_base . num
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) VAR2 -> VAR3 . VAR4
  ORIGINAL[5]: st -> time_base . num * ((int64_t )ref_st -> time_base . den)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[6]: timestamp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777188
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < s
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i * 2 + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * 2 + 1
  ORIGINAL[2]: i * 2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640840
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640682
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776983
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640812
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064777450
FRAGMENT_COUNT: 3
  ORIGINAL[0]: time1 = {(0)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( 0 ) }
  ORIGINAL[1]: {(0)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 0 ) }
  ORIGINAL[2]: time1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640695
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480191
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < ic -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: programs
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774548
FRAGMENT_COUNT: 18
  ORIGINAL[0]: st -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: ic -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: st -> duration = av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = FUN1 ( VAR3 -> VAR2 , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR1 -> VAR5 )
  ORIGINAL[5]: st -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 -> VAR2 , ( ( VAR3 ) { ( 1 ) , ( 1000000 ) } ) , VAR4 -> VAR5 )
  ORIGINAL[7]: ic -> duration
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: (AVRational ){(1), (1000000)}
  TYPE[8]: CALL
  TOKENIZED[8]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[9]: {(1), (1000000)}
  TYPE[9]: CALL
  TOKENIZED[9]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[10]: st -> time_base
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: duration
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: duration
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: time_base
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: i
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ic
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: st
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 47244640853
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641047
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640849
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771247
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: 1LL << 48
  TYPE[2]: CALL
  TOKENIZED[2]: 1LL << 48
  ORIGINAL[3]: 1LL << 48
  TYPE[3]: CALL
  TOKENIZED[3]: 1LL << 48

CENTER_NODE: 30064772355
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: next
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477024
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: match_format(short_name,fmt -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: short_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771984
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> audio_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id = s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> audio_codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064776201
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&st -> probe_data . buf))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &st -> VAR1 . VAR2 ) )
  ORIGINAL[1]: &st -> probe_data . buf
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1 . VAR2
  ORIGINAL[2]: st -> probe_data . buf
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3

CENTER_NODE: 47244641069
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771391
FRAGMENT_COUNT: 8
  ORIGINAL[0]: type == AVMEDIA_TYPE_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: fmt -> subtitle_codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: subtitle_codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: type
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVMEDIA_TYPE_SUBTITLE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_NONE
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771182
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_printf_context != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: stonesoup_printf_context != stderr
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2
  ORIGINAL[2]: fclose(stonesoup_printf_context)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: <global> stonesoup_printf_context
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 47244640933
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640723
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478627
FRAGMENT_COUNT: 5
  ORIGINAL[0]: timestamp = wrap_timestamp(st,timestamp)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR1 )
  ORIGINAL[1]: wrap_timestamp(st,timestamp)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: timestamp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479417
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (!strcmp(ic -> iformat -> name,\
  TYPE[0]: CALL
  TOKENIZED[0]: ( !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[1]: !strcmp(ic -> iformat -> name,\
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[2]: file_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: file_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: file_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640448
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477169
FRAGMENT_COUNT: 3
  ORIGINAL[0]: score = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640306
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064773892
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: wanted_timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: flags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773928
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: e = &st -> index_entries[index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = &st -> VAR2 [ VAR3 ]
  ORIGINAL[2]: &st -> index_entries[index]
  TYPE[2]: CALL
  TOKENIZED[2]: &st -> VAR1 [ VAR2 ]
  ORIGINAL[3]: st -> index_entries[index]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: st -> index_entries[index]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: e
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776266
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: av_freep((&s -> chapters))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[2]: &s -> chapters
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481330
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064771161
FRAGMENT_COUNT: 5
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: size_filepath = strlen(dirpath) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 ) + FUN1 ( \
  ORIGINAL[2]: strlen(dirpath) + strlen(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[3]: strlen(dirpath) + strlen(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[4]: size_filepath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771779
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1 || !s -> iformat && (s -> iformat = av_probe_input_format2(&pd,0,&score))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1 || !s -> VAR2 && ( VAR1 -> VAR2 = FUN1 ( &pd , 0 , &score ) )
  ORIGINAL[1]: avio_open2(&s -> pb,filename,1 | s -> avio_flags,(&s -> interrupt_callback),options)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &s -> VAR1 , VAR2 , 1 | VAR3 -> VAR4 , ( &s -> VAR5 ) , VAR6 )
  ORIGINAL[2]: &s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: 1 | s -> avio_flags
  TYPE[3]: CALL
  TOKENIZED[3]: 1 | VAR1 -> VAR2
  ORIGINAL[4]: s -> avio_flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: &s -> interrupt_callback
  TYPE[5]: CALL
  TOKENIZED[5]: &s -> VAR1
  ORIGINAL[6]: filename
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: options
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479632
FRAGMENT_COUNT: 3
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_S32BE : AV_CODEC_ID_PCM_S32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_S32BE : VAR1
  ORIGINAL[1]: be
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641192
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777059
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avcl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: level
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dump_payload
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479844
FRAGMENT_COUNT: 22
  ORIGINAL[0]: ic -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ic -> probesize
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> interrupt_callback
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ic -> fps_probe_size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ic -> fps_probe_size
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: i == ic -> nb_streams
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 == VAR2 -> VAR3
  ORIGINAL[8]: ic -> nb_streams
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: ic -> ctx_flags
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: ic -> probesize
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: ic -> flags
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: ic -> packet_buffer
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: ic -> packet_buffer_end
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: ic -> max_analyze_duration
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: ctx_flags
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ic
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: ic
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ic
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ic
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 30064774444
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: (AVRational ){(1), (1000000)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[2]: {(1), (1000000)}
  TYPE[2]: CALL
  TOKENIZED[2]: { ( 1 ) , ( 1000000 ) }

CENTER_NODE: 47244640576
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640846
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640869
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777380
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> streams[i] -> id == id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

