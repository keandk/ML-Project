# Tokenized code fragments for 153074-v1.0.0-bad
# Total center nodes processed: 192
# Total code fragments found: 834

CENTER_NODE: 30064776864
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_isdigit(( *p))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( *p ) )
  ORIGINAL[1]: nd = nd * '\\n' + ( *(p++)) - 48
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[2]: nd * '\\n' + ( *(p++)) - 48
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: nd
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771725
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> streams[i] -> disposition & 0x0400 && (s -> streams[i] -> discard) < AVDISCARD_ALL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 & 0x0400 && ( VAR1 -> VAR2 [ VAR3 ] -> VAR5 ) < VAR6
  ORIGINAL[1]: copy . destruct = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: copy . destruct
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774639
FRAGMENT_COUNT: 12
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL) && (st -> start_time != ((int64_t )0x8000000000000000UL) || st -> first_dts != ((int64_t )0x8000000000000000UL))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && ( VAR4 -> VAR5 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR4 -> VAR6 != ( ( VAR3 ) 0x8000000000000000UL ) )
  ORIGINAL[1]: pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: end_time = pkt -> pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3
  ORIGINAL[3]: pkt -> pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: end_time
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719480838
FRAGMENT_COUNT: 12
  ORIGINAL[0]: pkt -> stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> stream_index
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> dts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> pts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pts
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064776352
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> info -> fps_last_dts = ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> info -> fps_last_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> info
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (int64_t )0x8000000000000000UL
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[5]: fps_last_dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777187
FRAGMENT_COUNT: 6
  ORIGINAL[0]: new_tb . num != pts_num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 != VAR3
  ORIGINAL[1]: av_log(((void *)0),48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 48 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: s -> index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pts_num / new_tb . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 / VAR2 . VAR3
  ORIGINAL[5]: new_tb
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776476
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j < program -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: sizeof(unsigned int ) * (program -> nb_stream_indexes + 1)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( unsigned int ) * ( VAR1 -> VAR2 + 1 )
  ORIGINAL[2]: sizeof(unsigned int )
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( unsigned int )
  ORIGINAL[3]: program -> nb_stream_indexes + 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 + 1
  ORIGINAL[4]: program -> nb_stream_indexes
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2

CENTER_NODE: 30064775116
FRAGMENT_COUNT: 8
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: c -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: c -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: c -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: c -> time_base
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: time_base
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: num
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: c
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640278
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641182
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478115
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: av_freep((&pktl))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &pktl ) )
  ORIGINAL[2]: pkt_buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771344
FRAGMENT_COUNT: 12
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: pkt -> pos = avio_tell(s)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 )
  ORIGINAL[2]: pkt -> pos
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avio_tell(s)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: pos
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064771129
FRAGMENT_COUNT: 6
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c - 32
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - 32
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641161
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641209
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640689
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478594
FRAGMENT_COUNT: 4
  ORIGINAL[0]: a = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = - 1
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772269
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ff_get_audio_frame_size(st -> codec,pkt -> size,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR4 , 0 )
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: size
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771096
FRAGMENT_COUNT: 9
  ORIGINAL[0]: dirpath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: stat(dirpath, &st) == -1
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[2]: stat(dirpath, &st)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &st )
  ORIGINAL[3]: -1
  TYPE[3]: CALL
  TOKENIZED[3]: -1
  ORIGINAL[4]: retval = mkdir(dirpath, 0700)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[5]: mkdir(dirpath, 0700)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[6]: retval
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: dirpath
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: retval
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477253
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: *packet_buffer
  ORIGINAL[1]: *packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *packet_buffer
  ORIGINAL[2]: packet_buffer
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773633
FRAGMENT_COUNT: 3
  ORIGINAL[0]: flush_packet_queue(s)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: s
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640909
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772297
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec_id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774979
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: tags++
  TYPE[1]: CALL
  TOKENIZED[1]: tags++
  ORIGINAL[2]: tags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640713
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480249
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: iformat
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776131
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_dict_free(&st -> metadata)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 )
  ORIGINAL[1]: &st -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: st -> metadata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244641105
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479603
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: tags
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771143
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 68719477478
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &stonesoup_i
  TYPE[0]: CALL
  TOKENIZED[0]: &stonesoup_i
  ORIGINAL[1]: stonesoup_i < stonesoup_opt_var
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: stonesoup_data->buffer[stonesoup_i]
  TYPE[2]: CALL
  TOKENIZED[2]: stonesoup_data->buffer [ VAR1 ]
  ORIGINAL[3]: stonesoup_data->buffer
  TYPE[3]: CALL
  TOKENIZED[3]: stonesoup_data->buffer
  ORIGINAL[4]: stonesoup_i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773865
FRAGMENT_COUNT: 2
  ORIGINAL[0]: stream_index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 47244641050
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476993
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: pkt -> data + old_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 + VAR3
  ORIGINAL[2]: pkt -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: old_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: old_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: old_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640840
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641148
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775781
FRAGMENT_COUNT: 15
  ORIGINAL[0]: st -> info -> duration_count > 1 && !st -> r_frame_rate . num && tb_unreliable(st -> codec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 > 1 && !st -> VAR4 . VAR5 && FUN1 ( VAR1 -> VAR6 )
  ORIGINAL[1]: j < 60 * 12 + 6
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 60 * 12 + 6
  ORIGINAL[2]: 60 * 12 + 6
  TYPE[2]: CALL
  TOKENIZED[2]: 60 * 12 + 6
  ORIGINAL[3]: 60 * 12
  TYPE[3]: CALL
  TOKENIZED[3]: 60 * 12
  ORIGINAL[4]: j++
  TYPE[4]: CALL
  TOKENIZED[4]: j++
  ORIGINAL[5]: st -> info -> codec_info_duration && (st -> info -> codec_info_duration) * av_q2d(st -> time_base) < 1001 * 12.0 / (get_std_framerate(j))
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3 && ( VAR1 -> VAR2 -> VAR3 ) * FUN1 ( VAR1 -> VAR4 ) < 1001 * 12 . 0 / ( FUN2 ( VAR5 ) )
  ORIGINAL[6]: st -> info -> codec_info_duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: st -> info
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: for (j = 0;j < 60 * 12 + 6;j++)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: for ( VAR1 = 0 ; VAR1 < 60 * 12 + 6 ; j++ )
  ORIGINAL[9]: info
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: codec_info_duration
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: j
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: j
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: num
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 30064773790
FRAGMENT_COUNT: 7
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ie -> timestamp != timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR2
  ORIGINAL[2]: ie -> timestamp <= timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 <= VAR2
  ORIGINAL[3]: ie -> pos = pos
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 = VAR2
  ORIGINAL[4]: ie -> pos
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pos
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ie
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640532
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777165
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 48 && c <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 48 && VAR1 <= '9'
  ORIGINAL[1]: c = c - 48
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 - 48
  ORIGINAL[2]: c - 48
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 48
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641172
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481248
FRAGMENT_COUNT: 10
  ORIGINAL[0]: size += 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 += 4
  ORIGINAL[1]: flags |= AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 |= VAR2
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: channels
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: flags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: flags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: flags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: flags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771889
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> subtitle_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id = s -> subtitle_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s -> subtitle_codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: break;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: break ;

CENTER_NODE: 68719477856
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> first_dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl -> pkt . dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: first_dts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773621
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> codec -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> codec -> codec_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: codec
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_type
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719479023
FRAGMENT_COUNT: 3
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (ret = avio_seek(s -> pb,s -> data_offset,0)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR2 -> VAR4 , 0 ) ) < 0

CENTER_NODE: 30064773969
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ts_max == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: filesize = avio_size(s -> pb)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: avio_size(s -> pb)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: filesize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 1
  ORIGINAL[0]: errmsg_ptr
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064774544
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_size(ic -> pb)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[2]: ic -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771624
FRAGMENT_COUNT: 12
  ORIGINAL[0]: *fmt
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt
  ORIGINAL[1]: score <= 100 / 4
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 <= 100 / 4
  ORIGINAL[2]: ( *fmt) -> name
  TYPE[2]: CALL
  TOKENIZED[2]: ( *fmt ) -> VAR1
  ORIGINAL[3]: *fmt
  TYPE[3]: CALL
  TOKENIZED[3]: *fmt
  ORIGINAL[4]: av_log(logctx,48,\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[5]: ( *fmt) -> name
  TYPE[5]: CALL
  TOKENIZED[5]: ( *fmt ) -> VAR1
  ORIGINAL[6]: *fmt
  TYPE[6]: CALL
  TOKENIZED[6]: *fmt
  ORIGINAL[7]: *fmt
  TYPE[7]: CALL
  TOKENIZED[7]: *fmt
  ORIGINAL[8]: name
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: logctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: probe_size
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: score
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244641176
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480258
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481198
FRAGMENT_COUNT: 4
  ORIGINAL[0]: sep[1]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ]
  ORIGINAL[1]: sep
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: sep
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: sep
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640667
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640662
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480924
FRAGMENT_COUNT: 9
  ORIGINAL[0]: p = (strchr(url,':'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ':' ) )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: p[strlen(p)]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ FUN1 ( VAR1 ) ]
  ORIGINAL[3]: ls != p
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 != VAR2
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ls
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: p
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771511
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ic -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !ic -> data_offset
  TYPE[1]: CALL
  TOKENIZED[1]: !ic -> VAR1
  ORIGINAL[2]: ic -> data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: data_offset
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640663
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640836
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773852
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: wanted_timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064775099
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: ((const int [6UL]){(24), (30), (60), (12), (15), (48)})[i - 60 * 12]
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) } ) [ VAR1 - 60 * 12 ]
  ORIGINAL[2]: i - 60 * 12
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 60 * 12
  ORIGINAL[3]: 60 * 12
  TYPE[3]: CALL
  TOKENIZED[3]: 60 * 12
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777213
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_strlcatf(str,size,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: proto
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: str
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: proto
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: authorization
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479562
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avpriv_toupper4(tag) == avpriv_toupper4(tags[i] . tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) == FUN1 ( VAR2 [ VAR3 ] . VAR1 )
  ORIGINAL[1]: tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: tags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641125
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641134
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771122
FRAGMENT_COUNT: 5
  ORIGINAL[0]: vfprintf(stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: format
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640671
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640552
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776940
FRAGMENT_COUNT: 5
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481071
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: src -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: src
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640810
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640666
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640788
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: 1LL << 48
  TYPE[2]: CALL
  TOKENIZED[2]: 1LL << 48
  ORIGINAL[3]: 1LL << 48
  TYPE[3]: CALL
  TOKENIZED[3]: 1LL << 48

CENTER_NODE: 47244640825
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480407
FRAGMENT_COUNT: 12
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: program -> discard
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: program -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: program -> pts_wrap_reference
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: program -> pts_wrap_behavior
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: program -> start_time
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: program -> end_time
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: end_time
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: program
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: program
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: program
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064773253
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !( *pkt_buffer)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *pkt_buffer )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 68719479220
FRAGMENT_COUNT: 5
  ORIGINAL[0]: bitrate >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: bitrate <= 2147483647
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 <= 2147483647
  ORIGINAL[2]: bitrate
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: bitrate
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bitrate
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777711
FRAGMENT_COUNT: 7
  ORIGINAL[0]: len_p > len_h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: &hostname[len_h - len_p]
  TYPE[1]: CALL
  TOKENIZED[1]: &hostname [ VAR1 - VAR2 ]
  ORIGINAL[2]: hostname[len_h - len_p]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 - VAR3 ]
  ORIGINAL[3]: len_h - len_p
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: hostname
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hostname
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: hostname
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640809
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640403
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !new_buf
  TYPE[0]: CALL
  TOKENIZED[0]: !new_buf
  ORIGINAL[1]: goto no_packet;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: goto VAR1 ;

CENTER_NODE: 68719480500
FRAGMENT_COUNT: 8
  ORIGINAL[0]: strcmp(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: tag -> key
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: tag -> value
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: tag -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: key
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: indent
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tag
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641179
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776446
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter
  ORIGINAL[1]: !chapter
  TYPE[1]: CALL
  TOKENIZED[1]: !chapter
  ORIGINAL[2]: chapter -> end = end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR2
  ORIGINAL[3]: chapter -> end
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: end
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chapter
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481307
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_sample_aspect_ratio . num <= 0 || stream_sample_aspect_ratio . den <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 <= 0 || VAR1 . VAR3 <= 0
  ORIGINAL[1]: stream_sample_aspect_ratio = undef
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: stream_sample_aspect_ratio
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: undef
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_sample_aspect_ratio
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_sample_aspect_ratio
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641154
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774188
FRAGMENT_COUNT: 11
  ORIGINAL[0]: flags & 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 2
  ORIGINAL[1]: s -> iformat -> flags & 0x8000
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 & 0x8000
  ORIGINAL[2]: s -> iformat -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1
  ORIGINAL[4]: ff_read_frame_flush(s)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: seek_frame_byte(s,stream_index,timestamp,flags)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stream_index
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: timestamp
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: flags
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719481121
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *ptr) == '\\\\'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ptr ) == '\\\\'
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: ptr[1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ]
  ORIGINAL[3]: ptr[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ptr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ptr
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ptr
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641165
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774098
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avio_seek(s -> pb,pos,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , VAR3 , 0 )
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pos
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771296
FRAGMENT_COUNT: 10
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: av_iformat_next(fmt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: match_format(short_name,fmt -> name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[3]: fmt -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: while (fmt = av_iformat_next(fmt))
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: while ( VAR1 = FUN1 ( VAR1 ) )
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: short_name
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719480793
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcl
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640822
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771255
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *fmt = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt_found
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476914
FRAGMENT_COUNT: 4
  ORIGINAL[0]: type == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_AUDIO
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_AUDIO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480148
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < ic -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> programs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777127
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[1]: {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[2]: hex_table_uc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481370
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &endptr
  TYPE[0]: CALL
  TOKENIZED[0]: &endptr
  ORIGINAL[1]: ( *(endptr++)) == ':'
  TYPE[1]: CALL
  TOKENIZED[1]: ( * ( endptr++ ) ) == ':'
  ORIGINAL[2]: strtol(endptr,((void *)0),0)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( ( void * ) 0 ) , 0 )
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: endptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_idx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: endptr
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[64]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 64 ]

CENTER_NODE: 68719480873
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477017
FRAGMENT_COUNT: 10
  ORIGINAL[0]: lpd . buf
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: lpd . buf
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: lpd . buf_size > '\\n' && ff_id3v2_match(lpd . buf,\
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 > '\\n' && FUN1 ( VAR1 . VAR3 , \
  ORIGINAL[3]: lpd . buf_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: lpd . buf
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: lpd . buf
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: buf
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: lpd
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: id3len
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: lpd
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641130
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771456
FRAGMENT_COUNT: 3
  ORIGINAL[0]: score = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pd
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640533
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640813
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773801
FRAGMENT_COUNT: 5
  ORIGINAL[0]: timestamp = wrap_timestamp(st,timestamp)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR1 )
  ORIGINAL[1]: wrap_timestamp(st,timestamp)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: timestamp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479598
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_U32BE : AV_CODEC_ID_PCM_U32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_U32BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U32LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771669
FRAGMENT_COUNT: 18
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> iformat -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: !s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: !s -> VAR1
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: &s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: &s -> VAR1
  ORIGINAL[6]: s -> iformat
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 47244640264
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481286
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719479607
FRAGMENT_COUNT: 10
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: tags && tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[2]: tags[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: i++
  TYPE[3]: CALL
  TOKENIZED[3]: i++
  ORIGINAL[4]: tags[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: (codec_tags -> id) != AV_CODEC_ID_NONE
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[6]: tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640417
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641023
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476839
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ext++
  TYPE[0]: CALL
  TOKENIZED[0]: ext++
  ORIGINAL[1]: ext
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ext
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ext
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ext
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640807
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776584
FRAGMENT_COUNT: 54
  ORIGINAL[0]: st -> sample_aspect_ratio . num && av_cmp_q(st -> sample_aspect_ratio,st -> codec -> sample_aspect_ratio)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 && FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR4 -> VAR2 )
  ORIGINAL[1]: st -> sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: av_cmp_q(st -> sample_aspect_ratio,st -> codec -> sample_aspect_ratio)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR3 -> VAR2 )
  ORIGINAL[3]: av_reduce(&display_aspect_ratio . num,&display_aspect_ratio . den,(st -> codec -> width * st -> sample_aspect_ratio . num),(st -> codec -> height * st -> sample_aspect_ratio . den),(1024 * 1024))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &display_aspect_ratio . VAR1 , &display_aspect_ratio . VAR2 , ( VAR3 -> VAR4 -> VAR5 * VAR3 -> VAR6 . VAR1 ) , ( VAR3 -> VAR4 -> VAR7 * VAR3 -> VAR6 . VAR2 ) , ( 1024 * 1024 ) )
  ORIGINAL[4]: &display_aspect_ratio . num
  TYPE[4]: CALL
  TOKENIZED[4]: &display_aspect_ratio . VAR1
  ORIGINAL[5]: display_aspect_ratio . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: &display_aspect_ratio . den
  TYPE[6]: CALL
  TOKENIZED[6]: &display_aspect_ratio . VAR1
  ORIGINAL[7]: display_aspect_ratio . den
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: st -> codec -> width * st -> sample_aspect_ratio . num
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 -> VAR3 * VAR1 -> VAR4 . VAR5
  ORIGINAL[9]: st -> codec -> width
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[10]: st -> codec
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: st -> sample_aspect_ratio . num
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 . VAR3
  ORIGINAL[12]: st -> sample_aspect_ratio
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: st -> codec -> height * st -> sample_aspect_ratio . den
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 -> VAR3 * VAR1 -> VAR4 . VAR5
  ORIGINAL[14]: st -> codec -> height
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[15]: st -> codec
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: st -> sample_aspect_ratio . den
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2 . VAR3
  ORIGINAL[17]: st -> sample_aspect_ratio
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: 1024 * 1024
  TYPE[18]: CALL
  TOKENIZED[18]: 1024 * 1024
  ORIGINAL[19]: av_log(((void *)0),32,\
  TYPE[19]: CALL
  TOKENIZED[19]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[20]: (void *)0
  TYPE[20]: CALL
  TOKENIZED[20]: ( void * ) 0
  ORIGINAL[21]: st -> sample_aspect_ratio . num
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2 . VAR3
  ORIGINAL[22]: st -> sample_aspect_ratio
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: st -> sample_aspect_ratio . den
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2 . VAR3
  ORIGINAL[24]: st -> sample_aspect_ratio
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2
  ORIGINAL[25]: display_aspect_ratio . num
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 . VAR2
  ORIGINAL[26]: display_aspect_ratio . den
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 . VAR2
  ORIGINAL[27]: num
  TYPE[27]: FIELD_IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: den
  TYPE[28]: FIELD_IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: codec
  TYPE[29]: FIELD_IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: width
  TYPE[30]: FIELD_IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: sample_aspect_ratio
  TYPE[31]: FIELD_IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: num
  TYPE[32]: FIELD_IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: codec
  TYPE[33]: FIELD_IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: height
  TYPE[34]: FIELD_IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: sample_aspect_ratio
  TYPE[35]: FIELD_IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: den
  TYPE[36]: FIELD_IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: sample_aspect_ratio
  TYPE[37]: FIELD_IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: num
  TYPE[38]: FIELD_IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: sample_aspect_ratio
  TYPE[39]: FIELD_IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: den
  TYPE[40]: FIELD_IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: num
  TYPE[41]: FIELD_IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: den
  TYPE[42]: FIELD_IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: display_aspect_ratio
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: display_aspect_ratio
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: st
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: st
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: st
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: st
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: st
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: st
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: display_aspect_ratio
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: display_aspect_ratio
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: st
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1

CENTER_NODE: 68719476947
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: remaining + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 1
  ORIGINAL[2]: remaining
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: remaining
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: remaining
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773679
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640678
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641228
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774917
FRAGMENT_COUNT: 17
  ORIGINAL[0]: st -> info -> found_decoder < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 < 0
  ORIGINAL[1]: (pkt . size > 0 || !pkt . data && got_picture) && ret >= 0 && (!has_codec_parameters(st,((void *)0)) || !has_decode_delay_been_guessed(st) || !st -> codec_info_nb_frames && st -> codec -> codec -> capabilities & 0x0400)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 . VAR2 > 0 || !pkt . VAR3 && VAR4 ) && VAR5 >= 0 && ( !has_codec_parameters ( VAR6 , ( ( void * ) 0 ) ) || !has_decode_delay_been_guessed ( VAR6 ) || !st -> VAR7 && VAR6 -> VAR8 -> VAR8 -> VAR9 & 0x0400 )
  ORIGINAL[2]: pkt . size > 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 > 0
  ORIGINAL[3]: pkt . size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: pkt . size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: pkt . size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: size
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064771835
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !strcmp(s -> iformat -> name,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[1]: (ret = ff_id3v2_parse_apic(s,&id3v2_extra_meta)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , &id3v2_extra_meta ) ) < 0
  ORIGINAL[2]: ret = ff_id3v2_parse_apic(s,&id3v2_extra_meta)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , &id3v2_extra_meta )
  ORIGINAL[3]: ff_id3v2_parse_apic(s,&id3v2_extra_meta)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , &id3v2_extra_meta )
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771162
FRAGMENT_COUNT: 10
  ORIGINAL[0]: st -> pts_wrap_behavior != 0 && st -> pts_wrap_reference != ((int64_t )0x8000000000000000UL) && timestamp != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 0 && VAR1 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> pts_wrap_behavior
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_behavior == 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == 1
  ORIGINAL[3]: st -> pts_wrap_behavior
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> pts_wrap_behavior
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pts_wrap_behavior
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478183
FRAGMENT_COUNT: 22
  ORIGINAL[0]: &out_pkt
  TYPE[0]: CALL
  TOKENIZED[0]: &out_pkt
  ORIGINAL[1]: out_pkt . data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: out_pkt . size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: out_pkt . duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: st -> codec -> time_base . num != 0 && st -> codec -> time_base . den != 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3 . VAR4 != 0 && VAR1 -> VAR2 -> VAR3 . VAR5 != 0
  ORIGINAL[5]: out_pkt . duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: out_pkt . stream_index
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: out_pkt . pts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: out_pkt . dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 . VAR2
  ORIGINAL[9]: out_pkt . pos
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 . VAR2
  ORIGINAL[10]: out_pkt . pos
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 . VAR2
  ORIGINAL[11]: out_pkt . flags
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 . VAR2
  ORIGINAL[12]: out_pkt . flags
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 . VAR2
  ORIGINAL[13]: out_pkt . data
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 . VAR2
  ORIGINAL[14]: out_pkt . destruct
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 . VAR2
  ORIGINAL[15]: duration
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: out_pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: out_pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: out_pkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: out_pkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: out_pkt
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: out_pkt
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 47244641151
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640608
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480326
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> iformat -> read_close
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: (s -> iformat -> read_close)(s)
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[6]: avformat_free_context(s)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 )
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719477592
FRAGMENT_COUNT: 12
  ORIGINAL[0]: enc -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: enc -> bit_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: enc -> sample_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: enc -> block_align
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (enc -> codec_id) == AV_CODEC_ID_WMAV1 || (enc -> codec_id) == AV_CODEC_ID_WMAV2
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[5]: enc -> codec_id
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: enc -> codec_id
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ((int64_t )size) * 8
  TYPE[7]: CALL
  TOKENIZED[7]: ( ( VAR1 ) VAR2 ) * 8
  ORIGINAL[8]: enc -> sample_rate
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: sample_rate
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: enc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: enc
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244641137
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641297
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772289
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !desc
  TYPE[0]: CALL
  TOKENIZED[0]: !desc
  ORIGINAL[1]: av_codec_set_codec_descriptor(enc,desc)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: enc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776489
FRAGMENT_COUNT: 9
  ORIGINAL[0]: v % 100
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % 100
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: v % (100 * 1000)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 % ( 100 * 1000 )
  ORIGINAL[4]: 100 * 1000
  TYPE[4]: CALL
  TOKENIZED[4]: 100 * 1000
  ORIGINAL[5]: v
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: d
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: postfix
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: v
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640816
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774740
FRAGMENT_COUNT: 14
  ORIGINAL[0]: has_duration(ic)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: ic -> duration_estimation_method = AVFMT_DURATION_FROM_STREAM
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: ic -> duration_estimation_method
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: duration_estimation_method
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVFMT_DURATION_FROM_STREAM
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ic
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719479637
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: s -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: start_time
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772984
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL) && delay <= 16 && has_decode_delay_been_guessed(st)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR4 <= 16 && FUN1 ( VAR5 )
  ORIGINAL[1]: st -> pts_buffer[0] = pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ] = VAR3 -> VAR4
  ORIGINAL[2]: st -> pts_buffer[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[3]: pkt -> pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773552
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: !(next_pkt -> pts == ((int64_t )0x8000000000000000UL) && next_pkt -> dts != ((int64_t )0x8000000000000000UL) && !eof)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL ) && !eof )
  ORIGINAL[2]: st = s -> streams[pkt -> stream_index]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3 [ VAR4 -> VAR5 ]
  ORIGINAL[3]: s -> streams[pkt -> stream_index]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 -> VAR4 ]
  ORIGINAL[4]: s -> streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> stream_index
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771497
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !strcmp(fmt -> name,fmt_id_type[i] . name)
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 -> VAR2 , VAR3 [ VAR4 ] . VAR2 )
  ORIGINAL[1]: st -> codec -> codec_type = fmt_id_type[i] . type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 [ VAR5 ] . VAR6
  ORIGINAL[2]: st -> codec -> codec_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: fmt_id_type[i] . type
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[5]: codec_type
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt_id_type
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777427
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ofmt -> codec_tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !(!av_codec_get_tag(ofmt -> codec_tag,codec_id))
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( !av_codec_get_tag ( VAR1 -> VAR2 , VAR3 ) )
  ORIGINAL[2]: !av_codec_get_tag(ofmt -> codec_tag,codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: !av_codec_get_tag ( VAR1 -> VAR2 , VAR3 )

CENTER_NODE: 47244641145
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480746
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: j = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: j
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: j
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480168
FRAGMENT_COUNT: 5
  ORIGINAL[0]: best_bitrate = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = - 1
  ORIGINAL[1]: best_multiframe = - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 1
  ORIGINAL[2]: - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 1
  ORIGINAL[3]: best_multiframe
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: best_multiframe
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777414
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret2 = av_small_strptime(datestr,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: av_small_strptime(datestr,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: ret2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776821
FRAGMENT_COUNT: 6
  ORIGINAL[0]: k < ic -> programs[j] -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[1]: ic -> programs[j] -> stream_index[k]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ]
  ORIGINAL[2]: ic -> programs[j] -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: ic -> programs[j]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: stream_index
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: k
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640670
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774261
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_index == - 1 && s -> nb_streams == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 1 && VAR2 -> VAR3 == 1
  ORIGINAL[1]: av_rescale_q(ts,((AVRational ){(1), (1000000)}),time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( VAR2 ) { ( 1 ) , ( 1000000 ) } ) , VAR3 )
  ORIGINAL[2]: (AVRational ){(1), (1000000)}
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[3]: {(1), (1000000)}
  TYPE[3]: CALL
  TOKENIZED[3]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: time_base
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776687
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064777336
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477570
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: AV_CODEC_ID_MP2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640829
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640658
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641142
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774492
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641025
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478646
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: s -> streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: streams
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777014
FRAGMENT_COUNT: 6
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: f
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dump_payload
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641045
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771246
FRAGMENT_COUNT: 9
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: p - names > namelen?p - names : namelen
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2 > namelen?p - VAR2 : VAR3
  ORIGINAL[2]: p - names > namelen
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2 > VAR3
  ORIGINAL[3]: p - names
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: p - names
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 - VAR2
  ORIGINAL[5]: namelen
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: names
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: namelen
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640659
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771199
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: p = &( *p) -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = & ( *p ) -> VAR2
  ORIGINAL[2]: &( *p) -> next
  TYPE[2]: CALL
  TOKENIZED[2]: & ( *p ) -> VAR1
  ORIGINAL[3]: ( *p) -> next
  TYPE[3]: CALL
  TOKENIZED[3]: ( *p ) -> VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481285
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640699
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773592
FRAGMENT_COUNT: 3
  ORIGINAL[0]: free_packet_buffer(&s -> parse_queue,&s -> parse_queue_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> parse_queue_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244640808
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478259
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: st -> parser
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> need_parsing
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> index
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064776846
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: av_gettime() / 1000 * 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[2]: 2208988800ULL * 1000000ULL
  TYPE[2]: CALL
  TOKENIZED[2]: 2208988800ULL * 1000000ULL

CENTER_NODE: 47244640845
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771135
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: 'h' >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 'h' >= 100

CENTER_NODE: 30064774311
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < ic -> nb_streams;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771141
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 63 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 63 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 63 << 8

CENTER_NODE: 30064773699
FRAGMENT_COUNT: 5
  ORIGINAL[0]: max_entries = ((s -> max_index_size) / sizeof(AVIndexEntry ))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( VAR2 -> VAR3 ) / sizeof ( VAR4 ) )
  ORIGINAL[1]: (s -> max_index_size) / sizeof(AVIndexEntry )
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) / sizeof ( VAR3 )
  ORIGINAL[2]: s -> max_index_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: sizeof(AVIndexEntry )
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 )
  ORIGINAL[4]: max_entries
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776196
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: av_freep((&s -> programs[i] -> stream_index))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 [ VAR2 ] -> VAR3 ) )
  ORIGINAL[2]: &s -> programs[i] -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1 [ VAR2 ] -> VAR3
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641168
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479622
FRAGMENT_COUNT: 10
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: tags && tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[2]: tags[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: i++
  TYPE[3]: CALL
  TOKENIZED[3]: i++
  ORIGINAL[4]: tags[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: id != AV_CODEC_ID_NONE
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 != VAR2
  ORIGINAL[6]: tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719477004
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[1]: sizeof(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641044
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477659
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl == s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2 -> VAR3
  ORIGINAL[2]: s -> parse_queue_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640575
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641157
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641055
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772506
FRAGMENT_COUNT: 26
  ORIGINAL[0]: pktl -> pkt . stream_index != stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 != VAR3
  ORIGINAL[1]: pktl -> pkt . pts != ((int64_t )0x8000000000000000UL) && delay <= 16 && has_decode_delay_been_guessed(st)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 <= 16 && FUN1 ( VAR6 )
  ORIGINAL[2]: pktl -> pkt . pts != ((int64_t )0x8000000000000000UL) && delay <= 16
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 <= 16
  ORIGINAL[3]: has_decode_delay_been_guessed(st)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: pts_buffer[0] = pktl -> pkt . pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 0 ] = VAR2 -> VAR3 . VAR4
  ORIGINAL[5]: pts_buffer[0]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ 0 ]
  ORIGINAL[6]: pktl -> pkt . pts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 . VAR3
  ORIGINAL[7]: pktl -> pkt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: i = 0
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 = 0
  ORIGINAL[9]: i < delay && pts_buffer[i] > pts_buffer[i + 1]
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 < VAR2 && VAR3 [ VAR1 ] > VAR3 [ VAR1 + 1 ]
  ORIGINAL[10]: i < delay
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 < VAR2
  ORIGINAL[11]: pktl -> pkt . dts == ((int64_t )0x8000000000000000UL)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 . VAR3 == ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[12]: pktl -> pkt . dts
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 . VAR3
  ORIGINAL[13]: pktl -> pkt
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: (int64_t )0x8000000000000000UL
  TYPE[14]: CALL
  TOKENIZED[14]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[15]: pkt
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pts
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pkt
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: dts
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pktl
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pts_buffer
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pktl
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: i
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: i
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: delay
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: pktl
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1

CENTER_NODE: 47244641321
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064777726
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *next = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *next = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: start
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: next
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771451
FRAGMENT_COUNT: 9
  ORIGINAL[0]: score_ret >  *score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > *score_max
  ORIGINAL[1]: *score_max
  TYPE[1]: CALL
  TOKENIZED[1]: *score_max
  ORIGINAL[2]: *score_max = score_ret
  TYPE[2]: CALL
  TOKENIZED[2]: *score_max = VAR1
  ORIGINAL[3]: *score_max
  TYPE[3]: CALL
  TOKENIZED[3]: *score_max
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: score_ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score_max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: score_ret
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640551
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640819
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772419
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < program -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[program -> stream_index[i]]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 -> VAR4 [ VAR5 ] ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: program
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

