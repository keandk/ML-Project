# Tokenized code fragments for 501247-v1.0.1-good
# Total center nodes processed: 19
# Total code fragments found: 78

CENTER_NODE: 30064771851
FRAGMENT_COUNT: 5
  ORIGINAL[0]: set_isdn_info(pseudo_header, direction)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;
  ORIGINAL[2]: pkt_encap
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pseudo_header
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: direction
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476813
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fwrite(data, size, count, stream)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: count
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stream
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476781
FRAGMENT_COUNT: 6
  ORIGINAL[0]: n <= data_chars
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= VAR2
  ORIGINAL[1]: hex_from_char(linebuff[dollar_offset+n]) << 4
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 [ dollar_offset+n ] ) << 4
  ORIGINAL[2]: linebuff[dollar_offset+n]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ dollar_offset+n ]
  ORIGINAL[3]: linebuff[dollar_offset+n+1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ dollar_offset+n+1 ]
  ORIGINAL[4]: <global> linebuff
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: dollar_offset
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771953
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (c >= '0') && (c <= '9')
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 >= '0' ) && ( VAR1 <= '9' )
  ORIGINAL[1]: c >= '0'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= '0'
  ORIGINAL[2]: c <= '9'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= '9'
  ORIGINAL[3]: c - '0'
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - '0'
  ORIGINAL[4]: (c >= 'a') && (c <= 'f')
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 >= 'a' ) && ( VAR1 <= 'f' )
  ORIGINAL[5]: c >= 'a'
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 >= 'a'
  ORIGINAL[6]: c
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: c
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476807
FRAGMENT_COUNT: 2
  ORIGINAL[0]: encap
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: WTAP_ENCAP_CATAPULT_DCT2000
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771968
FRAGMENT_COUNT: 3
  ORIGINAL[0]: v == v2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: v
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: v2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771975
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *(const gint64*)v2
  TYPE[0]: CALL
  TOKENIZED[0]: * ( const gint64* ) VAR1
  ORIGINAL[1]: (const gint64*)v2
  TYPE[1]: CALL
  TOKENIZED[1]: ( const gint64* ) VAR1
  ORIGINAL[2]: v2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640343
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064771793
FRAGMENT_COUNT: 3
  ORIGINAL[0]: strlen(context_name) + 1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) + 1
  ORIGINAL[1]: strlen(context_name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: <global> context_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064771969
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (guint)(unsigned long)v
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 ) ( unsigned long ) VAR2
  ORIGINAL[1]: (unsigned long)v
  TYPE[1]: CALL
  TOKENIZED[1]: ( unsigned long ) VAR1

CENTER_NODE: 30064771913
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pseudo_header->dct2000.inner_pseudo_header
  TYPE[0]: CALL
  TOKENIZED[0]: pseudo_header->dct2000 . VAR1
  ORIGINAL[1]: pseudo_header->dct2000
  TYPE[1]: CALL
  TOKENIZED[1]: pseudo_header->dct2000
  ORIGINAL[2]: dct2000
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: inner_pseudo_header
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pseudo_header
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771352
FRAGMENT_COUNT: 6
  ORIGINAL[0]: result == NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: *offset = *offset + *length
  TYPE[1]: CALL
  TOKENIZED[1]: *offset = *offset + *length
  ORIGINAL[2]: *offset
  TYPE[2]: CALL
  TOKENIZED[2]: *offset
  ORIGINAL[3]: *offset + *length
  TYPE[3]: CALL
  TOKENIZED[3]: *offset + *length
  ORIGINAL[4]: *offset
  TYPE[4]: CALL
  TOKENIZED[4]: *offset
  ORIGINAL[5]: *length
  TYPE[5]: CALL
  TOKENIZED[5]: *length

CENTER_NODE: 30064771074
FRAGMENT_COUNT: 2
  ORIGINAL[0]: secondline[MAX_TIMESTAMP_LINE_LENGTH]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: MAX_TIMESTAMP_LINE_LENGTH
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771175
FRAGMENT_COUNT: 10
  ORIGINAL[0]: wdh->dump.dct2000 == NULL
  TYPE[0]: CALL
  TOKENIZED[0]: wdh->dump . VAR1 == VAR2
  ORIGINAL[1]: do_fwrite(file_externals->firstline, 1, file_externals->firstline_length, wdh->fh, err)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( file_externals->firstline , 1 , file_externals->firstline_length , wdh->fh , VAR1 )
  ORIGINAL[2]: file_externals->firstline_length
  TYPE[2]: CALL
  TOKENIZED[2]: file_externals->firstline_length
  ORIGINAL[3]: firstline_length
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: file_externals
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: file_externals
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: wdh
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: file_externals
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: file_externals
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: file_externals
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771949
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pseudo_header->dct2000.inner_pseudo_header.p2p.sent
  TYPE[0]: CALL
  TOKENIZED[0]: pseudo_header->dct2000 . VAR1 . VAR2 . VAR3
  ORIGINAL[1]: pseudo_header->dct2000.inner_pseudo_header.p2p
  TYPE[1]: CALL
  TOKENIZED[1]: pseudo_header->dct2000 . VAR1 . VAR2
  ORIGINAL[2]: pseudo_header->dct2000.inner_pseudo_header
  TYPE[2]: CALL
  TOKENIZED[2]: pseudo_header->dct2000 . VAR1
  ORIGINAL[3]: p2p
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sent
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771962
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hex_lookup
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: hex_lookup
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477378
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pseudo_header->dct2000.inner_pseudo_header.isdn.uton = (direction == received)
  TYPE[0]: CALL
  TOKENIZED[0]: pseudo_header->dct2000 . VAR1 . VAR2 . VAR3 = ( VAR4 == VAR5 )
  ORIGINAL[1]: pseudo_header->dct2000
  TYPE[1]: CALL
  TOKENIZED[1]: pseudo_header->dct2000
  ORIGINAL[2]: dct2000
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pseudo_header
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477399
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (const gint64*)v
  TYPE[0]: CALL
  TOKENIZED[0]: ( const gint64* ) VAR1
  ORIGINAL[1]: v
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771986
FRAGMENT_COUNT: 5
  ORIGINAL[0]: strlen(linebuff) > MAX_TIMESTAMP_LINE_LENGTH
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) > VAR2
  ORIGINAL[1]: n=0
  TYPE[1]: CALL
  TOKENIZED[1]: n=0
  ORIGINAL[2]: for (n=0;(linebuff[n] != ' ') && (n < MAX_MONTH_LETTERS);n++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( n=0 ; ( VAR1 [ VAR2 ] != ' ' ) && ( VAR2 < VAR3 ) ; n++ )
  ORIGINAL[3]: n
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: <global> linebuff
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

