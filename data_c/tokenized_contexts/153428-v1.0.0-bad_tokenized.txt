# Tokenized code fragments for 153428-v1.0.0-bad
# Total center nodes processed: 132
# Total code fragments found: 646

CENTER_NODE: 30064771185
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fclose(stonesoup_printf_context)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 68719479077
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_SBPRO_4
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774160
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_freep((&avci -> audio_data))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &avci -> VAR1 ) )
  ORIGINAL[1]: &avci -> audio_data
  TYPE[1]: CALL
  TOKENIZED[1]: &avci -> VAR1

CENTER_NODE: 30064773772
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (codec_tag & 0xff) >= 48 && (codec_tag & 0xff) <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 & 0xff ) >= 48 && ( VAR1 & 0xff ) <= '9'
  ORIGINAL[1]: (codec_tag & 0xff) >= 'a'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 & 0xff ) >= 'a'
  ORIGINAL[2]: codec_tag & 0xff
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 & 0xff
  ORIGINAL[3]: codec_tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771375
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (s -> codec_id) == AV_CODEC_ID_IFF_ILBM
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: s -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (s -> codec_id) == AV_CODEC_ID_IFF_BYTERUN1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: s -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_IFF_BYTERUN1
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771306
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 68719478029
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: avpkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774138
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 32 + 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 32 + 1
  ORIGINAL[1]: *buf = &avci -> buffer[i]
  TYPE[1]: CALL
  TOKENIZED[1]: *buf = &avci -> VAR1 [ VAR2 ]
  ORIGINAL[2]: &avci -> buffer[i]
  TYPE[2]: CALL
  TOKENIZED[2]: &avci -> VAR1 [ VAR2 ]
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477602
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774428
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )
  ORIGINAL[4]: <global> ff_avcodec_locked
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 68719478899
FRAGMENT_COUNT: 2
  ORIGINAL[0]: AV_CODEC_ID_PCM_S8_PLANAR == 65563
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 65563
  ORIGINAL[1]: AV_CODEC_ID_PCM_S8_PLANAR
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477622
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771800
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !((desc -> flags) & 16)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( ( VAR1 -> VAR2 ) & 16 )
  ORIGINAL[1]: (desc -> flags) & 16
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) & 16
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 30064772891
FRAGMENT_COUNT: 36
  ORIGINAL[0]: avctx -> codec -> capabilities & 0x0040
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x0040
  ORIGINAL[1]: !(avctx -> codec -> capabilities & 0x10000)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 -> VAR3 & 0x10000 )
  ORIGINAL[2]: avctx -> codec -> capabilities & 0x10000
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 & 0x10000
  ORIGINAL[3]: frame -> nb_samples < avctx -> frame_size && !avctx -> internal -> last_audio_frame
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 < VAR3 -> VAR4 && !avctx -> VAR5 -> VAR6
  ORIGINAL[4]: frame -> nb_samples < avctx -> frame_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 < VAR3 -> VAR4
  ORIGINAL[5]: frame -> nb_samples
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avctx -> frame_size
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ret = ((avctx -> codec -> encode2)(avctx,avpkt,frame,got_packet_ptr))
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 , VAR6 , VAR7 ) )
  ORIGINAL[8]: (avctx -> codec -> encode2)(avctx,avpkt,frame,got_packet_ptr)
  TYPE[8]: CALL
  TOKENIZED[8]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[9]: avctx -> codec -> encode2
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[10]: avctx -> codec
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: !ret
  TYPE[11]: CALL
  TOKENIZED[11]: !ret
  ORIGINAL[12]: avpkt -> data && avpkt -> data == avctx -> internal -> byte_buffer
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 && VAR1 -> VAR2 == VAR3 -> VAR4 -> VAR5
  ORIGINAL[13]: avpkt -> data
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: !ret
  TYPE[14]: CALL
  TOKENIZED[14]: !ret
  ORIGINAL[15]: ret < 0 || !( *got_packet_ptr)
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 < 0 || ! ( *got_packet_ptr )
  ORIGINAL[16]: ret < 0
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 < 0
  ORIGINAL[17]: nb_samples
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: frame_size
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: codec
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: encode2
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: data
  TYPE[21]: FIELD_IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: frame
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: avctx
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: ret
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: avctx
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: avctx
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: avpkt
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: frame
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: got_packet_ptr
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: ret
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: avpkt
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: ret
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: ret
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: padded_frame
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: ret
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1

CENTER_NODE: 30064772146
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772132
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771158
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stat(dirpath, &st) == -1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[1]: retval = mkdir(dirpath, 0700)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[2]: mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[3]: retval
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771265
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: ptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: min_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772120
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478971
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> active_thread_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> codec -> flush
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: avctx -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478275
FRAGMENT_COUNT: 7
  ORIGINAL[0]: reordered_pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_last_pts = reordered_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: ctx -> pts_correction_last_pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: reordered_pts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: reordered_pts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: reordered_pts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: reordered_pts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478553
FRAGMENT_COUNT: 12
  ORIGINAL[0]: avpkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: did_split = av_packet_split_side_data(&tmp)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( &tmp )
  ORIGINAL[2]: pkt_recoded = tmp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: pkt_recoded . data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: pkt_recoded . data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: pkt_recoded
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tmp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt_recoded
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt_recoded
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt_recoded
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt_recoded
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt_recoded
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064773510
FRAGMENT_COUNT: 2
  ORIGINAL[0]: avctx -> sub_charenc_mode != 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 1
  ORIGINAL[1]: avctx -> sub_charenc_mode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2

CENTER_NODE: 47244640503
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772129
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774382
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *p = hwaccel
  TYPE[0]: CALL
  TOKENIZED[0]: *p = VAR1
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: hwaccel
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hwaccel
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774178
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [4UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 4UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 68719479368
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774438
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_OBTAIN)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: *ff_lockmgr_cb
  TYPE[1]: CALL
  TOKENIZED[1]: *ff_lockmgr_cb
  ORIGINAL[2]: &avformat_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &avformat_mutex
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1
  ORIGINAL[4]: <global> ff_lockmgr_cb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: AV_LOCK_OBTAIN
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772123
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774354
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *s = v
  TYPE[0]: CALL
  TOKENIZED[0]: *s = VAR1
  ORIGINAL[1]: *s
  TYPE[1]: CALL
  TOKENIZED[1]: *s
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478004
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !avpkt -> data || avpkt -> size < size
  TYPE[0]: CALL
  TOKENIZED[0]: !avpkt -> VAR1 || VAR2 -> VAR3 < VAR3
  ORIGINAL[1]: avpkt -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> internal
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: internal
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640771
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477601
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> best_effort_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477227
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !buf -> base[0]
  TYPE[0]: CALL
  TOKENIZED[0]: !buf -> VAR1 [ 0 ]
  ORIGINAL[1]: stride_align[8]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 8 ]
  ORIGINAL[2]: *desc = av_pix_fmt_desc_get(s -> pix_fmt)
  TYPE[2]: CALL
  TOKENIZED[2]: *desc = FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: av_pix_fmt_desc_get(s -> pix_fmt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[4]: desc -> comp
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640557
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773673
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avcodec_is_open(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: av_freep((&avctx -> internal))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &avctx -> VAR1 ) )
  ORIGINAL[2]: &avctx -> internal
  TYPE[2]: CALL
  TOKENIZED[2]: &avctx -> VAR1
  ORIGINAL[3]: avctx -> internal
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 47244640697
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476952
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> encode_sub
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec -> encode2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: encode2
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771233
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 17 * min_size / 16 + 32 > min_size
  TYPE[0]: CALL
  TOKENIZED[0]: 17 * VAR1 / 16 + 32 > VAR1
  ORIGINAL[1]: 17 * min_size / 16 + 32
  TYPE[1]: CALL
  TOKENIZED[1]: 17 * VAR1 / 16 + 32
  ORIGINAL[2]: 17 * min_size / 16
  TYPE[2]: CALL
  TOKENIZED[2]: 17 * VAR1 / 16
  ORIGINAL[3]: 17 * min_size
  TYPE[3]: CALL
  TOKENIZED[3]: 17 * VAR1

CENTER_NODE: 68719479059
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_S32BE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640559
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771300
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec && codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: codec -> decode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decode
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774473
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !(!s -> internal)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( !s -> VAR1 )
  ORIGINAL[1]: !s -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1

CENTER_NODE: 30064772139
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771285
FRAGMENT_COUNT: 6
  ORIGINAL[0]: min_size > 18446744073709551615UL - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 18446744073709551615UL - 16
  ORIGINAL[1]: !ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[1]: CALL
  TOKENIZED[1]: !ff_fast_malloc ( VAR1 , VAR2 , VAR3 + 16 , 1 )
  ORIGINAL[2]: ff_fast_malloc(p,size,min_size + 16,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 + 16 , 1 )
  ORIGINAL[3]: min_size + 16
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 16
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771916
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 68719479357
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec_id < AV_CODEC_ID_FIRST_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: codec_id < AV_CODEC_ID_FIRST_SUBTITLE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: codec_id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_FIRST_SUBTITLE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774023
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(AV_CODEC_ID_ADPCM_G722 == 69660)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 69660 )
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_G722 == 69660
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 69660
  ORIGINAL[2]: AV_CODEC_ID_ADPCM_G722
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640720
FRAGMENT_COUNT: 1
  ORIGINAL[0]: be < 0 || be > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 > 1

CENTER_NODE: 68719478681
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774029
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_SRT == 94216)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 94216 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064772055
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (desc -> flags) & 8
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) & 8
  ORIGINAL[1]: desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: flags
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774110
FRAGMENT_COUNT: 3
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: sizeof(\
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( \

CENTER_NODE: 30064772138
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640324
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (ret = av_samples_fill_arrays(frame -> extended_data,&frame -> linesize[0],((uint8_t *)((intptr_t )buf)),nb_channels,frame -> nb_samples,sample_fmt,align)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , &frame -> VAR4 [ 0 ] , ( ( VAR5 * ) ( ( VAR6 ) VAR7 ) ) , VAR8 , VAR2 -> VAR9 , VAR10 , VAR11 ) ) < 0

CENTER_NODE: 68719477655
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ff_unlock_avcodec()
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( )
  ORIGINAL[1]: ret = avcodec_open2(avctx,codec,options)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: avcodec_open2(avctx,codec,options)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479037
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_PCM_F32BE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771322
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> coded_height = height
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> coded_height
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: coded_height
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: height
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719478256
FRAGMENT_COUNT: 5
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772147
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> codec_descriptor
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478999
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_type
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640769
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771940
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avci -> buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avci -> buffer_count--
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> buffer_count--
  ORIGINAL[2]: avci -> buffer_count
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: last
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772122
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_pos = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_pos
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477611
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478646
FRAGMENT_COUNT: 3
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_OPUS_DEPRECATED
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_OPUS
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476927
FRAGMENT_COUNT: 4
  ORIGINAL[0]: min_size > 18446744073709551615UL - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 18446744073709551615UL - 16
  ORIGINAL[1]: av_freep(p)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773234
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: side_metadata = val + strlen(val) + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + FUN1 ( VAR2 ) + 1
  ORIGINAL[2]: val + strlen(val) + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + FUN1 ( VAR1 ) + 1
  ORIGINAL[3]: val + strlen(val)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + FUN1 ( VAR1 )
  ORIGINAL[4]: side_metadata
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476947
FRAGMENT_COUNT: 3
  ORIGINAL[0]: initialized = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: initialized
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: initialized
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640695
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773636
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_lock_avcodec(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477170
FRAGMENT_COUNT: 5
  ORIGINAL[0]: buf_size = av_samples_get_buffer_size(((void *)0),avctx -> channels,frame -> nb_samples,avctx -> sample_fmt,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( ( ( void * ) 0 ) , VAR2 -> VAR3 , VAR4 -> VAR5 , VAR2 -> VAR6 , 0 )
  ORIGINAL[1]: buf_size < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: buf_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477507
FRAGMENT_COUNT: 15
  ORIGINAL[0]: s -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pic -> data[0] && (pic -> width != s -> width || pic -> height != s -> height || pic -> format != (s -> pix_fmt))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ] && ( VAR1 -> VAR3 != VAR4 -> VAR3 || VAR1 -> VAR5 != VAR4 -> VAR5 || VAR1 -> VAR6 != ( VAR4 -> VAR7 ) )
  ORIGINAL[2]: s -> width
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> height
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> pix_fmt
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> width
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: s -> height
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: s -> pix_fmt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: (s -> release_buffer)(s,pic)
  TYPE[8]: CALL
  TOKENIZED[8]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[9]: ff_init_buffer_info(s,pic)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477644
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: bits_per_sample = av_get_bits_per_sample(ctx -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: av_get_bits_per_sample(ctx -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: AVMEDIA_TYPE_AUDIO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bits_per_sample
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: bits_per_sample
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772119
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_duration
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640517
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0

CENTER_NODE: 30064774033
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )
  ORIGINAL[1]: 100 >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 100 >= 100

CENTER_NODE: 30064772070
FRAGMENT_COUNT: 14
  ORIGINAL[0]: frame -> pkt_pts = ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: frame -> pkt_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (int64_t )0x8000000000000000UL
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[3]: pkt_pts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: frame
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: frame
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: frame
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: frame
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: frame
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: frame
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719477968
FRAGMENT_COUNT: 79
  ORIGINAL[0]: avctx -> extradata_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> extradata_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> internal
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> priv_data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> priv_data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avctx -> priv_data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avctx -> priv_data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: avctx -> priv_data
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avctx -> coded_width
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: avctx -> coded_height
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: avctx -> width
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: avctx -> height
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: avctx -> coded_width
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: avctx -> coded_height
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: avctx -> width
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: avctx -> height
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: avctx -> subtitle_header
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: avctx -> frame_number
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: avctx -> codec_descriptor
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2
  ORIGINAL[19]: avctx -> codec_id
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: avctx -> strict_std_compliance
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2
  ORIGINAL[21]: avctx -> sample_rate
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2
  ORIGINAL[22]: avctx -> thread_opaque
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: avctx -> active_thread_type
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2
  ORIGINAL[24]: avctx -> thread_count
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2
  ORIGINAL[25]: avctx -> lowres
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2
  ORIGINAL[26]: avctx -> lowres
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 -> VAR2
  ORIGINAL[27]: avctx -> sample_fmt
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 -> VAR2
  ORIGINAL[28]: avctx -> sample_fmt
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 -> VAR2
  ORIGINAL[29]: avctx -> sample_fmt
  TYPE[29]: CALL
  TOKENIZED[29]: VAR1 -> VAR2
  ORIGINAL[30]: avctx -> pix_fmt
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 -> VAR2
  ORIGINAL[31]: avctx -> codec_id
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 -> VAR2
  ORIGINAL[32]: avctx -> codec_id
  TYPE[32]: CALL
  TOKENIZED[32]: VAR1 -> VAR2
  ORIGINAL[33]: avctx -> strict_std_compliance
  TYPE[33]: CALL
  TOKENIZED[33]: VAR1 -> VAR2
  ORIGINAL[34]: avctx -> sample_rate
  TYPE[34]: CALL
  TOKENIZED[34]: VAR1 -> VAR2
  ORIGINAL[35]: avctx -> channel_layout
  TYPE[35]: CALL
  TOKENIZED[35]: VAR1 -> VAR2
  ORIGINAL[36]: avctx -> channel_layout
  TYPE[36]: CALL
  TOKENIZED[36]: VAR1 -> VAR2
  ORIGINAL[37]: avctx -> channel_layout
  TYPE[37]: CALL
  TOKENIZED[37]: VAR1 -> VAR2
  ORIGINAL[38]: avctx -> codec_id
  TYPE[38]: CALL
  TOKENIZED[38]: VAR1 -> VAR2
  ORIGINAL[39]: avctx -> width
  TYPE[39]: CALL
  TOKENIZED[39]: VAR1 -> VAR2
  ORIGINAL[40]: avctx -> height
  TYPE[40]: CALL
  TOKENIZED[40]: VAR1 -> VAR2
  ORIGINAL[41]: avctx -> rc_initial_buffer_occupancy
  TYPE[41]: CALL
  TOKENIZED[41]: VAR1 -> VAR2
  ORIGINAL[42]: avctx -> rc_initial_buffer_occupancy
  TYPE[42]: CALL
  TOKENIZED[42]: VAR1 -> VAR2
  ORIGINAL[43]: avctx -> rc_buffer_size
  TYPE[43]: CALL
  TOKENIZED[43]: VAR1 -> VAR2
  ORIGINAL[44]: avctx -> pts_correction_num_faulty_pts
  TYPE[44]: CALL
  TOKENIZED[44]: VAR1 -> VAR2
  ORIGINAL[45]: avctx -> pts_correction_num_faulty_dts
  TYPE[45]: CALL
  TOKENIZED[45]: VAR1 -> VAR2
  ORIGINAL[46]: avctx -> pts_correction_last_pts
  TYPE[46]: CALL
  TOKENIZED[46]: VAR1 -> VAR2
  ORIGINAL[47]: avctx -> pts_correction_last_dts
  TYPE[47]: CALL
  TOKENIZED[47]: VAR1 -> VAR2
  ORIGINAL[48]: avctx -> active_thread_type
  TYPE[48]: CALL
  TOKENIZED[48]: VAR1 -> VAR2
  ORIGINAL[49]: avctx -> codec
  TYPE[49]: CALL
  TOKENIZED[49]: VAR1 -> VAR2
  ORIGINAL[50]: avctx -> bit_rate
  TYPE[50]: CALL
  TOKENIZED[50]: VAR1 -> VAR2
  ORIGINAL[51]: avctx -> bit_rate
  TYPE[51]: CALL
  TOKENIZED[51]: VAR1 -> VAR2
  ORIGINAL[52]: avctx -> channel_layout
  TYPE[52]: CALL
  TOKENIZED[52]: VAR1 -> VAR2
  ORIGINAL[53]: avctx -> channel_layout
  TYPE[53]: CALL
  TOKENIZED[53]: VAR1 -> VAR2
  ORIGINAL[54]: avctx -> channels
  TYPE[54]: CALL
  TOKENIZED[54]: VAR1 -> VAR2
  ORIGINAL[55]: avctx -> channels
  TYPE[55]: CALL
  TOKENIZED[55]: VAR1 -> VAR2
  ORIGINAL[56]: (avctx -> codec_type) != AVMEDIA_TYPE_SUBTITLE
  TYPE[56]: CALL
  TOKENIZED[56]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[57]: avctx -> codec_type
  TYPE[57]: CALL
  TOKENIZED[57]: VAR1 -> VAR2
  ORIGINAL[58]: av_log(avctx,16,\
  TYPE[58]: CALL
  TOKENIZED[58]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[59]: avctx -> priv_data
  TYPE[59]: CALL
  TOKENIZED[59]: VAR1 -> VAR2
  ORIGINAL[60]: avctx -> internal
  TYPE[60]: CALL
  TOKENIZED[60]: VAR1 -> VAR2
  ORIGINAL[61]: avctx
  TYPE[61]: IDENTIFIER
  TOKENIZED[61]: VAR1
  ORIGINAL[62]: avctx
  TYPE[62]: IDENTIFIER
  TOKENIZED[62]: VAR1
  ORIGINAL[63]: avctx
  TYPE[63]: IDENTIFIER
  TOKENIZED[63]: VAR1
  ORIGINAL[64]: avctx
  TYPE[64]: IDENTIFIER
  TOKENIZED[64]: VAR1
  ORIGINAL[65]: avctx
  TYPE[65]: IDENTIFIER
  TOKENIZED[65]: VAR1
  ORIGINAL[66]: avctx
  TYPE[66]: IDENTIFIER
  TOKENIZED[66]: VAR1
  ORIGINAL[67]: avctx
  TYPE[67]: IDENTIFIER
  TOKENIZED[67]: VAR1
  ORIGINAL[68]: avctx
  TYPE[68]: IDENTIFIER
  TOKENIZED[68]: VAR1
  ORIGINAL[69]: avctx
  TYPE[69]: IDENTIFIER
  TOKENIZED[69]: VAR1
  ORIGINAL[70]: avctx
  TYPE[70]: IDENTIFIER
  TOKENIZED[70]: VAR1
  ORIGINAL[71]: avctx
  TYPE[71]: IDENTIFIER
  TOKENIZED[71]: VAR1
  ORIGINAL[72]: avctx
  TYPE[72]: IDENTIFIER
  TOKENIZED[72]: VAR1
  ORIGINAL[73]: avctx
  TYPE[73]: IDENTIFIER
  TOKENIZED[73]: VAR1
  ORIGINAL[74]: avctx
  TYPE[74]: IDENTIFIER
  TOKENIZED[74]: VAR1
  ORIGINAL[75]: avctx
  TYPE[75]: IDENTIFIER
  TOKENIZED[75]: VAR1
  ORIGINAL[76]: avctx
  TYPE[76]: IDENTIFIER
  TOKENIZED[76]: VAR1
  ORIGINAL[77]: avctx
  TYPE[77]: IDENTIFIER
  TOKENIZED[77]: VAR1
  ORIGINAL[78]: avctx
  TYPE[78]: IDENTIFIER
  TOKENIZED[78]: VAR1

CENTER_NODE: 68719476877
FRAGMENT_COUNT: 7
  ORIGINAL[0]: (stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)) != (char *) -1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) != ( char * ) -1
  ORIGINAL[1]: *stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_tainted_buff = ( char* ) FUN1 ( VAR1 , sizeof ( char ) )
  ORIGINAL[2]: stonesoup_s = stonesoup_shm
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: stonesoup_s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_shm
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772107
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !frame || !( *frame)
  TYPE[0]: CALL
  TOKENIZED[0]: !frame || ! ( *frame )
  ORIGINAL[1]: f -> extended_data != f -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR1 -> VAR3
  ORIGINAL[2]: f -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: f -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_freep((&f -> extended_data))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( &f -> VAR1 ) )
  ORIGINAL[5]: &f -> extended_data
  TYPE[5]: CALL
  TOKENIZED[5]: &f -> VAR1
  ORIGINAL[6]: f -> extended_data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: extended_data
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: f
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: frame
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478453
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avpkt -> data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avpkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: *avpkt
  TYPE[2]: CALL
  TOKENIZED[2]: *avpkt
  ORIGINAL[3]: ret >= 0 &&  *got_frame_ptr
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 >= 0 && *got_frame_ptr
  ORIGINAL[4]: frame -> pkt_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avpkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: dts
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avpkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640699
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477618
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772056
FRAGMENT_COUNT: 10
  ORIGINAL[0]: ( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *fmt ) != VAR1 && FUN1 ( *fmt )
  ORIGINAL[1]: ( *fmt) != AV_PIX_FMT_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: ( *fmt ) != VAR1
  ORIGINAL[2]: *fmt
  TYPE[2]: CALL
  TOKENIZED[2]: *fmt
  ORIGINAL[3]: is_hwaccel_pix_fmt( *fmt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( *fmt )
  ORIGINAL[4]: ++fmt
  TYPE[4]: CALL
  TOKENIZED[4]: ++fmt
  ORIGINAL[5]: while (( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt))
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: while ( ( *fmt ) != VAR1 && FUN1 ( *fmt ) )
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_PIX_FMT_NONE
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640431
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478323
FRAGMENT_COUNT: 10
  ORIGINAL[0]: avctx -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> sample_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: size < 8
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 8
  ORIGINAL[4]: avctx -> width
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avctx -> height
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avctx -> width
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: avctx -> height
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: height
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478599
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: sub -> num_rects
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_freep((&sub -> rects[i] -> pict . data[2]))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( &sub -> VAR1 [ VAR2 ] -> VAR3 . VAR4 [ 2 ] ) )
  ORIGINAL[3]: sub -> rects
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: rects
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: sub
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479335
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_RELEASE)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: *ff_lockmgr_cb
  TYPE[1]: CALL
  TOKENIZED[1]: *ff_lockmgr_cb
  ORIGINAL[2]: &avformat_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &avformat_mutex
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> ff_lockmgr_cb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: <global> avformat_mutex
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1
  ORIGINAL[6]: AV_LOCK_RELEASE
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477105
FRAGMENT_COUNT: 6
  ORIGINAL[0]: align = (linesize_align[0] > linesize_align[3]?linesize_align[0] : linesize_align[3])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( VAR2 [ 0 ] > VAR2 [ 3 ] ?linesize_align [ 0 ] : VAR2 [ 3 ] )
  ORIGINAL[1]: linesize_align[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: linesize_align[3]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 3 ]
  ORIGINAL[3]: linesize_align[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: linesize_align
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: linesize_align
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479047
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_FIRST_AUDIO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S16BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S16BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774176
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [3UL]{(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 3UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 30064774395
FRAGMENT_COUNT: 10
  ORIGINAL[0]: hwaccel = av_hwaccel_next(hwaccel)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: (hwaccel -> id) == codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: hwaccel -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hwaccel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: hwaccel
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_id
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: hwaccel
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: hwaccel
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772135
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774040
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 92 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 92 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 92 << 8

CENTER_NODE: 30064772145
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_timebase = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_timebase
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_timebase
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479045
FRAGMENT_COUNT: 5
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_U8
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_U8
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U8
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U8
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772124
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479317
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&codec_mutex,AV_LOCK_OBTAIN)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &codec_mutex , VAR1 )
  ORIGINAL[1]: &codec_mutex
  TYPE[1]: CALL
  TOKENIZED[1]: &codec_mutex
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: AV_LOCK_OBTAIN
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477599
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477409
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: audio_get_buffer(avctx,frame)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: AVMEDIA_TYPE_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479305
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ff_lockmgr_cb(&avformat_mutex,AV_LOCK_DESTROY)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: ff_lockmgr_cb = cb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: cb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771115
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (shm = shmat(shmid, NULL, 0)) == (char *) -1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) == ( char * ) -1
  ORIGINAL[1]: s = shm
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: shm
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772131
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> sample_rate = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sample_rate
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640560
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(ret <= 0)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 <= 0 )

CENTER_NODE: 47244640371
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772043
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret[i] = r
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[1]: ret[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: r
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478670
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772150
FRAGMENT_COUNT: 4
  ORIGINAL[0]: memset(sub,0,sizeof(( *sub)))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 , sizeof ( ( *sub ) ) )
  ORIGINAL[1]: sizeof(( *sub))
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( ( *sub ) )
  ORIGINAL[2]: *sub
  TYPE[2]: CALL
  TOKENIZED[2]: *sub
  ORIGINAL[3]: sub
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773753
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec = avcodec_find_encoder(id)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: avcodec_find_encoder(id)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640751
FRAGMENT_COUNT: 1
  ORIGINAL[0]: bps < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 4

CENTER_NODE: 30064772050
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret[i] = r
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[1]: ret[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: r
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771868
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> pkt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: s -> pkt -> pos
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s -> pkt -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: s -> pkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: s -> pkt
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: size
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477613
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477449
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (avctx -> get_buffer)(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[1]: frame
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772143
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773321
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_packet_free_side_data(&tmp)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &tmp )
  ORIGINAL[1]: &tmp
  TYPE[1]: CALL
  TOKENIZED[1]: &tmp
  ORIGINAL[2]: did_split
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479263
FRAGMENT_COUNT: 5
  ORIGINAL[0]: tab[i][0] == a
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] [ 0 ] == VAR3
  ORIGINAL[1]: tab[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tab
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640374
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478748
FRAGMENT_COUNT: 12
  ORIGINAL[0]: enc -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: encode?avcodec_find_encoder(enc -> codec_id) : avcodec_find_decoder(enc -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: encode?avcodec_find_encoder ( VAR1 -> VAR2 ) : FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[2]: avcodec_find_encoder(enc -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: enc -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avcodec_find_decoder(enc -> codec_id)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[5]: enc -> codec_id
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec_id
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_id
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: p
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: encode
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: enc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: enc
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719477626
FRAGMENT_COUNT: 3
  ORIGINAL[0]: frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640365
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477589
FRAGMENT_COUNT: 7
  ORIGINAL[0]: frame == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: frame -> extended_data = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avcodec_get_frame_defaults(frame)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640693
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479275
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_vlog(avc,24,msg,argument_list)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , VAR2 , VAR3 )
  ORIGINAL[1]: msg
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: msg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: msg
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: argument_list
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774013
FRAGMENT_COUNT: 13
  ORIGINAL[0]: p -> profile != - 'c'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != - 'c'
  ORIGINAL[1]: p -> profile
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: - 'c'
  TYPE[2]: CALL
  TOKENIZED[2]: - 'c'
  ORIGINAL[3]: p++
  TYPE[3]: CALL
  TOKENIZED[3]: p++
  ORIGINAL[4]: p -> profile == profile
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 == VAR2
  ORIGINAL[5]: p -> profile
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: p -> name
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: profile
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: name
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: p
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: p
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: profile
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: p
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064774370
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_log_ask_for_sample(avc,((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: want_sample
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771261
FRAGMENT_COUNT: 5
  ORIGINAL[0]: min_size < ( *size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( *size )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: !( *p)
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( *p )
  ORIGINAL[3]: *p
  TYPE[3]: CALL
  TOKENIZED[3]: *p
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774459
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_toupper((x & 0xff)) + (av_toupper((x >> 8 & 0xff)) << 8) + (av_toupper((x >> 16 & 0xff)) << 16) + (av_toupper((x >> 24 & 0xff)) << 24)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 & 0xff ) ) + ( FUN1 ( ( VAR1 >> 8 & 0xff ) ) << 8 ) + ( FUN1 ( ( VAR1 >> 16 & 0xff ) ) << 16 ) + ( FUN1 ( ( VAR1 >> 24 & 0xff ) ) << 24 )
  ORIGINAL[1]: av_toupper((x >> 24 & 0xff)) << 24
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 >> 24 & 0xff ) ) << 24
  ORIGINAL[2]: av_toupper((x >> 24 & 0xff))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( VAR1 >> 24 & 0xff ) )

CENTER_NODE: 47244640377
FRAGMENT_COUNT: 0

