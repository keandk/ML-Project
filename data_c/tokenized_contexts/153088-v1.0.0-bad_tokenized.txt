# Tokenized code fragments for 153088-v1.0.0-bad
# Total center nodes processed: 40
# Total code fragments found: 256

CENTER_NODE: 30064771561
FRAGMENT_COUNT: 25
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: den != ((int64_t )0x8000000000000000UL)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[4]: den <= 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 <= 0
  ORIGINAL[5]: -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24))
  TYPE[5]: CALL
  TOKENIZED[5]: - ( ( int ) ( ( 'I' | 'N' << 8 | 'D' << 16 ) | ( ( unsigned int ) 'A' ) << 24 ) )
  ORIGINAL[6]: (int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24)
  TYPE[6]: CALL
  TOKENIZED[6]: ( int ) ( ( 'I' | 'N' << 8 | 'D' << 16 ) | ( ( unsigned int ) 'A' ) << 24 )
  ORIGINAL[7]: ('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24
  TYPE[7]: CALL
  TOKENIZED[7]: ( 'I' | 'N' << 8 | 'D' << 16 ) | ( ( unsigned int ) 'A' ) << 24
  ORIGINAL[8]: 'I' | 'N' << 8 | 'D' << 16
  TYPE[8]: CALL
  TOKENIZED[8]: 'I' | 'N' << 8 | 'D' << 16
  ORIGINAL[9]: 'I' | 'N' << 8
  TYPE[9]: CALL
  TOKENIZED[9]: 'I' | 'N' << 8
  ORIGINAL[10]: 'N' << 8
  TYPE[10]: CALL
  TOKENIZED[10]: 'N' << 8
  ORIGINAL[11]: 'D' << 16
  TYPE[11]: CALL
  TOKENIZED[11]: 'D' << 16
  ORIGINAL[12]: ((unsigned int )'A') << 24
  TYPE[12]: CALL
  TOKENIZED[12]: ( ( unsigned int ) 'A' ) << 24
  ORIGINAL[13]: (unsigned int )'A'
  TYPE[13]: CALL
  TOKENIZED[13]: ( unsigned int ) 'A'
  ORIGINAL[14]: frac_init(&st -> pts,0,0,den)
  TYPE[14]: CALL
  TOKENIZED[14]: FUN1 ( &st -> VAR1 , 0 , 0 , VAR2 )
  ORIGINAL[15]: &st -> pts
  TYPE[15]: CALL
  TOKENIZED[15]: &st -> VAR1
  ORIGINAL[16]: st -> pts
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: nb_streams
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pts
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: i
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: s
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: i
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: den
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: den
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1

CENTER_NODE: 47244640359
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771109
FRAGMENT_COUNT: 5
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: filepath = (char*) malloc (size_filepath * sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( char* ) FUN1 ( VAR2 * sizeof ( char ) )
  ORIGINAL[2]: (char*) malloc (size_filepath * sizeof(char))
  TYPE[2]: CALL
  TOKENIZED[2]: ( char* ) FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[3]: malloc (size_filepath * sizeof(char))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[4]: filepath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476849
FRAGMENT_COUNT: 11
  ORIGINAL[0]: j < 14
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 14
  ORIGINAL[1]: q . den / q . num < min_precission && q . num % j == 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4 && VAR1 . VAR3 % VAR5 == 0
  ORIGINAL[2]: q . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: q . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: q . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: q . num /= j
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2 /= VAR3
  ORIGINAL[6]: q . num
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: den
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: q
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: q
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: q
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477596
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 68719476830
FRAGMENT_COUNT: 6
  ORIGINAL[0]: num < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: num >= den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= VAR2
  ORIGINAL[2]: den
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: num
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: den
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477579
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> oformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: oformat
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772459
FRAGMENT_COUNT: 3
  ORIGINAL[0]: * stonesoup_printf_context = NULL
  TYPE[0]: CALL
  TOKENIZED[0]: * VAR1 = VAR2
  ORIGINAL[1]: stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772402
FRAGMENT_COUNT: 2
  ORIGINAL[0]: nonrecoil_sarcology(qmc_starting)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: qmc_starting
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640346
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477227
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_packet_merge_side_data(pkt)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: did_split
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640418
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772399
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: unshattered_sauterne
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772406
FRAGMENT_COUNT: 2
  ORIGINAL[0]: satyagraha_slicking(cynosarges_producible)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: cynosarges_producible
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640417
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477487
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> oformat -> interleave_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ret = (s -> oformat -> interleave_packet)(s,out,in,flush)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 , VAR6 , VAR7 )
  ORIGINAL[2]: (s -> oformat -> interleave_packet)(s,out,in,flush)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477300
FRAGMENT_COUNT: 11
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> interleaver_chunk_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> interleaver_chunk_duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> interleaver_chunk_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: max && (st -> interleaver_chunk_duration) > max
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 && ( VAR2 -> VAR3 ) > VAR1
  ORIGINAL[5]: st -> interleaver_chunk_duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: codec
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: syncoffset
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640422
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640360
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477451
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: stream_count && flush
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 && VAR2
  ORIGINAL[3]: s -> packet_buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: packet_buffer
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477598
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 68719477601
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: bedquilts_hearselike(pnompenh_superstitious)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: pnompenh_superstitious
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771131
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477659
FRAGMENT_COUNT: 3
  ORIGINAL[0]: tracepoint(stonesoup_trace, weakness_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: stonesoup_trace
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: weakness_end
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477595
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: enhydris_blemishes(phenomenona_birl)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: phenomenona_birl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640423
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476924
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> oformat -> codec_tag[n]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[1]: id != AV_CODEC_ID_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_CODEC_ID_NONE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476964
FRAGMENT_COUNT: 22
  ORIGINAL[0]: codec -> sample_rate <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: codec -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec -> block_align
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec -> block_align
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec -> channels
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec -> codec_id
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec -> width
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: codec -> height
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: codec -> sample_aspect_ratio
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: codec -> sample_aspect_ratio
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: codec -> sample_aspect_ratio
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: codec -> codec_tag
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: codec -> codec_id
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: codec -> codec_id
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: codec -> codec_id
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: codec -> codec_tag
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: codec -> codec_tag
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: codec -> codec_id
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: codec -> flags
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2
  ORIGINAL[19]: block_align
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: codec
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: codec
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 30064771768
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> cur_dts && st -> cur_dts != ((int64_t )0x8000000000000000UL) && (!(s -> oformat -> flags & 0x8020000) && st -> cur_dts >= pkt -> dts || st -> cur_dts > pkt -> dts)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && ( ! ( VAR4 -> VAR5 -> VAR6 & 0x8020000 ) && VAR1 -> VAR2 >= VAR7 -> VAR8 || VAR1 -> VAR2 > VAR7 -> VAR8 )
  ORIGINAL[1]: av_log(s,16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[2]: st -> index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_ts_make_string(((char [32]){(0)}),st -> cur_dts)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[4]: av_ts_make_string(((char [32]){(0)}),pkt -> dts)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772083
FRAGMENT_COUNT: 82
  ORIGINAL[0]: s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && ( VAR3 -> VAR4 -> VAR5 ) == VAR6 != ( ( VAR7 -> VAR4 -> VAR5 ) == VAR6 )
  ORIGINAL[1]: ts == ts2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: ts = (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( VAR2 -> VAR3 * VAR4 -> VAR5 . VAR6 * 1000000 - ( VAR7 -> VAR8 ) * ( ( VAR9 ) ( ( VAR4 -> VAR10 -> VAR11 ) == VAR12 ) ) * VAR4 -> VAR5 . VAR13 ) * VAR14 -> VAR5 . VAR13 - ( VAR15 -> VAR3 * VAR14 -> VAR5 . VAR6 * 1000000 - ( VAR7 -> VAR8 ) * ( ( VAR9 ) ( ( VAR14 -> VAR10 -> VAR11 ) == VAR12 ) ) * VAR14 -> VAR5 . VAR13 ) * VAR4 -> VAR5 . VAR13
  ORIGINAL[3]: (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den - (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12 ) * VAR13 -> VAR4 . VAR12 - ( VAR14 -> VAR2 * VAR13 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR13 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR13 -> VAR4 . VAR12 ) * VAR3 -> VAR4 . VAR12
  ORIGINAL[4]: (pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den) * st2 -> time_base . den
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12 ) * VAR13 -> VAR4 . VAR12
  ORIGINAL[5]: pkt -> dts * st -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12
  ORIGINAL[6]: pkt -> dts * st -> time_base . num * 1000000
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000
  ORIGINAL[7]: pkt -> dts * st -> time_base . num
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5
  ORIGINAL[8]: pkt -> dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> time_base . num
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 . VAR3
  ORIGINAL[10]: st -> time_base
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st -> time_base . den
  TYPE[11]: CALL
  TOKENIZED[11]: ( VAR1 -> VAR2 ) * ( ( VAR3 ) ( ( VAR4 -> VAR5 -> VAR6 ) == VAR7 ) ) * VAR4 -> VAR8 . VAR9
  ORIGINAL[12]: (s -> audio_preload) * ((int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO))
  TYPE[12]: CALL
  TOKENIZED[12]: ( VAR1 -> VAR2 ) * ( ( VAR3 ) ( ( VAR4 -> VAR5 -> VAR6 ) == VAR7 ) )
  ORIGINAL[13]: s -> audio_preload
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: (int64_t )((st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)
  TYPE[14]: CALL
  TOKENIZED[14]: ( VAR1 ) ( ( VAR2 -> VAR3 -> VAR4 ) == VAR5 )
  ORIGINAL[15]: (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[15]: CALL
  TOKENIZED[15]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[16]: st -> codec -> codec_type
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[17]: st -> codec
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: st -> time_base . den
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2 . VAR3
  ORIGINAL[19]: st -> time_base
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: st2 -> time_base . den
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2 . VAR3
  ORIGINAL[21]: st2 -> time_base
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2
  ORIGINAL[22]: (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den
  TYPE[22]: CALL
  TOKENIZED[22]: ( VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12 ) * VAR13 -> VAR4 . VAR12
  ORIGINAL[23]: next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12
  ORIGINAL[24]: next -> dts * st2 -> time_base . num * 1000000
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000
  ORIGINAL[25]: next -> dts * st2 -> time_base . num
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5
  ORIGINAL[26]: next -> dts
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 -> VAR2
  ORIGINAL[27]: st2 -> time_base . num
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 -> VAR2 . VAR3
  ORIGINAL[28]: st2 -> time_base
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 -> VAR2
  ORIGINAL[29]: (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den
  TYPE[29]: CALL
  TOKENIZED[29]: ( VAR1 -> VAR2 ) * ( ( VAR3 ) ( ( VAR4 -> VAR5 -> VAR6 ) == VAR7 ) ) * VAR4 -> VAR8 . VAR9
  ORIGINAL[30]: (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO))
  TYPE[30]: CALL
  TOKENIZED[30]: ( VAR1 -> VAR2 ) * ( ( VAR3 ) ( ( VAR4 -> VAR5 -> VAR6 ) == VAR7 ) )
  ORIGINAL[31]: s -> audio_preload
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 -> VAR2
  ORIGINAL[32]: (int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)
  TYPE[32]: CALL
  TOKENIZED[32]: ( VAR1 ) ( ( VAR2 -> VAR3 -> VAR4 ) == VAR5 )
  ORIGINAL[33]: (st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[33]: CALL
  TOKENIZED[33]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[34]: st2 -> codec -> codec_type
  TYPE[34]: CALL
  TOKENIZED[34]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[35]: st2 -> codec
  TYPE[35]: CALL
  TOKENIZED[35]: VAR1 -> VAR2
  ORIGINAL[36]: st2 -> time_base . den
  TYPE[36]: CALL
  TOKENIZED[36]: VAR1 -> VAR2 . VAR3
  ORIGINAL[37]: st2 -> time_base
  TYPE[37]: CALL
  TOKENIZED[37]: VAR1 -> VAR2
  ORIGINAL[38]: st -> time_base . den
  TYPE[38]: CALL
  TOKENIZED[38]: VAR1 -> VAR2 . VAR3
  ORIGINAL[39]: st -> time_base
  TYPE[39]: CALL
  TOKENIZED[39]: VAR1 -> VAR2
  ORIGINAL[40]: ts2 = 0
  TYPE[40]: CALL
  TOKENIZED[40]: VAR1 = 0
  ORIGINAL[41]: dts
  TYPE[41]: FIELD_IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: time_base
  TYPE[42]: FIELD_IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: num
  TYPE[43]: FIELD_IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: audio_preload
  TYPE[44]: FIELD_IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: codec
  TYPE[45]: FIELD_IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: codec_type
  TYPE[46]: FIELD_IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: time_base
  TYPE[47]: FIELD_IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: den
  TYPE[48]: FIELD_IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: time_base
  TYPE[49]: FIELD_IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: den
  TYPE[50]: FIELD_IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: dts
  TYPE[51]: FIELD_IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: time_base
  TYPE[52]: FIELD_IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: num
  TYPE[53]: FIELD_IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: audio_preload
  TYPE[54]: FIELD_IDENTIFIER
  TOKENIZED[54]: VAR1
  ORIGINAL[55]: codec
  TYPE[55]: FIELD_IDENTIFIER
  TOKENIZED[55]: VAR1
  ORIGINAL[56]: codec_type
  TYPE[56]: FIELD_IDENTIFIER
  TOKENIZED[56]: VAR1
  ORIGINAL[57]: time_base
  TYPE[57]: FIELD_IDENTIFIER
  TOKENIZED[57]: VAR1
  ORIGINAL[58]: den
  TYPE[58]: FIELD_IDENTIFIER
  TOKENIZED[58]: VAR1
  ORIGINAL[59]: time_base
  TYPE[59]: FIELD_IDENTIFIER
  TOKENIZED[59]: VAR1
  ORIGINAL[60]: den
  TYPE[60]: FIELD_IDENTIFIER
  TOKENIZED[60]: VAR1
  ORIGINAL[61]: ts
  TYPE[61]: IDENTIFIER
  TOKENIZED[61]: VAR1
  ORIGINAL[62]: ts2
  TYPE[62]: IDENTIFIER
  TOKENIZED[62]: VAR1
  ORIGINAL[63]: ts
  TYPE[63]: IDENTIFIER
  TOKENIZED[63]: VAR1
  ORIGINAL[64]: pkt
  TYPE[64]: IDENTIFIER
  TOKENIZED[64]: VAR1
  ORIGINAL[65]: st
  TYPE[65]: IDENTIFIER
  TOKENIZED[65]: VAR1
  ORIGINAL[66]: s
  TYPE[66]: IDENTIFIER
  TOKENIZED[66]: VAR1
  ORIGINAL[67]: int64_t
  TYPE[67]: IDENTIFIER
  TOKENIZED[67]: VAR1
  ORIGINAL[68]: st
  TYPE[68]: IDENTIFIER
  TOKENIZED[68]: VAR1
  ORIGINAL[69]: AVMEDIA_TYPE_AUDIO
  TYPE[69]: IDENTIFIER
  TOKENIZED[69]: VAR1
  ORIGINAL[70]: st
  TYPE[70]: IDENTIFIER
  TOKENIZED[70]: VAR1
  ORIGINAL[71]: st2
  TYPE[71]: IDENTIFIER
  TOKENIZED[71]: VAR1
  ORIGINAL[72]: next
  TYPE[72]: IDENTIFIER
  TOKENIZED[72]: VAR1
  ORIGINAL[73]: st2
  TYPE[73]: IDENTIFIER
  TOKENIZED[73]: VAR1
  ORIGINAL[74]: s
  TYPE[74]: IDENTIFIER
  TOKENIZED[74]: VAR1
  ORIGINAL[75]: int64_t
  TYPE[75]: IDENTIFIER
  TOKENIZED[75]: VAR1
  ORIGINAL[76]: st2
  TYPE[76]: IDENTIFIER
  TOKENIZED[76]: VAR1
  ORIGINAL[77]: AVMEDIA_TYPE_AUDIO
  TYPE[77]: IDENTIFIER
  TOKENIZED[77]: VAR1
  ORIGINAL[78]: st2
  TYPE[78]: IDENTIFIER
  TOKENIZED[78]: VAR1
  ORIGINAL[79]: st
  TYPE[79]: IDENTIFIER
  TOKENIZED[79]: VAR1
  ORIGINAL[80]: ts2
  TYPE[80]: IDENTIFIER
  TOKENIZED[80]: VAR1
  ORIGINAL[81]: comp
  TYPE[81]: IDENTIFIER
  TOKENIZED[81]: VAR1

CENTER_NODE: 30064772271
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> streams[pkt -> stream_index]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 -> VAR4 ]
  ORIGINAL[1]: pkt -> stream_index
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: stream_index
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772416
FRAGMENT_COUNT: 2
  ORIGINAL[0]: nondisposed_cardstock(scrumpy_detailers)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: scrumpy_detailers
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640347
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477591
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: automating_zostera(unsyntheticness_sinnamahoning)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: unsyntheticness_sinnamahoning
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771886
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret < 0 && !(s -> oformat -> flags & 0x80)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 && ! ( VAR2 -> VAR3 -> VAR4 & 0x80 )
  ORIGINAL[1]: ret < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: !(s -> oformat -> flags & 0x80)
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 -> VAR2 -> VAR3 & 0x80 )
  ORIGINAL[3]: s -> oformat -> flags & 0x80
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3 & 0x80

CENTER_NODE: 68719476798
FRAGMENT_COUNT: 4
  ORIGINAL[0]: den >> 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >> 1
  ORIGINAL[1]: num
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: den
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: den
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772374
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: &s -> streams[i] -> priv_data
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1 [ VAR2 ] -> VAR3
  ORIGINAL[2]: s -> streams[i] -> priv_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: s -> streams[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: s -> streams[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: priv_data
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476895
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *avctx
  TYPE[0]: CALL
  TOKENIZED[0]: *avctx
  ORIGINAL[1]: s -> oformat -> priv_data_size > 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 > 0
  ORIGINAL[2]: !s -> priv_data
  TYPE[2]: CALL
  TOKENIZED[2]: !s -> VAR1
  ORIGINAL[3]: av_strlcpy(s -> filename,filename,sizeof(s -> filename))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , VAR2 , sizeof ( VAR1 -> VAR2 ) )
  ORIGINAL[4]: *avctx
  TYPE[4]: CALL
  TOKENIZED[4]: *avctx
  ORIGINAL[5]: filename
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

