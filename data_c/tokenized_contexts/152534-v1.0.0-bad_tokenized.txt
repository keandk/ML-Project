# Tokenized code fragments for 152534-v1.0.0-bad
# Total center nodes processed: 27
# Total code fragments found: 243

CENTER_NODE: 68719476938
FRAGMENT_COUNT: 7
  ORIGINAL[0]: hash_val = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ADD_ADDRESS_TO_HASH_data = ((&key -> addr1) -> data)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( &key -> VAR2 ) -> VAR3 )
  ORIGINAL[2]: (&key -> addr1) -> data
  TYPE[2]: CALL
  TOKENIZED[2]: ( &key -> VAR1 ) -> VAR2
  ORIGINAL[3]: ADD_ADDRESS_TO_HASH_data[ADD_ADDRESS_TO_HASH_index]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: ADD_ADDRESS_TO_HASH_data
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: key
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ADD_ADDRESS_TO_HASH_data
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477287
FRAGMENT_COUNT: 8
  ORIGINAL[0]: key . addr1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: key . addr2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: key . ptype
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: key . port1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: key . port2
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: &key
  TYPE[5]: CALL
  TOKENIZED[5]: &key
  ORIGINAL[6]: hashtable
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: key
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772160
FRAGMENT_COUNT: 4
  ORIGINAL[0]: g_slist_insert_sorted(conv -> data_list,((gpointer *)p1),p_compare)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , ( ( VAR3 * ) VAR4 ) , VAR5 )
  ORIGINAL[1]: conv -> data_list
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (gpointer *)p1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 * ) VAR2
  ORIGINAL[3]: p1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772195
FRAGMENT_COUNT: 3
  ORIGINAL[0]: conversation -> dissector_handle = handle
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: conversation -> dissector_handle
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: handle
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772208
FRAGMENT_COUNT: 10
  ORIGINAL[0]: conversation -> dissector_handle == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( void * ) 0 )
  ORIGINAL[1]: conversation -> dissector_handle
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: call_dissector_only(conversation -> dissector_handle,tvb,pinfo,tree)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[3]: conversation -> dissector_handle
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: dissector_handle
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: conversation
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: conversation
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tvb
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pinfo
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tree
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771384
FRAGMENT_COUNT: 18
  ORIGINAL[0]: (&v2 -> addr2) -> type
  TYPE[0]: CALL
  TOKENIZED[0]: ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[1]: &v2 -> addr2
  TYPE[1]: CALL
  TOKENIZED[1]: &v2 -> VAR1
  ORIGINAL[2]: v2 -> addr2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (&v2 -> addr2) -> len
  TYPE[3]: CALL
  TOKENIZED[3]: ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[4]: &v2 -> addr2
  TYPE[4]: CALL
  TOKENIZED[4]: &v2 -> VAR1
  ORIGINAL[5]: v2 -> addr2
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (&v2 -> addr2) -> data
  TYPE[6]: CALL
  TOKENIZED[6]: ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[7]: &v2 -> addr2
  TYPE[7]: CALL
  TOKENIZED[7]: &v2 -> VAR1
  ORIGINAL[8]: v2 -> addr2
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: v1 -> port2 == v2 -> port1 && v1 -> port1 == v2 -> port2 && (((&v1 -> addr2) -> type) == ((&v2 -> addr1) -> type) && (((&v1 -> addr2) -> type) == AT_NONE || (&v1 -> addr2) -> len == (&v2 -> addr1) -> len && memcmp((&v1 -> addr2) -> data,(&v2 -> addr1) -> data,((&v1 -> addr2) -> len)) == 0))
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 == VAR3 -> VAR4 && VAR1 -> VAR4 == VAR3 -> VAR2 && ( ( ( &v1 -> VAR5 ) -> VAR6 ) == ( ( &v2 -> VAR7 ) -> VAR6 ) && ( ( ( &v1 -> VAR5 ) -> VAR6 ) == VAR8 || ( &v1 -> VAR5 ) -> VAR9 == ( &v2 -> VAR7 ) -> VAR9 && FUN1 ( ( &v1 -> VAR5 ) -> VAR10 , ( &v2 -> VAR7 ) -> VAR10 , ( ( &v1 -> VAR5 ) -> VAR9 ) ) == 0 ) )
  ORIGINAL[10]: (&v2 -> addr2) -> type
  TYPE[10]: CALL
  TOKENIZED[10]: ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[11]: &v2 -> addr2
  TYPE[11]: CALL
  TOKENIZED[11]: &v2 -> VAR1
  ORIGINAL[12]: v2 -> addr2
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: &v2 -> addr2
  TYPE[13]: CALL
  TOKENIZED[13]: &v2 -> VAR1
  ORIGINAL[14]: v2 -> addr2
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: &v2 -> addr2
  TYPE[15]: CALL
  TOKENIZED[15]: &v2 -> VAR1
  ORIGINAL[16]: v2 -> addr2
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: type
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064771714
FRAGMENT_COUNT: 5
  ORIGINAL[0]: conv -> setup_frame >= chain_tail -> setup_frame
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= VAR3 -> VAR2
  ORIGINAL[1]: conv -> last = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: conv -> last
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: chain_tail
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772142
FRAGMENT_COUNT: 10
  ORIGINAL[0]: ap -> proto > bp -> proto
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > VAR3 -> VAR2
  ORIGINAL[1]: ap -> proto
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: bp -> proto
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ap -> proto == bp -> proto
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 == VAR3 -> VAR2
  ORIGINAL[4]: ap -> proto
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: bp -> proto
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: proto
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: proto
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ap
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: bp
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772238
FRAGMENT_COUNT: 3
  ORIGINAL[0]: yagger_alitrunk = 89
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 89
  ORIGINAL[1]: yagger_alitrunk
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: <global> stonesoup_global_variable
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719477607
FRAGMENT_COUNT: 11
  ORIGINAL[0]: stonesoup_i < strlen(birgus_extracolumella)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < FUN1 ( VAR2 )
  ORIGINAL[1]: birgus_extracolumella[stonesoup_i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: birgus_extracolumella[stonesoup_i - 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 - 1 ]
  ORIGINAL[3]: birgus_extracolumella[stonesoup_i - 1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 - 1 ]
  ORIGINAL[4]: birgus_extracolumella[stonesoup_i - 1]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 - 1 ]
  ORIGINAL[5]: birgus_extracolumella[stonesoup_i - 1]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 - 1 ]
  ORIGINAL[6]: birgus_extracolumella[stonesoup_i]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 [ VAR2 ]
  ORIGINAL[7]: birgus_extracolumella[stonesoup_i - 1]
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 [ VAR2 - 1 ]
  ORIGINAL[8]: birgus_extracolumella
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: birgus_extracolumella
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: stonesoup_i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064772166
FRAGMENT_COUNT: 4
  ORIGINAL[0]: item = g_slist_find_custom(conv -> data_list,((gpointer *)(&temp)),p_compare)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 -> VAR3 , ( ( VAR4 * ) ( &temp ) ) , VAR5 )
  ORIGINAL[1]: g_slist_find_custom(conv -> data_list,((gpointer *)(&temp)),p_compare)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , ( ( VAR3 * ) ( &temp ) ) , VAR4 )
  ORIGINAL[2]: item
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: item
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771750
FRAGMENT_COUNT: 4
  ORIGINAL[0]: chain_head = ((conversation_t *)(g_hash_table_lookup(hashtable,(conv -> key_ptr))))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( VAR2 * ) ( FUN1 ( VAR3 , ( VAR4 -> VAR5 ) ) ) )
  ORIGINAL[1]: (conversation_t *)(g_hash_table_lookup(hashtable,(conv -> key_ptr)))
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 * ) ( FUN1 ( VAR2 , ( VAR3 -> VAR4 ) ) )
  ORIGINAL[2]: chain_head
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: conv
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 7
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: getenv(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: strcmp(getenv(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( FUN2 ( \
  ORIGINAL[4]: strcmp(getenv(\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( FUN2 ( \
  ORIGINAL[5]: getenv(\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( \
  ORIGINAL[6]: NULL
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772181
FRAGMENT_COUNT: 6
  ORIGINAL[0]: temp . proto_data = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 = ( ( void * ) 0 )
  ORIGINAL[1]: temp . proto_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: proto_data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: temp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: temp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476969
FRAGMENT_COUNT: 11
  ORIGINAL[0]: v2 -> ptype
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: v2 -> port1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v2 -> port2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: v2 -> addr1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (&v1 -> addr1) -> len == (&v2 -> addr1) -> len
  TYPE[4]: CALL
  TOKENIZED[4]: ( &v1 -> VAR1 ) -> VAR2 == ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[5]: v2 -> addr1
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (&v1 -> addr1) -> data
  TYPE[6]: CALL
  TOKENIZED[6]: ( &v1 -> VAR1 ) -> VAR2
  ORIGINAL[7]: v2 -> addr1
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: addr1
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: v2
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: v2
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477077
FRAGMENT_COUNT: 3
  ORIGINAL[0]: conversation_hashtable_exact = g_hash_table_new(conversation_hash_exact,conversation_match_exact)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[1]: g_hash_table_new(conversation_hash_exact,conversation_match_exact)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: <global> conversation_hashtable_exact
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 47244640278
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ADD_ADDRESS_TO_HASH_index = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ADD_ADDRESS_TO_HASH_index < (&key -> addr1) -> len
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < ( &key -> VAR2 ) -> VAR3
  ORIGINAL[2]: ADD_ADDRESS_TO_HASH_index++
  TYPE[2]: CALL
  TOKENIZED[2]: ADD_ADDRESS_TO_HASH_index++
  ORIGINAL[3]: hash_val += ADD_ADDRESS_TO_HASH_data[ADD_ADDRESS_TO_HASH_index]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 += VAR2 [ VAR3 ]
  ORIGINAL[4]: for (ADD_ADDRESS_TO_HASH_index = 0;ADD_ADDRESS_TO_HASH_index < (&key -> addr1) -> len;ADD_ADDRESS_TO_HASH_index++)
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: for ( VAR1 = 0 ; VAR1 < ( &key -> VAR2 ) -> VAR3 ; ADD_ADDRESS_TO_HASH_index++ )

CENTER_NODE: 30064771573
FRAGMENT_COUNT: 15
  ORIGINAL[0]: &v1 -> addr2
  TYPE[0]: CALL
  TOKENIZED[0]: &v1 -> VAR1
  ORIGINAL[1]: v1 -> addr2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (&v1 -> addr2) -> type
  TYPE[2]: CALL
  TOKENIZED[2]: ( &v1 -> VAR1 ) -> VAR2
  ORIGINAL[3]: &v1 -> addr2
  TYPE[3]: CALL
  TOKENIZED[3]: &v1 -> VAR1
  ORIGINAL[4]: v1 -> addr2
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: (&v1 -> addr2) -> len == (&v2 -> addr2) -> len
  TYPE[5]: CALL
  TOKENIZED[5]: ( &v1 -> VAR1 ) -> VAR2 == ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[6]: (&v1 -> addr2) -> len
  TYPE[6]: CALL
  TOKENIZED[6]: ( &v1 -> VAR1 ) -> VAR2
  ORIGINAL[7]: &v1 -> addr2
  TYPE[7]: CALL
  TOKENIZED[7]: &v1 -> VAR1
  ORIGINAL[8]: v1 -> addr2
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: (&v1 -> addr2) -> data
  TYPE[9]: CALL
  TOKENIZED[9]: ( &v1 -> VAR1 ) -> VAR2
  ORIGINAL[10]: &v1 -> addr2
  TYPE[10]: CALL
  TOKENIZED[10]: &v1 -> VAR1
  ORIGINAL[11]: v1 -> addr2
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: &v1 -> addr2
  TYPE[12]: CALL
  TOKENIZED[12]: &v1 -> VAR1
  ORIGINAL[13]: v1 -> addr2
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: data
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477068
FRAGMENT_COUNT: 6
  ORIGINAL[0]: conversation_hashtable_no_port2 != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[1]: g_hash_table_foreach(conversation_hashtable_no_port2,free_data_list,((void *)0))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , ( ( void * ) 0 ) )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: <global> conversation_hashtable_no_port2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> conversation_hashtable_no_port2
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: <global> conversation_hashtable_no_port2
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1

CENTER_NODE: 30064771624
FRAGMENT_COUNT: 19
  ORIGINAL[0]: ((&v1 -> addr1) -> type) == ((&v2 -> addr1) -> type)
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( &v1 -> VAR1 ) -> VAR2 ) == ( ( &v2 -> VAR1 ) -> VAR2 )
  ORIGINAL[1]: ((&v1 -> addr1) -> type) == AT_NONE || (&v1 -> addr1) -> len == (&v2 -> addr1) -> len && memcmp((&v1 -> addr1) -> data,(&v2 -> addr1) -> data,((&v1 -> addr1) -> len)) == 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( &v1 -> VAR1 ) -> VAR2 ) == VAR3 || ( &v1 -> VAR1 ) -> VAR4 == ( &v2 -> VAR1 ) -> VAR4 && FUN1 ( ( &v1 -> VAR1 ) -> VAR5 , ( &v2 -> VAR1 ) -> VAR5 , ( ( &v1 -> VAR1 ) -> VAR4 ) ) == 0
  ORIGINAL[2]: ((&v1 -> addr1) -> type) == AT_NONE
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( &v1 -> VAR1 ) -> VAR2 ) == VAR3
  ORIGINAL[3]: (&v1 -> addr1) -> type
  TYPE[3]: CALL
  TOKENIZED[3]: ( &v1 -> VAR1 ) -> VAR2
  ORIGINAL[4]: (&v1 -> addr1) -> len == (&v2 -> addr1) -> len && memcmp((&v1 -> addr1) -> data,(&v2 -> addr1) -> data,((&v1 -> addr1) -> len)) == 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( &v1 -> VAR1 ) -> VAR2 == ( &v2 -> VAR1 ) -> VAR2 && FUN1 ( ( &v1 -> VAR1 ) -> VAR3 , ( &v2 -> VAR1 ) -> VAR3 , ( ( &v1 -> VAR1 ) -> VAR2 ) ) == 0
  ORIGINAL[5]: (&v1 -> addr1) -> len == (&v2 -> addr1) -> len
  TYPE[5]: CALL
  TOKENIZED[5]: ( &v1 -> VAR1 ) -> VAR2 == ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[6]: (&v1 -> addr1) -> len
  TYPE[6]: CALL
  TOKENIZED[6]: ( &v1 -> VAR1 ) -> VAR2
  ORIGINAL[7]: &v1 -> addr1
  TYPE[7]: CALL
  TOKENIZED[7]: &v1 -> VAR1
  ORIGINAL[8]: v1 -> addr1
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: (&v2 -> addr1) -> len
  TYPE[9]: CALL
  TOKENIZED[9]: ( &v2 -> VAR1 ) -> VAR2
  ORIGINAL[10]: &v2 -> addr1
  TYPE[10]: CALL
  TOKENIZED[10]: &v2 -> VAR1
  ORIGINAL[11]: v2 -> addr1
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: addr1
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: len
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: addr1
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: len
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: AT_NONE
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: v1
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: v2
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 68719476980
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ADD_ADDRESS_TO_HASH_index < (&key -> addr1) -> len
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( &key -> VAR2 ) -> VAR3
  ORIGINAL[1]: hash_val += ADD_ADDRESS_TO_HASH_data[ADD_ADDRESS_TO_HASH_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2 [ VAR3 ]
  ORIGINAL[2]: ADD_ADDRESS_TO_HASH_data[ADD_ADDRESS_TO_HASH_index]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: hash_val
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: hash_val
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ADD_ADDRESS_TO_HASH_data
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: hash_val
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477670
FRAGMENT_COUNT: 12
  ORIGINAL[0]: opterr = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: c = getopt(argc, argv, \
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , \
  ORIGINAL[2]: getopt(argc, argv, \
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: break;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: break ;
  ORIGINAL[5]: break;
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: break ;
  ORIGINAL[6]: break;
  TYPE[6]: CONTROL_STRUCTURE
  TOKENIZED[6]: break ;
  ORIGINAL[7]: break;
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: break ;
  ORIGINAL[8]: break;
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: break ;
  ORIGINAL[9]: c
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: argc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: c
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064771651
FRAGMENT_COUNT: 3
  ORIGINAL[0]: conv -> data_list = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[1]: conv -> data_list
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064771082
FRAGMENT_COUNT: 22
  ORIGINAL[0]: ss_tc_root != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: size_dirpath = strlen(ss_tc_root) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 ) + FUN1 ( \
  ORIGINAL[2]: strlen(ss_tc_root) + strlen(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[3]: strlen(ss_tc_root) + strlen(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[4]: strlen(ss_tc_root)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: strlen(\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( \
  ORIGINAL[6]: dirpath = (char*) malloc (size_dirpath * sizeof(char))
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 = ( char* ) FUN1 ( VAR2 * sizeof ( char ) )
  ORIGINAL[7]: (char*) malloc (size_dirpath * sizeof(char))
  TYPE[7]: CALL
  TOKENIZED[7]: ( char* ) FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[8]: malloc (size_dirpath * sizeof(char))
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[9]: size_dirpath * sizeof(char)
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 * sizeof ( char )
  ORIGINAL[10]: sizeof(char)
  TYPE[10]: CALL
  TOKENIZED[10]: sizeof ( char )
  ORIGINAL[11]: dirpath != NULL
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 != VAR2
  ORIGINAL[12]: ss_tc_root
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: NULL
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: size_dirpath
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ss_tc_root
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: dirpath
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: size_dirpath
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: char
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: char
  ORIGINAL[19]: dirpath
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: NULL
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: <global> stonesoup_printf_context
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: <global> VAR1

CENTER_NODE: 30064772213
FRAGMENT_COUNT: 29
  ORIGINAL[0]: (conv = find_conversation(pinfo -> fd -> num,(&pinfo -> src),(&pinfo -> dst),pinfo -> ptype,pinfo -> srcport,pinfo -> destport,0)) == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 -> VAR3 -> VAR4 , ( &pinfo -> VAR5 ) , ( &pinfo -> VAR6 ) , VAR2 -> VAR7 , VAR2 -> VAR8 , VAR2 -> VAR9 , 0 ) ) == ( ( void * ) 0 )
  ORIGINAL[1]: conv = find_conversation(pinfo -> fd -> num,(&pinfo -> src),(&pinfo -> dst),pinfo -> ptype,pinfo -> srcport,pinfo -> destport,0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 -> VAR4 , ( &pinfo -> VAR5 ) , ( &pinfo -> VAR6 ) , VAR2 -> VAR7 , VAR2 -> VAR8 , VAR2 -> VAR9 , 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: conv = conversation_new(pinfo -> fd -> num,(&pinfo -> src),(&pinfo -> dst),pinfo -> ptype,pinfo -> srcport,pinfo -> destport,0)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = FUN1 ( VAR2 -> VAR3 -> VAR4 , ( &pinfo -> VAR5 ) , ( &pinfo -> VAR6 ) , VAR2 -> VAR7 , VAR2 -> VAR8 , VAR2 -> VAR9 , 0 )
  ORIGINAL[4]: conversation_new(pinfo -> fd -> num,(&pinfo -> src),(&pinfo -> dst),pinfo -> ptype,pinfo -> srcport,pinfo -> destport,0)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 -> VAR3 , ( &pinfo -> VAR4 ) , ( &pinfo -> VAR5 ) , VAR1 -> VAR6 , VAR1 -> VAR7 , VAR1 -> VAR8 , 0 )
  ORIGINAL[5]: pinfo -> fd -> num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: pinfo -> fd
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: &pinfo -> src
  TYPE[7]: CALL
  TOKENIZED[7]: &pinfo -> VAR1
  ORIGINAL[8]: pinfo -> src
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: &pinfo -> dst
  TYPE[9]: CALL
  TOKENIZED[9]: &pinfo -> VAR1
  ORIGINAL[10]: pinfo -> dst
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pinfo -> ptype
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: pinfo -> srcport
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pinfo -> destport
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: fd
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: num
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: src
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: dst
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: ptype
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: srcport
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: destport
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: conv
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: pinfo
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: pinfo
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: pinfo
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: pinfo
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: pinfo
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: pinfo
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: conv
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1

CENTER_NODE: 47244640271
FRAGMENT_COUNT: 2
  ORIGINAL[0]: conversation -> options & 0x01 && conversation -> options & 0x02
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x01 && VAR1 -> VAR2 & 0x02
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064771593
FRAGMENT_COUNT: 9
  ORIGINAL[0]: &key -> addr1
  TYPE[0]: CALL
  TOKENIZED[0]: &key -> VAR1
  ORIGINAL[1]: key -> addr1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: &key -> addr1
  TYPE[2]: CALL
  TOKENIZED[2]: &key -> VAR1
  ORIGINAL[3]: key -> addr1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: addr1
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: key
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: key
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: key
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: key
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

