# Tokenized code fragments for 153646-v1.0.0-bad
# Total center nodes processed: 90
# Total code fragments found: 549

CENTER_NODE: 47244640422
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640514
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640314
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640390
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640543
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640477
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640295
FRAGMENT_COUNT: 3
  ORIGINAL[0]: g_value_set_string(value,(group -> stock_id))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( VAR2 -> VAR3 ) )
  ORIGINAL[1]: break;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: break ;
  ORIGINAL[2]: prop_id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640418
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640399
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640412
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640400
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640272
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640478
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477528
FRAGMENT_COUNT: 3
  ORIGINAL[0]: action_name != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[1]: g_return_if_fail_warning(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: <global> __PRETTY_FUNCTION__
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719476947
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (GTypeInstance *)object
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 * ) VAR2
  ORIGINAL[1]: object
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: object
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477494
FRAGMENT_COUNT: 5
  ORIGINAL[0]: __inst -> g_class
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: __inst -> g_class
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: g_class
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: __inst
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: __inst
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772506
FRAGMENT_COUNT: 377
  ORIGINAL[0]: sorose_elias != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: enisled_lisbon = 5
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 5
  ORIGINAL[2]: elita_floorway = &enisled_lisbon
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = &enisled_lisbon
  ORIGINAL[3]: &enisled_lisbon
  TYPE[3]: CALL
  TOKENIZED[3]: &enisled_lisbon
  ORIGINAL[4]: bakerstown_osnabrock = &elita_floorway
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = &elita_floorway
  ORIGINAL[5]: &elita_floorway
  TYPE[5]: CALL
  TOKENIZED[5]: &elita_floorway
  ORIGINAL[6]: townman_chutneys = &bakerstown_osnabrock
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 = &bakerstown_osnabrock
  ORIGINAL[7]: &bakerstown_osnabrock
  TYPE[7]: CALL
  TOKENIZED[7]: &bakerstown_osnabrock
  ORIGINAL[8]: indicativeness_soubrette = &townman_chutneys
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 = &townman_chutneys
  ORIGINAL[9]: &townman_chutneys
  TYPE[9]: CALL
  TOKENIZED[9]: &townman_chutneys
  ORIGINAL[10]: prentiss_poppied = &indicativeness_soubrette
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 = &indicativeness_soubrette
  ORIGINAL[11]: &indicativeness_soubrette
  TYPE[11]: CALL
  TOKENIZED[11]: &indicativeness_soubrette
  ORIGINAL[12]: beterschap_skiddier = &prentiss_poppied
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 = &prentiss_poppied
  ORIGINAL[13]: &prentiss_poppied
  TYPE[13]: CALL
  TOKENIZED[13]: &prentiss_poppied
  ORIGINAL[14]: balkiest_simpled = &beterschap_skiddier
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 = &beterschap_skiddier
  ORIGINAL[15]: &beterschap_skiddier
  TYPE[15]: CALL
  TOKENIZED[15]: &beterschap_skiddier
  ORIGINAL[16]: culmen_nireus = &balkiest_simpled
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 = &balkiest_simpled
  ORIGINAL[17]: &balkiest_simpled
  TYPE[17]: CALL
  TOKENIZED[17]: &balkiest_simpled
  ORIGINAL[18]: insurrectionary_liquifier = &culmen_nireus
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 = &culmen_nireus
  ORIGINAL[19]: &culmen_nireus
  TYPE[19]: CALL
  TOKENIZED[19]: &culmen_nireus
  ORIGINAL[20]: overgone_martinelli = &insurrectionary_liquifier
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 = &insurrectionary_liquifier
  ORIGINAL[21]: &insurrectionary_liquifier
  TYPE[21]: CALL
  TOKENIZED[21]: &insurrectionary_liquifier
  ORIGINAL[22]: retrainable_lucigen = &overgone_martinelli
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 = &overgone_martinelli
  ORIGINAL[23]: &overgone_martinelli
  TYPE[23]: CALL
  TOKENIZED[23]: &overgone_martinelli
  ORIGINAL[24]: redefer_palampore = &retrainable_lucigen
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 = &retrainable_lucigen
  ORIGINAL[25]: &retrainable_lucigen
  TYPE[25]: CALL
  TOKENIZED[25]: &retrainable_lucigen
  ORIGINAL[26]: telopea_arbitraries = &redefer_palampore
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 = &redefer_palampore
  ORIGINAL[27]: &redefer_palampore
  TYPE[27]: CALL
  TOKENIZED[27]: &redefer_palampore
  ORIGINAL[28]: nairn_hepatized = &telopea_arbitraries
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 = &telopea_arbitraries
  ORIGINAL[29]: &telopea_arbitraries
  TYPE[29]: CALL
  TOKENIZED[29]: &telopea_arbitraries
  ORIGINAL[30]: uncompanionable_unmooring = &nairn_hepatized
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 = &nairn_hepatized
  ORIGINAL[31]: &nairn_hepatized
  TYPE[31]: CALL
  TOKENIZED[31]: &nairn_hepatized
  ORIGINAL[32]: precontractive_rhizocarpean = &uncompanionable_unmooring
  TYPE[32]: CALL
  TOKENIZED[32]: VAR1 = &uncompanionable_unmooring
  ORIGINAL[33]: &uncompanionable_unmooring
  TYPE[33]: CALL
  TOKENIZED[33]: &uncompanionable_unmooring
  ORIGINAL[34]: messianically_microfilmer = &precontractive_rhizocarpean
  TYPE[34]: CALL
  TOKENIZED[34]: VAR1 = &precontractive_rhizocarpean
  ORIGINAL[35]: &precontractive_rhizocarpean
  TYPE[35]: CALL
  TOKENIZED[35]: &precontractive_rhizocarpean
  ORIGINAL[36]: eulogise_citrines = &messianically_microfilmer
  TYPE[36]: CALL
  TOKENIZED[36]: VAR1 = &messianically_microfilmer
  ORIGINAL[37]: &messianically_microfilmer
  TYPE[37]: CALL
  TOKENIZED[37]: &messianically_microfilmer
  ORIGINAL[38]: aueto_valetudinarian = &eulogise_citrines
  TYPE[38]: CALL
  TOKENIZED[38]: VAR1 = &eulogise_citrines
  ORIGINAL[39]: &eulogise_citrines
  TYPE[39]: CALL
  TOKENIZED[39]: &eulogise_citrines
  ORIGINAL[40]: langues_petrologically = &aueto_valetudinarian
  TYPE[40]: CALL
  TOKENIZED[40]: VAR1 = &aueto_valetudinarian
  ORIGINAL[41]: &aueto_valetudinarian
  TYPE[41]: CALL
  TOKENIZED[41]: &aueto_valetudinarian
  ORIGINAL[42]: ailantine_phonotypically = &langues_petrologically
  TYPE[42]: CALL
  TOKENIZED[42]: VAR1 = &langues_petrologically
  ORIGINAL[43]: &langues_petrologically
  TYPE[43]: CALL
  TOKENIZED[43]: &langues_petrologically
  ORIGINAL[44]: comagmatic_wednesdays = &ailantine_phonotypically
  TYPE[44]: CALL
  TOKENIZED[44]: VAR1 = &ailantine_phonotypically
  ORIGINAL[45]: &ailantine_phonotypically
  TYPE[45]: CALL
  TOKENIZED[45]: &ailantine_phonotypically
  ORIGINAL[46]: oradea_mistended = &comagmatic_wednesdays
  TYPE[46]: CALL
  TOKENIZED[46]: VAR1 = &comagmatic_wednesdays
  ORIGINAL[47]: &comagmatic_wednesdays
  TYPE[47]: CALL
  TOKENIZED[47]: &comagmatic_wednesdays
  ORIGINAL[48]: outcharms_spermaphyta = &oradea_mistended
  TYPE[48]: CALL
  TOKENIZED[48]: VAR1 = &oradea_mistended
  ORIGINAL[49]: &oradea_mistended
  TYPE[49]: CALL
  TOKENIZED[49]: &oradea_mistended
  ORIGINAL[50]: unintermixed_horsefeathers = &outcharms_spermaphyta
  TYPE[50]: CALL
  TOKENIZED[50]: VAR1 = &outcharms_spermaphyta
  ORIGINAL[51]: &outcharms_spermaphyta
  TYPE[51]: CALL
  TOKENIZED[51]: &outcharms_spermaphyta
  ORIGINAL[52]: basirhinal_astonies = &unintermixed_horsefeathers
  TYPE[52]: CALL
  TOKENIZED[52]: VAR1 = &unintermixed_horsefeathers
  ORIGINAL[53]: &unintermixed_horsefeathers
  TYPE[53]: CALL
  TOKENIZED[53]: &unintermixed_horsefeathers
  ORIGINAL[54]: completing_cropsickness = &basirhinal_astonies
  TYPE[54]: CALL
  TOKENIZED[54]: VAR1 = &basirhinal_astonies
  ORIGINAL[55]: &basirhinal_astonies
  TYPE[55]: CALL
  TOKENIZED[55]: &basirhinal_astonies
  ORIGINAL[56]: pyatigorsk_cyproheptadine = &completing_cropsickness
  TYPE[56]: CALL
  TOKENIZED[56]: VAR1 = &completing_cropsickness
  ORIGINAL[57]: &completing_cropsickness
  TYPE[57]: CALL
  TOKENIZED[57]: &completing_cropsickness
  ORIGINAL[58]: gerdy_benzofulvene = &pyatigorsk_cyproheptadine
  TYPE[58]: CALL
  TOKENIZED[58]: VAR1 = &pyatigorsk_cyproheptadine
  ORIGINAL[59]: &pyatigorsk_cyproheptadine
  TYPE[59]: CALL
  TOKENIZED[59]: &pyatigorsk_cyproheptadine
  ORIGINAL[60]: transfashion_callously = &gerdy_benzofulvene
  TYPE[60]: CALL
  TOKENIZED[60]: VAR1 = &gerdy_benzofulvene
  ORIGINAL[61]: &gerdy_benzofulvene
  TYPE[61]: CALL
  TOKENIZED[61]: &gerdy_benzofulvene
  ORIGINAL[62]: ploughshoe_cnidocil = &transfashion_callously
  TYPE[62]: CALL
  TOKENIZED[62]: VAR1 = &transfashion_callously
  ORIGINAL[63]: &transfashion_callously
  TYPE[63]: CALL
  TOKENIZED[63]: &transfashion_callously
  ORIGINAL[64]: concordial_albay = &ploughshoe_cnidocil
  TYPE[64]: CALL
  TOKENIZED[64]: VAR1 = &ploughshoe_cnidocil
  ORIGINAL[65]: &ploughshoe_cnidocil
  TYPE[65]: CALL
  TOKENIZED[65]: &ploughshoe_cnidocil
  ORIGINAL[66]: kung_shillelagh = &concordial_albay
  TYPE[66]: CALL
  TOKENIZED[66]: VAR1 = &concordial_albay
  ORIGINAL[67]: &concordial_albay
  TYPE[67]: CALL
  TOKENIZED[67]: &concordial_albay
  ORIGINAL[68]: vocative_skateboards = &kung_shillelagh
  TYPE[68]: CALL
  TOKENIZED[68]: VAR1 = &kung_shillelagh
  ORIGINAL[69]: &kung_shillelagh
  TYPE[69]: CALL
  TOKENIZED[69]: &kung_shillelagh
  ORIGINAL[70]: dialectologies_trip = &vocative_skateboards
  TYPE[70]: CALL
  TOKENIZED[70]: VAR1 = &vocative_skateboards
  ORIGINAL[71]: &vocative_skateboards
  TYPE[71]: CALL
  TOKENIZED[71]: &vocative_skateboards
  ORIGINAL[72]: undermelodies_piffero = &dialectologies_trip
  TYPE[72]: CALL
  TOKENIZED[72]: VAR1 = &dialectologies_trip
  ORIGINAL[73]: &dialectologies_trip
  TYPE[73]: CALL
  TOKENIZED[73]: &dialectologies_trip
  ORIGINAL[74]: quakily_ophian = &undermelodies_piffero
  TYPE[74]: CALL
  TOKENIZED[74]: VAR1 = &undermelodies_piffero
  ORIGINAL[75]: &undermelodies_piffero
  TYPE[75]: CALL
  TOKENIZED[75]: &undermelodies_piffero
  ORIGINAL[76]: noctilio_redisposition = &quakily_ophian
  TYPE[76]: CALL
  TOKENIZED[76]: VAR1 = &quakily_ophian
  ORIGINAL[77]: &quakily_ophian
  TYPE[77]: CALL
  TOKENIZED[77]: &quakily_ophian
  ORIGINAL[78]: asseveratingly_coloslossi = &noctilio_redisposition
  TYPE[78]: CALL
  TOKENIZED[78]: VAR1 = &noctilio_redisposition
  ORIGINAL[79]: &noctilio_redisposition
  TYPE[79]: CALL
  TOKENIZED[79]: &noctilio_redisposition
  ORIGINAL[80]: pilipilula_zees = &asseveratingly_coloslossi
  TYPE[80]: CALL
  TOKENIZED[80]: VAR1 = &asseveratingly_coloslossi
  ORIGINAL[81]: &asseveratingly_coloslossi
  TYPE[81]: CALL
  TOKENIZED[81]: &asseveratingly_coloslossi
  ORIGINAL[82]: intoxicators_overchafing = &pilipilula_zees
  TYPE[82]: CALL
  TOKENIZED[82]: VAR1 = &pilipilula_zees
  ORIGINAL[83]: &pilipilula_zees
  TYPE[83]: CALL
  TOKENIZED[83]: &pilipilula_zees
  ORIGINAL[84]: tylosoid_cauked = &intoxicators_overchafing
  TYPE[84]: CALL
  TOKENIZED[84]: VAR1 = &intoxicators_overchafing
  ORIGINAL[85]: &intoxicators_overchafing
  TYPE[85]: CALL
  TOKENIZED[85]: &intoxicators_overchafing
  ORIGINAL[86]: simson_backwood = &tylosoid_cauked
  TYPE[86]: CALL
  TOKENIZED[86]: VAR1 = &tylosoid_cauked
  ORIGINAL[87]: &tylosoid_cauked
  TYPE[87]: CALL
  TOKENIZED[87]: &tylosoid_cauked
  ORIGINAL[88]: bikram_hoochinoo = &simson_backwood
  TYPE[88]: CALL
  TOKENIZED[88]: VAR1 = &simson_backwood
  ORIGINAL[89]: &simson_backwood
  TYPE[89]: CALL
  TOKENIZED[89]: &simson_backwood
  ORIGINAL[90]: hayweed_resicken = &bikram_hoochinoo
  TYPE[90]: CALL
  TOKENIZED[90]: VAR1 = &bikram_hoochinoo
  ORIGINAL[91]: &bikram_hoochinoo
  TYPE[91]: CALL
  TOKENIZED[91]: &bikram_hoochinoo
  ORIGINAL[92]: tubfishes_tetralite = &hayweed_resicken
  TYPE[92]: CALL
  TOKENIZED[92]: VAR1 = &hayweed_resicken
  ORIGINAL[93]: &hayweed_resicken
  TYPE[93]: CALL
  TOKENIZED[93]: &hayweed_resicken
  ORIGINAL[94]: demultiplexed_propositions = &tubfishes_tetralite
  TYPE[94]: CALL
  TOKENIZED[94]: VAR1 = &tubfishes_tetralite
  ORIGINAL[95]: &tubfishes_tetralite
  TYPE[95]: CALL
  TOKENIZED[95]: &tubfishes_tetralite
  ORIGINAL[96]: metatarsale_belgrade = &demultiplexed_propositions
  TYPE[96]: CALL
  TOKENIZED[96]: VAR1 = &demultiplexed_propositions
  ORIGINAL[97]: &demultiplexed_propositions
  TYPE[97]: CALL
  TOKENIZED[97]: &demultiplexed_propositions
  ORIGINAL[98]: ungraphical_cru = &metatarsale_belgrade
  TYPE[98]: CALL
  TOKENIZED[98]: VAR1 = &metatarsale_belgrade
  ORIGINAL[99]: &metatarsale_belgrade
  TYPE[99]: CALL
  TOKENIZED[99]: &metatarsale_belgrade
  ORIGINAL[100]: babe_tibetans = &ungraphical_cru
  TYPE[100]: CALL
  TOKENIZED[100]: VAR1 = &ungraphical_cru
  ORIGINAL[101]: &ungraphical_cru
  TYPE[101]: CALL
  TOKENIZED[101]: &ungraphical_cru
  ORIGINAL[102]: oratrices_buttzville[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))))] = sorose_elias
  TYPE[102]: CALL
  TOKENIZED[102]: VAR1 [ * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] = VAR2
  ORIGINAL[103]: oratrices_buttzville[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))))]
  TYPE[103]: CALL
  TOKENIZED[103]: VAR1 [ * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ]
  ORIGINAL[104]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[104]: CALL
  TOKENIZED[104]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[105]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[105]: CALL
  TOKENIZED[105]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[106]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[106]: CALL
  TOKENIZED[106]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[107]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[107]: CALL
  TOKENIZED[107]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[108]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))
  TYPE[108]: CALL
  TOKENIZED[108]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[109]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))))
  TYPE[109]: CALL
  TOKENIZED[109]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[110]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))
  TYPE[110]: CALL
  TOKENIZED[110]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[111]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))
  TYPE[111]: CALL
  TOKENIZED[111]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[112]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))
  TYPE[112]: CALL
  TOKENIZED[112]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[113]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))
  TYPE[113]: CALL
  TOKENIZED[113]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[114]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))
  TYPE[114]: CALL
  TOKENIZED[114]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[115]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))
  TYPE[115]: CALL
  TOKENIZED[115]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[116]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))
  TYPE[116]: CALL
  TOKENIZED[116]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[117]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))
  TYPE[117]: CALL
  TOKENIZED[117]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[118]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))
  TYPE[118]: CALL
  TOKENIZED[118]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[119]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))
  TYPE[119]: CALL
  TOKENIZED[119]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[120]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))
  TYPE[120]: CALL
  TOKENIZED[120]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[121]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))
  TYPE[121]: CALL
  TOKENIZED[121]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[122]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))
  TYPE[122]: CALL
  TOKENIZED[122]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[123]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))
  TYPE[123]: CALL
  TOKENIZED[123]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[124]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))
  TYPE[124]: CALL
  TOKENIZED[124]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[125]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))
  TYPE[125]: CALL
  TOKENIZED[125]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[126]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))
  TYPE[126]: CALL
  TOKENIZED[126]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[127]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))
  TYPE[127]: CALL
  TOKENIZED[127]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[128]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))
  TYPE[128]: CALL
  TOKENIZED[128]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[129]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))
  TYPE[129]: CALL
  TOKENIZED[129]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[130]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))
  TYPE[130]: CALL
  TOKENIZED[130]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[131]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))
  TYPE[131]: CALL
  TOKENIZED[131]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[132]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))
  TYPE[132]: CALL
  TOKENIZED[132]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[133]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))
  TYPE[133]: CALL
  TOKENIZED[133]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[134]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))
  TYPE[134]: CALL
  TOKENIZED[134]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[135]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))
  TYPE[135]: CALL
  TOKENIZED[135]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[136]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))
  TYPE[136]: CALL
  TOKENIZED[136]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[137]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))
  TYPE[137]: CALL
  TOKENIZED[137]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[138]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))
  TYPE[138]: CALL
  TOKENIZED[138]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[139]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))
  TYPE[139]: CALL
  TOKENIZED[139]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[140]: *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))
  TYPE[140]: CALL
  TOKENIZED[140]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[141]: *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))
  TYPE[141]: CALL
  TOKENIZED[141]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[142]: *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))
  TYPE[142]: CALL
  TOKENIZED[142]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[143]: *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))
  TYPE[143]: CALL
  TOKENIZED[143]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) )
  ORIGINAL[144]: *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))
  TYPE[144]: CALL
  TOKENIZED[144]: * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) )
  ORIGINAL[145]: *( *( *( *( *( *( *( *( *babe_tibetans))))))))
  TYPE[145]: CALL
  TOKENIZED[145]: * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) )
  ORIGINAL[146]: *( *( *( *( *( *( *( *babe_tibetans)))))))
  TYPE[146]: CALL
  TOKENIZED[146]: * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) )
  ORIGINAL[147]: *( *( *( *( *( *( *babe_tibetans))))))
  TYPE[147]: CALL
  TOKENIZED[147]: * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) )
  ORIGINAL[148]: *( *( *( *( *( *babe_tibetans)))))
  TYPE[148]: CALL
  TOKENIZED[148]: * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) )
  ORIGINAL[149]: *( *( *( *( *babe_tibetans))))
  TYPE[149]: CALL
  TOKENIZED[149]: * ( * ( * ( * ( *babe_tibetans ) ) ) )
  ORIGINAL[150]: *( *( *( *babe_tibetans)))
  TYPE[150]: CALL
  TOKENIZED[150]: * ( * ( * ( *babe_tibetans ) ) )
  ORIGINAL[151]: *( *( *babe_tibetans))
  TYPE[151]: CALL
  TOKENIZED[151]: * ( * ( *babe_tibetans ) )
  ORIGINAL[152]: *( *babe_tibetans)
  TYPE[152]: CALL
  TOKENIZED[152]: * ( *babe_tibetans )
  ORIGINAL[153]: *babe_tibetans
  TYPE[153]: CALL
  TOKENIZED[153]: *babe_tibetans
  ORIGINAL[154]: unspeciousness_aptate = oratrices_buttzville[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))))]
  TYPE[154]: CALL
  TOKENIZED[154]: VAR1 = VAR2 [ * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ]
  ORIGINAL[155]: oratrices_buttzville[ *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))))]
  TYPE[155]: CALL
  TOKENIZED[155]: VAR1 [ * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ]
  ORIGINAL[156]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[156]: CALL
  TOKENIZED[156]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[157]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[157]: CALL
  TOKENIZED[157]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[158]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[158]: CALL
  TOKENIZED[158]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[159]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))))))
  TYPE[159]: CALL
  TOKENIZED[159]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[160]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))))
  TYPE[160]: CALL
  TOKENIZED[160]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[161]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))))
  TYPE[161]: CALL
  TOKENIZED[161]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[162]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))))
  TYPE[162]: CALL
  TOKENIZED[162]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[163]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))))
  TYPE[163]: CALL
  TOKENIZED[163]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[164]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))))
  TYPE[164]: CALL
  TOKENIZED[164]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[165]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))))
  TYPE[165]: CALL
  TOKENIZED[165]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[166]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))))
  TYPE[166]: CALL
  TOKENIZED[166]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[167]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))))
  TYPE[167]: CALL
  TOKENIZED[167]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[168]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))))
  TYPE[168]: CALL
  TOKENIZED[168]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[169]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))))
  TYPE[169]: CALL
  TOKENIZED[169]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[170]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))))
  TYPE[170]: CALL
  TOKENIZED[170]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[171]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))))
  TYPE[171]: CALL
  TOKENIZED[171]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[172]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))))
  TYPE[172]: CALL
  TOKENIZED[172]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[173]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))))
  TYPE[173]: CALL
  TOKENIZED[173]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[174]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))))
  TYPE[174]: CALL
  TOKENIZED[174]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[175]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))))
  TYPE[175]: CALL
  TOKENIZED[175]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[176]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))))
  TYPE[176]: CALL
  TOKENIZED[176]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[177]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))))
  TYPE[177]: CALL
  TOKENIZED[177]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[178]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))))
  TYPE[178]: CALL
  TOKENIZED[178]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[179]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))))
  TYPE[179]: CALL
  TOKENIZED[179]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[180]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))))
  TYPE[180]: CALL
  TOKENIZED[180]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[181]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))))
  TYPE[181]: CALL
  TOKENIZED[181]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[182]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))))
  TYPE[182]: CALL
  TOKENIZED[182]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[183]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))))
  TYPE[183]: CALL
  TOKENIZED[183]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[184]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))))
  TYPE[184]: CALL
  TOKENIZED[184]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[185]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))))
  TYPE[185]: CALL
  TOKENIZED[185]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[186]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))))
  TYPE[186]: CALL
  TOKENIZED[186]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[187]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))))
  TYPE[187]: CALL
  TOKENIZED[187]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[188]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))))
  TYPE[188]: CALL
  TOKENIZED[188]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[189]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))))
  TYPE[189]: CALL
  TOKENIZED[189]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[190]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))))
  TYPE[190]: CALL
  TOKENIZED[190]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[191]: *( *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))))
  TYPE[191]: CALL
  TOKENIZED[191]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[192]: *( *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))))
  TYPE[192]: CALL
  TOKENIZED[192]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[193]: *( *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))))
  TYPE[193]: CALL
  TOKENIZED[193]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[194]: *( *( *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))))
  TYPE[194]: CALL
  TOKENIZED[194]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[195]: *( *( *( *( *( *( *( *( *( *( *babe_tibetans))))))))))
  TYPE[195]: CALL
  TOKENIZED[195]: * ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) ) )
  ORIGINAL[196]: *( *( *( *( *( *( *( *( *( *babe_tibetans)))))))))
  TYPE[196]: CALL
  TOKENIZED[196]: * ( * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) ) )
  ORIGINAL[197]: *( *( *( *( *( *( *( *( *babe_tibetans))))))))
  TYPE[197]: CALL
  TOKENIZED[197]: * ( * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) ) )
  ORIGINAL[198]: *( *( *( *( *( *( *( *babe_tibetans)))))))
  TYPE[198]: CALL
  TOKENIZED[198]: * ( * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) ) )
  ORIGINAL[199]: *( *( *( *( *( *( *babe_tibetans))))))
  TYPE[199]: CALL
  TOKENIZED[199]: * ( * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) ) )
  ORIGINAL[200]: *( *( *( *( *( *babe_tibetans)))))
  TYPE[200]: CALL
  TOKENIZED[200]: * ( * ( * ( * ( * ( *babe_tibetans ) ) ) ) )
  ORIGINAL[201]: *( *( *( *( *babe_tibetans))))
  TYPE[201]: CALL
  TOKENIZED[201]: * ( * ( * ( * ( *babe_tibetans ) ) ) )
  ORIGINAL[202]: *( *( *( *babe_tibetans)))
  TYPE[202]: CALL
  TOKENIZED[202]: * ( * ( * ( *babe_tibetans ) ) )
  ORIGINAL[203]: *( *( *babe_tibetans))
  TYPE[203]: CALL
  TOKENIZED[203]: * ( * ( *babe_tibetans ) )
  ORIGINAL[204]: *( *babe_tibetans)
  TYPE[204]: CALL
  TOKENIZED[204]: * ( *babe_tibetans )
  ORIGINAL[205]: *babe_tibetans
  TYPE[205]: CALL
  TOKENIZED[205]: *babe_tibetans
  ORIGINAL[206]: demilitarising_crustated = ((char *)unspeciousness_aptate)
  TYPE[206]: CALL
  TOKENIZED[206]: VAR1 = ( ( char * ) VAR2 )
  ORIGINAL[207]: (char *)unspeciousness_aptate
  TYPE[207]: CALL
  TOKENIZED[207]: ( char * ) VAR1
  ORIGINAL[208]: tracepoint(stonesoup_trace, weakness_start, \
  TYPE[208]: CALL
  TOKENIZED[208]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[209]: memset(stonesoup_stack_buffer_64,0,64)
  TYPE[209]: CALL
  TOKENIZED[209]: FUN1 ( VAR1 , 0 , 64 )
  ORIGINAL[210]: tracepoint(stonesoup_trace, variable_signed_integral, \
  TYPE[210]: CALL
  TOKENIZED[210]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[211]: &stonesoup_oc_i
  TYPE[211]: CALL
  TOKENIZED[211]: &stonesoup_oc_i
  ORIGINAL[212]: tracepoint(stonesoup_trace, variable_buffer, \
  TYPE[212]: CALL
  TOKENIZED[212]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[213]: tracepoint(stonesoup_trace, variable_address, \
  TYPE[213]: CALL
  TOKENIZED[213]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[214]: __builtin_return_address(0)
  TYPE[214]: CALL
  TOKENIZED[214]: FUN1 ( 0 )
  ORIGINAL[215]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[215]: CALL
  TOKENIZED[215]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[216]: strcpy(stonesoup_stack_buffer_64,demilitarising_crustated)
  TYPE[216]: CALL
  TOKENIZED[216]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[217]: tracepoint(stonesoup_trace, variable_buffer, \
  TYPE[217]: CALL
  TOKENIZED[217]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[218]: tracepoint(stonesoup_trace, variable_address, \
  TYPE[218]: CALL
  TOKENIZED[218]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[219]: __builtin_return_address(0)
  TYPE[219]: CALL
  TOKENIZED[219]: FUN1 ( 0 )
  ORIGINAL[220]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[220]: CALL
  TOKENIZED[220]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[221]: stonesoup_oc_i < 64
  TYPE[221]: CALL
  TOKENIZED[221]: VAR1 < 64
  ORIGINAL[222]: tracepoint(stonesoup_trace, variable_signed_integral, \
  TYPE[222]: CALL
  TOKENIZED[222]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[223]: &stonesoup_oc_i
  TYPE[223]: CALL
  TOKENIZED[223]: &stonesoup_oc_i
  ORIGINAL[224]: tracepoint(stonesoup_trace, variable_buffer, \
  TYPE[224]: CALL
  TOKENIZED[224]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[225]: stonesoup_printf(\
  TYPE[225]: CALL
  TOKENIZED[225]: FUN1 ( \
  ORIGINAL[226]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[226]: CALL
  TOKENIZED[226]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[227]: tracepoint(stonesoup_trace, weakness_end)
  TYPE[227]: CALL
  TOKENIZED[227]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[228]: unspeciousness_aptate != 0
  TYPE[228]: CALL
  TOKENIZED[228]: VAR1 != 0
  ORIGINAL[229]: stonesoup_close_printf_context()
  TYPE[229]: CALL
  TOKENIZED[229]: FUN1 ( )
  ORIGINAL[230]: sorose_elias
  TYPE[230]: IDENTIFIER
  TOKENIZED[230]: VAR1
  ORIGINAL[231]: enisled_lisbon
  TYPE[231]: IDENTIFIER
  TOKENIZED[231]: VAR1
  ORIGINAL[232]: elita_floorway
  TYPE[232]: IDENTIFIER
  TOKENIZED[232]: VAR1
  ORIGINAL[233]: enisled_lisbon
  TYPE[233]: IDENTIFIER
  TOKENIZED[233]: VAR1
  ORIGINAL[234]: bakerstown_osnabrock
  TYPE[234]: IDENTIFIER
  TOKENIZED[234]: VAR1
  ORIGINAL[235]: elita_floorway
  TYPE[235]: IDENTIFIER
  TOKENIZED[235]: VAR1
  ORIGINAL[236]: townman_chutneys
  TYPE[236]: IDENTIFIER
  TOKENIZED[236]: VAR1
  ORIGINAL[237]: bakerstown_osnabrock
  TYPE[237]: IDENTIFIER
  TOKENIZED[237]: VAR1
  ORIGINAL[238]: indicativeness_soubrette
  TYPE[238]: IDENTIFIER
  TOKENIZED[238]: VAR1
  ORIGINAL[239]: townman_chutneys
  TYPE[239]: IDENTIFIER
  TOKENIZED[239]: VAR1
  ORIGINAL[240]: prentiss_poppied
  TYPE[240]: IDENTIFIER
  TOKENIZED[240]: VAR1
  ORIGINAL[241]: indicativeness_soubrette
  TYPE[241]: IDENTIFIER
  TOKENIZED[241]: VAR1
  ORIGINAL[242]: beterschap_skiddier
  TYPE[242]: IDENTIFIER
  TOKENIZED[242]: VAR1
  ORIGINAL[243]: prentiss_poppied
  TYPE[243]: IDENTIFIER
  TOKENIZED[243]: VAR1
  ORIGINAL[244]: balkiest_simpled
  TYPE[244]: IDENTIFIER
  TOKENIZED[244]: VAR1
  ORIGINAL[245]: beterschap_skiddier
  TYPE[245]: IDENTIFIER
  TOKENIZED[245]: VAR1
  ORIGINAL[246]: culmen_nireus
  TYPE[246]: IDENTIFIER
  TOKENIZED[246]: VAR1
  ORIGINAL[247]: balkiest_simpled
  TYPE[247]: IDENTIFIER
  TOKENIZED[247]: VAR1
  ORIGINAL[248]: insurrectionary_liquifier
  TYPE[248]: IDENTIFIER
  TOKENIZED[248]: VAR1
  ORIGINAL[249]: culmen_nireus
  TYPE[249]: IDENTIFIER
  TOKENIZED[249]: VAR1
  ORIGINAL[250]: overgone_martinelli
  TYPE[250]: IDENTIFIER
  TOKENIZED[250]: VAR1
  ORIGINAL[251]: insurrectionary_liquifier
  TYPE[251]: IDENTIFIER
  TOKENIZED[251]: VAR1
  ORIGINAL[252]: retrainable_lucigen
  TYPE[252]: IDENTIFIER
  TOKENIZED[252]: VAR1
  ORIGINAL[253]: overgone_martinelli
  TYPE[253]: IDENTIFIER
  TOKENIZED[253]: VAR1
  ORIGINAL[254]: redefer_palampore
  TYPE[254]: IDENTIFIER
  TOKENIZED[254]: VAR1
  ORIGINAL[255]: retrainable_lucigen
  TYPE[255]: IDENTIFIER
  TOKENIZED[255]: VAR1
  ORIGINAL[256]: telopea_arbitraries
  TYPE[256]: IDENTIFIER
  TOKENIZED[256]: VAR1
  ORIGINAL[257]: redefer_palampore
  TYPE[257]: IDENTIFIER
  TOKENIZED[257]: VAR1
  ORIGINAL[258]: nairn_hepatized
  TYPE[258]: IDENTIFIER
  TOKENIZED[258]: VAR1
  ORIGINAL[259]: telopea_arbitraries
  TYPE[259]: IDENTIFIER
  TOKENIZED[259]: VAR1
  ORIGINAL[260]: uncompanionable_unmooring
  TYPE[260]: IDENTIFIER
  TOKENIZED[260]: VAR1
  ORIGINAL[261]: nairn_hepatized
  TYPE[261]: IDENTIFIER
  TOKENIZED[261]: VAR1
  ORIGINAL[262]: precontractive_rhizocarpean
  TYPE[262]: IDENTIFIER
  TOKENIZED[262]: VAR1
  ORIGINAL[263]: uncompanionable_unmooring
  TYPE[263]: IDENTIFIER
  TOKENIZED[263]: VAR1
  ORIGINAL[264]: messianically_microfilmer
  TYPE[264]: IDENTIFIER
  TOKENIZED[264]: VAR1
  ORIGINAL[265]: precontractive_rhizocarpean
  TYPE[265]: IDENTIFIER
  TOKENIZED[265]: VAR1
  ORIGINAL[266]: eulogise_citrines
  TYPE[266]: IDENTIFIER
  TOKENIZED[266]: VAR1
  ORIGINAL[267]: messianically_microfilmer
  TYPE[267]: IDENTIFIER
  TOKENIZED[267]: VAR1
  ORIGINAL[268]: aueto_valetudinarian
  TYPE[268]: IDENTIFIER
  TOKENIZED[268]: VAR1
  ORIGINAL[269]: eulogise_citrines
  TYPE[269]: IDENTIFIER
  TOKENIZED[269]: VAR1
  ORIGINAL[270]: langues_petrologically
  TYPE[270]: IDENTIFIER
  TOKENIZED[270]: VAR1
  ORIGINAL[271]: aueto_valetudinarian
  TYPE[271]: IDENTIFIER
  TOKENIZED[271]: VAR1
  ORIGINAL[272]: ailantine_phonotypically
  TYPE[272]: IDENTIFIER
  TOKENIZED[272]: VAR1
  ORIGINAL[273]: langues_petrologically
  TYPE[273]: IDENTIFIER
  TOKENIZED[273]: VAR1
  ORIGINAL[274]: comagmatic_wednesdays
  TYPE[274]: IDENTIFIER
  TOKENIZED[274]: VAR1
  ORIGINAL[275]: ailantine_phonotypically
  TYPE[275]: IDENTIFIER
  TOKENIZED[275]: VAR1
  ORIGINAL[276]: oradea_mistended
  TYPE[276]: IDENTIFIER
  TOKENIZED[276]: VAR1
  ORIGINAL[277]: comagmatic_wednesdays
  TYPE[277]: IDENTIFIER
  TOKENIZED[277]: VAR1
  ORIGINAL[278]: outcharms_spermaphyta
  TYPE[278]: IDENTIFIER
  TOKENIZED[278]: VAR1
  ORIGINAL[279]: oradea_mistended
  TYPE[279]: IDENTIFIER
  TOKENIZED[279]: VAR1
  ORIGINAL[280]: unintermixed_horsefeathers
  TYPE[280]: IDENTIFIER
  TOKENIZED[280]: VAR1
  ORIGINAL[281]: outcharms_spermaphyta
  TYPE[281]: IDENTIFIER
  TOKENIZED[281]: VAR1
  ORIGINAL[282]: basirhinal_astonies
  TYPE[282]: IDENTIFIER
  TOKENIZED[282]: VAR1
  ORIGINAL[283]: unintermixed_horsefeathers
  TYPE[283]: IDENTIFIER
  TOKENIZED[283]: VAR1
  ORIGINAL[284]: completing_cropsickness
  TYPE[284]: IDENTIFIER
  TOKENIZED[284]: VAR1
  ORIGINAL[285]: basirhinal_astonies
  TYPE[285]: IDENTIFIER
  TOKENIZED[285]: VAR1
  ORIGINAL[286]: pyatigorsk_cyproheptadine
  TYPE[286]: IDENTIFIER
  TOKENIZED[286]: VAR1
  ORIGINAL[287]: completing_cropsickness
  TYPE[287]: IDENTIFIER
  TOKENIZED[287]: VAR1
  ORIGINAL[288]: gerdy_benzofulvene
  TYPE[288]: IDENTIFIER
  TOKENIZED[288]: VAR1
  ORIGINAL[289]: pyatigorsk_cyproheptadine
  TYPE[289]: IDENTIFIER
  TOKENIZED[289]: VAR1
  ORIGINAL[290]: transfashion_callously
  TYPE[290]: IDENTIFIER
  TOKENIZED[290]: VAR1
  ORIGINAL[291]: gerdy_benzofulvene
  TYPE[291]: IDENTIFIER
  TOKENIZED[291]: VAR1
  ORIGINAL[292]: ploughshoe_cnidocil
  TYPE[292]: IDENTIFIER
  TOKENIZED[292]: VAR1
  ORIGINAL[293]: transfashion_callously
  TYPE[293]: IDENTIFIER
  TOKENIZED[293]: VAR1
  ORIGINAL[294]: concordial_albay
  TYPE[294]: IDENTIFIER
  TOKENIZED[294]: VAR1
  ORIGINAL[295]: ploughshoe_cnidocil
  TYPE[295]: IDENTIFIER
  TOKENIZED[295]: VAR1
  ORIGINAL[296]: kung_shillelagh
  TYPE[296]: IDENTIFIER
  TOKENIZED[296]: VAR1
  ORIGINAL[297]: concordial_albay
  TYPE[297]: IDENTIFIER
  TOKENIZED[297]: VAR1
  ORIGINAL[298]: vocative_skateboards
  TYPE[298]: IDENTIFIER
  TOKENIZED[298]: VAR1
  ORIGINAL[299]: kung_shillelagh
  TYPE[299]: IDENTIFIER
  TOKENIZED[299]: VAR1
  ORIGINAL[300]: dialectologies_trip
  TYPE[300]: IDENTIFIER
  TOKENIZED[300]: VAR1
  ORIGINAL[301]: vocative_skateboards
  TYPE[301]: IDENTIFIER
  TOKENIZED[301]: VAR1
  ORIGINAL[302]: undermelodies_piffero
  TYPE[302]: IDENTIFIER
  TOKENIZED[302]: VAR1
  ORIGINAL[303]: dialectologies_trip
  TYPE[303]: IDENTIFIER
  TOKENIZED[303]: VAR1
  ORIGINAL[304]: quakily_ophian
  TYPE[304]: IDENTIFIER
  TOKENIZED[304]: VAR1
  ORIGINAL[305]: undermelodies_piffero
  TYPE[305]: IDENTIFIER
  TOKENIZED[305]: VAR1
  ORIGINAL[306]: noctilio_redisposition
  TYPE[306]: IDENTIFIER
  TOKENIZED[306]: VAR1
  ORIGINAL[307]: quakily_ophian
  TYPE[307]: IDENTIFIER
  TOKENIZED[307]: VAR1
  ORIGINAL[308]: asseveratingly_coloslossi
  TYPE[308]: IDENTIFIER
  TOKENIZED[308]: VAR1
  ORIGINAL[309]: noctilio_redisposition
  TYPE[309]: IDENTIFIER
  TOKENIZED[309]: VAR1
  ORIGINAL[310]: pilipilula_zees
  TYPE[310]: IDENTIFIER
  TOKENIZED[310]: VAR1
  ORIGINAL[311]: asseveratingly_coloslossi
  TYPE[311]: IDENTIFIER
  TOKENIZED[311]: VAR1
  ORIGINAL[312]: intoxicators_overchafing
  TYPE[312]: IDENTIFIER
  TOKENIZED[312]: VAR1
  ORIGINAL[313]: pilipilula_zees
  TYPE[313]: IDENTIFIER
  TOKENIZED[313]: VAR1
  ORIGINAL[314]: tylosoid_cauked
  TYPE[314]: IDENTIFIER
  TOKENIZED[314]: VAR1
  ORIGINAL[315]: intoxicators_overchafing
  TYPE[315]: IDENTIFIER
  TOKENIZED[315]: VAR1
  ORIGINAL[316]: simson_backwood
  TYPE[316]: IDENTIFIER
  TOKENIZED[316]: VAR1
  ORIGINAL[317]: tylosoid_cauked
  TYPE[317]: IDENTIFIER
  TOKENIZED[317]: VAR1
  ORIGINAL[318]: bikram_hoochinoo
  TYPE[318]: IDENTIFIER
  TOKENIZED[318]: VAR1
  ORIGINAL[319]: simson_backwood
  TYPE[319]: IDENTIFIER
  TOKENIZED[319]: VAR1
  ORIGINAL[320]: hayweed_resicken
  TYPE[320]: IDENTIFIER
  TOKENIZED[320]: VAR1
  ORIGINAL[321]: bikram_hoochinoo
  TYPE[321]: IDENTIFIER
  TOKENIZED[321]: VAR1
  ORIGINAL[322]: tubfishes_tetralite
  TYPE[322]: IDENTIFIER
  TOKENIZED[322]: VAR1
  ORIGINAL[323]: hayweed_resicken
  TYPE[323]: IDENTIFIER
  TOKENIZED[323]: VAR1
  ORIGINAL[324]: demultiplexed_propositions
  TYPE[324]: IDENTIFIER
  TOKENIZED[324]: VAR1
  ORIGINAL[325]: tubfishes_tetralite
  TYPE[325]: IDENTIFIER
  TOKENIZED[325]: VAR1
  ORIGINAL[326]: metatarsale_belgrade
  TYPE[326]: IDENTIFIER
  TOKENIZED[326]: VAR1
  ORIGINAL[327]: demultiplexed_propositions
  TYPE[327]: IDENTIFIER
  TOKENIZED[327]: VAR1
  ORIGINAL[328]: ungraphical_cru
  TYPE[328]: IDENTIFIER
  TOKENIZED[328]: VAR1
  ORIGINAL[329]: metatarsale_belgrade
  TYPE[329]: IDENTIFIER
  TOKENIZED[329]: VAR1
  ORIGINAL[330]: babe_tibetans
  TYPE[330]: IDENTIFIER
  TOKENIZED[330]: VAR1
  ORIGINAL[331]: ungraphical_cru
  TYPE[331]: IDENTIFIER
  TOKENIZED[331]: VAR1
  ORIGINAL[332]: oratrices_buttzville
  TYPE[332]: IDENTIFIER
  TOKENIZED[332]: VAR1
  ORIGINAL[333]: babe_tibetans
  TYPE[333]: IDENTIFIER
  TOKENIZED[333]: VAR1
  ORIGINAL[334]: sorose_elias
  TYPE[334]: IDENTIFIER
  TOKENIZED[334]: VAR1
  ORIGINAL[335]: unspeciousness_aptate
  TYPE[335]: IDENTIFIER
  TOKENIZED[335]: VAR1
  ORIGINAL[336]: oratrices_buttzville
  TYPE[336]: IDENTIFIER
  TOKENIZED[336]: VAR1
  ORIGINAL[337]: babe_tibetans
  TYPE[337]: IDENTIFIER
  TOKENIZED[337]: VAR1
  ORIGINAL[338]: demilitarising_crustated
  TYPE[338]: IDENTIFIER
  TOKENIZED[338]: VAR1
  ORIGINAL[339]: unspeciousness_aptate
  TYPE[339]: IDENTIFIER
  TOKENIZED[339]: VAR1
  ORIGINAL[340]: stonesoup_trace
  TYPE[340]: IDENTIFIER
  TOKENIZED[340]: VAR1
  ORIGINAL[341]: weakness_start
  TYPE[341]: IDENTIFIER
  TOKENIZED[341]: VAR1
  ORIGINAL[342]: stonesoup_stack_buffer_64
  TYPE[342]: IDENTIFIER
  TOKENIZED[342]: VAR1
  ORIGINAL[343]: stonesoup_trace
  TYPE[343]: IDENTIFIER
  TOKENIZED[343]: VAR1
  ORIGINAL[344]: variable_signed_integral
  TYPE[344]: IDENTIFIER
  TOKENIZED[344]: VAR1
  ORIGINAL[345]: stonesoup_oc_i
  TYPE[345]: IDENTIFIER
  TOKENIZED[345]: VAR1
  ORIGINAL[346]: stonesoup_oc_i
  TYPE[346]: IDENTIFIER
  TOKENIZED[346]: VAR1
  ORIGINAL[347]: stonesoup_trace
  TYPE[347]: IDENTIFIER
  TOKENIZED[347]: VAR1
  ORIGINAL[348]: variable_buffer
  TYPE[348]: IDENTIFIER
  TOKENIZED[348]: VAR1
  ORIGINAL[349]: stonesoup_stack_buffer_64
  TYPE[349]: IDENTIFIER
  TOKENIZED[349]: VAR1
  ORIGINAL[350]: stonesoup_trace
  TYPE[350]: IDENTIFIER
  TOKENIZED[350]: VAR1
  ORIGINAL[351]: variable_address
  TYPE[351]: IDENTIFIER
  TOKENIZED[351]: VAR1
  ORIGINAL[352]: stonesoup_trace
  TYPE[352]: IDENTIFIER
  TOKENIZED[352]: VAR1
  ORIGINAL[353]: trace_point
  TYPE[353]: IDENTIFIER
  TOKENIZED[353]: VAR1
  ORIGINAL[354]: stonesoup_stack_buffer_64
  TYPE[354]: IDENTIFIER
  TOKENIZED[354]: VAR1
  ORIGINAL[355]: demilitarising_crustated
  TYPE[355]: IDENTIFIER
  TOKENIZED[355]: VAR1
  ORIGINAL[356]: stonesoup_trace
  TYPE[356]: IDENTIFIER
  TOKENIZED[356]: VAR1
  ORIGINAL[357]: variable_buffer
  TYPE[357]: IDENTIFIER
  TOKENIZED[357]: VAR1
  ORIGINAL[358]: stonesoup_stack_buffer_64
  TYPE[358]: IDENTIFIER
  TOKENIZED[358]: VAR1
  ORIGINAL[359]: stonesoup_trace
  TYPE[359]: IDENTIFIER
  TOKENIZED[359]: VAR1
  ORIGINAL[360]: variable_address
  TYPE[360]: IDENTIFIER
  TOKENIZED[360]: VAR1
  ORIGINAL[361]: stonesoup_trace
  TYPE[361]: IDENTIFIER
  TOKENIZED[361]: VAR1
  ORIGINAL[362]: trace_point
  TYPE[362]: IDENTIFIER
  TOKENIZED[362]: VAR1
  ORIGINAL[363]: stonesoup_oc_i
  TYPE[363]: IDENTIFIER
  TOKENIZED[363]: VAR1
  ORIGINAL[364]: stonesoup_trace
  TYPE[364]: IDENTIFIER
  TOKENIZED[364]: VAR1
  ORIGINAL[365]: variable_signed_integral
  TYPE[365]: IDENTIFIER
  TOKENIZED[365]: VAR1
  ORIGINAL[366]: stonesoup_oc_i
  TYPE[366]: IDENTIFIER
  TOKENIZED[366]: VAR1
  ORIGINAL[367]: stonesoup_oc_i
  TYPE[367]: IDENTIFIER
  TOKENIZED[367]: VAR1
  ORIGINAL[368]: stonesoup_trace
  TYPE[368]: IDENTIFIER
  TOKENIZED[368]: VAR1
  ORIGINAL[369]: variable_buffer
  TYPE[369]: IDENTIFIER
  TOKENIZED[369]: VAR1
  ORIGINAL[370]: stonesoup_stack_buffer_64
  TYPE[370]: IDENTIFIER
  TOKENIZED[370]: VAR1
  ORIGINAL[371]: stonesoup_stack_buffer_64
  TYPE[371]: IDENTIFIER
  TOKENIZED[371]: VAR1
  ORIGINAL[372]: stonesoup_trace
  TYPE[372]: IDENTIFIER
  TOKENIZED[372]: VAR1
  ORIGINAL[373]: trace_point
  TYPE[373]: IDENTIFIER
  TOKENIZED[373]: VAR1
  ORIGINAL[374]: stonesoup_trace
  TYPE[374]: IDENTIFIER
  TOKENIZED[374]: VAR1
  ORIGINAL[375]: weakness_end
  TYPE[375]: IDENTIFIER
  TOKENIZED[375]: VAR1
  ORIGINAL[376]: unspeciousness_aptate
  TYPE[376]: IDENTIFIER
  TOKENIZED[376]: VAR1

CENTER_NODE: 47244640403
FRAGMENT_COUNT: 2
  ORIGINAL[0]: __inst -> g_class && __inst -> g_class -> g_type == __t
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 == VAR4
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244640305
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064772206
FRAGMENT_COUNT: 5
  ORIGINAL[0]: action = gtk_action_group_get_action(((GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)group),gtk_action_group_get_type()))),action_name)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( ( ( VAR2 * ) ( FUN2 ( ( ( VAR3 * ) VAR4 ) , FUN3 ( ) ) ) ) , VAR5 )
  ORIGINAL[1]: gtk_action_group_get_action(((GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)group),gtk_action_group_get_type()))),action_name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( VAR1 * ) ( FUN2 ( ( ( VAR2 * ) VAR3 ) , FUN3 ( ) ) ) ) , VAR4 )
  ORIGINAL[2]: (GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)group),gtk_action_group_get_type()))
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 * ) ( FUN1 ( ( ( VAR2 * ) VAR3 ) , FUN2 ( ) ) )
  ORIGINAL[3]: action
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: action_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477483
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !action
  TYPE[0]: CALL
  TOKENIZED[0]: !action
  ORIGINAL[1]: g_log(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: (const char *)__func__
  TYPE[2]: CALL
  TOKENIZED[2]: ( const char * ) VAR1
  ORIGINAL[3]: G_LOG_LEVEL_WARNING
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: action_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771199
FRAGMENT_COUNT: 17
  ORIGINAL[0]: *(&g_define_type_id__volatile)
  TYPE[0]: CALL
  TOKENIZED[0]: * ( &g_define_type_id__volatile )
  ORIGINAL[1]: &g_define_type_id__volatile
  TYPE[1]: CALL
  TOKENIZED[1]: &g_define_type_id__volatile
  ORIGINAL[2]: g_atomic_pointer_get((&g_define_type_id__volatile))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( &g_define_type_id__volatile ) )
  ORIGINAL[3]: &g_define_type_id__volatile
  TYPE[3]: CALL
  TOKENIZED[3]: &g_define_type_id__volatile
  ORIGINAL[4]: *(&g_define_type_id__volatile)
  TYPE[4]: CALL
  TOKENIZED[4]: * ( &g_define_type_id__volatile )
  ORIGINAL[5]: &g_define_type_id__volatile
  TYPE[5]: CALL
  TOKENIZED[5]: &g_define_type_id__volatile
  ORIGINAL[6]: &g_define_type_id__volatile
  TYPE[6]: CALL
  TOKENIZED[6]: &g_define_type_id__volatile
  ORIGINAL[7]: &g_define_type_id__volatile
  TYPE[7]: CALL
  TOKENIZED[7]: &g_define_type_id__volatile
  ORIGINAL[8]: &g_define_type_id__volatile
  TYPE[8]: CALL
  TOKENIZED[8]: &g_define_type_id__volatile
  ORIGINAL[9]: &g_define_type_id__volatile
  TYPE[9]: CALL
  TOKENIZED[9]: &g_define_type_id__volatile
  ORIGINAL[10]: g_define_type_id__volatile
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: g_define_type_id__volatile
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: g_define_type_id__volatile
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: g_define_type_id__volatile
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: g_define_type_id__volatile
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: g_define_type_id__volatile
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: g_define_type_id__volatile
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 47244640299
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771624
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < n_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: *tooltip = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: *tooltip = ( ( void * ) 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: tooltip
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: group
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640468
FRAGMENT_COUNT: 2
  ORIGINAL[0]: action_name != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244640461
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640513
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640338
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640444
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771488
FRAGMENT_COUNT: 3
  ORIGINAL[0]: name != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[1]: g_return_if_fail_warning(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: <global> __PRETTY_FUNCTION__
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719476834
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (GimpActionGroupClass *)klass
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 * ) VAR2
  ORIGINAL[1]: klass
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: klass
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: klass
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640460
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640290
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640323
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640434
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064771172
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640554
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640358
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640523
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477077
FRAGMENT_COUNT: 5
  ORIGINAL[0]: entries[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: msg_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: msg_context
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: entries
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640306
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_tainted_file != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: fseek(stonesoup_tainted_file,0L,2)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 0L , 2 )
  ORIGINAL[2]: stonesoup_tainted_file
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_lsize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640322
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640428
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640471
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640433
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477203
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < n_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: *tooltip = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: *tooltip = ( ( void * ) 0 )
  ORIGINAL[2]: gimp_action_group_check_unique_action(group,entries[i] . name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 [ VAR3 ] . VAR4 )
  ORIGINAL[3]: group -> user_data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: group
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: group
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: entries
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: group
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: group
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771246
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *object_class = (GObjectClass *)(g_type_check_class_cast(((GTypeClass *)klass),((GType )(20 << 2))))
  TYPE[0]: CALL
  TOKENIZED[0]: *object_class = ( VAR1 * ) ( FUN1 ( ( ( VAR2 * ) VAR3 ) , ( ( VAR4 ) ( 20 << 2 ) ) ) )
  ORIGINAL[1]: (GObjectClass *)(g_type_check_class_cast(((GTypeClass *)klass),((GType )(20 << 2))))
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 * ) ( FUN1 ( ( ( VAR2 * ) VAR3 ) , ( ( VAR4 ) ( 20 << 2 ) ) ) )
  ORIGINAL[2]: object_class
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: object_class
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476739
FRAGMENT_COUNT: 3
  ORIGINAL[0]: PROP_LABEL=2
  TYPE[0]: CALL
  TOKENIZED[0]: PROP_LABEL=2
  ORIGINAL[1]: PROP_STOCK_ID=3
  TYPE[1]: CALL
  TOKENIZED[1]: PROP_STOCK_ID=3
  ORIGINAL[2]: PROP_STOCK_ID
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640411
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640337
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640548
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064772289
FRAGMENT_COUNT: 5
  ORIGINAL[0]: __inst -> g_class && __inst -> g_class -> g_type == __t
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 == VAR4
  ORIGINAL[1]: __r = g_type_check_instance_is_a(__inst,__t)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[2]: g_type_check_instance_is_a(__inst,__t)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: __r
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: __r
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772438
FRAGMENT_COUNT: 3
  ORIGINAL[0]: stonesoup_read_taint(&dahle_transceive,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &dahle_transceive , \
  ORIGINAL[1]: &dahle_transceive
  TYPE[1]: CALL
  TOKENIZED[1]: &dahle_transceive
  ORIGINAL[2]: dahle_transceive
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772416
FRAGMENT_COUNT: 6
  ORIGINAL[0]: __inst -> g_class
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: __inst -> g_class -> g_type == __t
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 == VAR4
  ORIGINAL[2]: __inst -> g_class -> g_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: __inst -> g_class
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: g_type
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: __t
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476995
FRAGMENT_COUNT: 6
  ORIGINAL[0]: gtk_action_group_get_action(((GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)group),gtk_action_group_get_type()))),action_name)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( VAR1 * ) ( FUN2 ( ( ( VAR2 * ) VAR3 ) , FUN3 ( ) ) ) ) , VAR4 )
  ORIGINAL[1]: g_log(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: gtk_action_group_get_name(((GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)group),gtk_action_group_get_type()))))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( VAR1 * ) ( FUN2 ( ( ( VAR2 * ) VAR3 ) , FUN3 ( ) ) ) ) )
  ORIGINAL[3]: action_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: G_LOG_LEVEL_WARNING
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: action_name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640369
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640467
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640500
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640547
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640273
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640384
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640320
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064772223
FRAGMENT_COUNT: 5
  ORIGINAL[0]: __inst -> g_class && __inst -> g_class -> g_type == __t
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 == VAR4
  ORIGINAL[1]: __inst -> g_class
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: __inst -> g_class -> g_type == __t
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 == VAR4
  ORIGINAL[3]: __inst -> g_class -> g_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: __t
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477758
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !action
  TYPE[0]: CALL
  TOKENIZED[0]: !action
  ORIGINAL[1]: (const char *)__func__
  TYPE[1]: CALL
  TOKENIZED[1]: ( const char * ) VAR1
  ORIGINAL[2]: <global> __func__
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064771096
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ss_tc_root != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: size_dirpath * sizeof(char)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * sizeof ( char )
  ORIGINAL[2]: sizeof(char)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( char )
  ORIGINAL[3]: size_dirpath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: char
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: char

CENTER_NODE: 68719476914
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *name = gtk_action_group_get_name(((GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)object),gtk_action_group_get_type()))))
  TYPE[0]: CALL
  TOKENIZED[0]: *name = FUN1 ( ( ( VAR1 * ) ( FUN2 ( ( ( VAR2 * ) VAR3 ) , FUN3 ( ) ) ) ) )
  ORIGINAL[1]: gtk_action_group_get_name(((GtkActionGroup *)(g_type_check_instance_cast(((GTypeInstance *)object),gtk_action_group_get_type()))))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( VAR1 * ) ( FUN2 ( ( ( VAR2 * ) VAR3 ) , FUN3 ( ) ) ) ) )
  ORIGINAL[2]: name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477017
FRAGMENT_COUNT: 7
  ORIGINAL[0]: g_object_new(gimp_action_group_get_type(),\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( FUN2 ( ) , \
  ORIGINAL[1]: gimp_action_group_get_type()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: gimp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: label
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stock_id
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477699
FRAGMENT_COUNT: 5
  ORIGINAL[0]: viewable == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: (GTypeInstance *)viewable
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 * ) VAR2
  ORIGINAL[2]: viewable
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: viewable
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: viewable
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640482
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640309
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640536
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640370
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640440
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476835
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (gpointer )(((guint8 *)self) + ((glong )GimpActionGroup_private_offset))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 ) ( ( ( VAR2 * ) VAR3 ) + ( ( VAR4 ) VAR5 ) )
  ORIGINAL[1]: gpointer
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640488
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640520
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771835
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !gimp_action_group_check_unique_action(group,entries[i] . name)
  TYPE[0]: CALL
  TOKENIZED[0]: !gimp_action_group_check_unique_action ( VAR1 , VAR2 [ VAR3 ] . VAR4 )
  ORIGINAL[1]: action = gimp_enum_action_new(entries[i] . name,label,tooltip,entries[i] . stock_id,entries[i] . value,entries[i] . value_variable)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 [ VAR3 ] . VAR4 , VAR5 , VAR6 , VAR2 [ VAR3 ] . VAR7 , VAR2 [ VAR3 ] . VAR8 , VAR2 [ VAR3 ] . VAR9 )
  ORIGINAL[2]: gimp_enum_action_new(entries[i] . name,label,tooltip,entries[i] . stock_id,entries[i] . value,entries[i] . value_variable)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 [ VAR2 ] . VAR3 , VAR4 , VAR5 , VAR1 [ VAR2 ] . VAR6 , VAR1 [ VAR2 ] . VAR7 , VAR1 [ VAR2 ] . VAR8 )
  ORIGINAL[3]: action
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: callback
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640445
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640489
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640542
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640296
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640451
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772029
FRAGMENT_COUNT: 4
  ORIGINAL[0]: __inst -> g_class && __inst -> g_class -> g_type == __t
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 == VAR4
  ORIGINAL[1]: __r = !0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = !0
  ORIGINAL[2]: !0
  TYPE[2]: CALL
  TOKENIZED[2]: !0
  ORIGINAL[3]: __r
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477371
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !gimp_action_group_check_unique_action(group,entries[i] . name)
  TYPE[0]: CALL
  TOKENIZED[0]: !gimp_action_group_check_unique_action ( VAR1 , VAR2 [ VAR3 ] . VAR4 )
  ORIGINAL[1]: entries[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: tooltip
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: entries
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640493
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640499
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

