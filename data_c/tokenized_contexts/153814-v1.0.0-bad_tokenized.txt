# Tokenized code fragments for 153814-v1.0.0-bad
# Total center nodes processed: 195
# Total code fragments found: 925

CENTER_NODE: 30064776097
FRAGMENT_COUNT: 23
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: s -> nb_streams - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 - 1
  ORIGINAL[2]: s -> nb_streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: s
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: s
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: s
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: s
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1

CENTER_NODE: 68719477058
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &score
  TYPE[0]: CALL
  TOKENIZED[0]: &score
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: is_opened
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772221
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> has_b_frames < 3
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 < 3
  ORIGINAL[1]: st -> nb_decoded_frames >= 7
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 >= 7
  ORIGINAL[2]: st -> nb_decoded_frames
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: nb_decoded_frames
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777701
FRAGMENT_COUNT: 13
  ORIGINAL[0]: scotsmen_aspergilli != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: stonesoup_i < strlen(stonesoup_str_buf)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < FUN1 ( VAR2 )
  ORIGINAL[2]: strlen(stonesoup_str_buf)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: stonesoup_i++
  TYPE[3]: CALL
  TOKENIZED[3]: stonesoup_i++
  ORIGINAL[4]: stonesoup_str_buf[stonesoup_i] > 96
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ] > 96
  ORIGINAL[5]: stonesoup_str_buf[stonesoup_i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ]
  ORIGINAL[6]: for (stonesoup_i = 0;stonesoup_i < strlen(stonesoup_str_buf);stonesoup_i++)
  TYPE[6]: CONTROL_STRUCTURE
  TOKENIZED[6]: for ( VAR1 = 0 ; VAR1 < FUN1 ( VAR2 ) ; stonesoup_i++ )
  ORIGINAL[7]: stonesoup_i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_str_buf
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: stonesoup_i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: stonesoup_str_buf
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: stonesoup_i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: stonesoup_trace
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244640835
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479522
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &tag
  TYPE[0]: CALL
  TOKENIZED[0]: &tag
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771124
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 30064774421
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ic -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: (AVRational ){(1), (1000000)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[2]: {(1), (1000000)}
  TYPE[2]: CALL
  TOKENIZED[2]: { ( 1 ) , ( 1000000 ) }

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719480401
FRAGMENT_COUNT: 5
  ORIGINAL[0]: v % (100 * 1000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % ( 100 * 1000 )
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: d
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: postfix
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477739
FRAGMENT_COUNT: 5
  ORIGINAL[0]: update_wrap_reference(s,st,stream_index) && st -> pts_wrap_behavior == - 1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 ) && VAR2 -> VAR4 == - 1
  ORIGINAL[1]: st -> cur_dts = wrap_timestamp(st,st -> cur_dts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR1 , VAR1 -> VAR2 )
  ORIGINAL[2]: pkt -> dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: dts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641043
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476954
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: pkt -> pos = avio_tell(s)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 )
  ORIGINAL[2]: ret = avio_read(s,pkt -> data,size)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR5 )
  ORIGINAL[3]: avio_read(s,pkt -> data,size)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 , VAR4 )
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773415
FRAGMENT_COUNT: 9
  ORIGINAL[0]: av_compare_mod(pktl -> pkt . pts,pktl -> pkt . dts,(2 << wrap_bits - 1))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 . VAR3 , VAR1 -> VAR2 . VAR4 , ( 2 << VAR5 - 1 ) )
  ORIGINAL[1]: pktl -> pkt . dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: next_pkt -> pts = pktl -> pkt . dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR3 -> VAR4 . VAR5
  ORIGINAL[3]: next_pkt -> pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pktl -> pkt . dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: pktl -> pkt
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pktl -> pkt . dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 . VAR3
  ORIGINAL[7]: pktl -> pkt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: dts
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773049
FRAGMENT_COUNT: 12
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !out_pkt . size
  TYPE[1]: CALL
  TOKENIZED[1]: !out_pkt . VAR1
  ORIGINAL[2]: (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[3]: st -> codec -> codec_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> codec
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> codec
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: codec_type
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: AVMEDIA_TYPE_AUDIO
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719480784
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477556
FRAGMENT_COUNT: 3
  ORIGINAL[0]: enc -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_type
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: enc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244641144
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641147
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641019
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 68719481177
FRAGMENT_COUNT: 4
  ORIGINAL[0]: width || height
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 || VAR2
  ORIGINAL[1]: width
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: height
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: height
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777647
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sep = start + strcspn(start,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 + FUN1 ( VAR2 , \
  ORIGINAL[1]: start + strcspn(start,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + FUN1 ( VAR1 , \
  ORIGINAL[2]: strcspn(start,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: start
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sep
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771745
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !s -> av_class
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: ret = av_opt_set_dict(s,&tmp)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , &tmp )
  ORIGINAL[2]: av_opt_set_dict(s,&tmp)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &tmp )
  ORIGINAL[3]: &tmp
  TYPE[3]: CALL
  TOKENIZED[3]: &tmp
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777114
FRAGMENT_COUNT: 13
  ORIGINAL[0]: &new_tb . num
  TYPE[0]: CALL
  TOKENIZED[0]: &new_tb . VAR1
  ORIGINAL[1]: new_tb . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new_tb . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: new_tb . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: new_tb . num <= 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2 <= 0
  ORIGINAL[5]: new_tb . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: new_tb . num
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: num
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: new_tb
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: new_tb
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: new_tb
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: new_tb
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: new_tb
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244640824
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641141
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774435
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ic -> bit_rate <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: bit_rate = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: bit_rate
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773758
FRAGMENT_COUNT: 4
  ORIGINAL[0]: m >= 0 && m < nb_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR1 < VAR2
  ORIGINAL[1]: !(entries[m] . flags & 0x1)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 [ VAR2 ] . VAR3 & 0x1 )
  ORIGINAL[2]: entries[m] . flags & 0x1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3 & 0x1
  ORIGINAL[3]: entries[m] . flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] . VAR3

CENTER_NODE: 47244640809
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641104
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719478414
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: st -> cur_dts = av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = FUN1 ( VAR3 , VAR1 -> VAR4 . VAR5 * ( ( VAR6 ) VAR7 -> VAR4 . VAR8 ) , VAR1 -> VAR4 . VAR8 * ( ( VAR6 ) VAR7 -> VAR4 . VAR5 ) )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641024
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480837
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_strlcpy(path,ls,path_size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: path_size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ls
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: path
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ls
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: path_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640662
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640665
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478815
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos_max
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477246
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl -> pkt =  *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = *pkt
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771569
FRAGMENT_COUNT: 62
  ORIGINAL[0]: probe_size <= max_probe_size && !( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= VAR2 && ! ( *fmt )
  ORIGINAL[1]: probe_size <= max_probe_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 <= VAR2
  ORIGINAL[2]: probe_size = (((probe_size << 1) > ((max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1)))?((max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1))) : (probe_size << 1)))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( ( ( VAR1 << 1 ) > ( ( VAR2 > ( VAR1 + 1 ) ?max_probe_size : ( VAR1 + 1 ) ) ) ? ( ( VAR2 > ( VAR1 + 1 ) ?max_probe_size : ( VAR1 + 1 ) ) ) : ( VAR1 << 1 ) ) )
  ORIGINAL[3]: (probe_size << 1) > ((max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1)))?((max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1))) : (probe_size << 1)
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 << 1 ) > ( ( VAR2 > ( VAR1 + 1 ) ?max_probe_size : ( VAR1 + 1 ) ) ) ? ( ( VAR2 > ( VAR1 + 1 ) ?max_probe_size : ( VAR1 + 1 ) ) ) : ( VAR1 << 1 )
  ORIGINAL[4]: (probe_size << 1) > ((max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1)))
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 << 1 ) > ( ( VAR2 > ( VAR1 + 1 ) ?max_probe_size : ( VAR1 + 1 ) ) )
  ORIGINAL[5]: probe_size << 1
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 << 1
  ORIGINAL[6]: max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1)
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 > ( VAR2 + 1 ) ?max_probe_size : ( VAR2 + 1 )
  ORIGINAL[7]: max_probe_size > (probe_size + 1)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 > ( VAR2 + 1 )
  ORIGINAL[8]: probe_size + 1
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 + 1
  ORIGINAL[9]: !buftmp
  TYPE[9]: CALL
  TOKENIZED[9]: !buftmp
  ORIGINAL[10]: (ret = avio_read(pb,buf + buf_offset,probe_size - buf_offset)) < 0
  TYPE[10]: CALL
  TOKENIZED[10]: ( VAR1 = FUN1 ( VAR2 , VAR3 + VAR4 , VAR5 - VAR4 ) ) < 0
  ORIGINAL[11]: ret = avio_read(pb,buf + buf_offset,probe_size - buf_offset)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 = FUN1 ( VAR2 , VAR3 + VAR4 , VAR5 - VAR4 )
  ORIGINAL[12]: ret != -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 != - ( ( int ) ( ( 'E' | 'O' << 8 | 'F' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) )
  ORIGINAL[13]: -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))
  TYPE[13]: CALL
  TOKENIZED[13]: - ( ( int ) ( ( 'E' | 'O' << 8 | 'F' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) )
  ORIGINAL[14]: (int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24)
  TYPE[14]: CALL
  TOKENIZED[14]: ( int ) ( ( 'E' | 'O' << 8 | 'F' << 16 ) | ( ( unsigned int ) 32 ) << 24 )
  ORIGINAL[15]: ('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24
  TYPE[15]: CALL
  TOKENIZED[15]: ( 'E' | 'O' << 8 | 'F' << 16 ) | ( ( unsigned int ) 32 ) << 24
  ORIGINAL[16]: 'E' | 'O' << 8 | 'F' << 16
  TYPE[16]: CALL
  TOKENIZED[16]: 'E' | 'O' << 8 | 'F' << 16
  ORIGINAL[17]: 'E' | 'O' << 8
  TYPE[17]: CALL
  TOKENIZED[17]: 'E' | 'O' << 8
  ORIGINAL[18]: 'O' << 8
  TYPE[18]: CALL
  TOKENIZED[18]: 'O' << 8
  ORIGINAL[19]: 'F' << 16
  TYPE[19]: CALL
  TOKENIZED[19]: 'F' << 16
  ORIGINAL[20]: ((unsigned int )32) << 24
  TYPE[20]: CALL
  TOKENIZED[20]: ( ( unsigned int ) 32 ) << 24
  ORIGINAL[21]: (unsigned int )32
  TYPE[21]: CALL
  TOKENIZED[21]: ( unsigned int ) 32
  ORIGINAL[22]: pd . buf_size = buf_offset += ret
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 . VAR2 = VAR3 += VAR4
  ORIGINAL[23]: pd . buf_size
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 . VAR2
  ORIGINAL[24]: buf_offset += ret
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 += VAR2
  ORIGINAL[25]: pd . buf = &buf[offset]
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 . VAR2 = &buf [ VAR3 ]
  ORIGINAL[26]: pd . buf
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 . VAR2
  ORIGINAL[27]: &buf[offset]
  TYPE[27]: CALL
  TOKENIZED[27]: &buf [ VAR1 ]
  ORIGINAL[28]: buf[offset]
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 [ VAR2 ]
  ORIGINAL[29]: memset((pd . buf + pd . buf_size),0,32)
  TYPE[29]: CALL
  TOKENIZED[29]: FUN1 ( ( VAR1 . VAR2 + VAR1 . VAR3 ) , 0 , 32 )
  ORIGINAL[30]: pd . buf + pd . buf_size
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 . VAR2 + VAR1 . VAR3
  ORIGINAL[31]: pd . buf
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 . VAR2
  ORIGINAL[32]: pd . buf_size
  TYPE[32]: CALL
  TOKENIZED[32]: VAR1 . VAR2
  ORIGINAL[33]: *fmt = av_probe_input_format2(&pd,1,&score)
  TYPE[33]: CALL
  TOKENIZED[33]: *fmt = FUN1 ( &pd , 1 , &score )
  ORIGINAL[34]: *fmt
  TYPE[34]: CALL
  TOKENIZED[34]: *fmt
  ORIGINAL[35]: av_probe_input_format2(&pd,1,&score)
  TYPE[35]: CALL
  TOKENIZED[35]: FUN1 ( &pd , 1 , &score )
  ORIGINAL[36]: &pd
  TYPE[36]: CALL
  TOKENIZED[36]: &pd
  ORIGINAL[37]: &score
  TYPE[37]: CALL
  TOKENIZED[37]: &score
  ORIGINAL[38]: *fmt
  TYPE[38]: CALL
  TOKENIZED[38]: *fmt
  ORIGINAL[39]: buf_size
  TYPE[39]: FIELD_IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: buf
  TYPE[40]: FIELD_IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: buf
  TYPE[41]: FIELD_IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: buf_size
  TYPE[42]: FIELD_IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: probe_size
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: max_probe_size
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: probe_size
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: probe_size
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: max_probe_size
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: probe_size
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: ret
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: pd
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: buf_offset
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: ret
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: pd
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: buf
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1
  ORIGINAL[55]: offset
  TYPE[55]: IDENTIFIER
  TOKENIZED[55]: VAR1
  ORIGINAL[56]: pd
  TYPE[56]: IDENTIFIER
  TOKENIZED[56]: VAR1
  ORIGINAL[57]: pd
  TYPE[57]: IDENTIFIER
  TOKENIZED[57]: VAR1
  ORIGINAL[58]: fmt
  TYPE[58]: IDENTIFIER
  TOKENIZED[58]: VAR1
  ORIGINAL[59]: pd
  TYPE[59]: IDENTIFIER
  TOKENIZED[59]: VAR1
  ORIGINAL[60]: score
  TYPE[60]: IDENTIFIER
  TOKENIZED[60]: VAR1
  ORIGINAL[61]: fmt
  TYPE[61]: IDENTIFIER
  TOKENIZED[61]: VAR1

CENTER_NODE: 68719477349
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: audio_codec_id
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_AUDIO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772234
FRAGMENT_COUNT: 2
  ORIGINAL[0]: pktl == s -> parse_queue_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 -> VAR3
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719481265
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ( *(spec++)) == ':'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( spec++ ) ) == ':'
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (s -> streams[i] -> codec -> codec_type) == type && index-- == 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5 ) == VAR6 && index-- == 0
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776605
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244640282
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641153
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478789
FRAGMENT_COUNT: 6
  ORIGINAL[0]: target_ts <= ts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= VAR2
  ORIGINAL[1]: pos_limit = start_pos - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 - 1
  ORIGINAL[2]: start_pos - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 1
  ORIGINAL[3]: pos_limit
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_limit
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start_pos
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640551
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773672
FRAGMENT_COUNT: 6
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: &entries[index]
  TYPE[1]: CALL
  TOKENIZED[1]: &entries [ VAR1 ]
  ORIGINAL[2]: entries[index]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: entries
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: entries
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775306
FRAGMENT_COUNT: 14
  ORIGINAL[0]: pkt -> dts != ((int64_t )0x8000000000000000UL) && st -> codec_info_nb_frames > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR4 -> VAR5 > 1
  ORIGINAL[1]: st -> info -> fps_last_dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> info -> fps_last_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> info
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (int64_t )0x8000000000000000UL
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[5]: st -> info -> fps_last_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> info
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> info
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> info -> fps_last_dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[9]: st -> info
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: st -> info -> fps_last_dts
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[11]: st -> info
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: st -> info -> fps_last_dts
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[13]: fps_last_dts
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064772572
FRAGMENT_COUNT: 12
  ORIGINAL[0]: st -> first_dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> first_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pktl -> pkt . dts == ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 == ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[3]: pktl -> pkt . dts == st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3 == VAR4 -> VAR5
  ORIGINAL[4]: pktl -> pkt . dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: st -> first_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: first_dts
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719481204
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064775028
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: c -> time_base . den >= 101L * c -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4
  ORIGINAL[2]: c -> time_base . den < 5L * c -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4
  ORIGINAL[3]: c -> time_base . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: 5L * c -> time_base . num
  TYPE[4]: CALL
  TOKENIZED[4]: 5L * VAR1 -> VAR2 . VAR3

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476846
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !name || !names
  TYPE[0]: CALL
  TOKENIZED[0]: !name || !names
  ORIGINAL[1]: strlen(name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: namelen
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: name
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640881
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (codec_tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: while ((codec_tags -> id) != AV_CODEC_ID_NONE)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( ( VAR1 -> VAR2 ) != VAR3 )

CENTER_NODE: 68719480789
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: level
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dump_payload
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480133
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !decoder
  TYPE[0]: CALL
  TOKENIZED[0]: !decoder
  ORIGINAL[1]: multiframe = (5 > count?count : 5)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( 5 > count?count : 5 )
  ORIGINAL[2]: best_multiframe > multiframe
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > VAR2
  ORIGINAL[3]: best_multiframe
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: decoder_ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: best_multiframe
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: multiframe
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: best_multiframe
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: best_multiframe
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: best_multiframe
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641167
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640698
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641227
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776874
FRAGMENT_COUNT: 19
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: pkt -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> flags & 0x1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x1
  ORIGINAL[3]: pkt -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: flags
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 47244641208
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719478392
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_streams
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480175
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771416
FRAGMENT_COUNT: 5
  ORIGINAL[0]: nodat?100 / 4 - 1 : 1
  TYPE[0]: CALL
  TOKENIZED[0]: nodat?100 / 4 - 1 : 1
  ORIGINAL[1]: 100 / 4 - 1
  TYPE[1]: CALL
  TOKENIZED[1]: 100 / 4 - 1
  ORIGINAL[2]: 100 / 4
  TYPE[2]: CALL
  TOKENIZED[2]: 100 / 4
  ORIGINAL[3]: 100 / 4 - 1
  TYPE[3]: CALL
  TOKENIZED[3]: 100 / 4 - 1
  ORIGINAL[4]: nodat
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771126
FRAGMENT_COUNT: 4
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8
  ORIGINAL[2]: '6' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: '6' << 16
  ORIGINAL[3]: 63 << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 63 << 8

CENTER_NODE: 68719480971
FRAGMENT_COUNT: 8
  ORIGINAL[0]: str[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: av_strlcatf(str,size,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: proto
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: proto
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: str
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: str
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641156
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773534
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479551
FRAGMENT_COUNT: 3
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: AV_CODEC_ID_NONE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_NONE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641129
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476780
FRAGMENT_COUNT: 4
  ORIGINAL[0]: tracepoint(stonesoup_trace, trace_location, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: ++stonesoup_single_global_variable
  TYPE[1]: CALL
  TOKENIZED[1]: ++stonesoup_single_global_variable
  ORIGINAL[2]: <global> stonesoup_single_global_variable
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: stonesoup_single_global_variable
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640658
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480711
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcl
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244641136
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771146
FRAGMENT_COUNT: 16
  ORIGINAL[0]: st -> pts_wrap_behavior != 0 && st -> pts_wrap_reference != ((int64_t )0x8000000000000000UL) && timestamp != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 0 && VAR1 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> pts_wrap_behavior == 1 && timestamp < st -> pts_wrap_reference
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == 1 && VAR3 < VAR1 -> VAR4
  ORIGINAL[2]: st -> pts_wrap_behavior == 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == 1
  ORIGINAL[3]: timestamp < st -> pts_wrap_reference
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < VAR2 -> VAR3
  ORIGINAL[4]: timestamp + (1ULL << st -> pts_wrap_bits)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + ( 1ULL << VAR2 -> VAR3 )
  ORIGINAL[5]: 1ULL << st -> pts_wrap_bits
  TYPE[5]: CALL
  TOKENIZED[5]: 1ULL << VAR1 -> VAR2
  ORIGINAL[6]: st -> pts_wrap_bits
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> pts_wrap_behavior == - 1 && timestamp >= st -> pts_wrap_reference
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 == - 1 && VAR3 >= VAR1 -> VAR4
  ORIGINAL[8]: st -> pts_wrap_behavior == - 1
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 == - 1
  ORIGINAL[9]: st -> pts_wrap_behavior
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: - 1
  TYPE[10]: CALL
  TOKENIZED[10]: - 1
  ORIGINAL[11]: pts_wrap_bits
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pts_wrap_behavior
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: timestamp
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: st
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244640550
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640808
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640657
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640416
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771708
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> streams[i] -> disposition & 0x0400 && (s -> streams[i] -> discard) < AVDISCARD_ALL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 & 0x0400 && ( VAR1 -> VAR2 [ VAR3 ] -> VAR5 ) < VAR6
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: copy = s -> streams[i] -> attached_pic
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[4]: s -> streams[i] -> attached_pic
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: s -> streams[i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[6]: attached_pic
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: copy
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476741
FRAGMENT_COUNT: 4
  ORIGINAL[0]: mg_vprintf_data((struct mg_connection*) stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( struct mg_connection* ) VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: va_end(argptr)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: argptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773511
FRAGMENT_COUNT: 4
  ORIGINAL[0]: free_packet_buffer(&s -> packet_buffer,&s -> packet_buffer_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: &s -> packet_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481071
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i] -> id == id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[2]: s -> streams[i] -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480708
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064777165
FRAGMENT_COUNT: 7
  ORIGINAL[0]: dst -> streams[dst_stream] -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[1]: pkt -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: dst -> streams[dst_stream] -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: dst -> streams[dst_stream]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: dst -> streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: time_base
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dst_stream
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064776767
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: 2208988800ULL * 1000000ULL
  TYPE[1]: CALL
  TOKENIZED[1]: 2208988800ULL * 1000000ULL

CENTER_NODE: 47244641181
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777566
FRAGMENT_COUNT: 16
  ORIGINAL[0]: st -> codec -> width == 1920
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1920
  ORIGINAL[1]: st -> codec -> width
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: (st -> codec -> field_order) == AV_FIELD_PROGRESSIVE
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[3]: st -> codec -> field_order
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec -> width == 1440
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3 == 1440
  ORIGINAL[6]: st -> codec -> width
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: codec
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: field_order
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: codec
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: width
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: AV_FIELD_PROGRESSIVE
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: st
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: size
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 68719479413
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !pkt . data && got_picture
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt . VAR1 && VAR2
  ORIGINAL[1]: !pkt . data
  TYPE[1]: CALL
  TOKENIZED[1]: !pkt . VAR1
  ORIGINAL[2]: &got_picture
  TYPE[2]: CALL
  TOKENIZED[2]: &got_picture
  ORIGINAL[3]: &got_picture
  TYPE[3]: CALL
  TOKENIZED[3]: &got_picture
  ORIGINAL[4]: &got_picture
  TYPE[4]: CALL
  TOKENIZED[4]: &got_picture
  ORIGINAL[5]: got_picture
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: got_picture
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: got_picture
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: got_picture
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: got_picture
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: got_picture
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: got_picture
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: got_picture
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244640736
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ret >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641124
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478035
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: *pkt_buf
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buf
  ORIGINAL[2]: pktl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt_buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641175
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771086
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (char*) malloc(buffer_size * sizeof(char))
  TYPE[0]: CALL
  TOKENIZED[0]: ( char* ) FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[1]: malloc(buffer_size * sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[2]: buffer_size * sizeof(char)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * sizeof ( char )

CENTER_NODE: 68719478563
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: ts = wrap_timestamp(s -> streams[stream_index],ts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 [ VAR4 ] , VAR1 )
  ORIGINAL[2]: wrap_timestamp(s -> streams[stream_index],ts)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 [ VAR3 ] , VAR4 )
  ORIGINAL[3]: ts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640812
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777621
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !strcmp(pattern,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: len_p = (strlen(pattern))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 ) )
  ORIGINAL[2]: strlen(pattern)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: len_p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pattern
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640821
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772770
FRAGMENT_COUNT: 36
  ORIGINAL[0]: st -> reference_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> reference_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> reference_dts + (pc -> dts_ref_dts_delta) * num / den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 + ( VAR3 -> VAR4 ) * VAR5 / VAR6
  ORIGINAL[3]: st -> reference_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: reference_dts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: st
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: st
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: st
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: st
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: st
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: st
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: st
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: st
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: st
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: st
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: st
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: st
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: st
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: st
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: st
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: st
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: st
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: st
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1

CENTER_NODE: 30064771136
FRAGMENT_COUNT: 3
  ORIGINAL[0]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: 1LL << 48
  TYPE[2]: CALL
  TOKENIZED[2]: 1LL << 48

CENTER_NODE: 47244640699
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477362
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> request_probe > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 0
  ORIGINAL[1]: st -> request_probe
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> probe_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_log(s,48,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[4]: st -> index
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> probe_packets
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> probe_packets
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: probe_packets
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719478652
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (ret = avio_seek(s -> pb,pos,0)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 , 0 ) ) < 0
  ORIGINAL[2]: ff_update_cur_dts(s,st,ts)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771101
FRAGMENT_COUNT: 13
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: strcmp(getenv(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( FUN2 ( \
  ORIGINAL[3]: *stonesoup_server = mg_create_server(NULL, stonesoup_ev_handler)
  TYPE[3]: CALL
  TOKENIZED[3]: *stonesoup_server = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[4]: mg_create_server(NULL, stonesoup_ev_handler)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[5]: mg_set_option(stonesoup_server, \
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , \
  ORIGINAL[6]: mg_destroy_server(&stonesoup_server)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( &stonesoup_server )
  ORIGINAL[7]: &stonesoup_server
  TYPE[7]: CALL
  TOKENIZED[7]: &stonesoup_server
  ORIGINAL[8]: if (getenv(\
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: if ( FUN1 ( \
  ORIGINAL[9]: stonesoup_server
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: NULL
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: stonesoup_server
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: stonesoup_server
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064771362
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[1]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[2]: sizeof(buf)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filename
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477485
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_id
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776426
FRAGMENT_COUNT: 11
  ORIGINAL[0]: m && !(av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ! ( FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[1]: tag = av_dict_get(m,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[2]: av_dict_get(m,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: strcmp(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: tag -> key
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: while (tag = av_dict_get(m,\
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: while ( VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[6]: key
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tag
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: m
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tag
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: tag
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719481203
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064772080
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !mux && enc -> frame_size > 1
  TYPE[0]: CALL
  TOKENIZED[0]: !mux && VAR1 -> VAR2 > 1
  ORIGINAL[1]: (frame_size = av_get_audio_frame_duration(enc,size)) > 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 ) ) > 0
  ORIGINAL[2]: frame_size = av_get_audio_frame_duration(enc,size)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[3]: av_get_audio_frame_duration(enc,size)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[4]: frame_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476909
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: match_format(short_name,fmt -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: fmt -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772294
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i] -> pts_wrap_reference
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> streams[i] -> pts_wrap_behavior
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: pts_wrap_reference
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476916
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: s -> maxsize
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> maxsize
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avio_tell(s)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: s -> maxsize
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777322
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !strcmp(((sep?&sep[1] : buf)),\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( ( ( sep?&sep [ 1 ] : VAR1 ) ) , \
  ORIGINAL[1]: rel += 3
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += 3
  ORIGINAL[2]: rel
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: rel
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641150
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477053
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &score_ret
  TYPE[0]: CALL
  TOKENIZED[0]: &score_ret
  ORIGINAL[1]: score_ret >  *score_max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > *score_max
  ORIGINAL[2]: *score_max = score_ret
  TYPE[2]: CALL
  TOKENIZED[2]: *score_max = VAR1
  ORIGINAL[3]: *score_max
  TYPE[3]: CALL
  TOKENIZED[3]: *score_max
  ORIGINAL[4]: score_ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: score_ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478506
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: &st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> index_entries_allocated_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: index_entries_allocated_size
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640787
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479461
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: tags++
  TYPE[2]: CALL
  TOKENIZED[2]: tags++
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479256
FRAGMENT_COUNT: 14
  ORIGINAL[0]: st -> first_dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> parser
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> start_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> first_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> duration
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: duration - st -> info -> last_duration >= 0
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 - VAR2 -> VAR3 -> VAR4 >= 0
  ORIGINAL[9]: st -> info
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: info
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: duration
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064774930
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_U24BE : AV_CODEC_ID_PCM_U24LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_U24BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U24BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U24LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776302
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: (void )(sizeof(( *( *_tab) == _elem)))
  TYPE[1]: CALL
  TOKENIZED[1]: ( void ) ( sizeof ( ( * ( *_tab ) == VAR1 ) ) )
  ORIGINAL[2]: sizeof(( *( *_tab) == _elem))
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( ( * ( *_tab ) == VAR1 ) )
  ORIGINAL[3]: *( *_tab) == _elem
  TYPE[3]: CALL
  TOKENIZED[3]: * ( *_tab ) == VAR1

CENTER_NODE: 47244640815
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640806
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771179
FRAGMENT_COUNT: 4
  ORIGINAL[0]: p = &first_oformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = &first_oformat
  ORIGINAL[1]: &first_oformat
  TYPE[1]: CALL
  TOKENIZED[1]: &first_oformat
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641022
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478552
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: index_entries
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476973
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_grow_packet(pkt,size)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: pkt -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771670
FRAGMENT_COUNT: 17
  ORIGINAL[0]: (ret = avio_open2(&s -> pb,filename,1 | s -> avio_flags,(&s -> interrupt_callback),options)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( &s -> VAR2 , VAR3 , 1 | VAR4 -> VAR5 , ( &s -> VAR6 ) , VAR7 ) ) < 0
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_probe_input_buffer(s -> pb,&s -> iformat,filename,s,0,s -> probesize)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , &s -> VAR3 , VAR4 , VAR1 , 0 , VAR1 -> VAR5 )
  ORIGINAL[3]: s -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: &s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: &s -> VAR1
  ORIGINAL[5]: s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: s -> probesize
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pb
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: iformat
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: probesize
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: filename
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064776247
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> last_IP_pts = ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> last_IP_pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: last_IP_pts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719481227
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_sample_aspect_ratio . num <= 0 || stream_sample_aspect_ratio . den <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 <= 0 || VAR1 . VAR3 <= 0
  ORIGINAL[1]: stream_sample_aspect_ratio = undef
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: frame_sample_aspect_ratio . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: num
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame_sample_aspect_ratio
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame_sample_aspect_ratio
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640908
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064773217
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: s -> streams[cur_pkt . stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 . VAR4 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: cur_pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640607
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719478933
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(s -> iformat -> flags & 0x4000)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 -> VAR3 & 0x4000 )
  ORIGINAL[1]: ff_read_frame_flush(s)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: seek_frame_generic(s,stream_index,timestamp,flags)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640670
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641044
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640661
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640268
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776328
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < s -> nb_chapters;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476904
FRAGMENT_COUNT: 4
  ORIGINAL[0]: type == AVMEDIA_TYPE_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_SUBTITLE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478431
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ((unsigned int )(st -> nb_index_entries)) >= max_entries
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( unsigned int ) ( VAR1 -> VAR2 ) ) >= VAR3
  ORIGINAL[1]: (unsigned int )(st -> nb_index_entries)
  TYPE[1]: CALL
  TOKENIZED[1]: ( unsigned int ) ( VAR1 -> VAR2 )
  ORIGINAL[2]: max_entries
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: max_entries
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480631
FRAGMENT_COUNT: 6
  ORIGINAL[0]: strlen(buf1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: percentd_found
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640677
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640423
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777332
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret2 = av_small_strptime(datestr,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: av_small_strptime(datestr,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: &time2
  TYPE[2]: CALL
  TOKENIZED[2]: &time2
  ORIGINAL[3]: ret2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: datestr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772017
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> flags & 0x0100 && pkt -> flags & 0x0002
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0100 && VAR3 -> VAR2 & 0x0002
  ORIGINAL[1]: av_log(s,24,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[2]: pkt -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774729
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !avctx -> width
  TYPE[0]: CALL
  TOKENIZED[0]: !avctx -> VAR1
  ORIGINAL[1]: st -> info -> found_decoder
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> info
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: info
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: found_decoder
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479020
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: st -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: duration
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480455
FRAGMENT_COUNT: 3
  ORIGINAL[0]: sizeof(buf)
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( VAR1 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640532
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640531
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775887
FRAGMENT_COUNT: 21
  ORIGINAL[0]: i < ic -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: ic -> programs[i] == last
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] == VAR4
  ORIGINAL[4]: !last
  TYPE[4]: CALL
  TOKENIZED[4]: !last
  ORIGINAL[5]: j = 0
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = 0
  ORIGINAL[6]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[7]: ic -> programs[i] -> nb_stream_indexes
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[8]: ic -> programs[i]
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[9]: ic -> programs
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: nb_programs
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: programs
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: nb_stream_indexes
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: i
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ic
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: last
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: j
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: j
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ic
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: i
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 68719477542
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> codec -> time_base . num * 1000LL > st -> codec -> time_base . den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 . VAR4 * 1000LL > VAR1 -> VAR2 -> VAR3 . VAR5
  ORIGINAL[1]: pc && pc -> repeat_pict
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR1 -> VAR2
  ORIGINAL[2]: *pnum > 2147483647 / (1 + pc -> repeat_pict)
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum > 2147483647 / ( 1 + VAR1 -> VAR2 )
  ORIGINAL[3]: *pden /= 1 + pc -> repeat_pict
  TYPE[3]: CALL
  TOKENIZED[3]: *pden /= 1 + VAR1 -> VAR2
  ORIGINAL[4]: *pnum *= 1 + pc -> repeat_pict
  TYPE[4]: CALL
  TOKENIZED[4]: *pnum *= 1 + VAR1 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719481158
FRAGMENT_COUNT: 6
  ORIGINAL[0]: codec_id == (ofmt -> video_codec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( VAR2 -> VAR3 )
  ORIGINAL[1]: ofmt -> video_codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ofmt -> audio_codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: audio_codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec_id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ofmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771130
FRAGMENT_COUNT: 3
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: sizeof(\
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( \

CENTER_NODE: 68719479591
FRAGMENT_COUNT: 4
  ORIGINAL[0]: end == 9223372036854775807L?ch -> start : end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 9223372036854775807L?ch -> VAR2 : VAR1
  ORIGINAL[1]: end == 9223372036854775807L
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 9223372036854775807L
  ORIGINAL[2]: end
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: end
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641145
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064774898
FRAGMENT_COUNT: 20
  ORIGINAL[0]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[1]: tags[i] . id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[2]: tag == tags[i] . tag
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == VAR2 [ VAR3 ] . VAR1
  ORIGINAL[3]: tags[i] . tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[4]: tags[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: i = 0
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = 0
  ORIGINAL[6]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[7]: tags[i] . id
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[8]: tags[i]
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 [ VAR2 ]
  ORIGINAL[9]: for (i = 0;tags[i] . id != AV_CODEC_ID_NONE;i++)
  TYPE[9]: CONTROL_STRUCTURE
  TOKENIZED[9]: for ( VAR1 = 0 ; VAR2 [ VAR1 ] . VAR3 != VAR4 ; i++ )
  ORIGINAL[10]: tag
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: id
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: AV_CODEC_ID_NONE
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: tag
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: tags
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: i
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: tags
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: i
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: AV_CODEC_ID_NONE
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 30064776049
FRAGMENT_COUNT: 14
  ORIGINAL[0]: &st -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: &st -> VAR1
  ORIGINAL[1]: st -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064771222
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ( *p) == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) == '\\0'
  ORIGINAL[1]: p++
  TYPE[1]: CALL
  TOKENIZED[1]: p++
  ORIGINAL[2]: q
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641296
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641060
FRAGMENT_COUNT: 2
  ORIGINAL[0]: program -> stream_index[j] == idx
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] == VAR4
  ORIGINAL[1]: for (j = 0;j < program -> nb_stream_indexes;j++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; j++ )

CENTER_NODE: 47244640687
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641178
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479593
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: i + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776677
FRAGMENT_COUNT: 20
  ORIGINAL[0]: ic -> bit_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ic -> bit_rate / 1000
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 / 1000
  ORIGINAL[2]: ic -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bit_rate
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ic
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ic
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ic
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ic
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: ic
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ic
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 30064774290
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: av_rescale_q(st -> duration,st -> time_base,((AVRational ){(1), (1000000)}))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR3 , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) )
  ORIGINAL[2]: st -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (AVRational ){(1), (1000000)}
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[5]: {(1), (1000000)}
  TYPE[5]: CALL
  TOKENIZED[5]: { ( 1 ) , ( 1000000 ) }

CENTER_NODE: 47244640666
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640818
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777081
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 48 && c <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 48 && VAR1 <= '9'
  ORIGINAL[1]: c = c - 48
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 - 48
  ORIGINAL[2]: c - 48
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 48
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641049
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773168
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !( *pkt_buffer)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *pkt_buffer )
  ORIGINAL[1]: *pkt_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buffer
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 47244641164
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777058
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < s
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: hex_table[src[i] >> 4]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 [ VAR3 ] >> 4 ]
  ORIGINAL[2]: src[i] >> 4
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] >> 4
  ORIGINAL[3]: src[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]

CENTER_NODE: 30064774633
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> iformat -> flags & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[1]: file_size = avio_size(ic -> pb)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: avio_size(ic -> pb)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: ic -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: file_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640807
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771493
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ic -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: err < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: ic -> pb && !ic -> data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 && !ic -> VAR3
  ORIGINAL[3]: ic -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pb
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: err
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640828
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641133
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640669
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640844
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476878
FRAGMENT_COUNT: 7
  ORIGINAL[0]: fmt -> mime_type && mime_type && !strcmp(fmt -> mime_type,mime_type)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR2 && !strcmp ( VAR1 -> VAR2 , VAR2 )
  ORIGINAL[1]: score += '\\n'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += '\\n'
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: score
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: score
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774043
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ie = &st -> index_entries[st -> nb_index_entries - 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = &st -> VAR2 [ VAR3 -> VAR4 - 1 ]
  ORIGINAL[3]: &st -> index_entries[st -> nb_index_entries - 1]
  TYPE[3]: CALL
  TOKENIZED[3]: &st -> VAR1 [ VAR2 -> VAR3 - 1 ]
  ORIGINAL[4]: st -> index_entries[st -> nb_index_entries - 1]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ]
  ORIGINAL[5]: ie
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774206
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> iformat -> read_seek || 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 || 1
  ORIGINAL[1]: ts - ((uint64_t )min_ts) > ((uint64_t )max_ts) - ts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - ( ( VAR2 ) VAR3 ) > ( ( VAR2 ) VAR4 ) - VAR1
  ORIGINAL[2]: ts - ((uint64_t )min_ts)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - ( ( VAR2 ) VAR3 )
  ORIGINAL[3]: (uint64_t )min_ts
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) VAR2
  ORIGINAL[4]: ((uint64_t )max_ts) - ts
  TYPE[4]: CALL
  TOKENIZED[4]: ( ( VAR1 ) VAR2 ) - VAR3
  ORIGINAL[5]: ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477079
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_probe_input_format3(pd,1,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 , &score )
  ORIGINAL[1]: pd -> buf_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pd
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pd
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641054
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777209
FRAGMENT_COUNT: 14
  ORIGINAL[0]: *ptr
  TYPE[0]: CALL
  TOKENIZED[0]: *ptr
  ORIGINAL[1]: !(ptr = (strchr(key,'=')))
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 = ( FUN1 ( VAR2 , '=' ) ) )
  ORIGINAL[2]: ( *ptr) == '\\\
  TYPE[2]: CALL
  TOKENIZED[2]: ( *ptr ) == '\\\
  ORIGINAL[3]: *ptr
  TYPE[3]: CALL
  TOKENIZED[3]: *ptr
  ORIGINAL[4]: *ptr
  TYPE[4]: CALL
  TOKENIZED[4]: *ptr
  ORIGINAL[5]: *ptr
  TYPE[5]: CALL
  TOKENIZED[5]: *ptr
  ORIGINAL[6]: *ptr
  TYPE[6]: CALL
  TOKENIZED[6]: *ptr
  ORIGINAL[7]: *ptr
  TYPE[7]: CALL
  TOKENIZED[7]: *ptr
  ORIGINAL[8]: ptr
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ptr
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ptr
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ptr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ptr
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ptr
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719480245
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *ps
  TYPE[0]: CALL
  TOKENIZED[0]: *ps
  ORIGINAL[1]: avformat_free_context(s)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: *ps
  TYPE[2]: CALL
  TOKENIZED[2]: *ps
  ORIGINAL[3]: ps
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

