# Tokenized code fragments for 153468-v1.0.0-bad
# Total center nodes processed: 194
# Total code fragments found: 777

CENTER_NODE: 68719479029
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stream_index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: stream_index < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: timestamp = av_rescale(timestamp,st -> time_base . den,1000000 * ((int64_t )st -> time_base . num))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 , 1000000 * ( ( VAR5 ) VAR2 -> VAR3 . VAR6 ) )
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: iformat
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478930
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos_max
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064775012
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: tags -> tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: tag
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641153
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640852
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640863
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640694
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640575
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640681
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641046
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640686
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640639
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(next_pkt -> pts == ((int64_t )0x8000000000000000UL) && next_pkt -> dts != ((int64_t )0x8000000000000000UL) && !eof)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL ) && !eof )

CENTER_NODE: 30064774315
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat -> read_seek2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> iformat -> read_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: s -> iformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: read_timestamp
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640878
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !st -> info -> found_decoder
  TYPE[0]: CALL
  TOKENIZED[0]: !st -> VAR1 -> VAR2

CENTER_NODE: 68719481493
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !hostname
  TYPE[0]: CALL
  TOKENIZED[0]: !hostname
  ORIGINAL[1]: av_strdup(no_proxy)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: no_proxy
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: no_proxy
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640693
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641073
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640555
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774801
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_log(ic,48,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[1]: ((double )(ic -> start_time)) / 1000000
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( double ) ( VAR1 -> VAR2 ) ) / 1000000
  ORIGINAL[2]: ((double )(ic -> duration)) / 1000000
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( double ) ( VAR1 -> VAR2 ) ) / 1000000
  ORIGINAL[3]: ic -> bit_rate / 1000
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 / 1000
  ORIGINAL[4]: ic -> bit_rate
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481223
FRAGMENT_COUNT: 4
  ORIGINAL[0]: path_query != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[1]: *path_query
  TYPE[1]: CALL
  TOKENIZED[1]: *path_query
  ORIGINAL[2]: path_query
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: path_query
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477067
FRAGMENT_COUNT: 11
  ORIGINAL[0]: pkt -> pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ret <= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 0
  ORIGINAL[3]: av_shrink_packet(pkt,ret)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[4]: pkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> flags
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ret
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719480731
FRAGMENT_COUNT: 10
  ORIGINAL[0]: c == '%'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '%'
  ORIGINAL[1]: nd = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: av_isdigit(( *p))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( *p ) )
  ORIGINAL[3]: *p
  TYPE[3]: CALL
  TOKENIZED[3]: *p
  ORIGINAL[4]: nd = nd * '\\n' + ( *(p++)) - 48
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[5]: av_isdigit(c)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 )
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: p
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: p
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: p
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771235
FRAGMENT_COUNT: 4
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8
  ORIGINAL[2]: '6' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: '6' << 16
  ORIGINAL[3]: 63 << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 63 << 8

CENTER_NODE: 30064777013
FRAGMENT_COUNT: 17
  ORIGINAL[0]: pkt -> dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !f
  TYPE[1]: CALL
  TOKENIZED[1]: !f
  ORIGINAL[2]: (pkt -> dts) * av_q2d(time_base)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) * FUN1 ( VAR3 )
  ORIGINAL[3]: pkt -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_q2d(time_base)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: pkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: dts
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: time_base
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 47244640346
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640335
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1

CENTER_NODE: 30064771238
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 47244640723
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774543
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> duration = av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 -> VAR2 , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR1 -> VAR5 )
  ORIGINAL[2]: st -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , ( ( VAR3 ) { ( 1 ) , ( 1000000 ) } ) , VAR4 -> VAR5 )
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476891
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776976
FRAGMENT_COUNT: 6
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avcl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: level
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640305
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641180
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640701
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776491
FRAGMENT_COUNT: 25
  ORIGINAL[0]: i < ac -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ac -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: ac -> programs[i] -> id != progid
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 != VAR5
  ORIGINAL[4]: ac -> programs[i] -> id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: program = ac -> programs[i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[6]: ac -> programs[i]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[7]: ac -> programs
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: j = 0
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 = 0
  ORIGINAL[9]: j < program -> nb_stream_indexes
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 < VAR2 -> VAR3
  ORIGINAL[10]: program -> nb_stream_indexes
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: continue;
  TYPE[11]: CONTROL_STRUCTURE
  TOKENIZED[11]: continue ;
  ORIGINAL[12]: nb_programs
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: programs
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: nb_stream_indexes
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ac
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: i
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: progid
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: program
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ac
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: i
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: j
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: j
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: program
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1

CENTER_NODE: 30064774718
FRAGMENT_COUNT: 29
  ORIGINAL[0]: offset = (filesize - (250000LL << retry))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( VAR2 - ( 250000LL << VAR3 ) )
  ORIGINAL[1]: filesize - (250000LL << retry)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - ( 250000LL << VAR2 )
  ORIGINAL[2]: 250000LL << retry
  TYPE[2]: CALL
  TOKENIZED[2]: 250000LL << VAR1
  ORIGINAL[3]: offset < 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 0
  ORIGINAL[4]: avio_seek(ic -> pb,offset,0)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 , VAR3 , 0 )
  ORIGINAL[5]: ic -> pb
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: read_size = 0
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 = 0
  ORIGINAL[7]: read_size >= 250000LL << ((retry - 1 > 0?retry - 1 : 0))
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 >= 250000LL << ( ( VAR2 - 1 > 0?retry - 1 : 0 ) )
  ORIGINAL[8]: 250000LL << ((retry - 1 > 0?retry - 1 : 0))
  TYPE[8]: CALL
  TOKENIZED[8]: 250000LL << ( ( VAR1 - 1 > 0?retry - 1 : 0 ) )
  ORIGINAL[9]: retry - 1 > 0?retry - 1 : 0
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 - 1 > 0?retry - 1 : 0
  ORIGINAL[10]: retry - 1 > 0
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 - 1 > 0
  ORIGINAL[11]: retry - 1
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 - 1
  ORIGINAL[12]: end_time == ((int64_t )0x8000000000000000UL) && filesize > 250000LL << retry && ++retry <= 4
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL ) && VAR3 > 250000LL << VAR4 && ++retry <= 4
  ORIGINAL[13]: end_time == ((int64_t )0x8000000000000000UL) && filesize > 250000LL << retry
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL ) && VAR3 > 250000LL << VAR4
  ORIGINAL[14]: end_time == ((int64_t )0x8000000000000000UL)
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[15]: (int64_t )0x8000000000000000UL
  TYPE[15]: CALL
  TOKENIZED[15]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[16]: ++retry <= 4
  TYPE[16]: CALL
  TOKENIZED[16]: ++retry <= 4
  ORIGINAL[17]: pb
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: offset
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: filesize
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: retry
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: offset
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: ic
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: offset
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: read_size
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: read_size
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: retry
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: end_time
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: ic
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1

CENTER_NODE: 68719477655
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pnum > 2147483647 / (1 + pc -> repeat_pict)
  TYPE[0]: CALL
  TOKENIZED[0]: *pnum > 2147483647 / ( 1 + VAR1 -> VAR2 )
  ORIGINAL[1]: *pnum
  TYPE[1]: CALL
  TOKENIZED[1]: *pnum
  ORIGINAL[2]: *pnum
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum
  ORIGINAL[3]: pnum
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776830
FRAGMENT_COUNT: 6
  ORIGINAL[0]: j < ic -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: *name = av_dict_get(ic -> programs[j] -> metadata,\
  TYPE[1]: CALL
  TOKENIZED[1]: *name = FUN1 ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 , \
  ORIGINAL[2]: av_dict_get(ic -> programs[j] -> metadata,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 , \
  ORIGINAL[3]: ic -> programs[j] -> metadata
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641177
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776339
FRAGMENT_COUNT: 11
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[2]: st -> index = (s -> nb_streams)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = ( VAR3 -> VAR4 )
  ORIGINAL[3]: st -> index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> nb_streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> nb_streams
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: nb_streams
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640845
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479579
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: tag == tags[i] . tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2 [ VAR3 ] . VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480823
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640811
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477450
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064777197
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c >= 48 && c <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 48 && VAR1 <= '9'
  ORIGINAL[1]: c >= 48
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 48
  ORIGINAL[2]: c <= '9'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= '9'
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477158
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *score_max
  TYPE[0]: CALL
  TOKENIZED[0]: *score_max
  ORIGINAL[1]: score_ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: score_max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771970
FRAGMENT_COUNT: 10
  ORIGINAL[0]: (ret = av_opt_set_dict(s,&tmp)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , &tmp ) ) < 0
  ORIGINAL[1]: (ret = init_input(s,filename,&tmp)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 , &tmp ) ) < 0
  ORIGINAL[2]: !av_filename_number_test(filename)
  TYPE[2]: CALL
  TOKENIZED[2]: !av_filename_number_test ( VAR1 )
  ORIGINAL[3]: !(s -> priv_data = av_mallocz((s -> iformat -> priv_data_size)))
  TYPE[3]: CALL
  TOKENIZED[3]: ! ( VAR1 -> VAR2 = FUN1 ( ( VAR1 -> VAR3 -> VAR4 ) ) )
  ORIGINAL[4]: (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , &tmp ) ) < 0
  ORIGINAL[5]: (ret = ((s -> iformat -> read_header)(s))) < 0
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 ) ) ) < 0
  ORIGINAL[6]: (ret = ff_id3v2_parse_apic(s,&id3v2_extra_meta)) < 0
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 = FUN1 ( VAR2 , &id3v2_extra_meta ) ) < 0
  ORIGINAL[7]: *ps = ((void *)0)
  TYPE[7]: CALL
  TOKENIZED[7]: *ps = ( ( void * ) 0 )
  ORIGINAL[8]: *ps
  TYPE[8]: CALL
  TOKENIZED[8]: *ps
  ORIGINAL[9]: (void *)0
  TYPE[9]: CALL
  TOKENIZED[9]: ( void * ) 0

CENTER_NODE: 30064776884
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: 2208988800ULL * 1000000ULL
  TYPE[1]: CALL
  TOKENIZED[1]: 2208988800ULL * 1000000ULL

CENTER_NODE: 47244640855
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640598
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478670
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: wanted_timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641188
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774201
FRAGMENT_COUNT: 13
  ORIGINAL[0]: index < 0 || index == st -> nb_index_entries - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 == VAR2 -> VAR3 - 1
  ORIGINAL[1]: (ret = avio_seek(s -> pb,ie -> pos,0)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 -> VAR5 , 0 ) ) < 0
  ORIGINAL[2]: (ret = avio_seek(s -> pb,s -> data_offset,0)) < 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR2 -> VAR4 , 0 ) ) < 0
  ORIGINAL[3]: index < 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 0
  ORIGINAL[4]: - 1
  TYPE[4]: CALL
  TOKENIZED[4]: - 1
  ORIGINAL[5]: ff_read_frame_flush(s)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 )
  ORIGINAL[6]: s -> iformat -> read_seek
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: s -> iformat
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: iformat
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: read_seek
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: index
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719481030
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: src[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: src
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481265
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ofmt -> query_codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (ofmt -> query_codec)(codec_id,std_compliance)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) ( VAR3 , VAR4 )
  ORIGINAL[2]: ofmt -> query_codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: std_compliance
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477614
FRAGMENT_COUNT: 6
  ORIGINAL[0]: enc -> frame_size > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 1
  ORIGINAL[1]: enc -> frame_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: enc -> frame_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: frame_size
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: enc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: enc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640932
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771229
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: 'h' >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 'h' >= 100
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 30064777558
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ( *spec) <= '9' && ( *spec) >= 48
  TYPE[0]: CALL
  TOKENIZED[0]: ( *spec ) <= '9' && ( *spec ) >= 48
  ORIGINAL[1]: strtol(spec,((void *)0),0) == (st -> index)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( void * ) 0 ) , 0 ) == ( VAR2 -> VAR3 )
  ORIGINAL[2]: strtol(spec,((void *)0),0)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( ( void * ) 0 ) , 0 )
  ORIGINAL[3]: st -> index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 47244641078
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640689
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773302
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl -> VAR1
  ORIGINAL[1]: *pkt_buffer_end = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buffer_end = ( ( void * ) 0 )
  ORIGINAL[2]: *pkt_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buffer_end
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0

CENTER_NODE: 30064777372
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> streams[i] -> id == id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641202
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773630
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &s -> packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: &s -> VAR1
  ORIGINAL[1]: s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: packet_buffer
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771228
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[64]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 64 ]

CENTER_NODE: 47244640722
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640842
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476805
FRAGMENT_COUNT: 4
  ORIGINAL[0]: * ss_tc_root = NULL
  TYPE[0]: CALL
  TOKENIZED[0]: * VAR1 = VAR2
  ORIGINAL[1]: * dirpath = NULL
  TYPE[1]: CALL
  TOKENIZED[1]: * VAR1 = VAR2
  ORIGINAL[2]: dirpath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: NULL
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641232
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477023
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: s -> maxsize
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> maxsize
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avio_tell(s)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: s -> maxsize
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719480361
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *ps = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *ps = ( ( void * ) 0 )
  ORIGINAL[1]: avio_close(pb)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: pb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641205
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641042
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat -> read_play
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 30064772436
FRAGMENT_COUNT: 7
  ORIGINAL[0]: program -> pts_wrap_reference != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: program = av_find_program_from_stream(s,program,stream_index)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR1 , VAR3 )
  ORIGINAL[2]: av_find_program_from_stream(s,program,stream_index)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: program
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: program
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641174
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640675
FRAGMENT_COUNT: 1
  ORIGINAL[0]: timestamp <= wanted_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= VAR2

CENTER_NODE: 30064773944
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: flags & ~1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 & ~1
  ORIGINAL[2]: ~1
  TYPE[2]: CALL
  TOKENIZED[2]: ~1
  ORIGINAL[3]: flags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480898
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479135
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: st -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: duration
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776263
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: &s -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> metadata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: metadata
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479475
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !st -> sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: !st -> VAR1 . VAR2
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777218
FRAGMENT_COUNT: 13
  ORIGINAL[0]: &new_tb . den
  TYPE[0]: CALL
  TOKENIZED[0]: &new_tb . VAR1
  ORIGINAL[1]: new_tb . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new_tb . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: new_tb . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: den
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: new_tb
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: new_tb
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: new_tb
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: new_tb
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: new_tb
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: new_tb
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: new_tb
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: new_tb
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719476745
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getopt(argc, argv, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: argc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argv
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476986
FRAGMENT_COUNT: 9
  ORIGINAL[0]: fmt = av_oformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> mime_type && mime_type && !strcmp(fmt -> mime_type,mime_type)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR2 && !strcmp ( VAR1 -> VAR2 , VAR2 )
  ORIGINAL[2]: score += '\\n'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 += '\\n'
  ORIGINAL[3]: filename && fmt -> extensions
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 && VAR2 -> VAR3
  ORIGINAL[4]: fmt -> extensions
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: extensions
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: filename
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: filename
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773891
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: ts = wrap_timestamp(s -> streams[stream_index],ts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 [ VAR4 ] , VAR1 )
  ORIGINAL[2]: wrap_timestamp(s -> streams[stream_index],ts)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 [ VAR3 ] , VAR4 )
  ORIGINAL[3]: s -> streams[stream_index]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477165
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &score
  TYPE[0]: CALL
  TOKENIZED[0]: &score
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: is_opened
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640457
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2 || (avctx -> codec_id) == AV_CODEC_ID_MP3
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4 || ( VAR1 -> VAR2 ) == VAR5

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477188
FRAGMENT_COUNT: 13
  ORIGINAL[0]: *fmt = av_probe_input_format3(pd,1,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = FUN1 ( VAR1 , 1 , &score )
  ORIGINAL[1]: fmt && st -> request_probe <= score
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR2 -> VAR3 <= VAR4
  ORIGINAL[2]: st -> request_probe <= score
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 <= VAR3
  ORIGINAL[3]: st -> request_probe
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: fmt -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: fmt -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: request_probe
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: score
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: fmt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719478537
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> cur_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> time_base . den * ((int64_t )ref_st -> time_base . num)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[3]: st -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: time_base
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641165
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641320
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777053
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: st -> time_base
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: time_base
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640377
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064775804
FRAGMENT_COUNT: 10
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: st -> info -> duration_count > 1 && !st -> r_frame_rate . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 > 1 && !st -> VAR4 . VAR5
  ORIGINAL[2]: st -> info -> duration_count > 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 > 1
  ORIGINAL[3]: st -> info -> duration_count
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: !st -> r_frame_rate . num
  TYPE[4]: CALL
  TOKENIZED[4]: !st -> VAR1 . VAR2
  ORIGINAL[5]: st -> r_frame_rate . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3
  ORIGINAL[6]: st -> r_frame_rate
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: r_frame_rate
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: num
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771607
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ic -> pb && !ic -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !ic -> VAR3
  ORIGINAL[1]: ic -> data_offset = avio_tell(ic -> pb)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR1 -> VAR3 )
  ORIGINAL[2]: ic -> data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avio_tell(ic -> pb)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 )

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641184
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479710
FRAGMENT_COUNT: 3
  ORIGINAL[0]: c -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477002
FRAGMENT_COUNT: 7
  ORIGINAL[0]: type == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: codec_id = AV_CODEC_ID_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: codec_id == AV_CODEC_ID_NONE
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == VAR2
  ORIGINAL[3]: codec_id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec_id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_CODEC_ID_NONE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_id
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777795
FRAGMENT_COUNT: 8
  ORIGINAL[0]: tracepoint(stonesoup_trace, variable_signed_integral, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: &stonesoup_buff_size
  TYPE[1]: CALL
  TOKENIZED[1]: &stonesoup_buff_size
  ORIGINAL[2]: stonesoup_trace
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: variable_signed_integral
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_buff_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_buff_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_buff_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stonesoup_buff_size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776046
FRAGMENT_COUNT: 5
  ORIGINAL[0]: related_stream >= 0 && wanted_stream_nb < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 < 0
  ORIGINAL[1]: *p = av_find_program_from_stream(ic,((void *)0),related_stream)
  TYPE[1]: CALL
  TOKENIZED[1]: *p = FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 )
  ORIGINAL[2]: av_find_program_from_stream(ic,((void *)0),related_stream)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 )
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641345
FRAGMENT_COUNT: 1
  ORIGINAL[0]: st -> codec -> width == 1280
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1280

CENTER_NODE: 68719476873
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0666 ) ) >= 0
  ORIGINAL[1]: shmat(stonesoup_shmid, NULL, 0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , 0 )
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_shmid
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479659
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: id = ff_codec_get_id(tags[i],tag)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 [ VAR3 ] , VAR4 )
  ORIGINAL[2]: ff_codec_get_id(tags[i],tag)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 [ VAR2 ] , VAR3 )
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640440
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064777060
FRAGMENT_COUNT: 6
  ORIGINAL[0]: authorization_size > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0
  ORIGINAL[1]: authorization[0] = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ] = 0
  ORIGINAL[2]: authorization[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: authorization_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: authorization
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hostname_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481319
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064777743
FRAGMENT_COUNT: 5
  ORIGINAL[0]: len_p > len_h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: !strcmp(pattern,&hostname[len_h - len_p])
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 , &hostname [ VAR2 - VAR3 ] )
  ORIGINAL[2]: strcmp(pattern,&hostname[len_h - len_p])
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &hostname [ VAR2 - VAR3 ] )
  ORIGINAL[3]: &hostname[len_h - len_p]
  TYPE[3]: CALL
  TOKENIZED[3]: &hostname [ VAR1 - VAR2 ]
  ORIGINAL[4]: pattern
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481144
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !(ptr = (strchr(key,'=')))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 = ( FUN1 ( VAR2 , '=' ) ) )
  ORIGINAL[1]: &dest
  TYPE[1]: CALL
  TOKENIZED[1]: &dest
  ORIGINAL[2]: *dest
  TYPE[2]: CALL
  TOKENIZED[2]: *dest
  ORIGINAL[3]: dest
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: key_len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dest
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dest
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773227
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> parser -> key_frame == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1
  ORIGINAL[1]: st -> parser -> key_frame == - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 == - 1
  ORIGINAL[2]: st -> parser -> key_frame
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1

CENTER_NODE: 47244640848
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477349
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: *packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *packet_buffer
  ORIGINAL[2]: ( *plast_pktl) -> next = pktl
  TYPE[2]: CALL
  TOKENIZED[2]: ( *plast_pktl ) -> VAR1 = VAR2
  ORIGINAL[3]: *packet_buffer = pktl
  TYPE[3]: CALL
  TOKENIZED[3]: *packet_buffer = VAR1
  ORIGINAL[4]: *plast_pktl
  TYPE[4]: CALL
  TOKENIZED[4]: *plast_pktl
  ORIGINAL[5]: plast_pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640447
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771300
FRAGMENT_COUNT: 5
  ORIGINAL[0]: format -> next = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[1]: format -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: next
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: format
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773099
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *pkt_buf_end = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf_end = ( ( void * ) 0 )
  ORIGINAL[1]: *pkt_buf_end
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buf_end
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064774371
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: ic -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: ic -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777250
FRAGMENT_COUNT: 6
  ORIGINAL[0]: authorization && authorization[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ 0 ]
  ORIGINAL[1]: av_strlcatf(str,size,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: str
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: authorization
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: str
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641148
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776473
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter
  ORIGINAL[1]: !chapter
  TYPE[1]: CALL
  TOKENIZED[1]: !chapter
  ORIGINAL[2]: &chapter -> metadata
  TYPE[2]: CALL
  TOKENIZED[2]: &chapter -> VAR1
  ORIGINAL[3]: chapter -> metadata
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: metadata
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chapter
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: chapter
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: chapter
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: chapter
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: chapter
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: chapter
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: chapter
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: chapter
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064771803
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641048
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641195
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640836
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777482
FRAGMENT_COUNT: 3
  ORIGINAL[0]: flags = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: flags
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773367
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> debug & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x1
  ORIGINAL[1]: av_ts_make_string(((char [32]){(0)}),cur_pkt . dts)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 . VAR2 )
  ORIGINAL[2]: (char [32]){(0)}
  TYPE[2]: CALL
  TOKENIZED[2]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[3]: {(0)}
  TYPE[3]: CALL
  TOKENIZED[3]: { ( 0 ) }
  ORIGINAL[4]: cur_pkt . dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: cur_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776196
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_freep((&s -> streams[--s -> nb_streams]))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &s -> VAR1 [ --s -> VAR2 ] ) )
  ORIGINAL[1]: &s -> streams[--s -> nb_streams]
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1 [ --s -> VAR2 ]

CENTER_NODE: 30064777520
FRAGMENT_COUNT: 8
  ORIGINAL[0]: stream && stream -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: stream -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: stream -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stream
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064774559
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641251
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641128
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640868
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477775
FRAGMENT_COUNT: 28
  ORIGINAL[0]: *st = s -> streams[stream_index]
  TYPE[0]: CALL
  TOKENIZED[0]: *st = VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: *pktl = s -> parse_queue?s -> parse_queue : s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *pktl = VAR1 -> parse_queue?s -> VAR2 : VAR1 -> VAR3
  ORIGINAL[2]: s -> parse_queue?s -> parse_queue : s -> packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> parse_queue?s -> VAR2 : VAR1 -> VAR3
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pktl -> pkt
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pktl -> pkt
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pktl -> pkt
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pktl -> pkt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pktl -> pkt
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pktl -> pkt
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pktl -> pkt
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pktl -> pkt
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: pktl -> pkt
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pktl -> pkt
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: pktl
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pktl
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pktl
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pktl
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pktl
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pktl
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pktl
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: pktl
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: pktl
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: pktl
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: pktl
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: pktl
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: pktl
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1

CENTER_NODE: 68719479635
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: tags
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776522
FRAGMENT_COUNT: 3
  ORIGINAL[0]: lrintf((d * 100))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 * 100 ) )
  ORIGINAL[1]: d * 100
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * 100
  ORIGINAL[2]: d
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478584
FRAGMENT_COUNT: 20
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ie = &entries[index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = &entries [ VAR2 ]
  ORIGINAL[2]: &entries[index]
  TYPE[2]: CALL
  TOKENIZED[2]: &entries [ VAR1 ]
  ORIGINAL[3]: ie -> timestamp
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ie -> timestamp
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ie -> pos
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ie -> min_distance
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ie -> min_distance
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: ie
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: entries
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ie
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ie
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ie
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ie
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ie
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ie
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ie
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ie
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: ie
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ie
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 30064773672
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480805
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j < len
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: j++
  TYPE[1]: CALL
  TOKENIZED[1]: j++
  ORIGINAL[2]: j
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: j
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641199
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479620
FRAGMENT_COUNT: 3
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_S32BE : AV_CODEC_ID_PCM_S32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_S32BE : VAR1
  ORIGINAL[1]: be
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772049
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (st -> codec -> codec_id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4
  ORIGINAL[1]: score > 100 / 4
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 100 / 4
  ORIGINAL[2]: 100 / 4
  TYPE[2]: CALL
  TOKENIZED[2]: 100 / 4
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772326
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !(desc -> props & 1 << 0)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 & 1 << 0 )
  ORIGINAL[1]: desc -> props & 1 << 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 1 << 0
  ORIGINAL[2]: desc -> props
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: 1 << 0
  TYPE[3]: CALL
  TOKENIZED[3]: 1 << 0
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478861
FRAGMENT_COUNT: 5
  ORIGINAL[0]: no_change == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: av_rescale(target_ts - ts_min,pos_max - pos_min,ts_max - ts_min) + pos_min - approximate_keyframe_distance
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 - VAR2 , VAR3 - VAR4 , VAR5 - VAR2 ) + VAR4 - VAR6
  ORIGINAL[2]: av_rescale(target_ts - ts_min,pos_max - pos_min,ts_max - ts_min) + pos_min
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 - VAR2 , VAR3 - VAR4 , VAR5 - VAR2 ) + VAR4
  ORIGINAL[3]: approximate_keyframe_distance
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: approximate_keyframe_distance
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479653
FRAGMENT_COUNT: 10
  ORIGINAL[0]: codec_tags -> id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (codec_tags -> id) == id
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[2]: codec_tags -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_tags -> tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec_tags++
  TYPE[4]: CALL
  TOKENIZED[4]: codec_tags++
  ORIGINAL[5]: codec_tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: codec_tags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: codec_tags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719479667
FRAGMENT_COUNT: 5
  ORIGINAL[0]: max_time = s -> duration + ((s -> start_time == ((int64_t )0x8000000000000000UL)?0 : s -> start_time))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 -> VAR3 + ( ( VAR2 -> VAR4 == ( ( VAR5 ) 0x8000000000000000UL ) ?0 : VAR2 -> VAR4 ) )
  ORIGINAL[1]: s -> duration + ((s -> start_time == ((int64_t )0x8000000000000000UL)?0 : s -> start_time))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 + ( ( VAR1 -> VAR3 == ( ( VAR4 ) 0x8000000000000000UL ) ?0 : VAR1 -> VAR3 ) )
  ORIGINAL[2]: max_time
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: max_time
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772344
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> codec -> has_b_frames < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 < 4
  ORIGINAL[1]: st -> nb_decoded_frames >= 20
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 >= 20
  ORIGINAL[2]: st -> nb_decoded_frames
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 30064771394
FRAGMENT_COUNT: 8
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: match_format(short_name,fmt -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: fmt -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: name
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480191
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[1]: ic -> programs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641068
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771776
FRAGMENT_COUNT: 11
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1 || !s -> iformat && (s -> iformat = av_probe_input_format2(&pd,0,&score))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1 || !s -> VAR2 && ( VAR1 -> VAR2 = FUN1 ( &pd , 0 , &score ) )
  ORIGINAL[1]: 1 | s -> avio_flags
  TYPE[1]: CALL
  TOKENIZED[1]: 1 | VAR1 -> VAR2
  ORIGINAL[2]: s -> avio_flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avio_flags
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064773649
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776721
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064773734
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (s -> max_index_size) / sizeof(AVIndexEntry )
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) / sizeof ( VAR3 )
  ORIGINAL[1]: s -> max_index_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sizeof(AVIndexEntry )
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: max_index_size
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVIndexEntry
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641191
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776132
FRAGMENT_COUNT: 13
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (s -> iformat -> read_pause)(s)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[3]: s -> iformat -> read_pause
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> pb
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: read_pause
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: read_pause
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pb
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719477915
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pktl -> pkt . pts == pktl -> pkt . dts && (pktl -> pkt . dts == ((int64_t )0x8000000000000000UL) || pktl -> pkt . dts == st -> first_dts)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 == VAR1 -> VAR2 . VAR4 && ( VAR1 -> VAR2 . VAR4 == ( ( VAR5 ) 0x8000000000000000UL ) || VAR1 -> VAR2 . VAR4 == VAR6 -> VAR7 )
  ORIGINAL[1]: pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640711
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640556
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641157
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481318
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640736
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640290
FRAGMENT_COUNT: 1
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122

CENTER_NODE: 30064776561
FRAGMENT_COUNT: 5
  ORIGINAL[0]: sizeof(tmp) > len + 1?len + 1 : sizeof(tmp)
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( VAR1 ) > VAR2 + 1?len + 1 : sizeof ( VAR1 )
  ORIGINAL[1]: sizeof(tmp) > len + 1
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 ) > VAR2 + 1
  ORIGINAL[2]: len + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: len + 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641290
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 68719476894
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> pts_wrap_behavior != 0 && st -> pts_wrap_reference != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 0 && VAR1 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: timestamp != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[2]: (int64_t )0x8000000000000000UL
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: timestamp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: timestamp
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: timestamp
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476969
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: av_strcasecmp(name,names)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: names
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: names
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479052
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret = seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640631
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772885
FRAGMENT_COUNT: 10
  ORIGINAL[0]: st -> reference_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: pkt -> dts = st -> reference_dts + (pc -> dts_ref_dts_delta) * num / den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 -> VAR4 + ( VAR5 -> VAR6 ) * VAR7 / VAR8
  ORIGINAL[2]: pkt -> dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> reference_dts + (pc -> dts_ref_dts_delta) * num / den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 + ( VAR3 -> VAR4 ) * VAR5 / VAR6
  ORIGINAL[4]: pkt -> dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478623
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pos
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640690
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775126
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: (i + 1) * 1001
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 + 1 ) * 1001
  ORIGINAL[2]: i + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1

CENTER_NODE: 47244641168
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771325
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *q = '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: *q = '\\0'
  ORIGINAL[1]: *q
  TYPE[1]: CALL
  TOKENIZED[1]: *q
  ORIGINAL[2]: ( *p) == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *p ) == '\\0'
  ORIGINAL[3]: ext
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ext1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477572
FRAGMENT_COUNT: 18
  ORIGINAL[0]: s -> raw_packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> raw_packet_buffer_remaining_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: (pkt -> stream_index) >= ((unsigned int )(s -> nb_streams))
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 ) >= ( ( unsigned int ) ( VAR3 -> VAR4 ) )
  ORIGINAL[6]: s -> nb_streams
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: av_log(s,16,\
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[8]: pkt -> stream_index
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: s -> raw_packet_buffer_end
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: s -> raw_packet_buffer_remaining_size
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 68719477693
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: parse_queue_end
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640833
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776437
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: program -> start_time = program -> end_time = ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR1 -> VAR3 = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[3]: program -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: program -> end_time = ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: program -> end_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (int64_t )0x8000000000000000UL
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 47244641250
FRAGMENT_COUNT: 1
  ORIGINAL[0]: pkt -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 47244640682
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771470
FRAGMENT_COUNT: 4
  ORIGINAL[0]: filename && av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && FUN1 ( VAR2 , ( sizeof ( VAR2 ) ) , VAR1 , 1 ) >= 0
  ORIGINAL[1]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[2]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640859
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776586
FRAGMENT_COUNT: 5
  ORIGINAL[0]: g = (av_gcd(st -> time_base . num,st -> time_base . den))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 -> VAR3 . VAR4 , VAR2 -> VAR3 . VAR5 ) )
  ORIGINAL[1]: av_gcd(st -> time_base . num,st -> time_base . den)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 . VAR3 , VAR1 -> VAR2 . VAR4 )
  ORIGINAL[2]: st -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: st -> time_base . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: g
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640685
FRAGMENT_COUNT: 0

