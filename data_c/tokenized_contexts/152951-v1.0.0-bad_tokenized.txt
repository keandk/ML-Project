# Tokenized code fragments for 152951-v1.0.0-bad
# Total center nodes processed: 33
# Total code fragments found: 200

CENTER_NODE: 68719477242
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (s -> oformat -> write_packet)(s,pkt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 )
  ORIGINAL[1]: s -> oformat -> write_packet
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477582
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: ret = (s -> pb?s -> pb -> error : 0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> pb?s -> VAR3 -> VAR4 : 0 )
  ORIGINAL[2]: s -> pb?s -> pb -> error : 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> pb?s -> VAR2 -> VAR3 : 0
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640364
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640428
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 1
  ORIGINAL[0]: num >= den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2

CENTER_NODE: 30064771115
FRAGMENT_COUNT: 5
  ORIGINAL[0]: filepath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: stonesoup_printf_context = fopen(filepath, \
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[2]: fopen(filepath, \
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: <global> stonesoup_printf_context
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: filepath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477077
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: den != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[2]: den <= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 0
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477227
FRAGMENT_COUNT: 17
  ORIGINAL[0]: pkt -> stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> pts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> pts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> pts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> pts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pkt -> dts
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> size
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: frame_size >= 0
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 >= 0
  ORIGINAL[13]: pkt -> size
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: size
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064771198
FRAGMENT_COUNT: 6
  ORIGINAL[0]: num >= den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: f -> val += num / den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 += VAR3 / VAR4
  ORIGINAL[2]: f -> val
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: num / den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 / VAR2
  ORIGINAL[4]: num
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640434
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477599
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !s -> oformat || !s -> oformat -> get_output_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || !s -> VAR1 -> VAR2
  ORIGINAL[1]: s -> oformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> oformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: oformat
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640365
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772465
FRAGMENT_COUNT: 5
  ORIGINAL[0]: wasagara_apellous != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: ozkum_nonpropagandist = &millstream_blackwash
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = &millstream_blackwash
  ORIGINAL[2]: &millstream_blackwash
  TYPE[2]: CALL
  TOKENIZED[2]: &millstream_blackwash
  ORIGINAL[3]: ozkum_nonpropagandist
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: millstream_blackwash
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772430
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_read_taint(&moderates_vinegarer,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &moderates_vinegarer , \
  ORIGINAL[1]: &moderates_vinegarer
  TYPE[1]: CALL
  TOKENIZED[1]: &moderates_vinegarer
  ORIGINAL[2]: memorablenesses_informatory
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: moderates_vinegarer
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771261
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !oformat
  TYPE[0]: CALL
  TOKENIZED[0]: !oformat
  ORIGINAL[1]: ret = - 22
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 22
  ORIGINAL[2]: - 22
  TYPE[2]: CALL
  TOKENIZED[2]: - 22
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640433
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> pb && s -> pb -> error
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3

CENTER_NODE: 47244640427
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640422
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772147
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ts == ts2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: st -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: (next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den) * st -> time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12 ) * VAR13 -> VAR4 . VAR12
  ORIGINAL[3]: next -> dts * st2 -> time_base . num * 1000000 - (s -> audio_preload) * ((int64_t )((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)) * st2 -> time_base . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 * VAR3 -> VAR4 . VAR5 * 1000000 - ( VAR6 -> VAR7 ) * ( ( VAR8 ) ( ( VAR3 -> VAR9 -> VAR10 ) == VAR11 ) ) * VAR3 -> VAR4 . VAR12
  ORIGINAL[4]: st -> time_base . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: st -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: den
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771159
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *stonesoup_s != (char)0
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_s != ( char ) 0
  ORIGINAL[1]: stonesoup_s++
  TYPE[1]: CALL
  TOKENIZED[1]: stonesoup_s++
  ORIGINAL[2]: for (stonesoup_s = stonesoup_shm;*stonesoup_s != (char)0;stonesoup_s++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = VAR2 ; *stonesoup_s != ( char ) 0 ; stonesoup_s++ )
  ORIGINAL[3]: stonesoup_s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771233
FRAGMENT_COUNT: 14
  ORIGINAL[0]: q . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: q . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: q . den / q . num < min_precission && q . den < 1 << 24
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4 && VAR1 . VAR2 < 1 << 24
  ORIGINAL[3]: q . den / q . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 / VAR1 . VAR3
  ORIGINAL[4]: q . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: q . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: num
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: q
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: q
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: q
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: q
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: q
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: q
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: q
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064771922
FRAGMENT_COUNT: 11
  ORIGINAL[0]: ret >= 0 && s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 -> VAR3
  ORIGINAL[1]: ret >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> pb
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640351
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477513
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> oformat -> interleave_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: av_free_packet(in)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: in
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771322
FRAGMENT_COUNT: 11
  ORIGINAL[0]: avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 ) == FUN1 ( VAR3 -> VAR4 -> VAR5 )
  ORIGINAL[1]: id == (st -> codec -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == ( VAR2 -> VAR3 -> VAR4 )
  ORIGINAL[2]: (avctag -> id) == (st -> codec -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == ( VAR3 -> VAR4 -> VAR5 )
  ORIGINAL[3]: avctag -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: tag = avctag -> tag
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = VAR2 -> VAR1
  ORIGINAL[6]: avctag -> tag
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: tag
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: tag
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctag
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avctag
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719476977
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: of -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec -> codec_tag
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: !validate_codec_tag(s,st)
  TYPE[3]: CALL
  TOKENIZED[3]: !validate_codec_tag ( VAR1 , VAR2 )
  ORIGINAL[4]: of -> flags & 0x0040 && !(codec -> flags & 0x00400000)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 & 0x0040 && ! ( VAR3 -> VAR2 & 0x00400000 )
  ORIGINAL[5]: av_log(s,24,\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640423
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477106
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> oformat -> write_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> oformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: oformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771994
FRAGMENT_COUNT: 46
  ORIGINAL[0]: s -> max_chunk_size && st -> interleaver_chunk_size > (s -> max_chunk_size) || max && (st -> interleaver_chunk_duration) > max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 > ( VAR1 -> VAR2 ) || VAR5 && ( VAR3 -> VAR6 ) > VAR5
  ORIGINAL[1]: max && (st -> interleaver_chunk_duration) > max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && ( VAR2 -> VAR3 ) > VAR1
  ORIGINAL[2]: (st -> interleaver_chunk_duration) > max
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) > VAR3
  ORIGINAL[3]: syncoffset = (((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = ( ( ( VAR2 -> VAR3 -> VAR4 ) == VAR5 ) * VAR6 / 2 )
  ORIGINAL[4]: ((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max / 2
  TYPE[4]: CALL
  TOKENIZED[4]: ( ( VAR1 -> VAR2 -> VAR3 ) == VAR4 ) * VAR5 / 2
  ORIGINAL[5]: ((st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO) * max
  TYPE[5]: CALL
  TOKENIZED[5]: ( ( VAR1 -> VAR2 -> VAR3 ) == VAR4 ) * VAR5
  ORIGINAL[6]: (st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[7]: st -> codec -> codec_type
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[8]: st -> codec
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: syncto = ((av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset)
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 = ( ( FUN1 ( VAR2 -> VAR3 + VAR4 , 1 , VAR5 ) ) * VAR5 - VAR4 )
  ORIGINAL[10]: (av_rescale(pkt -> dts + syncoffset,1,max)) * max - syncoffset
  TYPE[10]: CALL
  TOKENIZED[10]: ( FUN1 ( VAR1 -> VAR2 + VAR3 , 1 , VAR4 ) ) * VAR4 - VAR3
  ORIGINAL[11]: (av_rescale(pkt -> dts + syncoffset,1,max)) * max
  TYPE[11]: CALL
  TOKENIZED[11]: ( FUN1 ( VAR1 -> VAR2 + VAR3 , 1 , VAR4 ) ) * VAR4
  ORIGINAL[12]: av_rescale(pkt -> dts + syncoffset,1,max)
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( VAR1 -> VAR2 + VAR3 , 1 , VAR4 )
  ORIGINAL[13]: pkt -> dts + syncoffset
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 + VAR3
  ORIGINAL[14]: pkt -> dts
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: st -> interleaver_chunk_duration += ((pkt -> dts - syncto) / 8) - max
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2 += ( ( VAR3 -> VAR4 - VAR5 ) / 8 ) - VAR6
  ORIGINAL[16]: st -> interleaver_chunk_duration
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: ((pkt -> dts - syncto) / 8) - max
  TYPE[17]: CALL
  TOKENIZED[17]: ( ( VAR1 -> VAR2 - VAR3 ) / 8 ) - VAR4
  ORIGINAL[18]: (pkt -> dts - syncto) / 8
  TYPE[18]: CALL
  TOKENIZED[18]: ( VAR1 -> VAR2 - VAR3 ) / 8
  ORIGINAL[19]: pkt -> dts - syncto
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2 - VAR3
  ORIGINAL[20]: pkt -> dts
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2
  ORIGINAL[21]: st -> interleaver_chunk_duration = 0
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2 = 0
  ORIGINAL[22]: st -> interleaver_chunk_duration
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: codec
  TYPE[23]: FIELD_IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: codec_type
  TYPE[24]: FIELD_IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: dts
  TYPE[25]: FIELD_IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: interleaver_chunk_duration
  TYPE[26]: FIELD_IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: dts
  TYPE[27]: FIELD_IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: interleaver_chunk_duration
  TYPE[28]: FIELD_IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: max
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: syncoffset
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: st
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: AVMEDIA_TYPE_VIDEO
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: max
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: syncto
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: pkt
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: syncoffset
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: max
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: max
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: syncoffset
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: st
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: pkt
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: syncto
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: max
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: st
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: next_point
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1

CENTER_NODE: 30064772263
FRAGMENT_COUNT: 12
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: !st -> mux_ts_offset && out -> dts < 0
  TYPE[2]: CALL
  TOKENIZED[2]: !st -> VAR1 && VAR2 -> VAR3 < 0
  ORIGINAL[3]: i < s -> nb_streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < VAR2 -> VAR3
  ORIGINAL[4]: s -> nb_streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: nb_streams
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719477698
FRAGMENT_COUNT: 8
  ORIGINAL[0]: strtol(optarg, NULL, 10)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , 10 )
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: key
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: optarg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: optarg
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: optarg
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: optarg
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

