# Tokenized code fragments for 501273-v1.0.1-good
# Total center nodes processed: 11
# Total code fragments found: 51

CENTER_NODE: 30064771075
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (value & 0x80) == 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 & 0x80 ) == 0
  ORIGINAL[1]: ((value & 0x03) == 1) ? 2 : 3
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 & 0x03 ) == 1 ) ? 2 : 3
  ORIGINAL[2]: (value & 0x03) == 1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 & 0x03 ) == 1
  ORIGINAL[3]: value & 0x03
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 & 0x03

CENTER_NODE: 68719478107
FRAGMENT_COUNT: 2
  ORIGINAL[0]: &hf_catapult_dct2000_protocol
  TYPE[0]: CALL
  TOKENIZED[0]: &hf_catapult_dct2000_protocol
  ORIGINAL[1]: <global> hf_catapult_dct2000_protocol
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 68719476745
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *type_of_port = PT_UDP
  TYPE[0]: CALL
  TOKENIZED[0]: *type_of_port = VAR1
  ORIGINAL[1]: *type_of_port
  TYPE[1]: CALL
  TOKENIZED[1]: *type_of_port
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: PT_UDP
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: PT_UDP
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772310
FRAGMENT_COUNT: 3
  ORIGINAL[0]: catapult_dct2000_handle = find_dissector(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( \
  ORIGINAL[1]: find_dissector(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: catapult_dct2000_handle
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476827
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: *data_offset
  ORIGINAL[1]: tag == 0x19
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 0x19
  ORIGINAL[2]: *data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: *data_offset
  ORIGINAL[3]: data_offset
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771425
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (strcmp(protocol_name, \
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( VAR1 , \
  ORIGINAL[1]: (strcmp(protocol_name, \
  TYPE[1]: CALL
  TOKENIZED[1]: ( FUN1 ( VAR1 , \
  ORIGINAL[2]: (strcmp(protocol_name, \
  TYPE[2]: CALL
  TOKENIZED[2]: ( FUN1 ( VAR1 , \
  ORIGINAL[3]: (strcmp(protocol_name, \
  TYPE[3]: CALL
  TOKENIZED[3]: ( FUN1 ( VAR1 , \
  ORIGINAL[4]: strcmp(protocol_name, \
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , \
  ORIGINAL[5]: strcmp(protocol_name, \
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , \
  ORIGINAL[6]: strcmp(protocol_name, \
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , \
  ORIGINAL[7]: protocol_name
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477161
FRAGMENT_COUNT: 6
  ORIGINAL[0]: digits < outhdr_string_len
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: outhdr_string[n]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: n
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: n
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: outhdr_string
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: n
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771840
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p_pdcp_lte_info == NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: p_pdcp_lte_info->large_cid_present = outhdr_values[i++]
  TYPE[1]: CALL
  TOKENIZED[1]: p_pdcp_lte_info->large_cid_present = VAR1 [ i++ ]
  ORIGINAL[2]: p_pdcp_lte_info->large_cid_present
  TYPE[2]: CALL
  TOKENIZED[2]: p_pdcp_lte_info->large_cid_present
  ORIGINAL[3]: outhdr_values[i++]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ i++ ]
  ORIGINAL[4]: p_pdcp_lte_info
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771761
FRAGMENT_COUNT: 4
  ORIGINAL[0]: p_rlc_lte_info = p_get_proto_data(pinfo->fd, proto_rlc_lte)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( pinfo->fd , VAR2 )
  ORIGINAL[1]: p_get_proto_data(pinfo->fd, proto_rlc_lte)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( pinfo->fd , VAR1 )
  ORIGINAL[2]: p_rlc_lte_info
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p_rlc_lte_info
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772060
FRAGMENT_COUNT: 5
  ORIGINAL[0]: strcmp(protocol_name, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: protocol_handle = find_dissector(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( \
  ORIGINAL[2]: find_dissector(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: protocol_handle
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: protocol_handle
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771213
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (length != 4) && (length != 16)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 != 4 ) && ( VAR1 != 16 )
  ORIGINAL[1]: offset += length
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2
  ORIGINAL[2]: offset
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: length
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tvb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

