# Tokenized code fragments for 153333-v1.0.0-bad
# Total center nodes processed: 194
# Total code fragments found: 777

CENTER_NODE: 47244641184
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772190
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2 || (avctx -> codec_id) == AV_CODEC_ID_MP3
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4 || ( VAR1 -> VAR2 ) == VAR5
  ORIGINAL[1]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[2]: (avctx -> codec_id) == AV_CODEC_ID_MP3
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3

CENTER_NODE: 30064774672
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> start_time != ((int64_t )0x8000000000000000UL) || st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (int64_t )0x8000000000000000UL
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[5]: st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[6]: st -> first_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (int64_t )0x8000000000000000UL
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[8]: first_dts
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771164
FRAGMENT_COUNT: 3
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: strlen(dirpath) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[2]: strlen(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \

CENTER_NODE: 30064771226
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641199
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775143
FRAGMENT_COUNT: 9
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[1]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[2]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[3]: (c -> codec_id) == AV_CODEC_ID_MPEG2VIDEO
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[4]: (c -> codec_id) == AV_CODEC_ID_H264
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[5]: c -> codec_id
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec_id
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: c
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: AV_CODEC_ID_H264
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773843
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: &st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: &st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: &st -> VAR1
  ORIGINAL[3]: &st -> index_entries_allocated_size
  TYPE[3]: CALL
  TOKENIZED[3]: &st -> VAR1
  ORIGINAL[4]: pos
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: distance
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640575
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777363
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_isspace(( *ptr)) || ( *ptr) == ','
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( *ptr ) ) || ( *ptr ) == ' , '
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: !(av_isspace(( *ptr)) || ( *ptr) == ',')
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( FUN1 ( ( *ptr ) ) || ( *ptr ) == ' , ' )
  ORIGINAL[3]: av_isspace(( *ptr)) || ( *ptr) == ','
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( *ptr ) ) || ( *ptr ) == ' , '
  ORIGINAL[4]: av_isspace(( *ptr))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( *ptr ) )
  ORIGINAL[5]: ( *ptr) == ','
  TYPE[5]: CALL
  TOKENIZED[5]: ( *ptr ) == ' , '

CENTER_NODE: 47244641177
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775852
FRAGMENT_COUNT: 5
  ORIGINAL[0]: k < 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 2
  ORIGINAL[1]: a = st -> info -> duration_error[k][0][j] / n
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 -> VAR4 [ VAR5 ] [ 0 ] [ VAR6 ] / VAR7
  ORIGINAL[2]: st -> info -> duration_error[k][0][j] / n
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 [ VAR4 ] [ 0 ] [ VAR5 ] / VAR6
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: error
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776131
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat -> read_play
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: iformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: read_play
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481327
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719478731
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: e -> timestamp <= target_ts || e -> pos == (e -> min_distance)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 <= VAR3 || VAR1 -> VAR4 == ( VAR1 -> VAR5 )
  ORIGINAL[2]: index == 0?((void )0) : __assert_fail(\
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == 0? ( ( void ) 0 ) : FUN1 ( \
  ORIGINAL[3]: index = av_index_search_timestamp(st,target_ts,flags & ~1)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 & ~1 )
  ORIGINAL[4]: av_index_search_timestamp(st,target_ts,flags & ~1)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 , VAR3 & ~1 )
  ORIGINAL[5]: index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: index
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777259
FRAGMENT_COUNT: 4
  ORIGINAL[0]: local_pkt =  *pkt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = *pkt
  ORIGINAL[1]: *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt
  ORIGINAL[2]: local_pkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: local_pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477781
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: streams
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640863
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775140
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: ((const int [6UL]){(24), (30), (60), (12), (15), (48)})[i - 60 * 12]
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) } ) [ VAR1 - 60 * 12 ]
  ORIGINAL[2]: i - 60 * 12
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 60 * 12
  ORIGINAL[3]: 60 * 12
  TYPE[3]: CALL
  TOKENIZED[3]: 60 * 12
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477720
FRAGMENT_COUNT: 12
  ORIGINAL[0]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63 && st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL) && st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63 && VAR3 -> VAR5 == ( ( VAR6 ) 0x8000000000000000UL ) && VAR3 -> VAR7 != ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[1]: s -> correct_ts_overflow
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_find_program_from_stream(s,((void *)0),stream_index)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 )
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: first_program
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640690
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772350
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> has_b_frames < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 < 4
  ORIGINAL[1]: st -> nb_decoded_frames >= 18
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 >= 18
  ORIGINAL[2]: st -> nb_decoded_frames
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: nb_decoded_frames
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476895
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> pts_wrap_behavior != 0 && st -> pts_wrap_reference != ((int64_t )0x8000000000000000UL) && timestamp != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 0 && VAR1 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> pts_wrap_behavior
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_reference
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> pts_wrap_behavior
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pts_wrap_behavior
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775057
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_codec_get_tag2 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: av_codec_get_tag2(tags,id,&tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[2]: &tag
  TYPE[2]: CALL
  TOKENIZED[2]: &tag
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640555
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771433
FRAGMENT_COUNT: 4
  ORIGINAL[0]: size = ffio_limit(s,size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR1 )
  ORIGINAL[1]: ffio_limit(s,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776528
FRAGMENT_COUNT: 4
  ORIGINAL[0]: v = (lrintf((d * 100)))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( ( VAR2 * 100 ) ) )
  ORIGINAL[1]: lrintf((d * 100))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 * 100 ) )
  ORIGINAL[2]: d * 100
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 100
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776893
FRAGMENT_COUNT: 3
  ORIGINAL[0]: buf1[20]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 20 ]
  ORIGINAL[1]: buf1[20]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 20 ]
  ORIGINAL[2]: buf1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719480913
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776888
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: av_gettime() / 1000 * 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[2]: av_gettime() / 1000
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ) / 1000

CENTER_NODE: 68719479138
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: nb_streams
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776447
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *chapter = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *chapter = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: chapter
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641128
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641195
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641191
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640845
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776024
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ic -> programs[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: ic -> programs[i] -> stream_index[j] == s
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ] == VAR6
  ORIGINAL[2]: ic -> programs[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: ic -> programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: programs
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479453
FRAGMENT_COUNT: 7
  ORIGINAL[0]: avctx -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> info -> found_decoder >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 >= 0
  ORIGINAL[2]: avctx -> sample_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: sample_fmt
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640855
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479097
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> iformat -> read_seek2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: (s -> iformat -> read_seek2)(s,stream_index,min_ts,ts,max_ts,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[2]: max_ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: max_ts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: min_ts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: max_ts
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: flags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641068
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640480
FRAGMENT_COUNT: 1
  ORIGINAL[0]: desc
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719476945
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *p) != '\\0' && ( *p) != ',' && (q - ext1) < sizeof(ext1) - 1
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) != '\\0' && ( *p ) != ' , ' && ( VAR1 - VAR2 ) < sizeof ( VAR2 ) - 1
  ORIGINAL[1]: *q
  TYPE[1]: CALL
  TOKENIZED[1]: *q
  ORIGINAL[2]: ( *p) == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *p ) == '\\0'
  ORIGINAL[3]: ext
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: q
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: q
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: q
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: q
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476798
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fprintf(stdout, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: out_filename
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stdout
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: shmid
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476924
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773647
FRAGMENT_COUNT: 4
  ORIGINAL[0]: first_audio_index = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = - 1
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1
  ORIGINAL[2]: first_audio_index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477353
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl -> pkt =  *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = *pkt
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478532
FRAGMENT_COUNT: 12
  ORIGINAL[0]: st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> last_IP_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> cur_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> cur_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> reference_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> probe_packets
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: j < 16 + 1
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 < 16 + 1
  ORIGINAL[8]: st -> pts_buffer
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pts_buffer
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719479579
FRAGMENT_COUNT: 5
  ORIGINAL[0]: tags -> id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (tags -> id) == id
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[2]: tags++
  TYPE[2]: CALL
  TOKENIZED[2]: tags++
  ORIGINAL[3]: id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771232
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 47244640859
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479264
FRAGMENT_COUNT: 14
  ORIGINAL[0]: update_stream_timings(ic)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ic -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ic -> duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ic
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244640689
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640811
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774015
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ts_max == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: limit = pos_max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: ts_max == ((int64_t )0x8000000000000000UL) && 2 * limit > step
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL ) && 2 * VAR3 > VAR4
  ORIGINAL[3]: limit
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_max
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776815
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < ic -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (ch -> start) * av_q2d(ch -> time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) * FUN1 ( VAR1 -> VAR3 )

CENTER_NODE: 47244641205
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640693
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640631
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064773786
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !entries
  TYPE[0]: CALL
  TOKENIZED[0]: !entries
  ORIGINAL[1]: index = ff_index_search_timestamp(( *index_entries), *nb_index_entries,timestamp,4)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( ( *index_entries ) , *nb_index_entries , VAR2 , 4 )
  ORIGINAL[2]: ff_index_search_timestamp(( *index_entries), *nb_index_entries,timestamp,4)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( *index_entries ) , *nb_index_entries , VAR1 , 4 )
  ORIGINAL[3]: index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776207
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> streams[--s -> nb_streams]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ --s -> VAR3 ]
  ORIGINAL[1]: --s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: --s -> VAR1
  ORIGINAL[2]: s -> nb_streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 68719481317
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !data
  TYPE[0]: CALL
  TOKENIZED[0]: !data
  ORIGINAL[1]: bytestream_put_le64(&data,channel_layout)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &data , VAR1 )
  ORIGINAL[2]: bytestream_put_le32(&data,sample_rate)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &data , VAR1 )
  ORIGINAL[3]: &data
  TYPE[3]: CALL
  TOKENIZED[3]: &data
  ORIGINAL[4]: channel_layout
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: sample_rate
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: data
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: sample_rate
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: width
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773638
FRAGMENT_COUNT: 3
  ORIGINAL[0]: free_packet_buffer(&s -> packet_buffer,&s -> packet_buffer_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> packet_buffer_end
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> packet_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 30064771551
FRAGMENT_COUNT: 3
  ORIGINAL[0]: score = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pd
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773626
FRAGMENT_COUNT: 5
  ORIGINAL[0]: is_relative(pkt -> pts)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[1]: pkt -> pts -= 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -= 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: pkt -> pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: 9223372036854775807L - (1LL << 48)
  TYPE[3]: CALL
  TOKENIZED[3]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771935
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &id3v2_extra_meta
  TYPE[0]: CALL
  TOKENIZED[0]: &id3v2_extra_meta
  ORIGINAL[1]: !strcmp(s -> iformat -> name,\
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[2]: (ret = ff_id3v2_parse_apic(s,&id3v2_extra_meta)) < 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 = FUN1 ( VAR2 , &id3v2_extra_meta ) ) < 0
  ORIGINAL[3]: &id3v2_extra_meta
  TYPE[3]: CALL
  TOKENIZED[3]: &id3v2_extra_meta
  ORIGINAL[4]: ff_id3v2_free_extra_meta(&id3v2_extra_meta)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( &id3v2_extra_meta )
  ORIGINAL[5]: &id3v2_extra_meta
  TYPE[5]: CALL
  TOKENIZED[5]: &id3v2_extra_meta
  ORIGINAL[6]: id3v2_extra_meta
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: id3v2_extra_meta
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641320
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773900
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773311
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&pktl))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &pktl ) )
  ORIGINAL[1]: &pktl
  TYPE[1]: CALL
  TOKENIZED[1]: &pktl
  ORIGINAL[2]: pktl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479684
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> chapters[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> chapters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776145
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_pause(s -> pb,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , 1 )
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 68719479654
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777460
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret2 && !ret1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && !ret1
  ORIGINAL[1]: av_timegm(&time2)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &time2 )
  ORIGINAL[2]: &time2
  TYPE[2]: CALL
  TOKENIZED[2]: &time2

CENTER_NODE: 30064776272
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: av_freep((&s -> streams))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[2]: &s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 30064776601
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_dict_get(st -> metadata,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , \
  ORIGINAL[1]: st -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 68719480397
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> info
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> cur_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> first_dts = ((int64_t )0x8000000000000000UL)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[8]: st -> first_dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> probe_packets
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: probe_packets
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064771470
FRAGMENT_COUNT: 4
  ORIGINAL[0]: filename && av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && FUN1 ( VAR2 , ( sizeof ( VAR2 ) ) , VAR1 , 1 ) >= 0
  ORIGINAL[1]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[2]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640722
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640836
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773220
FRAGMENT_COUNT: 14
  ORIGINAL[0]: !out_pkt . size
  TYPE[0]: CALL
  TOKENIZED[0]: !out_pkt . VAR1
  ORIGINAL[1]: (st -> need_parsing) == AVSTREAM_PARSE_FULL_RAW
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: st -> need_parsing
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: out_pkt . pos = st -> parser -> frame_offset
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 = VAR3 -> VAR4 -> VAR5
  ORIGINAL[4]: out_pkt . pos
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: st -> parser -> frame_offset
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> parser
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pos
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: parser
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: frame_offset
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: AVSTREAM_PARSE_FULL_RAW
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: out_pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244640440
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640556
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641170
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064777705
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> width == 1440
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1440
  ORIGINAL[1]: data = avci50_1080i_extradata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: data
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci50_1080i_extradata
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480986
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *p) == '[' && (brk = (strchr(p,']')))
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) == ' [ ' && ( VAR1 = ( FUN1 ( VAR2 , ' ] ' ) ) )
  ORIGINAL[1]: brk < ls
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: ls
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ls
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: brk
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ls
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ls
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ls
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641046
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771535
FRAGMENT_COUNT: 14
  ORIGINAL[0]: !is_opened == !(fmt1 -> flags & 0x1)
  TYPE[0]: CALL
  TOKENIZED[0]: !is_opened == ! ( VAR1 -> VAR2 & 0x1 )
  ORIGINAL[1]: score > score_max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2
  ORIGINAL[2]: score_max = score
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: fmt = fmt1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = VAR2
  ORIGINAL[4]: score == score_max
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 == VAR2
  ORIGINAL[5]: fmt1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: score_max
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: score_max
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: score
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: fmt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt1
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: score
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: score_max
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719476964
FRAGMENT_COUNT: 7
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: av_strncasecmp(name,names,len)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: names
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: names
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: names
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777753
FRAGMENT_COUNT: 5
  ORIGINAL[0]: len_p > len_h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: hostname[len_h - len_p]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 - VAR3 ]
  ORIGINAL[2]: len_h - len_p
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2
  ORIGINAL[3]: len_h
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len_p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481326
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064773857
FRAGMENT_COUNT: 4
  ORIGINAL[0]: entries[b - 1]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 - 1 ]
  ORIGINAL[1]: b - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - 1
  ORIGINAL[2]: b
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: b
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773103
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: av_freep((&pktl))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &pktl ) )
  ORIGINAL[2]: &pktl
  TYPE[2]: CALL
  TOKENIZED[2]: &pktl
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640893
FRAGMENT_COUNT: 1
  ORIGINAL[0]: tag == tags[i] . tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 [ VAR3 ] . VAR1

CENTER_NODE: 68719479063
FRAGMENT_COUNT: 4
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: stream_index
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: timestamp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: flags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640833
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480833
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641251
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480906
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640681
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641232
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640447
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640932
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640868
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776425
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: (void )(sizeof(( *( *_tab) == _elem)))
  TYPE[1]: CALL
  TOKENIZED[1]: ( void ) ( sizeof ( ( * ( *_tab ) == VAR1 ) ) )
  ORIGINAL[2]: sizeof(( *( *_tab) == _elem))
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( ( * ( *_tab ) == VAR1 ) )
  ORIGINAL[3]: _tab
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776729
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064777191
FRAGMENT_COUNT: 3
  ORIGINAL[0]: len = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: len
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641188
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771768
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: av_probe_input_format2(&pd,0,&score)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &pd , 0 , &score )
  ORIGINAL[2]: &pd
  TYPE[2]: CALL
  TOKENIZED[2]: &pd
  ORIGINAL[3]: pd
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640694
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773723
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> cur_dts = av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 , VAR1 -> VAR4 . VAR5 * ( ( VAR6 ) VAR7 -> VAR4 . VAR8 ) , VAR1 -> VAR4 . VAR8 * ( ( VAR6 ) VAR7 -> VAR4 . VAR5 ) )
  ORIGINAL[2]: st -> cur_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 * ( ( VAR5 ) VAR6 -> VAR3 . VAR7 ) , VAR2 -> VAR3 . VAR7 * ( ( VAR5 ) VAR6 -> VAR3 . VAR4 ) )
  ORIGINAL[4]: st -> time_base . den * ((int64_t )ref_st -> time_base . num)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[5]: st -> time_base . num * ((int64_t )ref_st -> time_base . den)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[6]: timestamp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719481257
FRAGMENT_COUNT: 7
  ORIGINAL[0]: rel[0] == 63
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == 63
  ORIGINAL[1]: av_strlcat(buf,rel,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: rel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640842
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641165
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641153
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641168
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641180
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774234
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> iformat -> flags & 0x8000
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x8000
  ORIGINAL[1]: seek_frame_byte(s,stream_index,timestamp,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: flags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640305
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640852
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776543
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[1]: av_dict_count(m) == 1
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) == 1
  ORIGINAL[2]: av_dict_count(m)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: av_dict_get(m,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , \
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: m
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: m
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777381
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: s -> streams[i] -> id == id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[4]: s -> streams[i] -> id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: nb_streams
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: id
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771561
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {{(\
  TYPE[0]: CALL
  TOKENIZED[0]: { { ( \
  ORIGINAL[1]: {(\
  TYPE[1]: CALL
  TOKENIZED[1]: { ( \
  ORIGINAL[2]: AV_CODEC_ID_AAC_LATM
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_AUDIO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477698
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: next
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pktl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773017
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> pts + duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 + VAR3
  ORIGINAL[3]: pkt -> pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: duration
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640686
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 3
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: sizeof(\
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( \

CENTER_NODE: 30064771224
FRAGMENT_COUNT: 1
  ORIGINAL[0]: base_path[20]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 20 ]

CENTER_NODE: 68719477884
FRAGMENT_COUNT: 17
  ORIGINAL[0]: s -> parse_queue
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> parse_queue
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: get_next_pkt(s,st,pktl)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[4]: pktl -> pkt . stream_index == stream_index
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3 == VAR3
  ORIGINAL[5]: pktl -> pkt . pts != pktl -> pkt . dts || pktl -> pkt . dts != ((int64_t )0x8000000000000000UL) || pktl -> pkt . duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3 != VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR4 != ( ( VAR5 ) 0x8000000000000000UL ) || VAR1 -> VAR2 . VAR6
  ORIGINAL[6]: s -> parse_queue
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: s -> packet_buffer
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pktl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 47244641242
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064772041
FRAGMENT_COUNT: 5
  ORIGINAL[0]: end || ff_log2_c((pd -> buf_size)) != ff_log2_c((pd -> buf_size - pkt -> size))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 || FUN1 ( ( VAR2 -> VAR3 ) ) != FUN1 ( ( VAR2 -> VAR3 - VAR4 -> VAR5 ) )
  ORIGINAL[1]: score = set_codec_from_probe_data(s,st,pd)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: set_codec_from_probe_data(s,st,pd)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481100
FRAGMENT_COUNT: 7
  ORIGINAL[0]: authorization && authorization[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ 0 ]
  ORIGINAL[1]: av_strlcatf(str,size,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: authorization
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640701
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641174
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771236
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 63 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 63 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 63 << 8

CENTER_NODE: 68719479665
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: tags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772271
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> time_base . num * 1000LL > st -> time_base . den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 * 1000LL > VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: st -> codec -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[2]: st -> codec -> time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[3]: st -> codec -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: time_base
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: den
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640736
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064777177
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < s;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640723
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641073
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 68719479541
FRAGMENT_COUNT: 13
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: !st -> codec_info_nb_frames
  TYPE[2]: CALL
  TOKENIZED[2]: !st -> VAR1
  ORIGINAL[3]: st -> codec_info_nb_frames
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> nb_decoded_frames
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: codec
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064776524
FRAGMENT_COUNT: 9
  ORIGINAL[0]: program -> stream_index[j]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: !tmp
  TYPE[1]: CALL
  TOKENIZED[1]: !tmp
  ORIGINAL[2]: program -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: program -> stream_index[program -> nb_stream_indexes++]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR1 -> nb_stream_indexes++ ]
  ORIGINAL[4]: program -> stream_index
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: stream_index
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: program
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: program
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: program
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479409
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ic -> iformat -> flags & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[1]: file_size = avio_size(ic -> pb)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: file_size = (0 > file_size?0 : file_size)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( 0 > file_size?0 : VAR1 )
  ORIGINAL[3]: 0 > file_size?0 : file_size
  TYPE[3]: CALL
  TOKENIZED[3]: 0 > file_size?0 : VAR1
  ORIGINAL[4]: file_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: file_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> codec -> codec_id = s -> audio_codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477007
FRAGMENT_COUNT: 6
  ORIGINAL[0]: type == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_AUDIO
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: type
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_AUDIO
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: type
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771405
FRAGMENT_COUNT: 13
  ORIGINAL[0]: remaining < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: !s -> maxsize || s -> maxsize < newsize
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1 || VAR2 -> VAR1 < VAR3
  ORIGINAL[2]: !s -> maxsize
  TYPE[2]: CALL
  TOKENIZED[2]: !s -> VAR1
  ORIGINAL[3]: s -> maxsize < newsize
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 < VAR3
  ORIGINAL[4]: s -> maxsize = newsize - (!newsize)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = VAR3 - ( !newsize )
  ORIGINAL[5]: s -> maxsize
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: newsize - (!newsize)
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 - ( !newsize )
  ORIGINAL[7]: !newsize
  TYPE[7]: CALL
  TOKENIZED[7]: !newsize
  ORIGINAL[8]: maxsize
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: newsize
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: newsize
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: remaining
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244640848
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771452
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: size
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478382
FRAGMENT_COUNT: 17
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> debug
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: !got_packet && s -> parse_queue
  TYPE[3]: CALL
  TOKENIZED[3]: !got_packet && VAR1 -> VAR2
  ORIGINAL[4]: s -> parse_queue
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> parse_queue
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: parse_queue
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ret
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064776293
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat -> read_close
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: (s -> iformat -> read_close)(s)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[2]: s -> iformat -> read_close
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481522
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !buf
  TYPE[0]: CALL
  TOKENIZED[0]: !buf
  ORIGINAL[1]: av_free(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481402
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *spec) == 'p' && ( *(spec + 1)) == ':'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *spec ) == 'p' && ( * ( VAR1 + 1 ) ) == ':'
  ORIGINAL[1]: prog_id = (strtol(spec,&endptr,0))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 , &endptr , 0 ) )
  ORIGINAL[2]: i = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777529
FRAGMENT_COUNT: 8
  ORIGINAL[0]: stream && stream -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: stream -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: stream -> codec -> sample_aspect_ratio
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: stream -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: sample_aspect_ratio
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stream
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477300
FRAGMENT_COUNT: 8
  ORIGINAL[0]: score <= 100 / 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 100 / 4
  ORIGINAL[1]: av_log(logctx,48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[2]: ( *fmt) -> name
  TYPE[2]: CALL
  TOKENIZED[2]: ( *fmt ) -> VAR1
  ORIGINAL[3]: probe_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: probe_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: logctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: probe_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: score
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640711
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641148
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771373
FRAGMENT_COUNT: 14
  ORIGINAL[0]: filename && fmt -> extensions
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 -> VAR3
  ORIGINAL[1]: fmt -> extensions
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt -> extensions
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: extensions
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: filename
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: fmt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: fmt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719478562
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 2 * i < st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: 2 * VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: 2 * i
  TYPE[1]: CALL
  TOKENIZED[1]: 2 * VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480835
FRAGMENT_COUNT: 4
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: level
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771828
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> streams[i] -> disposition & 0x0400 && (s -> streams[i] -> discard) < AVDISCARD_ALL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 & 0x0400 && ( VAR1 -> VAR2 [ VAR3 ] -> VAR5 ) < VAR6
  ORIGINAL[1]: &s -> raw_packet_buffer_end
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> raw_packet_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: raw_packet_buffer_end
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641157
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774217
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> iformat -> read_seek
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ((s -> iformat -> read_seek)(s,stream_index,timestamp,flags)) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 ) ) >= 0
  ORIGINAL[2]: ie = &st -> index_entries[index]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = &st -> VAR2 [ VAR3 ]
  ORIGINAL[3]: &st -> index_entries[index]
  TYPE[3]: CALL
  TOKENIZED[3]: &st -> VAR1 [ VAR2 ]
  ORIGINAL[4]: ie
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641078
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477018
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: name
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: short_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771596
FRAGMENT_COUNT: 18
  ORIGINAL[0]: ic -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ic -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: err = ((ic -> iformat -> read_header)(ic))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 ) )
  ORIGINAL[3]: (ic -> iformat -> read_header)(ic)
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[4]: ic -> iformat -> read_header
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: ic -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: err < 0
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 < 0
  ORIGINAL[7]: ic -> pb && !ic -> data_offset
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 && !ic -> VAR3
  ORIGINAL[8]: ic -> pb
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: read_header
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: iformat
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: read_header
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pb
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: err
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ic
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ic
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: err
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064776106
FRAGMENT_COUNT: 8
  ORIGINAL[0]: best_multiframe > multiframe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: best_multiframe == multiframe && best_bitrate > bitrate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2 && VAR3 > VAR4
  ORIGINAL[2]: best_multiframe == multiframe
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == VAR2
  ORIGINAL[3]: best_bitrate > bitrate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 > VAR2
  ORIGINAL[4]: best_multiframe
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: multiframe
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: best_bitrate
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: bitrate
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719481556
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stonesoup_oc_i < stonesoup_opt_var
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: stonesoup_data->base_path[stonesoup_oc_i]
  TYPE[1]: CALL
  TOKENIZED[1]: stonesoup_data->base_path [ VAR1 ]
  ORIGINAL[2]: stonesoup_data->base_path
  TYPE[2]: CALL
  TOKENIZED[2]: stonesoup_data->base_path
  ORIGINAL[3]: stonesoup_oc_i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_oc_i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772083
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stranglement_sliverer != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: birdhouses_intines = &perspirate_mournfully
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = &perspirate_mournfully
  ORIGINAL[2]: &perspirate_mournfully
  TYPE[2]: CALL
  TOKENIZED[2]: &perspirate_mournfully
  ORIGINAL[3]: birdhouses_intines
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: perspirate_mournfully
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479303
FRAGMENT_COUNT: 13
  ORIGINAL[0]: ic -> bit_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> bit_rate
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ic -> pb
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: filesize > 0
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 > 0
  ORIGINAL[7]: i < ic -> nb_streams
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 < VAR2 -> VAR3
  ORIGINAL[8]: ic -> nb_streams
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: ic -> bit_rate
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: nb_streams
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064777039
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: (pkt -> pts) * av_q2d(time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) * FUN1 ( VAR3 )
  ORIGINAL[2]: pkt -> pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_q2d(time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: time_base
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640682
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478676
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641202
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476891
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641048
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640685
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772214
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !mux && enc -> bit_rate > 0
  TYPE[0]: CALL
  TOKENIZED[0]: !mux && VAR1 -> VAR2 > 0
  ORIGINAL[1]: !mux
  TYPE[1]: CALL
  TOKENIZED[1]: !mux
  ORIGINAL[2]: enc -> bit_rate > 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 > 0
  ORIGINAL[3]: enc -> bit_rate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 68719476882
FRAGMENT_COUNT: 9
  ORIGINAL[0]: *stonesoup_s != (char)0
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_s != ( char ) 0
  ORIGINAL[1]: *stonesoup_s
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_s
  ORIGINAL[2]: *stonesoup_tainted_buff
  TYPE[2]: CALL
  TOKENIZED[2]: *stonesoup_tainted_buff
  ORIGINAL[3]: stonesoup_s - stonesoup_shm
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: stonesoup_s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stonesoup_shm
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064777483
FRAGMENT_COUNT: 7
  ORIGINAL[0]: codec_id == (ofmt -> video_codec) || codec_id == (ofmt -> audio_codec) || codec_id == (ofmt -> subtitle_codec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( VAR2 -> VAR3 ) || VAR1 == ( VAR2 -> VAR4 ) || VAR1 == ( VAR2 -> VAR5 )
  ORIGINAL[1]: ('P' | 'A' << 8 | 'W' << 16) | ((unsigned int )'E') << 24
  TYPE[1]: CALL
  TOKENIZED[1]: ( 'P' | 'A' << 8 | 'W' << 16 ) | ( ( unsigned int ) 'E' ) << 24
  ORIGINAL[2]: 'P' | 'A' << 8 | 'W' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: 'P' | 'A' << 8 | 'W' << 16
  ORIGINAL[3]: 'P' | 'A' << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 'P' | 'A' << 8
  ORIGINAL[4]: 'W' << 16
  TYPE[4]: CALL
  TOKENIZED[4]: 'W' << 16
  ORIGINAL[5]: ((unsigned int )'E') << 24
  TYPE[5]: CALL
  TOKENIZED[5]: ( ( unsigned int ) 'E' ) << 24
  ORIGINAL[6]: ofmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640598
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774397
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: st -> codec -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (st -> codec -> codec_type) == AVMEDIA_TYPE_DATA
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[4]: st -> codec -> codec_type
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec_type
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AVMEDIA_TYPE_DATA
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064775055
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_U32BE : AV_CODEC_ID_PCM_U32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_U32BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U32LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478944
FRAGMENT_COUNT: 6
  ORIGINAL[0]: pos < pos_min
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: pos > pos_max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2
  ORIGINAL[2]: pos_max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_max
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

