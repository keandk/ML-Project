# Tokenized code fragments for 152644-v1.0.0-bad
# Total center nodes processed: 92
# Total code fragments found: 419

CENTER_NODE: 30064773299
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> flags & 0x4000 || !buf -> linesize[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x4000 || !buf -> VAR3 [ VAR4 ]
  ORIGINAL[1]: s -> flags & 0x4000
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x4000
  ORIGINAL[2]: !buf -> linesize[i]
  TYPE[2]: CALL
  TOKENIZED[2]: !buf -> VAR1 [ VAR2 ]
  ORIGINAL[3]: buf -> linesize[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]

CENTER_NODE: 30064772738
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640598
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640310
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !po -> name
  TYPE[0]: CALL
  TOKENIZED[0]: !po -> VAR1

CENTER_NODE: 68719478090
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !f && codec_name
  TYPE[0]: CALL
  TOKENIZED[0]: !f && VAR1
  ORIGINAL[1]: base[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: base
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772431
FRAGMENT_COUNT: 13
  ORIGINAL[0]: (c -> type) == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: c -> capabilities & (0x1000 | 0x2000)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & ( 0x1000 | 0x2000 )
  ORIGINAL[2]: c -> capabilities
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: 0x1000 | 0x2000
  TYPE[3]: CALL
  TOKENIZED[3]: 0x1000 | 0x2000
  ORIGINAL[4]: 0x1000 | 0x2000
  TYPE[4]: CALL
  TOKENIZED[4]: 0x1000 | 0x2000
  ORIGINAL[5]: printf(\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( \
  ORIGINAL[6]: printf(\
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( \
  ORIGINAL[7]: printf(\
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( \
  ORIGINAL[8]: printf(\
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( \
  ORIGINAL[9]: break;
  TYPE[9]: CONTROL_STRUCTURE
  TOKENIZED[9]: break ;
  ORIGINAL[10]: break;
  TYPE[10]: CONTROL_STRUCTURE
  TOKENIZED[10]: break ;
  ORIGINAL[11]: break;
  TYPE[11]: CONTROL_STRUCTURE
  TOKENIZED[11]: break ;
  ORIGINAL[12]: break;
  TYPE[12]: CONTROL_STRUCTURE
  TOKENIZED[12]: break ;

CENTER_NODE: 68719477436
FRAGMENT_COUNT: 6
  ORIGINAL[0]: template++
  TYPE[0]: CALL
  TOKENIZED[0]: template++
  ORIGINAL[1]: c == '%'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == '%'
  ORIGINAL[2]: !(c = ( *(template++)))
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 = ( * ( template++ ) ) )
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: template
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: template
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771256
FRAGMENT_COUNT: 10
  ORIGINAL[0]: class -> option
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_opt_show2((&class),((void *)0),flags,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &class ) , ( ( void * ) 0 ) , VAR1 , 0 )
  ORIGINAL[2]: &class
  TYPE[2]: CALL
  TOKENIZED[2]: &class
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: printf(\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( \
  ORIGINAL[5]: option
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: class
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: class
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: child
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772718
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: av_pix_fmt_desc_next(pix_desc)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: pix_desc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pix_desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476771
FRAGMENT_COUNT: 6
  ORIGINAL[0]: filepath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: sprintf(filepath, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: filepath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filepath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filepath
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476818
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *stonesoup_s != (char)0
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_s != ( char ) 0
  ORIGINAL[1]: *stonesoup_s
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_s
  ORIGINAL[2]: (*stonesoup_tainted_buff)[stonesoup_s - stonesoup_shm]
  TYPE[2]: CALL
  TOKENIZED[2]: ( *stonesoup_tainted_buff ) [ VAR1 - VAR2 ]
  ORIGINAL[3]: *stonesoup_s
  TYPE[3]: CALL
  TOKENIZED[3]: *stonesoup_s
  ORIGINAL[4]: stonesoup_s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772894
FRAGMENT_COUNT: 6
  ORIGINAL[0]: c != '\\n' && c != - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != '\\n' && VAR1 != - 1
  ORIGINAL[1]: c = getchar()
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( )
  ORIGINAL[2]: getchar()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: while (c != '\\n' && c != - 1)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: while ( VAR1 != '\\n' && VAR1 != - 1 )
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772351
FRAGMENT_COUNT: 6
  ORIGINAL[0]: idx = locate_option(argc,argv,options,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , \
  ORIGINAL[1]: locate_option(argc,argv,options,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , \
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argv
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: options
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771775
FRAGMENT_COUNT: 6
  ORIGINAL[0]: g -> opts[g -> nb_opts - 1] . opt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4
  ORIGINAL[1]: g -> opts[g -> nb_opts - 1] . key
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4
  ORIGINAL[2]: g -> opts[g -> nb_opts - 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ]
  ORIGINAL[3]: g -> opts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: g -> nb_opts - 1
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 - 1
  ORIGINAL[5]: key
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771449
FRAGMENT_COUNT: 4
  ORIGINAL[0]: opt[1] == '-' && opt[2] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '-' && VAR1 [ 2 ] == '\\0'
  ORIGINAL[1]: opt[1] == '-'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ] == '-'
  ORIGINAL[2]: opt[2] == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 2 ] == '\\0'
  ORIGINAL[3]: opt[2]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 2 ]

CENTER_NODE: 30064772360
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 47244640426
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 4
  ORIGINAL[0]: line[1024]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1024 ]
  ORIGINAL[1]: line[1024]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1024 ]
  ORIGINAL[2]: line
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: print_prefix
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476824
FRAGMENT_COUNT: 2
  ORIGINAL[0]: &swr_opts
  TYPE[0]: CALL
  TOKENIZED[0]: &swr_opts
  ORIGINAL[1]: <global> swr_opts
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 68719477281
FRAGMENT_COUNT: 9
  ORIGINAL[0]: *octx
  TYPE[0]: CALL
  TOKENIZED[0]: *octx
  ORIGINAL[1]: octx -> nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: octx -> groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i < octx -> nb_groups
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < VAR2 -> VAR3
  ORIGINAL[4]: octx -> nb_groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: nb_groups
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: octx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: octx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719478274
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *size < new_size
  TYPE[0]: CALL
  TOKENIZED[0]: *size < VAR1
  ORIGINAL[1]: new_size * elem_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * VAR2
  ORIGINAL[2]: new_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: array
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: new_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: elem_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: new_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772700
FRAGMENT_COUNT: 8
  ORIGINAL[0]: name = avio_enum_protocols(&opaque,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &opaque , 0 )
  ORIGINAL[1]: avio_enum_protocols(&opaque,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &opaque , 0 )
  ORIGINAL[2]: &opaque
  TYPE[2]: CALL
  TOKENIZED[2]: &opaque
  ORIGINAL[3]: printf(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: while (name = avio_enum_protocols(&opaque,0))
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: while ( VAR1 = FUN1 ( &opaque , 0 ) )
  ORIGINAL[5]: name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opaque
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: name
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: av_log(((void *)0),16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: opt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772573
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772155
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064772692
FRAGMENT_COUNT: 9
  ORIGINAL[0]: bsf = av_bitstream_filter_next(bsf)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: av_bitstream_filter_next(bsf)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: printf(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: bsf -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: while (bsf = av_bitstream_filter_next(bsf))
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: while ( VAR1 = FUN1 ( VAR1 ) )
  ORIGINAL[5]: name
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: bsf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: bsf
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: bsf
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640443
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772688
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 30064773465
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *buf = (fb -> priv)
  TYPE[0]: CALL
  TOKENIZED[0]: *buf = ( VAR1 -> VAR2 )
  ORIGINAL[1]: fb -> priv
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477102
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ( *p) >= '+'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) >= '+'
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477458
FRAGMENT_COUNT: 7
  ORIGINAL[0]: time(&now)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &now )
  ORIGINAL[1]: tm = localtime((&now))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( ( &now ) )
  ORIGINAL[2]: localtime((&now))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( &now ) )
  ORIGINAL[3]: <global> report_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: tm
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: now
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tm
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773449
FRAGMENT_COUNT: 8
  ORIGINAL[0]: frame -> type != 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 2
  ORIGINAL[1]: frame -> type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: type
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772359
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 30064772170
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (ret = av_parse_cpu_caps(&flags,arg)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( &flags , VAR2 ) ) < 0
  ORIGINAL[1]: av_force_cpu_flags(flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477082
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ( *(cur_opt++)) != '-'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( cur_opt++ ) ) != '-'
  ORIGINAL[1]: po = find_option(options,cur_opt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[2]: po -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: po -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po -> flags
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640601
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640431
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772969
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret <  *size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < *size
  ORIGINAL[1]: *size
  TYPE[1]: CALL
  TOKENIZED[1]: *size
  ORIGINAL[2]: ( *size)++
  TYPE[2]: CALL
  TOKENIZED[2]: ( *size ) ++
  ORIGINAL[3]: *size
  TYPE[3]: CALL
  TOKENIZED[3]: *size
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476830
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772696
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772565
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *codec = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *codec = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477943
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: av_get_sample_fmt_string(fmt_str,(sizeof(fmt_str)),i)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 )
  ORIGINAL[2]: sizeof(fmt_str)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: fmt_str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt_str
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771484
FRAGMENT_COUNT: 10
  ORIGINAL[0]: i < g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: g -> nb_opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: ret < 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 0
  ORIGINAL[4]: nb_opts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: g
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ret
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ret
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478398
FRAGMENT_COUNT: 8
  ORIGINAL[0]: buf -> w != s -> width || buf -> h != s -> height || (buf -> pix_fmt) != (s -> pix_fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != VAR3 -> VAR4 || VAR1 -> VAR5 != VAR3 -> VAR6 || ( VAR1 -> VAR7 ) != ( VAR3 -> VAR7 )
  ORIGINAL[1]: (ret = alloc_buffer(pool,s,&buf)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 , &buf ) ) < 0
  ORIGINAL[2]: frame -> opaque
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: frame -> type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: frame -> extended_data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: frame -> data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: data
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772712
FRAGMENT_COUNT: 3
  ORIGINAL[0]: descr[64]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 64 ]
  ORIGINAL[1]: descr[64]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 64 ]
  ORIGINAL[2]: descr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771716
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *g = octx -> cur_group
  TYPE[0]: CALL
  TOKENIZED[0]: *g = VAR1 -> VAR2
  ORIGINAL[1]: *g
  TYPE[1]: CALL
  TOKENIZED[1]: *g
  ORIGINAL[2]: octx -> cur_group
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: octx -> cur_group
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: cur_group
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: octx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: octx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: octx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772713
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772515
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *const *da = a
  TYPE[0]: CALL
  TOKENIZED[0]: *const *da = VAR1
  ORIGINAL[1]: da
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: db
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477498
FRAGMENT_COUNT: 5
  ORIGINAL[0]: max = (strtol(arg,&tail,'\\n'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , &tail , '\\n' ) )
  ORIGINAL[1]: strtol(arg,&tail,'\\n')
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &tail , '\\n' )
  ORIGINAL[2]: max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478136
FRAGMENT_COUNT: 8
  ORIGINAL[0]: check_stream_specifier(s,st,(p + 1))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , ( VAR3 + 1 ) )
  ORIGINAL[1]: &cc
  TYPE[1]: CALL
  TOKENIZED[1]: &cc
  ORIGINAL[2]: &cc
  TYPE[2]: CALL
  TOKENIZED[2]: &cc
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: cc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: cc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: cc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772684
FRAGMENT_COUNT: 10
  ORIGINAL[0]: strcmp(codec -> name,desc -> name)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR2 )
  ORIGINAL[1]: desc -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: printf(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: desc -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: name
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: desc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064773424
FRAGMENT_COUNT: 4
  ORIGINAL[0]: **pool = buf -> pool
  TYPE[0]: CALL
  TOKENIZED[0]: **pool = VAR1 -> VAR2
  ORIGINAL[1]: buf -> pool
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477773
FRAGMENT_COUNT: 6
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AVMEDIA_TYPE_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_DATA
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_SUBTITLE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVMEDIA_TYPE_ATTACHMENT
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640342
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < argc
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < argc;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478448
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *pool
  TYPE[0]: CALL
  TOKENIZED[0]: *pool
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477625
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags & 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 4
  ORIGINAL[1]: *cfg = swscale_configuration()
  TYPE[1]: CALL
  TOKENIZED[1]: *cfg = FUN1 ( )
  ORIGINAL[2]: swscale_configuration()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: cfg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: cfg
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476867
FRAGMENT_COUNT: 4
  ORIGINAL[0]: type == 0x80 && ((int )d) != d
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0x80 && ( ( int ) VAR2 ) != VAR2
  ORIGINAL[1]: error = \
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = \
  ORIGINAL[2]: error
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: error
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477672
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640475
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(i == nb_codecs)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == VAR2 )

CENTER_NODE: 30064772687
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 47244640421
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477429
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: i < sizeof(log_levels) / sizeof(log_levels[0])
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < sizeof ( VAR2 ) / sizeof ( VAR2 [ 0 ] )
  ORIGINAL[2]: sizeof(log_levels)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: log_levels[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: log_levels
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: log_levels
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: log_levels
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772621
FRAGMENT_COUNT: 11
  ORIGINAL[0]: codec = next_codec_for_id(desc -> id,codec,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , 0 )
  ORIGINAL[1]: strcmp(codec -> name,desc -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR2 )
  ORIGINAL[2]: codec -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: name
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: codec
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: codec
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477925
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !av_get_standard_channel_layout(i,&layout,&name)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_get_standard_channel_layout ( VAR1 , &layout , &name )
  ORIGINAL[1]: &layout
  TYPE[1]: CALL
  TOKENIZED[1]: &layout
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: layout
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: layout
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: layout
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773004
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret = avformat_match_stream_specifier(s,st,spec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avformat_match_stream_specifier(s,st,spec)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: spec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771253
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772507
FRAGMENT_COUNT: 5
  ORIGINAL[0]: prev = (av_codec_next(prev))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR1 ) )
  ORIGINAL[1]: av_codec_next(prev)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: (prev -> id) == id && ((encoder?av_codec_is_encoder(prev) : av_codec_is_decoder(prev)))
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR2 && ( ( encoder?av_codec_is_encoder ( VAR1 ) : FUN1 ( VAR1 ) ) )
  ORIGINAL[3]: prev
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: prev
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477970
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: name
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772358
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 68719477216
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p -> sep
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: p -> sep
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sep
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771861
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&octx -> groups))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &octx -> VAR1 ) )
  ORIGINAL[1]: &octx -> groups
  TYPE[1]: CALL
  TOKENIZED[1]: &octx -> VAR1
  ORIGINAL[2]: octx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640279
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0

CENTER_NODE: 30064771607
FRAGMENT_COUNT: 3
  ORIGINAL[0]: opt_stripped[128]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 128 ]
  ORIGINAL[1]: opt_stripped[128]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 128 ]
  ORIGINAL[2]: opt_stripped
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640368
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640411
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773191
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: av_mallocz((s -> nb_streams) * sizeof(( *opts)))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 -> VAR2 ) * sizeof ( ( *opts ) ) )
  ORIGINAL[2]: (s -> nb_streams) * sizeof(( *opts))
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) * sizeof ( ( *opts ) )
  ORIGINAL[3]: s -> nb_streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: sizeof(( *opts))
  TYPE[4]: CALL
  TOKENIZED[4]: sizeof ( ( *opts ) )

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771268
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p?(p - name) : strlen(name)
  TYPE[0]: CALL
  TOKENIZED[0]: p? ( VAR1 - VAR2 ) : FUN1 ( VAR2 )
  ORIGINAL[1]: p - name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640416
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771954
FRAGMENT_COUNT: 26
  ORIGINAL[0]: optindex < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: argv[optindex]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: ret >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0
  ORIGINAL[3]: av_log(((void *)0),48,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( void * ) 0 ) , 48 , \
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: argv[optindex]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ]
  ORIGINAL[6]: optindex++
  TYPE[6]: CALL
  TOKENIZED[6]: optindex++
  ORIGINAL[7]: ret != -((int )((0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24))
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 != - ( ( int ) ( ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24 ) )
  ORIGINAL[8]: -((int )((0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24))
  TYPE[8]: CALL
  TOKENIZED[8]: - ( ( int ) ( ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24 ) )
  ORIGINAL[9]: (int )((0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24)
  TYPE[9]: CALL
  TOKENIZED[9]: ( int ) ( ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24 )
  ORIGINAL[10]: (0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24
  TYPE[10]: CALL
  TOKENIZED[10]: ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24
  ORIGINAL[11]: 0xF8 | 'O' << 8 | 'P' << 16
  TYPE[11]: CALL
  TOKENIZED[11]: 0xF8 | 'O' << 8 | 'P' << 16
  ORIGINAL[12]: 0xF8 | 'O' << 8
  TYPE[12]: CALL
  TOKENIZED[12]: 0xF8 | 'O' << 8
  ORIGINAL[13]: 'O' << 8
  TYPE[13]: CALL
  TOKENIZED[13]: 'O' << 8
  ORIGINAL[14]: 'P' << 16
  TYPE[14]: CALL
  TOKENIZED[14]: 'P' << 16
  ORIGINAL[15]: ((unsigned int )'T') << 24
  TYPE[15]: CALL
  TOKENIZED[15]: ( ( unsigned int ) 'T' ) << 24
  ORIGINAL[16]: (unsigned int )'T'
  TYPE[16]: CALL
  TOKENIZED[16]: ( unsigned int ) 'T'
  ORIGINAL[17]: continue;
  TYPE[17]: CONTROL_STRUCTURE
  TOKENIZED[17]: continue ;
  ORIGINAL[18]: optindex
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: argc
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ret
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: opt
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: argv
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: optindex
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: optindex
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: ret
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1

CENTER_NODE: 68719477514
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_strerror(err,errbuf,sizeof(errbuf))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , sizeof ( VAR2 ) )
  ORIGINAL[1]: sizeof(errbuf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errbuf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: errbuf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 16
  ORIGINAL[0]: (po -> flags & req_flags) != req_flags || alt_flags && !(po -> flags & alt_flags)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 & VAR3 ) != VAR3 || VAR4 && ! ( VAR1 -> VAR2 & VAR4 )
  ORIGINAL[1]: po -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: po -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: po -> flags & rej_flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 & VAR3
  ORIGINAL[4]: po -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: flags
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: po
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: po
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: rej_flags
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: po
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: po
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: po
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: po
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244640406
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772396
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ifmt = av_iformat_next(ifmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: name == ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640474
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640499
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !name
  TYPE[0]: CALL
  TOKENIZED[0]: !name

CENTER_NODE: 68719478512
FRAGMENT_COUNT: 6
  ORIGINAL[0]: out_file = fopen(out_filename, \
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: fopen(out_filename, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: out_filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: out_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: out_filename
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: out_file
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478012
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !( *topic)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *topic )
  ORIGINAL[1]: show_help_default(topic,par)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: par
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: par
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: topic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: par
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771169
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: AV_PIX_FMT_YUV420P
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_PIX_FMT_YUV420P
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772855
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: fmt -> priv_class
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: show_help_children(fmt -> priv_class,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , 1 )
  ORIGINAL[3]: fmt -> priv_class
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: priv_class
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: priv_class
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

