# Tokenized code fragments for 153009-v1.0.0-bad
# Total center nodes processed: 194
# Total code fragments found: 840

CENTER_NODE: 30064776745
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> disposition
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> disposition & 0x0100
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x0100
  ORIGINAL[2]: st -> disposition
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> disposition
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: disposition
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640833
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771561
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {{(\
  TYPE[0]: CALL
  TOKENIZED[0]: { { ( \
  ORIGINAL[1]: {(\
  TYPE[1]: CALL
  TOKENIZED[1]: { ( \
  ORIGINAL[2]: AV_CODEC_ID_MPEG4
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_VIDEO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641205
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775162
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: ((const int [6UL]){(24), (30), (60), (12), (15), (48)})[i - 60 * 12]
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) } ) [ VAR1 - 60 * 12 ]
  ORIGINAL[2]: (const int [6UL]){(24), (30), (60), (12), (15), (48)}
  TYPE[2]: CALL
  TOKENIZED[2]: ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }
  ORIGINAL[3]: {(24), (30), (60), (12), (15), (48)}
  TYPE[3]: CALL
  TOKENIZED[3]: { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476849
FRAGMENT_COUNT: 7
  ORIGINAL[0]: va_start(argptr, format)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: vfprintf(stonesoup_printf_context, format, argptr)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: <global> stonesoup_printf_context
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: format
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: <global> stonesoup_printf_context
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1
  ORIGINAL[6]: stonesoup_printf_context
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771236
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 63 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 63 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 63 << 8

CENTER_NODE: 30064777402
FRAGMENT_COUNT: 14
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> streams[i] -> id == id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[3]: s -> streams[i] -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[4]: s -> streams[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: s -> streams
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: - 1
  TYPE[6]: CALL
  TOKENIZED[6]: - 1
  ORIGINAL[7]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[8]: streams
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: id
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: id
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244641242
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244641320
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777363
FRAGMENT_COUNT: 13
  ORIGINAL[0]: *ptr && ( *ptr) != '\\\
  TYPE[0]: CALL
  TOKENIZED[0]: *ptr && ( *ptr ) != '\\\
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: ( *ptr) == '\\\\'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *ptr ) == '\\\\'
  ORIGINAL[3]: *ptr
  TYPE[3]: CALL
  TOKENIZED[3]: *ptr
  ORIGINAL[4]: !ptr[1]
  TYPE[4]: CALL
  TOKENIZED[4]: !ptr [ 1 ]
  ORIGINAL[5]: ptr[1]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ 1 ]
  ORIGINAL[6]: dest && dest < dest_end
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 && VAR1 < VAR2
  ORIGINAL[7]: ptr++
  TYPE[7]: CALL
  TOKENIZED[7]: ptr++
  ORIGINAL[8]: ptr
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ptr
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: dest
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ptr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ptr
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776315
FRAGMENT_COUNT: 12
  ORIGINAL[0]: s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat -> read_close
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: s -> iformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (s -> iformat -> read_close)(s)
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[4]: s -> iformat -> read_close
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: read_close
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: read_close
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064773626
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> skip_samples
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ((union unaligned_32 *)p) -> l = (st -> skip_samples)
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( union VAR1 * ) VAR2 ) -> VAR3 = ( VAR4 -> VAR5 )
  ORIGINAL[2]: ((union unaligned_32 *)p) -> l
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( union VAR1 * ) VAR2 ) -> VAR3
  ORIGINAL[3]: st -> skip_samples
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> skip_samples
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: skip_samples
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640689
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476891
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771365
FRAGMENT_COUNT: 15
  ORIGINAL[0]: fmt = av_oformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> mime_type && mime_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR2
  ORIGINAL[2]: fmt -> mime_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> mime_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: mime_type
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: mime_type
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: fmt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: fmt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: fmt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 30064771164
FRAGMENT_COUNT: 3
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: strlen(dirpath) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[2]: strlen(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \

CENTER_NODE: 30064771535
FRAGMENT_COUNT: 5
  ORIGINAL[0]: score > score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: score_max = score
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: score_max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479482
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avctx -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> info -> found_decoder >= 0 && (avctx -> sample_fmt) == AV_SAMPLE_FMT_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 >= 0 && ( VAR4 -> VAR5 ) == VAR6
  ORIGINAL[2]: avctx -> sample_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> sample_rate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: sample_rate
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776207
FRAGMENT_COUNT: 5
  ORIGINAL[0]: &st -> codec -> subtitle_header
  TYPE[0]: CALL
  TOKENIZED[0]: &st -> VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> subtitle_header
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: subtitle_header
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776272
FRAGMENT_COUNT: 18
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: s -> programs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: &s -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s -> programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: programs
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064774377
FRAGMENT_COUNT: 21
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st = ic -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[3]: ic -> streams[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: ic -> streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[6]: st -> duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (int64_t )0x8000000000000000UL
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[8]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[9]: ic -> duration
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: (int64_t )0x8000000000000000UL
  TYPE[10]: CALL
  TOKENIZED[10]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[11]: for (i = 0;i < ic -> nb_streams;i++)
  TYPE[11]: CONTROL_STRUCTURE
  TOKENIZED[11]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[12]: streams
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: duration
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: duration
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: i
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 68719477720
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> info
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> has_b_frames < 3
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 < 3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640848
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477635
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777483
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret2 && !ret1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && !ret1
  ORIGINAL[1]: !ret1
  TYPE[1]: CALL
  TOKENIZED[1]: !ret1
  ORIGINAL[2]: ret2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478551
FRAGMENT_COUNT: 11
  ORIGINAL[0]: st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> last_IP_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> first_dts == ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> cur_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> cur_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> reference_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> probe_packets
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: cur_dts
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064775081
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_codec_get_tag2 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: av_codec_get_tag2(tags,id,&tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[2]: &tag
  TYPE[2]: CALL
  TOKENIZED[2]: &tag
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776168
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avio_pause(s -> pb,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , 1 )
  ORIGINAL[3]: s -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: - 38
  TYPE[4]: CALL
  TOKENIZED[4]: - 38
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pb
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641148
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777191
FRAGMENT_COUNT: 4
  ORIGINAL[0]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[1]: {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[2]: hex_table_uc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hex_table_lc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476964
FRAGMENT_COUNT: 7
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: av_strncasecmp(name,names,len)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: names
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: names
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: names
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773220
FRAGMENT_COUNT: 14
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec -> sample_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec -> sample_rate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> codec -> time_base . num != 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3 . VAR4 != 0
  ORIGINAL[5]: st -> codec -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> codec -> time_base
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[8]: codec
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: time_base
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719480226
FRAGMENT_COUNT: 4
  ORIGINAL[0]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[1]: ic -> programs[i] -> stream_index[j] == s
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ] == VAR6
  ORIGINAL[2]: ic -> programs[i] -> stream_index[j]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ]
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480397
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (s -> nb_streams) >= 2147483647 / sizeof(( *streams))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) >= 2147483647 / sizeof ( ( *streams ) )
  ORIGINAL[1]: streams = (av_realloc((s -> streams),(s -> nb_streams + 1) * sizeof(( *streams))))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( ( VAR2 -> VAR1 ) , ( VAR2 -> VAR3 + 1 ) * sizeof ( ( *streams ) ) ) )
  ORIGINAL[2]: av_realloc((s -> streams),(s -> nb_streams + 1) * sizeof(( *streams)))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( VAR1 -> VAR2 ) , ( VAR1 -> VAR3 + 1 ) * sizeof ( ( *streams ) ) )
  ORIGINAL[3]: streams
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: streams
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481522
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481589
FRAGMENT_COUNT: 3
  ORIGINAL[0]: aquitaine_subincandescent(ulcerable_landlubbing,vouchees_idealists)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: ulcerable_landlubbing
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: vouchees_idealists
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640686
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640855
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640852
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476895
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> pts_wrap_behavior != 0 && st -> pts_wrap_reference != ((int64_t )0x8000000000000000UL) && timestamp != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 0 && VAR1 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 != ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> pts_wrap_behavior
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_reference
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> pts_wrap_behavior
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pts_wrap_behavior
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479654
FRAGMENT_COUNT: 3
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_S32BE : AV_CODEC_ID_PCM_S32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_S32BE : VAR1
  ORIGINAL[1]: be
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640811
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641073
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478731
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477781
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !first_program
  TYPE[0]: CALL
  TOKENIZED[0]: !first_program
  ORIGINAL[1]: program = first_program
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: first_program
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: first_program
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773918
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ts = read_timestamp(s,stream_index,ppos,pos_limit)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: read_timestamp(s,stream_index,ppos,pos_limit)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640836
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641174
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776911
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: av_gettime() / 1000 * 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[2]: 2208988800ULL * 1000000ULL
  TYPE[2]: CALL
  TOKENIZED[2]: 2208988800ULL * 1000000ULL

CENTER_NODE: 47244640694
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640723
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772243
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !mux && enc -> bit_rate > 0 && size > 0 && enc -> sample_rate > 0 && enc -> block_align > 1
  TYPE[0]: CALL
  TOKENIZED[0]: !mux && VAR1 -> VAR2 > 0 && VAR3 > 0 && VAR1 -> VAR4 > 0 && VAR1 -> VAR5 > 1
  ORIGINAL[1]: !mux && enc -> bit_rate > 0 && size > 0 && enc -> sample_rate > 0
  TYPE[1]: CALL
  TOKENIZED[1]: !mux && VAR1 -> VAR2 > 0 && VAR3 > 0 && VAR1 -> VAR4 > 0
  ORIGINAL[2]: enc -> block_align > 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 > 1
  ORIGINAL[3]: enc -> block_align
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 30064775132
FRAGMENT_COUNT: 34
  ORIGINAL[0]: s -> chapters[i] -> end == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == ( ( VAR5 ) 0x8000000000000000UL )
  ORIGINAL[1]: j < s -> nb_chapters
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: s -> nb_chapters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: j++
  TYPE[3]: CALL
  TOKENIZED[3]: j++
  ORIGINAL[4]: *ch1 = s -> chapters[j]
  TYPE[4]: CALL
  TOKENIZED[4]: *ch1 = VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: s -> chapters[j]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[6]: s -> chapters
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: next_start = av_rescale_q(ch1 -> start,ch1 -> time_base,ch -> time_base)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR2 -> VAR4 , VAR5 -> VAR4 )
  ORIGINAL[8]: av_rescale_q(ch1 -> start,ch1 -> time_base,ch -> time_base)
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR3 , VAR4 -> VAR3 )
  ORIGINAL[9]: ch1 -> start
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: ch1 -> time_base
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: ch -> time_base
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: j != i && next_start > ch -> start && next_start < end
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 != VAR2 && VAR3 > VAR4 -> VAR5 && VAR3 < VAR6
  ORIGINAL[13]: j != i && next_start > ch -> start
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 != VAR2 && VAR3 > VAR4 -> VAR5
  ORIGINAL[14]: j != i
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 != VAR2
  ORIGINAL[15]: for (j = 0;j < s -> nb_chapters;j++)
  TYPE[15]: CONTROL_STRUCTURE
  TOKENIZED[15]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; j++ )
  ORIGINAL[16]: nb_chapters
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: chapters
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: start
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: time_base
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: time_base
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: j
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: s
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: j
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: ch1
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: s
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: j
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: next_start
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: ch1
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: ch1
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: ch
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: j
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: i
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: ch
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1

CENTER_NODE: 47244640555
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777529
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !data
  TYPE[0]: CALL
  TOKENIZED[0]: !data
  ORIGINAL[1]: - 12
  TYPE[1]: CALL
  TOKENIZED[1]: - 12

CENTER_NODE: 30064773331
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl -> VAR1
  ORIGINAL[1]: *pkt_buffer_end = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buffer_end = ( ( void * ) 0 )
  ORIGINAL[2]: *pkt_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buffer_end
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773916
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774301
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478532
FRAGMENT_COUNT: 4
  ORIGINAL[0]: first_audio_index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[2]: st -> codec -> codec_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: AVMEDIA_TYPE_AUDIO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641153
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640598
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641170
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640868
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641232
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640863
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477353
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl -> pkt =  *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = *pkt
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641195
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641165
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772377
FRAGMENT_COUNT: 11
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pktl == s -> parse_queue_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == VAR2 -> VAR3
  ORIGINAL[3]: s -> parse_queue_end
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: next
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: next
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: parse_queue_end
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pktl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pktl
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640891
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2

CENTER_NODE: 30064774234
FRAGMENT_COUNT: 4
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ff_read_frame_flush(s)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477364
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> streams[i] -> disposition & 0x0400 && (s -> streams[i] -> discard) < AVDISCARD_ALL
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 & 0x0400 && ( VAR1 -> VAR2 [ VAR3 ] -> VAR5 ) < VAR6
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> raw_packet_buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> raw_packet_buffer_end
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: streams
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: copy
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771768
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: av_probe_input_format2(&pd,0,&score)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &pd , 0 , &score )
  ORIGINAL[2]: &score
  TYPE[2]: CALL
  TOKENIZED[2]: &score
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640681
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771227
FRAGMENT_COUNT: 3
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c - 32
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - 32
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640690
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641046
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777502
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec_id == (ofmt -> video_codec) || codec_id == (ofmt -> audio_codec) || codec_id == (ofmt -> subtitle_codec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( VAR2 -> VAR3 ) || VAR1 == ( VAR2 -> VAR4 ) || VAR1 == ( VAR2 -> VAR5 )
  ORIGINAL[1]: codec_id == (ofmt -> video_codec) || codec_id == (ofmt -> audio_codec)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == ( VAR2 -> VAR3 ) || VAR1 == ( VAR2 -> VAR4 )
  ORIGINAL[2]: codec_id == (ofmt -> subtitle_codec)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == ( VAR2 -> VAR3 )
  ORIGINAL[3]: ofmt -> subtitle_codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec_id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776551
FRAGMENT_COUNT: 4
  ORIGINAL[0]: v = (lrintf((d * 100)))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( ( VAR2 * 100 ) ) )
  ORIGINAL[1]: lrintf((d * 100))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 * 100 ) )
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: sizeof(\
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( \

CENTER_NODE: 68719478677
FRAGMENT_COUNT: 7
  ORIGINAL[0]: b - a > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 > 1
  ORIGINAL[1]: timestamp = entries[m] . timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 [ VAR3 ] . VAR1
  ORIGINAL[2]: timestamp >= wanted_timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= VAR2
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: wanted_timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: timestamp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774672
FRAGMENT_COUNT: 13
  ORIGINAL[0]: ic -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_seek(ic -> pb,offset,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 , 0 )
  ORIGINAL[2]: ic -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: end_time == ((int64_t )0x8000000000000000UL) && filesize > 250000LL << retry && ++retry <= 4
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL ) && VAR3 > 250000LL << VAR4 && ++retry <= 4
  ORIGINAL[4]: ic -> pb
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: offset
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719478562
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: st -> cur_dts = av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = FUN1 ( VAR3 , VAR1 -> VAR4 . VAR5 * ( ( VAR6 ) VAR7 -> VAR4 . VAR8 ) , VAR1 -> VAR4 . VAR8 * ( ( VAR6 ) VAR7 -> VAR4 . VAR5 ) )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480795
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !percentd_found
  TYPE[0]: CALL
  TOKENIZED[0]: !percentd_found
  ORIGINAL[1]: *q
  TYPE[1]: CALL
  TOKENIZED[1]: *q
  ORIGINAL[2]: q
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: q
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: q
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: q
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: q
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476798
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fprintf(stdout, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: out_filename
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stdout
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: shmid
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480482
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> chapters[i] -> id == id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[2]: s -> chapters[i] -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481352
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477820
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> first_dts != ((int64_t )0x8000000000000000UL) || dts == ((int64_t )0x8000000000000000UL) || st -> cur_dts == ((int64_t )0x8000000000000000UL) || is_relative(dts)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR4 == ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR5 == ( ( VAR3 ) 0x8000000000000000UL ) || FUN1 ( VAR4 )
  ORIGINAL[1]: st -> first_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: dts - ((st -> cur_dts) - (9223372036854775807L - (1LL << 48)))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - ( ( VAR2 -> VAR3 ) - ( 9223372036854775807L - ( 1LL << 48 ) ) )
  ORIGINAL[3]: (st -> cur_dts) - (9223372036854775807L - (1LL << 48))
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) - ( 9223372036854775807L - ( 1LL << 48 ) )
  ORIGINAL[4]: dts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: dts
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641188
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481556
FRAGMENT_COUNT: 5
  ORIGINAL[0]: livishly_slumbrous > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0
  ORIGINAL[1]: chasteweed_frillers = ((char *)((char *)( *( *( *( *( *( *( *( *( *( *powderhorn_drabbler))))))))))))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( char * ) ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *powderhorn_drabbler ) ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[2]: (char *)((char *)( *( *( *( *( *( *( *( *( *( *powderhorn_drabbler)))))))))))
  TYPE[2]: CALL
  TOKENIZED[2]: ( char * ) ( ( char * ) ( * ( * ( * ( * ( * ( * ( * ( * ( * ( *powderhorn_drabbler ) ) ) ) ) ) ) ) ) ) )
  ORIGINAL[3]: chasteweed_frillers
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: chasteweed_frillers
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771596
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ic -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: iformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: read_header
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641184
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774015
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_log(s,48,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[1]: av_ts_make_string(((char [32]){(0)}),target_ts)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[2]: (char [32]){(0)}
  TYPE[2]: CALL
  TOKENIZED[2]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: target_ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776532
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j++
  TYPE[0]: CALL
  TOKENIZED[0]: j++
  ORIGINAL[1]: program -> stream_index[j] == idx
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] == VAR4
  ORIGINAL[2]: for (j = 0;j < program -> nb_stream_indexes;j++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; j++ )
  ORIGINAL[3]: j
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640893
FRAGMENT_COUNT: 1
  ORIGINAL[0]: tag == tags[i] . tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 [ VAR3 ] . VAR1

CENTER_NODE: 47244640682
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772701
FRAGMENT_COUNT: 8
  ORIGINAL[0]: pktl = get_next_pkt(s,st,pktl)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR1 )
  ORIGINAL[1]: get_next_pkt(s,st,pktl)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: pktl -> pkt . stream_index != stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 != VAR3
  ORIGINAL[3]: pktl -> pkt . pts == pktl -> pkt . dts && (pktl -> pkt . dts == ((int64_t )0x8000000000000000UL) || pktl -> pkt . dts == st -> first_dts) && !pktl -> pkt . duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3 == VAR1 -> VAR2 . VAR4 && ( VAR1 -> VAR2 . VAR4 == ( ( VAR5 ) 0x8000000000000000UL ) || VAR1 -> VAR2 . VAR4 == VAR6 -> VAR7 ) && !pktl -> VAR2 . VAR8
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641180
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776601
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *p) == 0xa
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) == 0xa
  ORIGINAL[1]: av_log(ctx,32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 32 , \
  ORIGINAL[2]: ctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: indent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640859
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771433
FRAGMENT_COUNT: 5
  ORIGINAL[0]: size = ffio_limit(s,size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR1 )
  ORIGINAL[1]: ffio_limit(s,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771232
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 30064774158
FRAGMENT_COUNT: 6
  ORIGINAL[0]: avio_size(s -> pb)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771935
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !strcmp(s -> iformat -> name,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[1]: (ret = ff_id3v2_parse_apic(s,&id3v2_extra_meta)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , &id3v2_extra_meta ) ) < 0
  ORIGINAL[2]: avformat_queue_attached_pictures(s)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: id3v2_extra_meta
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774397
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < ic -> nb_streams;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481257
FRAGMENT_COUNT: 8
  ORIGINAL[0]: rel[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: !base || strstr(rel,\
  TYPE[1]: CALL
  TOKENIZED[1]: !base || FUN1 ( VAR1 , \
  ORIGINAL[2]: rel[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: path_query != ((void *)0)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[4]: *path_query = '\\0'
  TYPE[4]: CALL
  TOKENIZED[4]: *path_query = '\\0'
  ORIGINAL[5]: rel[0]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ 0 ]
  ORIGINAL[6]: rel
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: rel
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640693
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479303
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> start_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[4]: st -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: duration
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773659
FRAGMENT_COUNT: 4
  ORIGINAL[0]: free_packet_buffer(&s -> packet_buffer,&s -> packet_buffer_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: &s -> packet_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477300
FRAGMENT_COUNT: 8
  ORIGINAL[0]: score <= 100 / 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 100 / 4
  ORIGINAL[1]: av_log(logctx,48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[2]: ( *fmt) -> name
  TYPE[2]: CALL
  TOKENIZED[2]: ( *fmt ) -> VAR1
  ORIGINAL[3]: probe_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: probe_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: logctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: probe_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: score
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773786
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (unsigned int )( *nb_index_entries)
  TYPE[0]: CALL
  TOKENIZED[0]: ( unsigned int ) ( *nb_index_entries )
  ORIGINAL[1]: *nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: *nb_index_entries
  ORIGINAL[2]: *nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: *nb_index_entries
  ORIGINAL[3]: nb_index_entries
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: nb_index_entries
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771470
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[1]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[2]: sizeof(buf)
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( VAR1 )
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filename
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641199
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480986
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ls = &p[strlen(p)]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = &p [ FUN1 ( VAR2 ) ]
  ORIGINAL[1]: &p[strlen(p)]
  TYPE[1]: CALL
  TOKENIZED[1]: &p [ FUN1 ( VAR1 ) ]
  ORIGINAL[2]: ls
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ls
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ls
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640556
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640736
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480936
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: level
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771452
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: av_get_packet(s,pkt,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641202
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480318
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat -> read_play
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777039
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: av_log(avcl,level,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: avcl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: level
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476882
FRAGMENT_COUNT: 9
  ORIGINAL[0]: *stonesoup_s != (char)0
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_s != ( char ) 0
  ORIGINAL[1]: *stonesoup_s
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_s
  ORIGINAL[2]: *stonesoup_tainted_buff
  TYPE[2]: CALL
  TOKENIZED[2]: *stonesoup_tainted_buff
  ORIGINAL[3]: stonesoup_s - stonesoup_shm
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: stonesoup_s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stonesoup_shm
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771551
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_probe_input_format2(pd,is_opened,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &score )
  ORIGINAL[1]: &score
  TYPE[1]: CALL
  TOKENIZED[1]: &score
  ORIGINAL[2]: pd
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: is_opened
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478587
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 2 * i < st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: 2 * VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: 2 * i
  TYPE[1]: CALL
  TOKENIZED[1]: 2 * VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776753
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719480861
FRAGMENT_COUNT: 4
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: level
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641128
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479684
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (codec_tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: *tag
  TYPE[1]: CALL
  TOKENIZED[1]: *tag
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641078
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640932
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641233
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ( *p) == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) == '\\0'

CENTER_NODE: 30064772041
FRAGMENT_COUNT: 7
  ORIGINAL[0]: end || ff_log2_c((pd -> buf_size)) != ff_log2_c((pd -> buf_size - pkt -> size))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 || FUN1 ( ( VAR2 -> VAR3 ) ) != FUN1 ( ( VAR2 -> VAR3 - VAR4 -> VAR5 ) )
  ORIGINAL[1]: score = set_codec_from_probe_data(s,st,pd)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: set_codec_from_probe_data(s,st,pd)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pd
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> codec -> codec_id = s -> audio_codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;

CENTER_NODE: 30064772271
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> r_frame_rate . num && !pc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 && !pc
  ORIGINAL[1]: *pden = st -> r_frame_rate . num
  TYPE[1]: CALL
  TOKENIZED[1]: *pden = VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: *pden
  TYPE[2]: CALL
  TOKENIZED[2]: *pden
  ORIGINAL[3]: st -> r_frame_rate . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: break;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: break ;

CENTER_NODE: 47244641177
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775175
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3
  ORIGINAL[1]: c -> time_base
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: time_base
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: num
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640701
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640722
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641191
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479453
FRAGMENT_COUNT: 26
  ORIGINAL[0]: ic -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (!strcmp(ic -> iformat -> name,\
  TYPE[1]: CALL
  TOKENIZED[1]: ( !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[2]: ic -> duration_estimation_method = AVFMT_DURATION_FROM_PTS
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR3
  ORIGINAL[3]: ic -> duration_estimation_method
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: has_duration(ic)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: ic -> duration_estimation_method = AVFMT_DURATION_FROM_STREAM
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 = VAR3
  ORIGINAL[6]: ic -> duration_estimation_method
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ic -> duration_estimation_method = AVFMT_DURATION_FROM_BITRATE
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 = VAR3
  ORIGINAL[8]: ic -> duration_estimation_method
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: update_stream_timings(ic)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 )
  ORIGINAL[10]: ic -> nb_streams
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: ic -> streams
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: ic -> start_time
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: ic -> duration
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: ic -> bit_rate
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: ic
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ic
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: ic
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ic
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ic
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: ic
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: ic
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: ic
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: ic
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1

CENTER_NODE: 47244640440
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772857
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pc && (st -> need_parsing) == AVSTREAM_PARSE_TIMESTAMPS
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ( VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: (st -> need_parsing) == AVSTREAM_PARSE_TIMESTAMPS
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: st -> need_parsing
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVSTREAM_PARSE_TIMESTAMPS
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640842
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;tags && tags[i];i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR2 && VAR2 [ VAR1 ] ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777705
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avci100_1080p_extradata[] = {(0), (0), (0), (0x1), (0x67), (0x7a), (0x0010), (0x29), (0xb6), (0xd4), (0x20), (0x22), (0x33), (0x19), (0xc6), (0x63), (0x23), (0x21), (0x1), (0x11), (0x98), (0xce), (0x33), (0x19), (0x18), (0x21), (0x0002), (0x56), (0xb9), (0x3d), (0x7d), (0x7e), (0x4f), (0xe3), (0x3F), (0x11), (0xf1), (0x9e), (0x0008), (0xb8), (0x8c), (0x54), (0x43), (0xc0), (0x78), (0x0002), (0x27), (0xe2), (0x70), (0x1e), (0x30), (0x0010), (0x0010), (0x14), (0), (0), (0x3), (0), (0x0004), (0), (0), (0x3), (0), (0xca), (0x0010), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0x1), (0x68), (0xce), (0x33), (0x48), (0xd0)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ ] = { ( 0 ) , ( 0 ) , ( 0 ) , ( 0x1 ) , ( 0x67 ) , ( 0x7a ) , ( 0x0010 ) , ( 0x29 ) , ( 0xb6 ) , ( 0xd4 ) , ( 0x20 ) , ( 0x22 ) , ( 0x33 ) , ( 0x19 ) , ( 0xc6 ) , ( 0x63 ) , ( 0x23 ) , ( 0x21 ) , ( 0x1 ) , ( 0x11 ) , ( 0x98 ) , ( 0xce ) , ( 0x33 ) , ( 0x19 ) , ( 0x18 ) , ( 0x21 ) , ( 0x0002 ) , ( 0x56 ) , ( 0xb9 ) , ( 0x3d ) , ( 0x7d ) , ( 0x7e ) , ( 0x4f ) , ( 0xe3 ) , ( 0x3F ) , ( 0x11 ) , ( 0xf1 ) , ( 0x9e ) , ( 0x0008 ) , ( 0xb8 ) , ( 0x8c ) , ( 0x54 ) , ( 0x43 ) , ( 0xc0 ) , ( 0x78 ) , ( 0x0002 ) , ( 0x27 ) , ( 0xe2 ) , ( 0x70 ) , ( 0x1e ) , ( 0x30 ) , ( 0x0010 ) , ( 0x0010 ) , ( 0x14 ) , ( 0 ) , ( 0 ) , ( 0x3 ) , ( 0 ) , ( 0x0004 ) , ( 0 ) , ( 0 ) , ( 0x3 ) , ( 0 ) , ( 0xca ) , ( 0x0010 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0x1 ) , ( 0x68 ) , ( 0xce ) , ( 0x33 ) , ( 0x48 ) , ( 0xd0 ) }
  ORIGINAL[1]: {(0), (0), (0), (0x1), (0x67), (0x7a), (0x0010), (0x29), (0xb6), (0xd4), (0x20), (0x22), (0x33), (0x19), (0xc6), (0x63), (0x23), (0x21), (0x1), (0x11), (0x98), (0xce), (0x33), (0x19), (0x18), (0x21), (0x0002), (0x56), (0xb9), (0x3d), (0x7d), (0x7e), (0x4f), (0xe3), (0x3F), (0x11), (0xf1), (0x9e), (0x0008), (0xb8), (0x8c), (0x54), (0x43), (0xc0), (0x78), (0x0002), (0x27), (0xe2), (0x70), (0x1e), (0x30), (0x0010), (0x0010), (0x14), (0), (0), (0x3), (0), (0x0004), (0), (0), (0x3), (0), (0xca), (0x0010), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0x1), (0x68), (0xce), (0x33), (0x48), (0xd0)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 0 ) , ( 0 ) , ( 0 ) , ( 0x1 ) , ( 0x67 ) , ( 0x7a ) , ( 0x0010 ) , ( 0x29 ) , ( 0xb6 ) , ( 0xd4 ) , ( 0x20 ) , ( 0x22 ) , ( 0x33 ) , ( 0x19 ) , ( 0xc6 ) , ( 0x63 ) , ( 0x23 ) , ( 0x21 ) , ( 0x1 ) , ( 0x11 ) , ( 0x98 ) , ( 0xce ) , ( 0x33 ) , ( 0x19 ) , ( 0x18 ) , ( 0x21 ) , ( 0x0002 ) , ( 0x56 ) , ( 0xb9 ) , ( 0x3d ) , ( 0x7d ) , ( 0x7e ) , ( 0x4f ) , ( 0xe3 ) , ( 0x3F ) , ( 0x11 ) , ( 0xf1 ) , ( 0x9e ) , ( 0x0008 ) , ( 0xb8 ) , ( 0x8c ) , ( 0x54 ) , ( 0x43 ) , ( 0xc0 ) , ( 0x78 ) , ( 0x0002 ) , ( 0x27 ) , ( 0xe2 ) , ( 0x70 ) , ( 0x1e ) , ( 0x30 ) , ( 0x0010 ) , ( 0x0010 ) , ( 0x14 ) , ( 0 ) , ( 0 ) , ( 0x3 ) , ( 0 ) , ( 0x0004 ) , ( 0 ) , ( 0 ) , ( 0x3 ) , ( 0 ) , ( 0xca ) , ( 0x0010 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0 ) , ( 0x1 ) , ( 0x68 ) , ( 0xce ) , ( 0x33 ) , ( 0x48 ) , ( 0xd0 ) }
  ORIGINAL[2]: avci100_1080p_extradata
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479541
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !codec
  TYPE[0]: CALL
  TOKENIZED[0]: !codec
  ORIGINAL[1]: options?options : &thread_opt
  TYPE[1]: CALL
  TOKENIZED[1]: options?options : &thread_opt
  ORIGINAL[2]: &thread_opt
  TYPE[2]: CALL
  TOKENIZED[2]: &thread_opt
  ORIGINAL[3]: options
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: options
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: thread_opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: options
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641251
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772350
FRAGMENT_COUNT: 13
  ORIGINAL[0]: (enc -> codec_type) != AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: !desc
  TYPE[1]: CALL
  TOKENIZED[1]: !desc
  ORIGINAL[2]: desc = avcodec_descriptor_get(enc -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[3]: avcodec_descriptor_get(enc -> codec_id)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[4]: enc -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: av_codec_set_codec_descriptor(enc,desc)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[6]: codec_id
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: enc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: enc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: desc
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: desc
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064776893
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ic -> programs[j] -> id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[1]: ic -> programs[j] -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[2]: k < ic -> programs[j] -> nb_stream_indexes
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[3]: ic -> programs[j] -> nb_stream_indexes
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[4]: ic -> programs[j] -> stream_index
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: ic -> programs[j]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[6]: ic -> programs
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: stream_index
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: j
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771405
FRAGMENT_COUNT: 9
  ORIGINAL[0]: remaining < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: !s -> maxsize || s -> maxsize < newsize
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1 || VAR2 -> VAR1 < VAR3
  ORIGINAL[2]: !s -> maxsize
  TYPE[2]: CALL
  TOKENIZED[2]: !s -> VAR1
  ORIGINAL[3]: s -> maxsize
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> maxsize < newsize
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 < VAR3
  ORIGINAL[5]: s -> maxsize
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: maxsize
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: newsize
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640305
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479082
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !(s -> iformat -> flags & 0x4000)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 -> VAR3 & 0x4000 )
  ORIGINAL[1]: seek_frame_generic(s,stream_index,timestamp,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: stream_index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: timestamp
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477007
FRAGMENT_COUNT: 6
  ORIGINAL[0]: type == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_AUDIO
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: type
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_AUDIO
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: type
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478382
FRAGMENT_COUNT: 19
  ORIGINAL[0]: s -> parse_queue
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> debug
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat -> flags & 0x0100 && pkt -> flags & 0x1 && pkt -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3 & 0x0100 && VAR4 -> VAR3 & 0x1 && VAR4 -> VAR5 != ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[4]: ff_reduce_index(s,st -> index)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[5]: s -> parse_queue
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: s -> parse_queue
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: s -> parse_queue_end
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: s -> debug
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 68719480932
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064777570
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_reduce(&frame_sample_aspect_ratio . num,&frame_sample_aspect_ratio . den,frame_sample_aspect_ratio . num,frame_sample_aspect_ratio . den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &frame_sample_aspect_ratio . VAR1 , &frame_sample_aspect_ratio . VAR2 , VAR3 . VAR1 , VAR3 . VAR2 , 2147483647 )
  ORIGINAL[1]: &frame_sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: &frame_sample_aspect_ratio . VAR1
  ORIGINAL[2]: &frame_sample_aspect_ratio . den
  TYPE[2]: CALL
  TOKENIZED[2]: &frame_sample_aspect_ratio . VAR1
  ORIGINAL[3]: frame_sample_aspect_ratio . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: frame_sample_aspect_ratio . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: frame_sample_aspect_ratio
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640685
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481402
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *(spec++)
  TYPE[0]: CALL
  TOKENIZED[0]: * ( spec++ )
  ORIGINAL[1]: type = AVMEDIA_TYPE_DATA
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_DATA
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: type
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064773867
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: &st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: &st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: &st -> VAR1
  ORIGINAL[3]: &st -> index_entries_allocated_size
  TYPE[3]: CALL
  TOKENIZED[3]: &st -> VAR1
  ORIGINAL[4]: pos
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: distance
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476945
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *p) != '\\0' && ( *p) != ',' && (q - ext1) < sizeof(ext1) - 1
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) != '\\0' && ( *p ) != ' , ' && ( VAR1 - VAR2 ) < sizeof ( VAR2 ) - 1
  ORIGINAL[1]: *q
  TYPE[1]: CALL
  TOKENIZED[1]: *q
  ORIGINAL[2]: ( *p) == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *p ) == '\\0'
  ORIGINAL[3]: ext
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: q
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: q
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: q
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: q
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777311
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pkt -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: src -> streams[pkt -> stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 -> VAR4 ]
  ORIGINAL[2]: pkt -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: stream_index
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640447
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777282
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_strlcat(str,hostname,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: str
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: hostname
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640845
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775852
FRAGMENT_COUNT: 24
  ORIGINAL[0]: st -> info -> fps_first_dts_idx
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: st -> info -> fps_first_dts_idx
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> info -> fps_first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> info -> fps_first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> info -> fps_first_dts_idx
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: st -> info -> fps_last_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> info -> fps_last_dts_idx
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: st -> info -> found_decoder
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[8]: st -> info -> codec_info_duration_fields
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[9]: st -> info -> codec_info_duration
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[10]: st -> info -> codec_info_duration_fields
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[11]: st -> info -> codec_info_duration
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[12]: st -> info -> duration_gcd
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[13]: st -> info -> duration_gcd
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[14]: st -> info -> duration_count
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[15]: j < 60 * 12 + 6
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 < 60 * 12 + 6
  ORIGINAL[16]: st -> info -> codec_info_duration
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[17]: st -> info
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: st -> info -> codec_info_duration
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[19]: st -> info -> duration_count
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[20]: info
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: codec_info_duration
  TYPE[21]: FIELD_IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: st
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1

CENTER_NODE: 68719477018
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: name
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: short_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640631
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719481509
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !strcmp(pattern,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: len_p = (strlen(pattern))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 ) )
  ORIGINAL[2]: len_h = (strlen(hostname))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( FUN1 ( VAR2 ) )
  ORIGINAL[3]: strlen(hostname)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: len_h
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hostname
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len_h
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774591
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> codec -> bit_rate > 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 > 0
  ORIGINAL[2]: st -> codec -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: bit_rate += st -> codec -> bit_rate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 += VAR2 -> VAR3 -> VAR1
  ORIGINAL[4]: st -> codec -> bit_rate
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: bit_rate
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: bit_rate
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244641168
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478182
FRAGMENT_COUNT: 10
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: *pktl =  *pkt_buf
  TYPE[1]: CALL
  TOKENIZED[1]: *pktl = *pkt_buf
  ORIGINAL[2]: *pkt_buf
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buf
  ORIGINAL[3]: pktl -> next
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pktl -> pkt
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt_buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pktl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pktl
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064776447
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ac -> programs[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: &ac -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: &ac -> VAR1
  ORIGINAL[3]: ac -> programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: programs
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ac
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ac
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ac
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719481351
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064777006
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640575
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641157
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640711
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641068
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476924
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776106
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec_id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: decoder_ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641048
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: min_ts > ts || max_ts < ts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2 || VAR3 < VAR2
  ORIGINAL[1]: s -> seek2any
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: seek2any
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

