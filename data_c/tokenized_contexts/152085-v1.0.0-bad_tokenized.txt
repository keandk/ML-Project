# Tokenized code fragments for 152085-v1.0.0-bad
# Total center nodes processed: 41
# Total code fragments found: 167

CENTER_NODE: 30064771080
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ss_tc_root = getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: ss_tc_root
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ss_tc_root
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771370
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ist -> nb_filters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ist -> nb_filters
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_filters
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ist
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ist
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640541
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640381
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477096
FRAGMENT_COUNT: 6
  ORIGINAL[0]: t = av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: av_dict_get(m,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: t -> key
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: t
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: m
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: t
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771747
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ost -> st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ost -> st -> cur_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: ost -> st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: ost -> st -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: ost -> st
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: time_base
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: debug_ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ost
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064774239
FRAGMENT_COUNT: 3
  ORIGINAL[0]: va < vb?- 1 : ((va > vb?+1 : 0))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < vb?- 1 : ( ( VAR1 > vb?+1 : 0 ) )
  ORIGINAL[1]: va < vb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 1

CENTER_NODE: 47244640543
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640542
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771577
FRAGMENT_COUNT: 7
  ORIGINAL[0]: vsnprintf(buf,sizeof(buf),fmt,va)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , sizeof ( VAR1 ) , VAR2 , VAR3 )
  ORIGINAL[1]: sizeof(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: va
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: va
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640416
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640403
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064776453
FRAGMENT_COUNT: 3
  ORIGINAL[0]: received_sigterm = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: received_sigterm
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: received_nb_signals
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640325
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640603
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478388
FRAGMENT_COUNT: 10
  ORIGINAL[0]: decoded_frame -> top_field_first
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decoded_frame -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decoded_frame -> pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: decoded_frame -> key_frame
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: decoded_frame -> pict_type
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ist -> st -> sample_aspect_ratio . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[6]: decoded_frame -> sample_aspect_ratio
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: sample_aspect_ratio
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: decoded_frame
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: decoded_frame
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771199
FRAGMENT_COUNT: 5
  ORIGINAL[0]: r -> x < 0 || r -> x + r -> w > w || r -> y < 0 || r -> y + r -> h > h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 < 0 || VAR1 -> VAR2 + VAR1 -> VAR3 > VAR3 || VAR1 -> VAR4 < 0 || VAR1 -> VAR4 + VAR1 -> VAR5 > VAR5
  ORIGINAL[1]: pal = ((uint32_t *)r -> pict . data[1])
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 * ) VAR3 -> VAR4 . VAR5 [ 1 ] )
  ORIGINAL[2]: (uint32_t *)r -> pict . data[1]
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 * ) VAR2 -> VAR3 . VAR4 [ 1 ]
  ORIGINAL[3]: r -> pict . data[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3 [ 1 ]
  ORIGINAL[4]: pal
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771239
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ist -> nb_filters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ist -> filters[i] -> filter
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[2]: ist -> filters[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: ist -> filters
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: filter
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476819
FRAGMENT_COUNT: 3
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: *stonesoup_tainted_buff
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_tainted_buff
  ORIGINAL[2]: stonesoup_tainted_buff
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776348
FRAGMENT_COUNT: 3
  ORIGINAL[0]: setvbuf(stderr,((void *)0),2,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , 2 , 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: stderr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064775919
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ist -> discard
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt . pts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: pkt . pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 30064776423
FRAGMENT_COUNT: 4
  ORIGINAL[0]: archpriesthood_ardella != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: free(((char *)archpriesthood_ardella))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( char * ) VAR1 ) )
  ORIGINAL[2]: (char *)archpriesthood_ardella
  TYPE[2]: CALL
  TOKENIZED[2]: ( char * ) VAR1
  ORIGINAL[3]: archpriesthood_ardella
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476880
FRAGMENT_COUNT: 55
  ORIGINAL[0]: !ref
  TYPE[0]: CALL
  TOKENIZED[0]: !ref
  ORIGINAL[1]: pts = av_rescale_q(sub -> pts + (sub -> start_display_time * 1000),((AVRational ){(1), (1000000)}),ist -> st -> time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR1 + ( VAR2 -> VAR3 * 1000 ) , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR5 -> VAR6 -> VAR7 )
  ORIGINAL[2]: av_rescale_q(sub -> pts + (sub -> start_display_time * 1000),((AVRational ){(1), (1000000)}),ist -> st -> time_base)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 + ( VAR1 -> VAR3 * 1000 ) , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR5 -> VAR6 -> VAR7 )
  ORIGINAL[3]: sub -> pts + (sub -> start_display_time * 1000)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 + ( VAR1 -> VAR3 * 1000 )
  ORIGINAL[4]: sub -> pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: sub -> start_display_time * 1000
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 * 1000
  ORIGINAL[6]: sub -> start_display_time
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (AVRational ){(1), (1000000)}
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[8]: {(1), (1000000)}
  TYPE[8]: CALL
  TOKENIZED[8]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[9]: ist -> st -> time_base
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[10]: ist -> st
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: end_pts = av_rescale_q(sub -> pts + (sub -> end_display_time * 1000),((AVRational ){(1), (1000000)}),ist -> st -> time_base)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 = FUN1 ( VAR2 -> VAR3 + ( VAR2 -> VAR4 * 1000 ) , ( ( VAR5 ) { ( 1 ) , ( 1000000 ) } ) , VAR6 -> VAR7 -> VAR8 )
  ORIGINAL[12]: av_rescale_q(sub -> pts + (sub -> end_display_time * 1000),((AVRational ){(1), (1000000)}),ist -> st -> time_base)
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( VAR1 -> VAR2 + ( VAR1 -> VAR3 * 1000 ) , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR5 -> VAR6 -> VAR7 )
  ORIGINAL[13]: sub -> pts + (sub -> end_display_time * 1000)
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 + ( VAR1 -> VAR3 * 1000 )
  ORIGINAL[14]: sub -> pts
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: sub -> end_display_time * 1000
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2 * 1000
  ORIGINAL[16]: sub -> end_display_time
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: (AVRational ){(1), (1000000)}
  TYPE[17]: CALL
  TOKENIZED[17]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[18]: {(1), (1000000)}
  TYPE[18]: CALL
  TOKENIZED[18]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[19]: ist -> st -> time_base
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[20]: ist -> st
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2
  ORIGINAL[21]: num_rects = (sub -> num_rects)
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 = ( VAR2 -> VAR1 )
  ORIGINAL[22]: sub -> num_rects
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: pts = ist -> sub2video . end_pts
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 = VAR2 -> VAR3 . VAR4
  ORIGINAL[24]: ist -> sub2video . end_pts
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2 . VAR3
  ORIGINAL[25]: ist -> sub2video
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2
  ORIGINAL[26]: end_pts = 9223372036854775807L
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 = 9223372036854775807L
  ORIGINAL[27]: num_rects = 0
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 = 0
  ORIGINAL[28]: pts
  TYPE[28]: FIELD_IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: start_display_time
  TYPE[29]: FIELD_IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: st
  TYPE[30]: FIELD_IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: time_base
  TYPE[31]: FIELD_IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: pts
  TYPE[32]: FIELD_IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: end_display_time
  TYPE[33]: FIELD_IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: st
  TYPE[34]: FIELD_IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: time_base
  TYPE[35]: FIELD_IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: num_rects
  TYPE[36]: FIELD_IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: sub2video
  TYPE[37]: FIELD_IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: end_pts
  TYPE[38]: FIELD_IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: sub
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: pts
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: sub
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: sub
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: ist
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: end_pts
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: sub
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: sub
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: ist
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: num_rects
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: sub
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: pts
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: ist
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: end_pts
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: num_rects
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: dst
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1

CENTER_NODE: 30064771388
FRAGMENT_COUNT: 1
  ORIGINAL[0]: - 1
  TYPE[0]: CALL
  TOKENIZED[0]: - 1

CENTER_NODE: 47244640618
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640532
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771383
FRAGMENT_COUNT: 3
  ORIGINAL[0]: received_nb_signals > 3
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 3
  ORIGINAL[1]: exit(123)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( 123 )
  ORIGINAL[2]: <global> received_nb_signals
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 47244640458
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771571
FRAGMENT_COUNT: 1
  ORIGINAL[0]: exit(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 30064771387
FRAGMENT_COUNT: 1
  ORIGINAL[0]: signal(15,sigterm_handler)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 15 , VAR1 )

CENTER_NODE: 47244640815
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771385
FRAGMENT_COUNT: 1
  ORIGINAL[0]: avformat_network_deinit()
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( )

CENTER_NODE: 30064771378
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_log(((void *)0),- 8,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , - 8 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: - 8
  TYPE[2]: CALL
  TOKENIZED[2]: - 8

CENTER_NODE: 68719477579
FRAGMENT_COUNT: 3
  ORIGINAL[0]: - 10.0
  TYPE[0]: CALL
  TOKENIZED[0]: - 10 . 0
  ORIGINAL[1]: log(d)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: d
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771386
FRAGMENT_COUNT: 1
  ORIGINAL[0]: signal(2,sigterm_handler)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , VAR1 )

CENTER_NODE: 68719478222
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !( *got_output) || ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *got_output ) || VAR1 < 0
  ORIGINAL[1]: !pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: !pkt -> VAR1
  ORIGINAL[2]: i < ist -> nb_filters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 -> VAR3
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640358
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776456
FRAGMENT_COUNT: 4
  ORIGINAL[0]: int_cb = {(decode_interrupt_cb), ((void *)0)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( VAR2 ) , ( ( void * ) 0 ) }
  ORIGINAL[1]: {(decode_interrupt_cb), ((void *)0)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( ( void * ) 0 ) }
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: int_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479573
FRAGMENT_COUNT: 3
  ORIGINAL[0]: f -> ctx
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ctx
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640382
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773266
FRAGMENT_COUNT: 9
  ORIGINAL[0]: dec -> channels > ist -> guess_layout_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > VAR3 -> VAR4
  ORIGINAL[1]: dec -> channel_layout = (av_get_default_channel_layout(dec -> channels))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( FUN1 ( VAR1 -> VAR3 ) )
  ORIGINAL[2]: dec -> channel_layout
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_get_default_channel_layout(dec -> channels)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[4]: dec -> channel_layout
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: channel_layout
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: dec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: dec
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

