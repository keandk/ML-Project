# Tokenized code fragments for 153654-v1.0.0-bad
# Total center nodes processed: 137
# Total code fragments found: 599

CENTER_NODE: 68719476846
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> encode_sub
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: encode_sub
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476829
FRAGMENT_COUNT: 5
  ORIGINAL[0]: **p = ptr
  TYPE[0]: CALL
  TOKENIZED[0]: **p = VAR1
  ORIGINAL[1]: p
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773532
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = avcodec_close(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: avcodec_close(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478599
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avcodec_find_encoder(id)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771798
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> codec -> type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: frame -> channel_layout = s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 -> VAR2
  ORIGINAL[2]: frame -> channel_layout
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> channel_layout
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: channel_layout
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477431
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477522
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478528
FRAGMENT_COUNT: 10
  ORIGINAL[0]: avcodec_is_open(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: avctx -> thread_count
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> thread_opaque
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> coded_frame
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: av_freep((&avctx -> internal -> byte_buffer))
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( ( &avctx -> VAR1 -> VAR2 ) )
  ORIGINAL[6]: avctx -> internal
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: internal
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773909
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p++
  TYPE[0]: CALL
  TOKENIZED[0]: p++
  ORIGINAL[1]: p -> profile == profile
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == VAR2
  ORIGINAL[2]: for (p = codec -> profiles;p -> profile != - 'c';p++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = VAR2 -> VAR3 ; VAR1 -> VAR4 != - 'c' ; p++ )
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771106
FRAGMENT_COUNT: 3
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: strcmp(getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( FUN2 ( \
  ORIGINAL[2]: getenv(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \

CENTER_NODE: 30064774017
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [6UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 6UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 68719477503
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640538
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640674
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476778
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 97
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477526
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477515
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640410
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640741
FRAGMENT_COUNT: 1
  ORIGINAL[0]: <global> ff_lockmgr_cb
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: <global> VAR1

CENTER_NODE: 68719479106
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_vlog(avc,24,msg,argument_list)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , VAR2 , VAR3 )
  ORIGINAL[1]: msg
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: msg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argument_list
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771120
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[64]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 64 ]

CENTER_NODE: 68719477506
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478444
FRAGMENT_COUNT: 7
  ORIGINAL[0]: avpkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: tmp =  *avpkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = *avpkt
  ORIGINAL[2]: *avpkt
  TYPE[2]: CALL
  TOKENIZED[2]: *avpkt
  ORIGINAL[3]: tmp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avpkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tmp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tmp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478892
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F32LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479177
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *c = avcodec_find_decoder(codec_id)
  TYPE[0]: CALL
  TOKENIZED[0]: *c = FUN1 ( VAR1 )
  ORIGINAL[1]: !c
  TYPE[1]: CALL
  TOKENIZED[1]: !c
  ORIGINAL[2]: c -> type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477482
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *frame = (av_malloc(sizeof(AVFrame )))
  TYPE[0]: CALL
  TOKENIZED[0]: *frame = ( FUN1 ( sizeof ( VAR1 ) ) )
  ORIGINAL[1]: frame == ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774365
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stonesoup_data.buffer[stonesoup_i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 [ VAR3 ]
  ORIGINAL[1]: stonesoup_data.buffer[63]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 [ 63 ]
  ORIGINAL[2]: stonesoup_data.buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: buffer
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_data
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478845
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_YAMAHA
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774274
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_OBTAIN)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: *ff_lockmgr_cb
  TYPE[1]: CALL
  TOKENIZED[1]: *ff_lockmgr_cb
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> avformat_mutex
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 30064771075
FRAGMENT_COUNT: 2
  ORIGINAL[0]: va_end(argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477408
FRAGMENT_COUNT: 12
  ORIGINAL[0]: pic -> width
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pic -> height
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pic -> format
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pic -> width
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pic -> height
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pic -> format
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pic -> data[0] == ((void *)0)
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ 0 ] == ( ( void * ) 0 )
  ORIGINAL[7]: (void )0
  TYPE[7]: CALL
  TOKENIZED[7]: ( void ) 0
  ORIGINAL[8]: pic -> type
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: type
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064771466
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_image_check_size(w,h,0,s) || (s -> pix_fmt) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , 0 , VAR3 ) || ( VAR3 -> VAR4 ) < 0
  ORIGINAL[1]: &avci -> buffer[avci -> buffer_count]
  TYPE[1]: CALL
  TOKENIZED[1]: &avci -> VAR1 [ VAR2 -> VAR3 ]
  ORIGINAL[2]: avci -> buffer[avci -> buffer_count]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR1 -> VAR3 ]
  ORIGINAL[3]: avci -> buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avci -> buffer_count
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2

CENTER_NODE: 68719478540
FRAGMENT_COUNT: 6
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_OPUS_DEPRECATED
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_OPUS
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_TAK_DEPRECATED
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_TAK
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773670
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (codec_tag & 0xff) >= 'a' && (codec_tag & 0xff) <= 'z'
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 & 0xff ) >= 'a' && ( VAR1 & 0xff ) <= 'z'
  ORIGINAL[1]: (codec_tag & 0xff) >= 'a'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 & 0xff ) >= 'a'
  ORIGINAL[2]: (codec_tag & 0xff) <= 'z'
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 & 0xff ) <= 'z'
  ORIGINAL[3]: codec_tag & 0xff
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 & 0xff

CENTER_NODE: 47244640683
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064771966
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame -> pkt_dts = frame -> pkt_pts = ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR1 -> VAR3 = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: frame -> pkt_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: frame -> pkt_pts = ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: frame -> pkt_pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (int64_t )0x8000000000000000UL
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 30064773408
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> sub_charenc_mode != 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 1
  ORIGINAL[1]: avctx -> sub_charenc_mode
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sub_charenc_mode
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771077
FRAGMENT_COUNT: 3
  ORIGINAL[0]: data_size = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: data_size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ev
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773112
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &avctx -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: &avctx -> VAR1
  ORIGINAL[1]: avctx -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773035
FRAGMENT_COUNT: 14
  ORIGINAL[0]: dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_num_faulty_dts += (dts <= ctx -> pts_correction_last_dts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 += ( VAR3 <= VAR1 -> VAR4 )
  ORIGINAL[2]: ctx -> pts_correction_num_faulty_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: dts <= ctx -> pts_correction_last_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 <= VAR2 -> VAR3
  ORIGINAL[4]: ctx -> pts_correction_num_faulty_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pts_correction_num_faulty_dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: dts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ctx
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ctx
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ctx
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064773926
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_SRT == 94216)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 94216 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 1
  ORIGINAL[0]: id == AV_CODEC_ID_TTA
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2

CENTER_NODE: 30064772028
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> sample_rate = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: sample_rate
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772013
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> best_effort_timestamp = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> best_effort_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: best_effort_timestamp
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774324
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *beaverism_baikie[10] = {0}
  TYPE[0]: CALL
  TOKENIZED[0]: *beaverism_baikie [ 10 ] = { 0 }
  ORIGINAL[1]: *beaverism_baikie[10] = {0}
  TYPE[1]: CALL
  TOKENIZED[1]: *beaverism_baikie [ 10 ] = { 0 }
  ORIGINAL[2]: beaverism_baikie
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: beaverism_baikie
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477521
FRAGMENT_COUNT: 3
  ORIGINAL[0]: frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: frame
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478901
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: be > 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: be
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: be
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771719
FRAGMENT_COUNT: 6
  ORIGINAL[0]: p < (desc -> nb_components)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < ( VAR2 -> VAR3 )
  ORIGINAL[1]: -frame -> width >> ((is_chroma?(desc -> log2_chroma_w) : 0))
  TYPE[1]: CALL
  TOKENIZED[1]: -frame -> VAR1 >> ( ( is_chroma? ( VAR2 -> VAR3 ) : 0 ) )
  ORIGINAL[2]: -frame -> width
  TYPE[2]: CALL
  TOKENIZED[2]: -frame -> VAR1
  ORIGINAL[3]: is_chroma?(desc -> log2_chroma_w) : 0
  TYPE[3]: CALL
  TOKENIZED[3]: is_chroma? ( VAR1 -> VAR2 ) : 0
  ORIGINAL[4]: desc -> log2_chroma_w
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: is_chroma
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774005
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [0UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 0UL ] { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR1 ) }

CENTER_NODE: 30064773628
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719479113
FRAGMENT_COUNT: 6
  ORIGINAL[0]: **p = &first_hwaccel
  TYPE[0]: CALL
  TOKENIZED[0]: **p = &first_hwaccel
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: p = &( *p) -> next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = & ( *p ) -> VAR2
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772068
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = avcodec_open2(avctx,codec,options)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcodec_open2(avctx,codec,options)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774242
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &codec_mutex
  TYPE[0]: CALL
  TOKENIZED[0]: &codec_mutex
  ORIGINAL[1]: ff_lockmgr_cb(&codec_mutex,AV_LOCK_CREATE)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &codec_mutex , VAR1 )
  ORIGINAL[2]: &codec_mutex
  TYPE[2]: CALL
  TOKENIZED[2]: &codec_mutex
  ORIGINAL[3]: <global> ff_lockmgr_cb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> codec_mutex
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: AV_LOCK_CREATE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477512
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771954
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *fmt) != AV_PIX_FMT_NONE && is_hwaccel_pix_fmt( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *fmt ) != VAR1 && FUN1 ( *fmt )
  ORIGINAL[1]: ( *fmt) != AV_PIX_FMT_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: ( *fmt ) != VAR1
  ORIGINAL[2]: *fmt
  TYPE[2]: CALL
  TOKENIZED[2]: *fmt
  ORIGINAL[3]: is_hwaccel_pix_fmt( *fmt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( *fmt )
  ORIGINAL[4]: *fmt
  TYPE[4]: CALL
  TOKENIZED[4]: *fmt
  ORIGINAL[5]: AV_PIX_FMT_NONE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478795
FRAGMENT_COUNT: 2
  ORIGINAL[0]: AV_CODEC_ID_ADPCM_G722 == 69660
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 69660
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_G722
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719478894
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F64LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F64LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F64BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477525
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064772037
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_size = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_size
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478666
FRAGMENT_COUNT: 4
  ORIGINAL[0]: enc -> codec_tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sizeof(tag_buf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: tag_buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag_buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773916
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_PCM_S8_PLANAR == 65563)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 65563 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 68719478881
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_S32LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774264
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064773993
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *avci = avctx -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: *avci = VAR1 -> VAR2
  ORIGINAL[1]: avctx -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avci
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774309
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(!s -> internal)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( !s -> VAR1 )
  ORIGINAL[1]: !s -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1
  ORIGINAL[2]: s -> internal
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244640536
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477813
FRAGMENT_COUNT: 60
  ORIGINAL[0]: avctx -> extradata_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> extradata_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> internal
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> priv_data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> priv_data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avctx -> priv_data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avctx -> priv_data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: avctx -> priv_data
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avctx -> coded_width
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: avctx -> coded_height
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: avctx -> width
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: avctx -> height
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: avctx -> coded_width
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: avctx -> coded_height
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: avctx -> width
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: avctx -> height
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: avctx -> subtitle_header
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: avctx -> frame_number
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: avctx -> codec_descriptor
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2
  ORIGINAL[19]: avctx -> codec_id
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: avctx -> strict_std_compliance
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2
  ORIGINAL[21]: avctx -> sample_rate
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2
  ORIGINAL[22]: avctx -> thread_opaque
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: avctx -> active_thread_type
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2
  ORIGINAL[24]: avctx -> thread_count
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2
  ORIGINAL[25]: avctx -> lowres
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2
  ORIGINAL[26]: avctx -> lowres
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 -> VAR2
  ORIGINAL[27]: avctx -> codec
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 -> VAR2
  ORIGINAL[28]: avctx -> sample_fmt
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 -> VAR2
  ORIGINAL[29]: avctx -> sample_fmt
  TYPE[29]: CALL
  TOKENIZED[29]: VAR1 -> VAR2
  ORIGINAL[30]: avctx -> sample_fmt
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 -> VAR2
  ORIGINAL[31]: avctx -> pix_fmt
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 -> VAR2
  ORIGINAL[32]: avctx -> codec_id
  TYPE[32]: CALL
  TOKENIZED[32]: VAR1 -> VAR2
  ORIGINAL[33]: avctx -> codec_id
  TYPE[33]: CALL
  TOKENIZED[33]: VAR1 -> VAR2
  ORIGINAL[34]: avctx -> strict_std_compliance
  TYPE[34]: CALL
  TOKENIZED[34]: VAR1 -> VAR2
  ORIGINAL[35]: avctx -> sample_rate
  TYPE[35]: CALL
  TOKENIZED[35]: VAR1 -> VAR2
  ORIGINAL[36]: avctx -> channel_layout
  TYPE[36]: CALL
  TOKENIZED[36]: VAR1 -> VAR2
  ORIGINAL[37]: avctx -> channels
  TYPE[37]: CALL
  TOKENIZED[37]: VAR1 -> VAR2
  ORIGINAL[38]: avctx -> channel_layout
  TYPE[38]: CALL
  TOKENIZED[38]: VAR1 -> VAR2
  ORIGINAL[39]: avctx -> channels
  TYPE[39]: CALL
  TOKENIZED[39]: VAR1 -> VAR2
  ORIGINAL[40]: avctx -> channels
  TYPE[40]: CALL
  TOKENIZED[40]: VAR1 -> VAR2
  ORIGINAL[41]: avctx -> channel_layout
  TYPE[41]: CALL
  TOKENIZED[41]: VAR1 -> VAR2
  ORIGINAL[42]: avctx -> codec_id
  TYPE[42]: CALL
  TOKENIZED[42]: VAR1 -> VAR2
  ORIGINAL[43]: avctx -> width
  TYPE[43]: CALL
  TOKENIZED[43]: VAR1 -> VAR2
  ORIGINAL[44]: avctx -> height
  TYPE[44]: CALL
  TOKENIZED[44]: VAR1 -> VAR2
  ORIGINAL[45]: (avctx -> codec_type) == AVMEDIA_TYPE_VIDEO
  TYPE[45]: CALL
  TOKENIZED[45]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[46]: avctx -> codec_type
  TYPE[46]: CALL
  TOKENIZED[46]: VAR1 -> VAR2
  ORIGINAL[47]: avctx -> codec_type
  TYPE[47]: CALL
  TOKENIZED[47]: VAR1 -> VAR2
  ORIGINAL[48]: codec_type
  TYPE[48]: FIELD_IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: avctx
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: avctx
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: avctx
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: avctx
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: avctx
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: avctx
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1
  ORIGINAL[55]: avctx
  TYPE[55]: IDENTIFIER
  TOKENIZED[55]: VAR1
  ORIGINAL[56]: avctx
  TYPE[56]: IDENTIFIER
  TOKENIZED[56]: VAR1
  ORIGINAL[57]: avctx
  TYPE[57]: IDENTIFIER
  TOKENIZED[57]: VAR1
  ORIGINAL[58]: avctx
  TYPE[58]: IDENTIFIER
  TOKENIZED[58]: VAR1
  ORIGINAL[59]: avctx
  TYPE[59]: IDENTIFIER
  TOKENIZED[59]: VAR1

CENTER_NODE: 30064774201
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tab[i][0] == a
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] [ 0 ] == VAR3
  ORIGINAL[1]: tab[i][0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] [ 0 ]
  ORIGINAL[2]: tab[i][1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] [ 1 ]
  ORIGINAL[3]: tab[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: tab
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476849
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772005
FRAGMENT_COUNT: 11
  ORIGINAL[0]: !frame || !( *frame)
  TYPE[0]: CALL
  TOKENIZED[0]: !frame || ! ( *frame )
  ORIGINAL[1]: f -> extended_data != f -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR1 -> VAR3
  ORIGINAL[2]: f -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: f -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: &f -> extended_data
  TYPE[4]: CALL
  TOKENIZED[4]: &f -> VAR1
  ORIGINAL[5]: f -> extended_data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: extended_data
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: f
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: f
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: f
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: f
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771168
FRAGMENT_COUNT: 4
  ORIGINAL[0]: min_size > 18446744073709551615UL - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 18446744073709551615UL - 16
  ORIGINAL[1]: *size = 0
  TYPE[1]: CALL
  TOKENIZED[1]: *size = 0
  ORIGINAL[2]: *size
  TYPE[2]: CALL
  TOKENIZED[2]: *size
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476998
FRAGMENT_COUNT: 6
  ORIGINAL[0]: linesize_align[0] > linesize_align[3]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] > VAR1 [ 3 ]
  ORIGINAL[1]: linesize_align[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: linesize_align[3]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 3 ]
  ORIGINAL[3]: linesize_align[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]
  ORIGINAL[4]: linesize_align
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: linesize_align
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064772035
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640752
FRAGMENT_COUNT: 1
  ORIGINAL[0]: <global> ff_lockmgr_cb
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: <global> VAR1

CENTER_NODE: 68719478074
FRAGMENT_COUNT: 10
  ORIGINAL[0]: frame -> nb_samples > avctx -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > VAR3 -> VAR4
  ORIGINAL[1]: !(avctx -> codec -> capabilities & 0x10000)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 -> VAR3 & 0x10000 )
  ORIGINAL[2]: frame -> nb_samples < avctx -> frame_size && !avctx -> internal -> last_audio_frame
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 < VAR3 -> VAR4 && !avctx -> VAR5 -> VAR6
  ORIGINAL[3]: ret < 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 0
  ORIGINAL[4]: av_freep((&padded_frame))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( &padded_frame ) )
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ret
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: padded_frame
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ret
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640672
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640733
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hwaccel = av_hwaccel_next(hwaccel)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: while (hwaccel = av_hwaccel_next(hwaccel))
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( VAR1 = FUN1 ( VAR1 ) )

CENTER_NODE: 30064772666
FRAGMENT_COUNT: 23
  ORIGINAL[0]: avpkt -> data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avpkt -> size < size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 < VAR2
  ORIGINAL[2]: avpkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_log(avctx,16,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[4]: avpkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: - 22
  TYPE[5]: CALL
  TOKENIZED[5]: - 22
  ORIGINAL[6]: av_init_packet(avpkt)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 )
  ORIGINAL[7]: avpkt -> destruct = destruct
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 = VAR2
  ORIGINAL[8]: avpkt -> destruct
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: avpkt -> size = size
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 = VAR2
  ORIGINAL[10]: avpkt -> size
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: size
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: destruct
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: size
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: size
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: avctx
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: avpkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: size
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: avpkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: avpkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: destruct
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: avpkt
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: size
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1

CENTER_NODE: 30064771824
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < avci -> buffer_count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: &avci -> buffer[i]
  TYPE[1]: CALL
  TOKENIZED[1]: &avci -> VAR1 [ VAR2 ]
  ORIGINAL[2]: avci -> buffer[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: avci -> buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avci -> buffer
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773406
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *got_frame_ptr
  TYPE[0]: CALL
  TOKENIZED[0]: *got_frame_ptr
  ORIGINAL[1]: frame -> extended_data = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 17 * min_size / 16 + 32 > min_size
  TYPE[0]: CALL
  TOKENIZED[0]: 17 * VAR1 / 16 + 32 > VAR1
  ORIGINAL[1]: 17 * min_size / 16 + 32
  TYPE[1]: CALL
  TOKENIZED[1]: 17 * VAR1 / 16 + 32
  ORIGINAL[2]: 17 * min_size / 16
  TYPE[2]: CALL
  TOKENIZED[2]: 17 * VAR1 / 16
  ORIGINAL[3]: 17 * min_size
  TYPE[3]: CALL
  TOKENIZED[3]: 17 * VAR1

CENTER_NODE: 68719477457
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret[i] = r
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[1]: ret[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: r
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: r
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773937
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 92 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 92 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 92 << 8

CENTER_NODE: 47244640676
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773076
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & VAR2
  ORIGINAL[1]: avctx -> channels = (bytestream_get_le32(&data))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( FUN1 ( &data ) )
  ORIGINAL[2]: avctx -> channels
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bytestream_get_le32(&data)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &data )
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772011
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640331
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772058
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: bit_rate = (bits_per_sample?ctx -> sample_rate * ctx -> channels * bits_per_sample : ctx -> bit_rate)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( bits_per_sample?ctx -> VAR2 * VAR3 -> VAR4 * VAR5 : VAR3 -> VAR1 )
  ORIGINAL[2]: bits_per_sample?ctx -> sample_rate * ctx -> channels * bits_per_sample : ctx -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: bits_per_sample?ctx -> VAR1 * VAR2 -> VAR3 * VAR4 : VAR2 -> VAR5
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: bit_rate
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640482
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773944
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 30064772025
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> channels = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channels
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: channels
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640696
FRAGMENT_COUNT: 1
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719477505
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772959
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avpkt -> data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avpkt -> data == avctx -> internal -> byte_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == VAR3 -> VAR4 -> VAR5
  ORIGINAL[2]: avpkt -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> internal -> byte_buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: data
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avpkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avpkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640690
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: video_free_buffers(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;

CENTER_NODE: 47244640344
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478152
FRAGMENT_COUNT: 9
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (avctx -> codec -> encode_sub)(avctx,buf,buf_size,sub)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[2]: avctx -> codec -> encode_sub
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: avctx -> frame_number
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: sub
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772014
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772034
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decode_error_flags
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772716
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (ret = avcodec_fill_audio_frame(frame,s -> channels,s -> sample_fmt,buf,ret,0)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR6 , VAR1 , 0 ) ) < 0
  ORIGINAL[1]: (ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 ) ) < 0
  ORIGINAL[2]: ret = av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 -> VAR3 , ( VAR4 -> VAR3 ) , 0 , 0 , VAR4 -> VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 )
  ORIGINAL[3]: av_samples_copy(frame -> extended_data,(src -> extended_data),0,0,src -> nb_samples,s -> channels,s -> sample_fmt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , ( VAR3 -> VAR2 ) , 0 , 0 , VAR3 -> VAR4 , VAR5 -> VAR6 , VAR5 -> VAR7 )
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772050
FRAGMENT_COUNT: 5
  ORIGINAL[0]: sub -> pts = ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: sub -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (int64_t )0x8000000000000000UL
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[3]: pts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sub
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478263
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> codec -> capabilities & 0x20 || avpkt -> size || avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 & 0x20 || VAR4 -> VAR5 || VAR1 -> VAR6 & 1
  ORIGINAL[1]: did_split = av_packet_split_side_data(&tmp)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( &tmp )
  ORIGINAL[2]: av_packet_split_side_data(&tmp)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &tmp )
  ORIGINAL[3]: did_split
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tmp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640678
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772026
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773988
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !avci -> buffer
  TYPE[0]: CALL
  TOKENIZED[0]: !avci -> VAR1
  ORIGINAL[1]: av_freep((&avci -> buffer))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &avci -> VAR1 ) )
  ORIGINAL[2]: &avci -> buffer
  TYPE[2]: CALL
  TOKENIZED[2]: &avci -> VAR1
  ORIGINAL[3]: avci
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479174
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_toupper((x & 0xff)) + (av_toupper((x >> 8 & 0xff)) << 8) + (av_toupper((x >> 16 & 0xff)) << 16)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 & 0xff ) ) + ( FUN1 ( ( VAR1 >> 8 & 0xff ) ) << 8 ) + ( FUN1 ( ( VAR1 >> 16 & 0xff ) ) << 16 )
  ORIGINAL[1]: x >> 24
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >> 24
  ORIGINAL[2]: x
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: x
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774203
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: avc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: feature
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: want_sample
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476816
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: ptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477460
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *desc = av_pix_fmt_desc_get(pix_fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: *desc = FUN1 ( VAR1 )
  ORIGINAL[1]: desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: flags
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774190
FRAGMENT_COUNT: 3
  ORIGINAL[0]: n++
  TYPE[0]: CALL
  TOKENIZED[0]: n++
  ORIGINAL[1]: n
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: n
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640356
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771129
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 17 * min_size / 16 + 32 > min_size?17 * min_size / 16 + 32 : min_size
  TYPE[0]: CALL
  TOKENIZED[0]: 17 * VAR1 / 16 + 32 > min_size?17 * VAR1 / 16 + 32 : VAR1
  ORIGINAL[1]: 17 * min_size / 16 + 32 > min_size
  TYPE[1]: CALL
  TOKENIZED[1]: 17 * VAR1 / 16 + 32 > VAR1
  ORIGINAL[2]: 17 * min_size / 16 + 32
  TYPE[2]: CALL
  TOKENIZED[2]: 17 * VAR1 / 16 + 32
  ORIGINAL[3]: 17 * min_size / 16 + 32
  TYPE[3]: CALL
  TOKENIZED[3]: 17 * VAR1 / 16 + 32
  ORIGINAL[4]: 17 * min_size / 16
  TYPE[4]: CALL
  TOKENIZED[4]: 17 * VAR1 / 16

CENTER_NODE: 30064771281
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *width + w_align
  TYPE[0]: CALL
  TOKENIZED[0]: *width + VAR1
  ORIGINAL[1]: *width
  TYPE[1]: CALL
  TOKENIZED[1]: *width
  ORIGINAL[2]: width
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: w_align
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477301
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: video_get_buffer(avctx,frame)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: AVMEDIA_TYPE_VIDEO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477502
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771408
FRAGMENT_COUNT: 5
  ORIGINAL[0]: buf_size < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: frame -> data[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[2]: frame -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477344
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (avctx -> get_buffer)(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[1]: frame
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771813
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 68719477524
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_timebase
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772680
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avpkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478565
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477514
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476842
FRAGMENT_COUNT: 3
  ORIGINAL[0]: initialized = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: initialized
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: initialized
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773929
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )
  ORIGINAL[1]: 100 >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 100 >= 100
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 68719477019
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ret = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640746
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773515
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: av_freep((&sub -> rects[i] -> ass))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &sub -> VAR1 [ VAR2 ] -> VAR3 ) )
  ORIGINAL[2]: &sub -> rects[i] -> ass
  TYPE[2]: CALL
  TOKENIZED[2]: &sub -> VAR1 [ VAR2 ] -> VAR3
  ORIGINAL[3]: sub
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476855
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476864
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> coded_height = height
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> coded_height
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: height
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: height
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772016
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt_duration
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772017
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479202
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &str
  TYPE[0]: CALL
  TOKENIZED[0]: &str
  ORIGINAL[1]: ret < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: avctx -> extradata = str
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR3
  ORIGINAL[3]: avctx -> extradata
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: str
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: str
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640744
FRAGMENT_COUNT: 0

