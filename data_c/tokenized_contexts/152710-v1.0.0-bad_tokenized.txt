# Tokenized code fragments for 152710-v1.0.0-bad
# Total center nodes processed: 197
# Total code fragments found: 767

CENTER_NODE: 30064776825
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: av_gettime() / 1000 * 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[2]: 2208988800ULL * 1000000ULL
  TYPE[2]: CALL
  TOKENIZED[2]: 2208988800ULL * 1000000ULL

CENTER_NODE: 68719477137
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> request_probe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> probe_packets
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: !strcmp(fmt -> name,fmt_id_type[i] . name)
  TYPE[2]: CALL
  TOKENIZED[2]: !strcmp ( VAR1 -> VAR2 , VAR3 [ VAR4 ] . VAR2 )
  ORIGINAL[3]: st -> codec -> codec_id = fmt_id_type[i] . id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3 = VAR4 [ VAR5 ] . VAR6
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640833
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640849
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640675
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640862
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777709
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sep = start + strcspn(start,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 + FUN1 ( VAR2 , \
  ORIGINAL[1]: start + strcspn(start,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + FUN1 ( VAR1 , \
  ORIGINAL[2]: strcspn(start,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: start
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sep
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477408
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !new_buf
  TYPE[0]: CALL
  TOKENIZED[0]: !new_buf
  ORIGINAL[1]: pd -> buf = new_buf
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: pd -> buf
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: new_buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: new_buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773515
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(next_pkt -> pts == ((int64_t )0x8000000000000000UL) && next_pkt -> dts != ((int64_t )0x8000000000000000UL) && !eof)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL ) && !eof )
  ORIGINAL[1]: ret = read_frame_internal(s,pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[2]: read_frame_internal(s,pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776861
FRAGMENT_COUNT: 5
  ORIGINAL[0]: q - buf + len > (buf_size - 1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 + VAR3 > ( VAR4 - 1 )
  ORIGINAL[1]: q - buf + len
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2 + VAR3
  ORIGINAL[2]: buf_size - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 1
  ORIGINAL[3]: percentd_found
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477084
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *fmt = av_probe_input_format3(pd,is_opened,&score_ret)
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = FUN1 ( VAR1 , VAR2 , &score_ret )
  ORIGINAL[1]: av_probe_input_format3(pd,is_opened,&score_ret)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , &score_ret )
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pd
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478528
FRAGMENT_COUNT: 17
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: index == 0 || ie[- 1] . timestamp < timestamp?((void )0) : __assert_fail(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 0 || VAR2 [ - 1 ] . VAR3 < timestamp? ( ( void ) 0 ) : FUN1 ( \
  ORIGINAL[2]: ie -> timestamp != timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 != VAR2
  ORIGINAL[3]: ie -> timestamp
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ie -> timestamp <= timestamp
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 <= VAR2
  ORIGINAL[5]: ie -> timestamp
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ( *nb_index_entries)++
  TYPE[6]: CALL
  TOKENIZED[6]: ( *nb_index_entries ) ++
  ORIGINAL[7]: ie -> pos == pos && distance < ie -> min_distance
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 == VAR2 && VAR3 < VAR1 -> VAR4
  ORIGINAL[8]: ie -> pos
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: ie -> min_distance
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: distance = ie -> min_distance
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 = VAR2 -> VAR3
  ORIGINAL[11]: ie -> min_distance
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: ie -> pos
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pos
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ie
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ie
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ie
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064776783
FRAGMENT_COUNT: 8
  ORIGINAL[0]: j < ic -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> programs[j] -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[2]: ic -> programs[j] -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: ic -> programs[j]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: ic -> programs
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ic -> programs[j] -> nb_stream_indexes
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[6]: id
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: j
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641182
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640482
FRAGMENT_COUNT: 1
  ORIGINAL[0]: pktl == s -> parse_queue_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 -> VAR3

CENTER_NODE: 68719480749
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcl
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640853
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641159
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771129
FRAGMENT_COUNT: 6
  ORIGINAL[0]: a >= 'a'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 'a'
  ORIGINAL[1]: a -= 'a'-'A'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -= 'a'-'A'
  ORIGINAL[2]: 'a'-'A'
  TYPE[2]: CALL
  TOKENIZED[2]: 'a'-'A'
  ORIGINAL[3]: a
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: a
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: a
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479529
FRAGMENT_COUNT: 2
  ORIGINAL[0]: bps
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_NONE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771168
FRAGMENT_COUNT: 11
  ORIGINAL[0]: src[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: src[i] == ';'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] == ' ; '
  ORIGINAL[2]: src[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: src[i] == '|'
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] == '|'
  ORIGINAL[4]: src[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: src[i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ]
  ORIGINAL[6]: src
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: src
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: src
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: src
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640695
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064773604
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO && !(st -> disposition & 0x0400)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4 && ! ( VAR1 -> VAR5 & 0x0400 )
  ORIGINAL[1]: first_audio_index < 0 && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0 && ( VAR2 -> VAR3 -> VAR4 ) == VAR5
  ORIGINAL[2]: first_audio_index < 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < 0
  ORIGINAL[3]: (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[4]: first_audio_index = i
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = VAR2
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: first_audio_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640315
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064773035
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: *pkt_buf = pktl -> next
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buf = VAR1 -> VAR2
  ORIGINAL[2]: *pkt_buf
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buf
  ORIGINAL[3]: pktl -> next
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt_buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640687
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480371
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> chapters[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> chapters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771191
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 30064776452
FRAGMENT_COUNT: 10
  ORIGINAL[0]: j < program -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: program -> stream_index[j]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: av_realloc((program -> stream_index),sizeof(unsigned int ) * (program -> nb_stream_indexes + 1))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( VAR1 -> VAR2 ) , sizeof ( unsigned int ) * ( VAR1 -> VAR3 + 1 ) )
  ORIGINAL[3]: program -> stream_index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: sizeof(unsigned int ) * (program -> nb_stream_indexes + 1)
  TYPE[4]: CALL
  TOKENIZED[4]: sizeof ( unsigned int ) * ( VAR1 -> VAR2 + 1 )
  ORIGINAL[5]: stream_index
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: program
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: program
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: unsigned int
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: unsigned int
  ORIGINAL[9]: program
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640926
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641072
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772255
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame_size <= 0 || st -> codec -> sample_rate <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 0 || VAR2 -> VAR3 -> VAR4 <= 0
  ORIGINAL[1]: *pnum = frame_size
  TYPE[1]: CALL
  TOKENIZED[1]: *pnum = VAR1
  ORIGINAL[2]: *pnum
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum
  ORIGINAL[3]: pnum
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640679
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640716
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640827
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480824
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777204
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: local_pkt . pts = av_rescale_q(pkt -> pts,src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 = FUN1 ( VAR3 -> VAR2 , VAR4 -> VAR5 [ VAR3 -> VAR6 ] -> VAR7 , VAR8 -> VAR5 [ VAR9 ] -> VAR7 )
  ORIGINAL[2]: local_pkt . pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: av_rescale_q(pkt -> pts,src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR4 [ VAR1 -> VAR5 ] -> VAR6 , VAR7 -> VAR4 [ VAR8 ] -> VAR6 )
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481009
FRAGMENT_COUNT: 8
  ORIGINAL[0]: str[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: av_strlcatf(str,size,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: proto
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: str
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: proto
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: str
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: str
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476897
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !av_strncasecmp(name,names,len)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_strncasecmp ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: names = p + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + 1
  ORIGINAL[2]: p + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: names
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: names
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641285
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ofmt
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640706
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480439
FRAGMENT_COUNT: 5
  ORIGINAL[0]: v % (100 * 1000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % ( 100 * 1000 )
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: d
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: postfix
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641226
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479774
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !ic -> streams[i] -> r_frame_rate . num
  TYPE[0]: CALL
  TOKENIZED[0]: !ic -> VAR1 [ VAR2 ] -> VAR3 . VAR4
  ORIGINAL[1]: ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640887
FRAGMENT_COUNT: 1
  ORIGINAL[0]: tag == tags[i] . tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 [ VAR3 ] . VAR1

CENTER_NODE: 47244640549
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776667
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244640592
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640748
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 68719476919
FRAGMENT_COUNT: 5
  ORIGINAL[0]: filename && fmt -> extensions
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 -> VAR3
  ORIGINAL[1]: av_match_ext(filename,fmt -> extensions)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777320
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i] -> id == id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[2]: s -> streams[i] -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: s -> streams[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481242
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640805
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640836
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641174
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481327
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *(endptr++)) == ':'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( endptr++ ) ) == ':'
  ORIGINAL[1]: stream_idx = (strtol(endptr,((void *)0),0))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 , ( ( void * ) 0 ) , 0 ) )
  ORIGINAL[2]: stream_idx >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0
  ORIGINAL[3]: stream_idx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_idx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_idx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_idx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640569
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478605
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: ts = wrap_timestamp(s -> streams[stream_index],ts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 [ VAR4 ] , VAR1 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771420
FRAGMENT_COUNT: 4
  ORIGINAL[0]: buf[1024]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1024 ]
  ORIGINAL[1]: buf[1024]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1024 ]
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640550
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777484
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_reduce(&frame_sample_aspect_ratio . num,&frame_sample_aspect_ratio . den,frame_sample_aspect_ratio . num,frame_sample_aspect_ratio . den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &frame_sample_aspect_ratio . VAR1 , &frame_sample_aspect_ratio . VAR2 , VAR3 . VAR1 , VAR3 . VAR2 , 2147483647 )
  ORIGINAL[1]: &frame_sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: &frame_sample_aspect_ratio . VAR1
  ORIGINAL[2]: &frame_sample_aspect_ratio . den
  TYPE[2]: CALL
  TOKENIZED[2]: &frame_sample_aspect_ratio . VAR1
  ORIGINAL[3]: frame_sample_aspect_ratio . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: frame_sample_aspect_ratio . den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: frame_sample_aspect_ratio
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771755
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: &pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: &pktl -> VAR1
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064776255
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !streams
  TYPE[0]: CALL
  TOKENIZED[0]: !streams
  ORIGINAL[1]: s -> streams = streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR2
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640730
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774365
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p -> start_time == ((int64_t )0x8000000000000000UL) || p -> start_time > start_time1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR2 > VAR4
  ORIGINAL[1]: p -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: p -> start_time > start_time1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 > VAR3
  ORIGINAL[3]: p -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: start_time1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776361
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ac -> programs[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: &ac -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: &ac -> VAR1
  ORIGINAL[3]: ac -> programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: programs
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ac
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ac
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ac
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640683
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641178
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476952
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: remaining = s -> maxsize - avio_tell(s)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 - FUN1 ( VAR2 )
  ORIGINAL[2]: s -> maxsize - avio_tell(s)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 - FUN1 ( VAR1 )
  ORIGINAL[3]: remaining
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: remaining
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640825
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771075
FRAGMENT_COUNT: 2
  ORIGINAL[0]: va_end(argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719481176
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_small_strptime(datestr,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: &time1
  TYPE[1]: CALL
  TOKENIZED[1]: &time1
  ORIGINAL[2]: ret1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: datestr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: datestr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481068
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(ptr = (strchr(key,'=')))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 = ( FUN1 ( VAR2 , '=' ) ) )
  ORIGINAL[1]: &dest
  TYPE[1]: CALL
  TOKENIZED[1]: &dest
  ORIGINAL[2]: &dest_len
  TYPE[2]: CALL
  TOKENIZED[2]: &dest_len
  ORIGINAL[3]: dest_len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dest_len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dest_len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640441
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640826
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771927
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> video_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id = s -> video_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s -> video_codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: break;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: break ;

CENTER_NODE: 47244641154
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641189
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771281
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !av_strcasecmp(ext1,ext)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_strcasecmp ( VAR1 , VAR2 )
  ORIGINAL[1]: av_strcasecmp(ext1,ext)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: ( *p) == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: ( *p ) == '\\0'
  ORIGINAL[3]: ext
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ext1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ext
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481479
FRAGMENT_COUNT: 8
  ORIGINAL[0]: isValid(butch_fulcrum) == 1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) == 1
  ORIGINAL[1]: snprintf(stonesoup_command_buffer, 1000, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 1000 , \
  ORIGINAL[2]: tracepoint(stonesoup_trace, variable_buffer, \
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[3]: stonesoup_trace
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_trace
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: variable_buffer
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_command_buffer
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stonesoup_trace
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719478976
FRAGMENT_COUNT: 5
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477149
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ic -> pb && !ic -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !ic -> VAR3
  ORIGINAL[1]: ic -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> data_offset
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: data_offset
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773904
FRAGMENT_COUNT: 4
  ORIGINAL[0]: e -> timestamp >= target_ts?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= target_ts? ( ( void ) 0 ) : FUN1 ( \
  ORIGINAL[1]: e -> timestamp >= target_ts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 >= VAR3
  ORIGINAL[2]: __assert_fail(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: <global> __PRETTY_FUNCTION__
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 47244640846
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640625
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641165
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480828
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640684
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771182
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: 'h' >= 100
  TYPE[1]: CALL
  TOKENIZED[1]: 'h' >= 100
  ORIGINAL[2]: av_log(((void *)0),0,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: abort()
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( )

CENTER_NODE: 47244640568
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640717
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640766
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )

CENTER_NODE: 68719478003
FRAGMENT_COUNT: 17
  ORIGINAL[0]: pkt -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> stream_index
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> dts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> stream_index
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pkt -> duration
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[12]: pkt -> pts
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pkt -> dts
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: dts
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 30064777103
FRAGMENT_COUNT: 4
  ORIGINAL[0]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[1]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[2]: hex_table_uc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hex_table_uc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774476
FRAGMENT_COUNT: 13
  ORIGINAL[0]: st -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: ic -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: ic -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: ic -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: start_time
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719478562
FRAGMENT_COUNT: 6
  ORIGINAL[0]: b - a > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 > 1
  ORIGINAL[1]: a + b
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2
  ORIGINAL[2]: a
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: m
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: a
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: b
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480806
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: pkt -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: av_q2d(time_base)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: time_base
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: time_base
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: time_base
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: time_base
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: time_base
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: time_base
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641245
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641147
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641061
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480174
FRAGMENT_COUNT: 7
  ORIGINAL[0]: best_multiframe > multiframe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: best_multiframe == multiframe
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: multiframe
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: best_multiframe
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: multiframe
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: multiframe
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: multiframe
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772154
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !mux && enc -> bit_rate > 0 && size > 0
  TYPE[0]: CALL
  TOKENIZED[0]: !mux && VAR1 -> VAR2 > 0 && VAR3 > 0
  ORIGINAL[1]: !mux && enc -> bit_rate > 0
  TYPE[1]: CALL
  TOKENIZED[1]: !mux && VAR1 -> VAR2 > 0
  ORIGINAL[2]: size > 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > 0
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641185
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774539
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: (ic -> bit_rate) * ((int64_t )st -> time_base . num)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) * ( ( VAR3 ) VAR4 -> VAR5 . VAR6 )
  ORIGINAL[2]: ic -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )st -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) VAR2 -> VAR3 . VAR4
  ORIGINAL[4]: st -> time_base . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3

CENTER_NODE: 30064771077
FRAGMENT_COUNT: 3
  ORIGINAL[0]: data_size = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: data_size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ev
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773993
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_ts_make_string(((char [32]){(0)}),ts_min)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[1]: (char [32]){(0)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[2]: {(0)}
  TYPE[2]: CALL
  TOKENIZED[2]: { ( 0 ) }
  ORIGINAL[3]: ts_min
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773830
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641122
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772135
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (avctx -> codec_id) == AV_CODEC_ID_MP3
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[4]: avctx -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_MP3
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064774909
FRAGMENT_COUNT: 12
  ORIGINAL[0]: !has_codec_parameters(st,((void *)0)) || !has_decode_delay_been_guessed(st)
  TYPE[0]: CALL
  TOKENIZED[0]: !has_codec_parameters ( VAR1 , ( ( void * ) 0 ) ) || !has_decode_delay_been_guessed ( VAR1 )
  ORIGINAL[1]: !st -> codec_info_nb_frames && st -> codec -> codec -> capabilities & 0x0400
  TYPE[1]: CALL
  TOKENIZED[1]: !st -> VAR1 && VAR2 -> VAR3 -> VAR3 -> VAR4 & 0x0400
  ORIGINAL[2]: !st -> codec_info_nb_frames
  TYPE[2]: CALL
  TOKENIZED[2]: !st -> VAR1
  ORIGINAL[3]: st -> codec_info_nb_frames
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec -> codec -> capabilities & 0x0400
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR2 -> VAR3 & 0x0400
  ORIGINAL[5]: st -> codec -> codec -> capabilities
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> codec -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: codec
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: codec
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: capabilities
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064772272
FRAGMENT_COUNT: 8
  ORIGINAL[0]: desc -> props & 1 << 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 1 << 0
  ORIGINAL[1]: desc -> props
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: 1 << 0
  TYPE[2]: CALL
  TOKENIZED[2]: 1 << 0
  ORIGINAL[3]: props
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771719
FRAGMENT_COUNT: 17
  ORIGINAL[0]: !s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: s -> iformat = av_probe_input_format2(&pd,0,&score)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( &pd , 0 , &score )
  ORIGINAL[2]: s -> iformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_probe_input_format2(&pd,0,&score)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &pd , 0 , &score )
  ORIGINAL[4]: &s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: &s -> VAR1
  ORIGINAL[5]: s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: iformat
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pd
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 68719478856
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pos < pos_min
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: pos = pos_min
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: pos
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos_min
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479003
FRAGMENT_COUNT: 8
  ORIGINAL[0]: stream_index == - 1 && s -> nb_streams == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 1 && VAR2 -> VAR3 == 1
  ORIGINAL[1]: av_rescale_rnd(max_ts,time_base . den,time_base . num * ((int64_t )1000000),(8194))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 . VAR3 , VAR2 . VAR4 * ( ( VAR5 ) 1000000 ) , ( 8194 ) )
  ORIGINAL[2]: time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: time_base . num * ((int64_t )1000000)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 * ( ( VAR3 ) 1000000 )
  ORIGINAL[4]: max_ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: max_ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: max_ts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: time_base
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477813
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> parse_queue
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> parse_queue
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl && pktl -> pkt . dts != st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 && VAR1 -> VAR2 . VAR3 != VAR4 -> VAR5
  ORIGINAL[4]: av_log(s,48,\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[5]: av_ts_make_string(((char [32]){(0)}),st -> first_dts)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[6]: av_ts_make_string(((char [32]){(0)}),pktl -> pkt . dts)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 . VAR3 )
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773241
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *pkt_buffer = pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buffer = VAR1 -> VAR2
  ORIGINAL[1]: *pkt_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buffer
  ORIGINAL[2]: pktl -> next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt_buffer
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477624
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63 && st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL) && st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63 && VAR3 -> VAR5 == ( ( VAR6 ) 0x8000000000000000UL ) && VAR3 -> VAR7 != ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> pts_wrap_bits
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_reference
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> time_base
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: time_base
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476855
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776210
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: av_freep((&s -> streams))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[2]: &s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 47244640300
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776082
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avio_pause(s -> pb,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , 1 )
  ORIGINAL[3]: s -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: - 38
  TYPE[4]: CALL
  TOKENIZED[4]: - 38
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pb
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641199
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777436
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags |= AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 |= VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: width
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641040
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775072
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: (i + 1) * 1001
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 + 1 ) * 1001
  ORIGINAL[2]: i + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064775016
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: id = ff_codec_get_id(tags[i],tag)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 [ VAR3 ] , VAR4 )
  ORIGINAL[2]: ff_codec_get_id(tags[i],tag)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 [ VAR2 ] , VAR3 )
  ORIGINAL[3]: tags[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771506
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_probe_input_format2(pd,is_opened,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &score )
  ORIGINAL[1]: &score
  TYPE[1]: CALL
  TOKENIZED[1]: &score
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719478403
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> parse_queue
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: &s -> packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s -> packet_buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> packet_buffer_end
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: packet_buffer_end
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641151
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771196
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: 1LL << 48
  TYPE[2]: CALL
  TOKENIZED[2]: 1LL << 48
  ORIGINAL[3]: 1LL << 48
  TYPE[3]: CALL
  TOKENIZED[3]: 1LL << 48

CENTER_NODE: 30064773693
FRAGMENT_COUNT: 7
  ORIGINAL[0]: 2 * i < st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: 2 * VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> index_entries[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: st -> index_entries[2 * i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ 2 * VAR3 ]
  ORIGINAL[3]: st -> index_entries
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: index_entries
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640884
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: while ((tags -> id) != AV_CODEC_ID_NONE)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( ( VAR1 -> VAR2 ) != VAR3 )

CENTER_NODE: 47244641042
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479637
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: c -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec_tag
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064774727
FRAGMENT_COUNT: 12
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_streams
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ic
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719480746
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481364
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (st -> codec -> field_order) == AV_FIELD_PROGRESSIVE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: data = avci100_1080p_extradata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: avci100_1080p_extradata
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: data
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avci100_1080p_extradata
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478903
FRAGMENT_COUNT: 10
  ORIGINAL[0]: read_status < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: &pkt
  TYPE[1]: CALL
  TOKENIZED[1]: &pkt
  ORIGINAL[2]: pkt . stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: pkt . dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: pkt . flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: stream_index
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stream_index
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064777017
FRAGMENT_COUNT: 8
  ORIGINAL[0]: p = (strchr(url,':'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ':' ) )
  ORIGINAL[1]: av_strlcpy(proto,url,(proto_size > p + 1 - url?p + 1 - url : proto_size))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , ( VAR3 > VAR4 + 1 - url?p + 1 - VAR2 : VAR3 ) )
  ORIGINAL[2]: proto_size > p + 1 - url?p + 1 - url : proto_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > VAR2 + 1 - url?p + 1 - VAR3 : VAR1
  ORIGINAL[3]: proto_size > p + 1 - url
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 > VAR2 + 1 - VAR3
  ORIGINAL[4]: p + 1 - url
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + 1 - VAR2
  ORIGINAL[5]: proto
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: url
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: proto_size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640414
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> pb && !(s -> flags & 0x80)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && ! ( VAR1 -> VAR3 & 0x80 )

CENTER_NODE: 30064772460
FRAGMENT_COUNT: 8
  ORIGINAL[0]: pktl -> pkt . stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3
  ORIGINAL[1]: pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064774995
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_codec_get_tag2 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: av_codec_get_tag2(tags,id,&tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[2]: &tag
  TYPE[2]: CALL
  TOKENIZED[2]: &tag
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773406
FRAGMENT_COUNT: 15
  ORIGINAL[0]: !got_packet && s -> parse_queue
  TYPE[0]: CALL
  TOKENIZED[0]: !got_packet && VAR1 -> VAR2
  ORIGINAL[1]: &s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> parse_queue_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: parse_queue_end
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244640842
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641142
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777161
FRAGMENT_COUNT: 9
  ORIGINAL[0]: &new_tb . num
  TYPE[0]: CALL
  TOKENIZED[0]: &new_tb . VAR1
  ORIGINAL[1]: new_tb . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new_tb . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: new_tb . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: num
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: new_tb
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: new_tb
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: new_tb
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: new_tb
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773183
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !out_pkt . size
  TYPE[0]: CALL
  TOKENIZED[0]: !out_pkt . VAR1
  ORIGINAL[1]: st -> parser -> key_frame == - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 == - 1
  ORIGINAL[2]: st -> parser -> key_frame
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1

CENTER_NODE: 30064773670
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: st -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: st -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: time_base
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: num
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064774781
FRAGMENT_COUNT: 10
  ORIGINAL[0]: st -> info -> found_decoder >= 0 && !st -> nb_decoded_frames
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 >= 0 && !st -> VAR4
  ORIGINAL[1]: (avctx -> codec_id) == AV_CODEC_ID_DTS
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec_id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: AV_CODEC_ID_DTS
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771395
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ret = avio_read(s,pkt -> data,size)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR5 )
  ORIGINAL[2]: avio_read(s,pkt -> data,size)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 -> VAR3 , VAR4 )
  ORIGINAL[3]: pkt -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771466
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fmt1 -> read_probe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: score = ((fmt1 -> read_probe)(&lpd))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 -> VAR3 ) ( &lpd ) )
  ORIGINAL[2]: (fmt1 -> read_probe)(&lpd)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) ( &lpd )
  ORIGINAL[3]: fmt1 -> read_probe
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: &lpd
  TYPE[4]: CALL
  TOKENIZED[4]: &lpd
  ORIGINAL[5]: score
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773623
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> parser = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: st -> parser
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480275
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat && s -> iformat -> flags & 0x1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[2]: s -> iformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: flags
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719480442
FRAGMENT_COUNT: 9
  ORIGINAL[0]: m && !(av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ! ( FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[1]: !(av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[2]: av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[3]: av_dict_count(m) == 1
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 ) == 1
  ORIGINAL[4]: av_dict_count(m)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: m
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: m
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: m
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: m
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640434
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064777348
FRAGMENT_COUNT: 9
  ORIGINAL[0]: rel[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: !base || strstr(rel,\
  TYPE[1]: CALL
  TOKENIZED[1]: !base || FUN1 ( VAR1 , \
  ORIGINAL[2]: rel[0] == '/'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] == '/'
  ORIGINAL[3]: rel[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]
  ORIGINAL[4]: rel[0]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 0 ]
  ORIGINAL[5]: rel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: rel
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: rel
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: rel
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641196
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640479
FRAGMENT_COUNT: 2
  ORIGINAL[0]: st -> codec -> has_b_frames < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 < 4
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719480114
FRAGMENT_COUNT: 5
  ORIGINAL[0]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[1]: ic -> programs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480691
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: len = size - i
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 - VAR3
  ORIGINAL[2]: size - i
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481402
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !strcmp(pattern,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: len_p > len_h
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2
  ORIGINAL[2]: len_h
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: len_p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len_h
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len_h
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481241
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064771345
FRAGMENT_COUNT: 5
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: av_iformat_next(fmt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: match_format(short_name,fmt -> name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477183
FRAGMENT_COUNT: 6
  ORIGINAL[0]: max_probe_size > (probe_size + 1)?max_probe_size : (probe_size + 1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > ( VAR2 + 1 ) ?max_probe_size : ( VAR2 + 1 )
  ORIGINAL[1]: max_probe_size > (probe_size + 1)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > ( VAR2 + 1 )
  ORIGINAL[2]: max_probe_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: max_probe_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: max_probe_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: max_probe_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640676
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480968
FRAGMENT_COUNT: 6
  ORIGINAL[0]: c >= 48
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 48
  ORIGINAL[1]: c <= '9'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 <= '9'
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640705
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771106
FRAGMENT_COUNT: 3
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: strcmp(getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( FUN2 ( \
  ORIGINAL[2]: getenv(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \

CENTER_NODE: 47244640680
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479619
FRAGMENT_COUNT: 6
  ORIGINAL[0]: j < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: j != i
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476829
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> pts_wrap_behavior == 1 && timestamp < st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == 1 && VAR3 < VAR1 -> VAR4
  ORIGINAL[1]: timestamp + (1ULL << st -> pts_wrap_bits)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + ( 1ULL << VAR2 -> VAR3 )
  ORIGINAL[2]: timestamp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640857
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641168
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641062
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771188
FRAGMENT_COUNT: 4
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8
  ORIGINAL[2]: '6' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: '6' << 16
  ORIGINAL[3]: 63 << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 63 << 8

CENTER_NODE: 30064776120
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&st -> codec -> subtitle_header))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &st -> VAR1 -> VAR2 ) )
  ORIGINAL[1]: &st -> codec -> subtitle_header
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1 -> VAR2
  ORIGINAL[2]: st -> codec -> subtitle_header
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 68719478549
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: distance
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477287
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> raw_packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> raw_packet_buffer_end
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: nb_streams
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641193
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481438
FRAGMENT_COUNT: 2
  ORIGINAL[0]: dyscrasite_engraulidae = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: dyscrasite_engraulidae
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772083
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> flags & 0x0100 && pkt -> flags & 0x0002
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0100 && VAR3 -> VAR2 & 0x0002
  ORIGINAL[1]: !(s -> flags & 0x40000)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 & 0x40000 )
  ORIGINAL[2]: s -> flags & 0x40000
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x40000
  ORIGINAL[3]: s -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 68719479575
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (codec_tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: codec_tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: *tag
  TYPE[2]: CALL
  TOKENIZED[2]: *tag
  ORIGINAL[3]: codec_tags -> tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: tag
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776074
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_pause(s -> pb,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , 0 )
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244640286
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640824
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641162
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641314
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480481
FRAGMENT_COUNT: 14
  ORIGINAL[0]: is_output?ic -> oformat -> flags : ic -> iformat -> flags
  TYPE[0]: CALL
  TOKENIZED[0]: is_output?ic -> VAR1 -> VAR2 : VAR3 -> VAR4 -> VAR2
  ORIGINAL[1]: ic -> oformat -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: ic -> oformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> iformat -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: ic -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: oformat
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: flags
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: flags
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: is_output
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: is_output
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064774651
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> duration < duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 < VAR2
  ORIGINAL[1]: ((duration - st -> info -> last_duration >= 0?duration - st -> info -> last_duration : -(duration - st -> info -> last_duration))) < 60LL * st -> time_base . den / st -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 - VAR2 -> VAR3 -> VAR4 >= 0?duration - VAR2 -> VAR3 -> VAR4 : - ( VAR1 - VAR2 -> VAR3 -> VAR4 ) ) ) < 60LL * VAR2 -> VAR5 . VAR6 / VAR2 -> VAR5 . VAR7
  ORIGINAL[2]: duration - st -> info -> last_duration >= 0?duration - st -> info -> last_duration : -(duration - st -> info -> last_duration)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2 -> VAR3 -> VAR4 >= 0?duration - VAR2 -> VAR3 -> VAR4 : - ( VAR1 - VAR2 -> VAR3 -> VAR4 )
  ORIGINAL[3]: 60LL * st -> time_base . den / st -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: 60LL * VAR1 -> VAR2 . VAR3 / VAR1 -> VAR2 . VAR4
  ORIGINAL[4]: 60LL * st -> time_base . den
  TYPE[4]: CALL
  TOKENIZED[4]: 60LL * VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: st -> time_base . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3

CENTER_NODE: 30064771408
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: old_size = pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3
  ORIGINAL[3]: pkt -> size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: size
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: old_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

