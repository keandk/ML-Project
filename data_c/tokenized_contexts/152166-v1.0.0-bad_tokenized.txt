# Tokenized code fragments for 152166-v1.0.0-bad
# Total center nodes processed: 92
# Total code fragments found: 403

CENTER_NODE: 30064772672
FRAGMENT_COUNT: 3
  ORIGINAL[0]: **filter __attribute__((unused))  = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: **filter FUN1 ( ( VAR1 ) ) = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: filter
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772131
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_parse_cpu_caps(&flags,arg)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &flags , VAR1 )
  ORIGINAL[1]: &flags
  TYPE[1]: CALL
  TOKENIZED[1]: &flags
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: flags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772854
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c != '\\n' && c != - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != '\\n' && VAR1 != - 1
  ORIGINAL[1]: c != '\\n'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != '\\n'
  ORIGINAL[2]: c != - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 != - 1
  ORIGINAL[3]: - 1
  TYPE[3]: CALL
  TOKENIZED[3]: - 1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771101
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stat(dirpath, &st) == -1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[1]: retval = mkdir(dirpath, 0700)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[2]: mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[3]: retval
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477883
FRAGMENT_COUNT: 8
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: pix_desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pix_desc -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pix_desc -> nb_components
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_get_bits_per_pixel(pix_desc)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: pix_desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pix_desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pix_desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640506
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (fmt -> audio_codec) != AV_CODEC_ID_NONE && (desc = avcodec_descriptor_get(fmt -> audio_codec))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3 && ( VAR4 = FUN1 ( VAR1 -> VAR2 ) )

CENTER_NODE: 30064772136
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_strerror(err,errbuf,sizeof(errbuf)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , sizeof ( VAR2 ) ) < 0
  ORIGINAL[1]: av_strerror(err,errbuf,sizeof(errbuf))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , sizeof ( VAR2 ) )
  ORIGINAL[2]: errbuf_ptr = (strerror(-err))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( FUN1 ( -err ) )
  ORIGINAL[3]: strerror(-err)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( -err )
  ORIGINAL[4]: -err
  TYPE[4]: CALL
  TOKENIZED[4]: -err
  ORIGINAL[5]: errbuf_ptr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772320
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: is_duration?\
  TYPE[3]: CALL
  TOKENIZED[3]: is_duration?\
  ORIGINAL[4]: is_duration
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: context
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: timestr
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771730
FRAGMENT_COUNT: 7
  ORIGINAL[0]: g -> opts[g -> nb_opts - 1] . opt = opt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4 = VAR4
  ORIGINAL[1]: g -> opts[g -> nb_opts - 1] . opt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ] . VAR4
  ORIGINAL[2]: g -> opts[g -> nb_opts - 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ]
  ORIGINAL[3]: g -> opts[g -> nb_opts - 1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ]
  ORIGINAL[4]: g -> opts[g -> nb_opts - 1]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR1 -> VAR3 - 1 ]
  ORIGINAL[5]: opt
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772700
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 4
  ORIGINAL[0]: po -> flags & 0x0001 && !arg
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0001 && !arg
  ORIGINAL[1]: po -> flags & 0x0001
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x0001
  ORIGINAL[2]: !arg
  TYPE[2]: CALL
  TOKENIZED[2]: !arg
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771658
FRAGMENT_COUNT: 5
  ORIGINAL[0]: octx -> groups[group_idx]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: octx -> groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: groups
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: octx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: group_idx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640263
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477692
FRAGMENT_COUNT: 5
  ORIGINAL[0]: encoder?\
  TYPE[0]: CALL
  TOKENIZED[0]: encoder?\
  ORIGINAL[1]: c -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: name
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772737
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = - 1;i < AV_SAMPLE_FMT_NB;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = - 1 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772151
FRAGMENT_COUNT: 8
  ORIGINAL[0]: flags & 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 2
  ORIGINAL[1]: av_log(((void *)0),level,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , VAR1 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: version >> 16
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 >> 16
  ORIGINAL[4]: version >> 8 & 0xFF
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 >> 8 & 0xFF
  ORIGINAL[5]: version & 0xFF
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 & 0xFF
  ORIGINAL[6]: level
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: indent
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772498
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: desc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771124
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fflush(stonesoup_printf_context)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064773389
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *buf = (fb -> priv)
  TYPE[0]: CALL
  TOKENIZED[0]: *buf = ( VAR1 -> VAR2 )
  ORIGINAL[1]: fb -> priv
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640275
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (po -> flags & req_flags) != req_flags || alt_flags && !(po -> flags & alt_flags) || po -> flags & rej_flags
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 & VAR3 ) != VAR3 || VAR4 && ! ( VAR1 -> VAR2 & VAR4 ) || VAR1 -> VAR2 & VAR5
  ORIGINAL[1]: continue;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: continue ;
  ORIGINAL[2]: po
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640549
FRAGMENT_COUNT: 1
  ORIGINAL[0]: __sync_bool_compare_and_swap(&bhutanese_impendence,0,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &bhutanese_impendence , 0 , 1 )

CENTER_NODE: 47244640354
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640516
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !strcmp(topic,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: if (!strcmp(topic,\
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: if ( !strcmp ( VAR1 , \
  ORIGINAL[2]: else
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: else

CENTER_NODE: 68719478363
FRAGMENT_COUNT: 4
  ORIGINAL[0]: frame -> type != 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 2
  ORIGINAL[1]: avcodec_default_release_buffer(s,frame)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476896
FRAGMENT_COUNT: 5
  ORIGINAL[0]: strlen(name)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772713
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !name
  TYPE[0]: CALL
  TOKENIZED[0]: !name
  ORIGINAL[1]: ((uint64_t )1) << i
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 ) 1 ) << VAR2
  ORIGINAL[2]: (uint64_t )1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772317
FRAGMENT_COUNT: 3
  ORIGINAL[0]: print_all_libs_info(1 | 4,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 | 4 , 32 )
  ORIGINAL[1]: 1 | 4
  TYPE[1]: CALL
  TOKENIZED[1]: 1 | 4
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772492
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (( *da) -> type) != (( *db) -> type)
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( *da ) -> VAR1 ) != ( ( *db ) -> VAR1 )
  ORIGINAL[1]: ( *da) -> type
  TYPE[1]: CALL
  TOKENIZED[1]: ( *da ) -> VAR1
  ORIGINAL[2]: ( *da) -> name
  TYPE[2]: CALL
  TOKENIZED[2]: ( *da ) -> VAR1
  ORIGINAL[3]: *da
  TYPE[3]: CALL
  TOKENIZED[3]: *da
  ORIGINAL[4]: name
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: da
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771215
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719476845
FRAGMENT_COUNT: 12
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: d < min || d > max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 || VAR1 > VAR3
  ORIGINAL[2]: type == 0x0400 && ((int64_t )d) != d
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == 0x0400 && ( ( VAR2 ) VAR3 ) != VAR3
  ORIGINAL[3]: type == 0x80 && ((int )d) != d
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == 0x80 && ( ( int ) VAR2 ) != VAR2
  ORIGINAL[4]: av_log(((void *)0),8,error,context,numstr,min,max)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( ( void * ) 0 ) , 8 , VAR1 , VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[5]: (void *)0
  TYPE[5]: CALL
  TOKENIZED[5]: ( void * ) 0
  ORIGINAL[6]: max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: error
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: context
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: numstr
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: min
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: max
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640409
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477746
FRAGMENT_COUNT: 2
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772660
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *opaque = (void *)0
  TYPE[0]: CALL
  TOKENIZED[0]: *opaque = ( void * ) 0
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: opaque
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640572
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477472
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &tail
  TYPE[0]: CALL
  TOKENIZED[0]: &tail
  ORIGINAL[1]: arg
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: tail
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tail
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772649
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 68719478380
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *pool
  TYPE[0]: CALL
  TOKENIZED[0]: *pool
  ORIGINAL[1]: *pool
  TYPE[1]: CALL
  TOKENIZED[1]: *pool
  ORIGINAL[2]: *pool
  TYPE[2]: CALL
  TOKENIZED[2]: *pool
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476883
FRAGMENT_COUNT: 4
  ORIGINAL[0]: class -> option
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: &class
  TYPE[1]: CALL
  TOKENIZED[1]: &class
  ORIGINAL[2]: class
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: class
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772535
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719477063
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !po -> name && !strcmp(cur_opt,optname)
  TYPE[0]: CALL
  TOKENIZED[0]: !po -> VAR1 && !strcmp ( VAR2 , VAR3 )
  ORIGINAL[1]: po -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: po -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: po -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: name
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: po
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: po
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477792
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *codec = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *codec = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478212
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *size < new_size
  TYPE[0]: CALL
  TOKENIZED[0]: *size < VAR1
  ORIGINAL[1]: (new_size -  *size) * elem_size
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 - *size ) * VAR2
  ORIGINAL[2]: new_size -  *size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - *size
  ORIGINAL[3]: elem_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: elem_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771803
FRAGMENT_COUNT: 7
  ORIGINAL[0]: j < l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: l -> groups[j] . opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] . VAR4
  ORIGINAL[2]: l -> groups[j] . codec_opts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] . VAR4
  ORIGINAL[3]: l -> groups[j]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: l -> groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_opts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: j
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 9
  ORIGINAL[0]: av_log_format_line(ptr,level,fmt,vl2,line,(sizeof(line)),&print_prefix)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 , VAR5 , ( sizeof ( VAR5 ) ) , &print_prefix )
  ORIGINAL[1]: sizeof(line)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: &print_prefix
  TYPE[2]: CALL
  TOKENIZED[2]: &print_prefix
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: level
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: vl2
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: line
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: vl2
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064773407
FRAGMENT_COUNT: 3
  ORIGINAL[0]: stonesoup_dbport = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: stonesoup_dbport
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stonesoup_dbpassword
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640467
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772117
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: AV_PIX_FMT_YUV420P
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_PIX_FMT_YUV420P
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772322
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 68719477925
FRAGMENT_COUNT: 7
  ORIGINAL[0]: desc = avcodec_descriptor_get_by_name(name)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: avcodec_descriptor_get_by_name(name)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: desc -> id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771439
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: o -> opt -> help
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: o -> opt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: o -> opt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: opt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: help
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: o
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: o
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719478271
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> flags & 0x4000 || !buf -> linesize[i] || !buf -> base[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x4000 || !buf -> VAR3 [ VAR4 ] || !buf -> VAR5 [ VAR4 ]
  ORIGINAL[1]: buf -> data[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: buf -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477097
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *p) < 32 || ( *p) > '~'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) < 32 || ( *p ) > '~'
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: *p
  TYPE[3]: CALL
  TOKENIZED[3]: *p
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772675
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064771314
FRAGMENT_COUNT: 10
  ORIGINAL[0]: po -> flags & 0x0400
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0400
  ORIGINAL[1]: po -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: po -> flags & 0x10000
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x10000
  ORIGINAL[3]: po -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po -> flags
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: flags
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719477425
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c == '%'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '%'
  ORIGINAL[1]: av_bprint_chars(bp,c,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , 1 )
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: bp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772657
FRAGMENT_COUNT: 7
  ORIGINAL[0]: bsf = av_bitstream_filter_next(bsf)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: bsf -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: name
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bsf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: bsf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: bsf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772606
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < nb_codecs;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772321
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 30064771910
FRAGMENT_COUNT: 20
  ORIGINAL[0]: po -> flags & 0x0800
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0800
  ORIGINAL[1]: po -> flags & 0x0001
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x0001
  ORIGINAL[2]: av_log(((void *)0),48,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 48 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po -> help
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: po -> help
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: help
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: po
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: po
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: po
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: po
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: arg
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: po
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: po
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: po
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: po
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: po
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 30064771752
FRAGMENT_COUNT: 4
  ORIGINAL[0]: octx -> nb_groups = nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR2
  ORIGINAL[1]: octx -> nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_groups
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: octx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772650
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 68719477020
FRAGMENT_COUNT: 7
  ORIGINAL[0]: handleoptions && opt[0] == '-' && opt[1] != '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 [ 0 ] == '-' && VAR2 [ 1 ] != '\\0'
  ORIGINAL[1]: parse_arg_function(optctx,opt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: optindex
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: parse_arg_function
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: parse_arg_function
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: optctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: opt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477186
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: groups[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: groups
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640540
FRAGMENT_COUNT: 2
  ORIGINAL[0]: t = av_dict_get(opts,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: while (t = av_dict_get(opts,\
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( VAR1 = FUN1 ( VAR2 , \

CENTER_NODE: 30064771142
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478357
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !buf -> refcount
  TYPE[0]: CALL
  TOKENIZED[0]: !buf -> VAR1
  ORIGINAL[1]: *pool
  TYPE[1]: CALL
  TOKENIZED[1]: *pool
  ORIGINAL[2]: buf -> next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: *pool
  TYPE[3]: CALL
  TOKENIZED[3]: *pool
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478069
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret = avformat_match_stream_specifier(s,st,spec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avformat_match_stream_specifier(s,st,spec)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773342
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < sizeof(buf -> data) / sizeof(buf -> data[0])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[1]: buf -> data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: buf -> data[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[3]: buf -> data[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: buf -> data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: data
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: buf
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772956
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !base[i]
  TYPE[0]: CALL
  TOKENIZED[0]: !base [ VAR1 ]
  ORIGINAL[1]: f = fopen(filename,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[2]: fopen(filename,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: f
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: filename
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640393
FRAGMENT_COUNT: 2
  ORIGINAL[0]: if (!strcmp(key,\
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: if ( !strcmp ( VAR1 , \
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719478022
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !( *bufptr)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *bufptr )
  ORIGINAL[1]: ret = (fread(( *bufptr),1, *size,f))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( ( *bufptr ) , 1 , *size , VAR2 ) )
  ORIGINAL[2]: ret <  *size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < *size
  ORIGINAL[3]: *size
  TYPE[3]: CALL
  TOKENIZED[3]: *size
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640414
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477644
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772356
FRAGMENT_COUNT: 11
  ORIGINAL[0]: ifmt = av_iformat_next(ifmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: (name == ((void *)0) || strcmp(ifmt -> name,name) < 0) && strcmp(ifmt -> name,last_name) > 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 == ( ( void * ) 0 ) || FUN1 ( VAR2 -> VAR1 , VAR1 ) < 0 ) && FUN1 ( VAR2 -> VAR1 , VAR3 ) > 0
  ORIGINAL[2]: name == ((void *)0) || strcmp(ifmt -> name,name) < 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == ( ( void * ) 0 ) || FUN1 ( VAR2 -> VAR1 , VAR1 ) < 0
  ORIGINAL[3]: name == ((void *)0)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[4]: strcmp(ifmt -> name,name) < 0
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 , VAR2 ) < 0
  ORIGINAL[5]: strcmp(ifmt -> name,last_name) > 0
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 -> VAR2 , VAR3 ) > 0
  ORIGINAL[6]: strcmp(ifmt -> name,last_name)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[7]: ifmt -> name
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: name
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ifmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: last_name
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771993
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < sizeof(log_levels) / sizeof(log_levels[0])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < sizeof ( VAR2 ) / sizeof ( VAR2 [ 0 ] )
  ORIGINAL[1]: strcmp(log_levels[i] . name,arg)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 [ VAR2 ] . VAR3 , VAR4 )
  ORIGINAL[2]: log_levels[i] . name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[3]: log_levels[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: log_levels[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: name
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: arg
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477946
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt -> long_name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> extensions
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: printf(\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( \
  ORIGINAL[5]: fmt -> extensions
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: fmt -> priv_class
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: priv_class
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772558
FRAGMENT_COUNT: 20
  ORIGINAL[0]: i < nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: get_media_type_char(desc -> type)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[2]: desc -> type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: type
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: desc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: desc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: desc
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: desc
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: desc
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: desc
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: desc
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: desc
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: desc
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: desc
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: desc
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 30064771565
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i < argc - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 - 1
  ORIGINAL[2]: argc - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477757
FRAGMENT_COUNT: 6
  ORIGINAL[0]: prev -> id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_codec_is_decoder(prev)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: prev
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: encoder
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: prev
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: prev
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640569
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772658
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719477164
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (o = av_opt_find((&cc),opt_stripped,((void *)0),0,0x0001 | 0x00002)) || (opt[0] == 'v' || opt[0] == 'a' || opt[0] == 's') && (o = av_opt_find((&cc),opt + 1,((void *)0),0,0x00002))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( ( &cc ) , VAR2 , ( ( void * ) 0 ) , 0 , 0x0001 | 0x00002 ) ) || ( VAR3 [ 0 ] == 'v' || VAR3 [ 0 ] == 'a' || VAR3 [ 0 ] == 's' ) && ( VAR1 = FUN1 ( ( &cc ) , VAR3 + 1 , ( ( void * ) 0 ) , 0 , 0x00002 ) )
  ORIGINAL[1]: av_dict_set(&codec_opts,opt,arg,((o -> type) == AV_OPT_TYPE_FLAGS?32 : 0))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &codec_opts , VAR1 , VAR2 , ( ( VAR3 -> VAR4 ) == AV_OPT_TYPE_FLAGS?32 : 0 ) )
  ORIGINAL[2]: &codec_opts
  TYPE[2]: CALL
  TOKENIZED[2]: &codec_opts
  ORIGINAL[3]: (o -> type) == AV_OPT_TYPE_FLAGS?32 : 0
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) == AV_OPT_TYPE_FLAGS?32 : 0
  ORIGINAL[4]: opt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: arg
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: o
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: arg
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771139
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_dict_free(&codec_opts)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &codec_opts )
  ORIGINAL[1]: &codec_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &codec_opts
  ORIGINAL[2]: <global> codec_opts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 47244640399
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640404
FRAGMENT_COUNT: 0

