# Tokenized code fragments for 153014-v1.0.0-bad
# Total center nodes processed: 31
# Total code fragments found: 152

CENTER_NODE: 68719477121
FRAGMENT_COUNT: 5
  ORIGINAL[0]: malfunction_handler(can_return,file,line,expr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: can_return
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: file
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: line
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: expr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477085
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (defn -> errcode) == ((svn_errno_t )statcode)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == ( ( VAR3 ) VAR4 )
  ORIGINAL[1]: apr_cpystrn(buf,(dgettext(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( FUN2 ( \
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476930
FRAGMENT_COUNT: 7
  ORIGINAL[0]: child -> child
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR1
  ORIGINAL[1]: child -> apr_err == apr_err
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == VAR2
  ORIGINAL[2]: child -> apr_err
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: child
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: child
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: child
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: child
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477148
FRAGMENT_COUNT: 4
  ORIGINAL[0]: message != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[1]: svn_error_createf(status,((void *)0),\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( void * ) 0 ) , \
  ORIGINAL[2]: function
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: zmsg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476884
FRAGMENT_COUNT: 5
  ORIGINAL[0]: child == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: child -> apr_err
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: child
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: child
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771291
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !new_err
  TYPE[0]: CALL
  TOKENIZED[0]: !new_err
  ORIGINAL[1]: tmp_err -> child = (apr_palloc(pool,sizeof(( *tmp_err -> child))))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( FUN1 ( VAR3 , sizeof ( ( *tmp_err -> VAR2 ) ) ) )
  ORIGINAL[2]: tmp_err -> child
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: apr_palloc(pool,sizeof(( *tmp_err -> child)))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , sizeof ( ( *tmp_err -> VAR2 ) ) )
  ORIGINAL[4]: sizeof(( *tmp_err -> child))
  TYPE[4]: CALL
  TOKENIZED[4]: sizeof ( ( *tmp_err -> VAR1 ) )
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477046
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !printed_already
  TYPE[0]: CALL
  TOKENIZED[0]: !printed_already
  ORIGINAL[1]: print_error(tmp_err,stream,prefix)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: tmp_err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: prefix
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476827
FRAGMENT_COUNT: 5
  ORIGINAL[0]: apr_pvsprintf(err -> pool,fmt,ap)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: err -> pool
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ap
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476812
FRAGMENT_COUNT: 8
  ORIGINAL[0]: err = make_error_internal(apr_err,child)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[1]: make_error_internal(apr_err,child)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: err -> pool
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: err
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: apr_err
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: err
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: err
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477169
FRAGMENT_COUNT: 4
  ORIGINAL[0]: strlen(squushy_admonitory)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: squushy_admonitory
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: squushy_admonitory
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: squushy_admonitory
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477024
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_handle_error2(err,stream,fatal,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , \
  ORIGINAL[1]: err
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stream
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fatal
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771461
FRAGMENT_COUNT: 10
  ORIGINAL[0]: defn -> errdesc != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[1]: defn -> errdesc
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (defn -> errcode) == ((svn_errno_t )statcode)
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) == ( ( VAR3 ) VAR4 )
  ORIGINAL[4]: errdesc
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: defn
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: defn
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: defn
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: defn
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: defn
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771244
FRAGMENT_COUNT: 6
  ORIGINAL[0]: chain -> child = (apr_palloc(pool,sizeof(( *chain -> child))))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( FUN1 ( VAR3 , sizeof ( ( *chain -> VAR2 ) ) ) )
  ORIGINAL[1]: chain -> child
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: apr_palloc(pool,sizeof(( *chain -> child)))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , sizeof ( ( *chain -> VAR2 ) ) )
  ORIGINAL[3]: sizeof(( *chain -> child))
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( ( *chain -> VAR1 ) )
  ORIGINAL[4]: new_err
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771129
FRAGMENT_COUNT: 6
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c - 32
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - 32
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640256
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ss_tc_root != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2

CENTER_NODE: 68719476804
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *new_error
  TYPE[0]: CALL
  TOKENIZED[0]: *new_error
  ORIGINAL[1]: *new_error
  TYPE[1]: CALL
  TOKENIZED[1]: *new_error
  ORIGINAL[2]: new_error
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640281
FRAGMENT_COUNT: 2
  ORIGINAL[0]: err -> child
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064771470
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !can_return
  TYPE[0]: CALL
  TOKENIZED[0]: !can_return
  ORIGINAL[1]: abort()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: can_return
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477190
FRAGMENT_COUNT: 3
  ORIGINAL[0]: malfunction_handler = svn_error_abort_on_malfunction
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2
  ORIGINAL[1]: <global> malfunction_handler
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: malfunction_handler
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477073
FRAGMENT_COUNT: 5
  ORIGINAL[0]: err -> message
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: err -> apr_err
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: apr_err
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: err
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: err
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[8]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 8 ]

CENTER_NODE: 30064771479
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *err = svn_error_raise_on_malfunction(!0,file,line,expr)
  TYPE[0]: CALL
  TOKENIZED[0]: *err = FUN1 ( !0 , VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: svn_error_raise_on_malfunction(!0,file,line,expr)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( !0 , VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: err
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771362
FRAGMENT_COUNT: 13
  ORIGINAL[0]: err -> message
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: err -> apr_err > 20000 + 50000 + 50000 && err -> apr_err <= 20000 + 50000 + 50000 + 50000 * 10
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 > 20000 + 50000 + 50000 && VAR1 -> VAR2 <= 20000 + 50000 + 50000 + 50000 * 10
  ORIGINAL[2]: err -> apr_err > 20000 + 50000 + 50000
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 > 20000 + 50000 + 50000
  ORIGINAL[3]: err -> apr_err
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: 20000 + 50000 + 50000
  TYPE[4]: CALL
  TOKENIZED[4]: 20000 + 50000 + 50000
  ORIGINAL[5]: err -> apr_err <= 20000 + 50000 + 50000 + 50000 * 10
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 <= 20000 + 50000 + 50000 + 50000 * 10
  ORIGINAL[6]: err -> apr_err
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: 20000 + 50000 + 50000 + 50000 * 10
  TYPE[7]: CALL
  TOKENIZED[7]: 20000 + 50000 + 50000 + 50000 * 10
  ORIGINAL[8]: 20000 + 50000 + 50000
  TYPE[8]: CALL
  TOKENIZED[8]: 20000 + 50000 + 50000
  ORIGINAL[9]: 20000 + 50000
  TYPE[9]: CALL
  TOKENIZED[9]: 20000 + 50000
  ORIGINAL[10]: 50000 * 10
  TYPE[10]: CALL
  TOKENIZED[10]: 50000 * 10
  ORIGINAL[11]: apr_err
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: err
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719477189
FRAGMENT_COUNT: 3
  ORIGINAL[0]: error_tracing_link[] = \
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ ] = \
  ORIGINAL[1]: <global> error_tracing_link
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: error_tracing_link
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477058
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_handle_warning2(stream,err,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: stream
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: err
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 1
  ORIGINAL[0]: err
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719476847
FRAGMENT_COUNT: 6
  ORIGINAL[0]: populares_engloom != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: misposition_pulpily[34]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 34 ]
  ORIGINAL[2]: aleyrodid_monson[5] = misposition_pulpily
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 5 ] = VAR2
  ORIGINAL[3]: aleyrodid_monson[5]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 5 ]
  ORIGINAL[4]: misposition_pulpily
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: misposition_pulpily
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476888
FRAGMENT_COUNT: 1
  ORIGINAL[0]: err
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064771439
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fflush(stream)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: stream
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771230
FRAGMENT_COUNT: 11
  ORIGINAL[0]: err1 && err2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2
  ORIGINAL[1]: svn_error_compose(err1,svn_error_quick_wrap(err2,(dgettext(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , FUN2 ( VAR2 , ( FUN3 ( \
  ORIGINAL[2]: svn_error_quick_wrap(err2,(dgettext(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( FUN2 ( \
  ORIGINAL[3]: dgettext(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: err1?err1 : err2
  TYPE[4]: CALL
  TOKENIZED[4]: err1?err1 : VAR1
  ORIGINAL[5]: err1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err2
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: err1
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: err2
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: err1
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: err1
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719476972
FRAGMENT_COUNT: 9
  ORIGINAL[0]: err && svn_error__is_tracing_link(err)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && FUN1 ( VAR1 )
  ORIGINAL[1]: err -> child
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: err -> pool
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: *err
  TYPE[3]: CALL
  TOKENIZED[3]: *err
  ORIGINAL[4]: err -> child
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: child
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: err
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: err
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: err
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

