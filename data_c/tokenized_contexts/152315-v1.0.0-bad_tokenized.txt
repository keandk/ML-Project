# Tokenized code fragments for 152315-v1.0.0-bad
# Total center nodes processed: 196
# Total code fragments found: 841

CENTER_NODE: 47244640687
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777217
FRAGMENT_COUNT: 5
  ORIGINAL[0]: dest && dest < dest_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 < VAR2
  ORIGINAL[1]: *(dest++) = ptr[1]
  TYPE[1]: CALL
  TOKENIZED[1]: * ( dest++ ) = VAR1 [ 1 ]
  ORIGINAL[2]: *(dest++)
  TYPE[2]: CALL
  TOKENIZED[2]: * ( dest++ )
  ORIGINAL[3]: ptr[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478503
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: distance
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640808
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641024
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640821
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774927
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_U32BE : AV_CODEC_ID_PCM_U32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_U32BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U32LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774176
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stream_index == - 1 && s -> nb_streams == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 1 && VAR2 -> VAR3 == 1
  ORIGINAL[1]: min_ts = av_rescale_rnd(min_ts,time_base . den,time_base . num * ((int64_t )1000000),(8195))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR1 , VAR2 . VAR3 , VAR2 . VAR4 * ( ( VAR5 ) 1000000 ) , ( 8195 ) )
  ORIGINAL[2]: av_rescale_rnd(min_ts,time_base . den,time_base . num * ((int64_t )1000000),(8195))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 . VAR3 , VAR2 . VAR4 * ( ( VAR5 ) 1000000 ) , ( 8195 ) )
  ORIGINAL[3]: min_ts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: max_ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777047
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < s;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772070
FRAGMENT_COUNT: 12
  ORIGINAL[0]: !mux && enc -> frame_size > 1
  TYPE[0]: CALL
  TOKENIZED[0]: !mux && VAR1 -> VAR2 > 1
  ORIGINAL[1]: !mux
  TYPE[1]: CALL
  TOKENIZED[1]: !mux
  ORIGINAL[2]: enc -> frame_size > 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 > 1
  ORIGINAL[3]: enc -> frame_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (frame_size = av_get_audio_frame_duration(enc,size)) > 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 = FUN1 ( VAR2 , VAR3 ) ) > 0
  ORIGINAL[5]: frame_size = av_get_audio_frame_duration(enc,size)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[6]: av_get_audio_frame_duration(enc,size)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[7]: frame_size
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: enc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: frame_size
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: enc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: size
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064773846
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_log(s,48,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[1]: av_ts_make_string(((char [32]){(0)}),ts_max)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos_max
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_limit
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771375
FRAGMENT_COUNT: 4
  ORIGINAL[0]: lpd . buf_size > '\\n' && ff_id3v2_match(lpd . buf,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 > '\\n' && FUN1 ( VAR1 . VAR3 , \
  ORIGINAL[1]: lpd . buf_size > '\\n'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 > '\\n'
  ORIGINAL[2]: ff_id3v2_match(lpd . buf,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 . VAR2 , \
  ORIGINAL[3]: lpd . buf
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2

CENTER_NODE: 30064771279
FRAGMENT_COUNT: 5
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: av_iformat_next(fmt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: match_format(short_name,fmt -> name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772147
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> codec -> time_base . num * 1000LL > st -> codec -> time_base . den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 . VAR4 * 1000LL > VAR1 -> VAR2 -> VAR3 . VAR5
  ORIGINAL[1]: st -> codec -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[2]: *pnum = st -> codec -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum = VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[3]: *pnum
  TYPE[3]: CALL
  TOKENIZED[3]: *pnum
  ORIGINAL[4]: st -> codec -> time_base . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3 . VAR4
  ORIGINAL[5]: st -> codec -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> codec -> time_base
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: num
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641049
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776930
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avcl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: level
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dump_payload
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773772
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773166
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !( *pkt_buffer)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *pkt_buffer )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064775079
FRAGMENT_COUNT: 50
  ORIGINAL[0]: !st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: !st -> VAR1
  ORIGINAL[1]: ic -> flags & 0x20
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x20
  ORIGINAL[2]: ic -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: flags
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ic
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ic
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ic
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ic
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: ic
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ic
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ic
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: ic
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: ic
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: ic
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: ic
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: ic
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: ic
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: ic
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: ic
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: ic
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: ic
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: ic
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: ic
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: ic
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: ic
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: ic
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: ic
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: ic
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: ic
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: ic
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: ic
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: ic
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: ic
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: ic
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: ic
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: ic
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: ic
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: ic
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: ic
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1

CENTER_NODE: 30064776853
FRAGMENT_COUNT: 5
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641043
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771075
FRAGMENT_COUNT: 2
  ORIGINAL[0]: va_end(argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064775953
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avcodec_find_decoder(st -> codec -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 -> VAR3 )
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec_id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: decoder_ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479239
FRAGMENT_COUNT: 14
  ORIGINAL[0]: st -> first_dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> parser
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: st -> start_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> first_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> duration
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> duration
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> duration
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: first_dts
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: duration
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719479541
FRAGMENT_COUNT: 4
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: ff_codec_get_id(tags[i],tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 [ VAR2 ] , VAR3 )
  ORIGINAL[2]: tags[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479549
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: s -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: start_time
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771233
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !av_strncasecmp(name,names,len)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_strncasecmp ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: names = p + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + 1
  ORIGINAL[2]: p + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: names
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641124
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776761
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_gettime() / 1000 * 1000
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ) / 1000 * 1000
  ORIGINAL[1]: av_gettime() / 1000
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) / 1000
  ORIGINAL[2]: av_gettime()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 68719479464
FRAGMENT_COUNT: 4
  ORIGINAL[0]: tag == tags[i] . tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 [ VAR3 ] . VAR1
  ORIGINAL[1]: tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: tags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773747
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !(flags & 4)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 & 4 )
  ORIGINAL[1]: flags & 4
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 & 4
  ORIGINAL[2]: m >= 0 && m < nb_entries && !(entries[m] . flags & 0x1)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0 && VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] . VAR4 & 0x1 )
  ORIGINAL[3]: m >= 0 && m < nb_entries
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 >= 0 && VAR1 < VAR2
  ORIGINAL[4]: m >= 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 >= 0
  ORIGINAL[5]: m
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: m
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777162
FRAGMENT_COUNT: 6
  ORIGINAL[0]: pkt -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: dst -> streams[dst_stream]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: dst -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dst
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dst_stream
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772213
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !st -> info
  TYPE[0]: CALL
  TOKENIZED[0]: !st -> VAR1
  ORIGINAL[1]: st -> codec -> has_b_frames < 3
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 < 3
  ORIGINAL[2]: st -> codec -> has_b_frames
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> nb_decoded_frames >= 7
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 >= 7
  ORIGINAL[4]: st -> nb_decoded_frames
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec -> has_b_frames < 4
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3 < 4
  ORIGINAL[6]: st -> codec -> has_b_frames
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: nb_decoded_frames
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: codec
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: has_b_frames
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 68719480844
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (at = (strchr(p,'@'))) && at < ls
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = ( FUN1 ( VAR2 , '@' ) ) ) && VAR1 < VAR3
  ORIGINAL[1]: av_strlcpy(authorization,at2,(authorization_size > at + 1 - at2?at + 1 - at2 : authorization_size))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , ( VAR3 > VAR4 + 1 - at2?at + 1 - VAR2 : VAR3 ) )
  ORIGINAL[2]: authorization_size > at + 1 - at2?at + 1 - at2 : authorization_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > VAR2 + 1 - at2?at + 1 - VAR3 : VAR1
  ORIGINAL[3]: authorization
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: at2
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: authorization_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: at2
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: at2
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719481259
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ( *(spec++)) == ':'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( spec++ ) ) == ':'
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (s -> streams[i] -> codec -> codec_type) == type && index-- == 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5 ) == VAR6 && index-- == 0
  ORIGINAL[3]: nb_streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477242
FRAGMENT_COUNT: 11
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: s -> nb_streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i++
  TYPE[3]: CALL
  TOKENIZED[3]: i++
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776095
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: i--
  TYPE[1]: CALL
  TOKENIZED[1]: i--
  ORIGINAL[2]: for (i = (s -> nb_streams - 1);i >= 0;i--)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = ( VAR2 -> VAR3 - 1 ) ; VAR1 >= 0 ; i-- )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480731
FRAGMENT_COUNT: 14
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: av_log(avcl,level,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: level
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: level
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: level
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avcl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: level
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: level
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: level
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: level
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: level
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: level
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: level
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: level
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244640835
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477212
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> iformat
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: iformat
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641044
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640807
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640423
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774354
FRAGMENT_COUNT: 7
  ORIGINAL[0]: p -> start_time != ((int64_t )0x8000000000000000UL) && p -> end_time > p -> start_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 > VAR1 -> VAR2
  ORIGINAL[1]: duration > p -> end_time - p -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2 -> VAR3 - VAR2 -> VAR4
  ORIGINAL[2]: p -> end_time - p -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 - VAR1 -> VAR3
  ORIGINAL[3]: p -> end_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: p -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: p -> end_time - p -> start_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 - VAR1 -> VAR3
  ORIGINAL[6]: duration
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478275
FRAGMENT_COUNT: 21
  ORIGINAL[0]: s -> packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: read_frame_internal(s,pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: pkt -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> pos
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> dts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> pts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> pts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pkt
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 68719481199
FRAGMENT_COUNT: 4
  ORIGINAL[0]: undef = {(0), (1)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( 0 ) , ( 1 ) }
  ORIGINAL[1]: {(0), (1)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 0 ) , ( 1 ) }
  ORIGINAL[2]: undef
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: undef
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773080
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !out_pkt . size
  TYPE[0]: CALL
  TOKENIZED[0]: !out_pkt . VAR1
  ORIGINAL[1]: out_pkt . pts = st -> parser -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 = VAR3 -> VAR4 -> VAR2
  ORIGINAL[2]: out_pkt . pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: st -> parser -> pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: out_pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771120
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 30064777360
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec_id == (ofmt -> video_codec) || codec_id == (ofmt -> audio_codec) || codec_id == (ofmt -> subtitle_codec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( VAR2 -> VAR3 ) || VAR1 == ( VAR2 -> VAR4 ) || VAR1 == ( VAR2 -> VAR5 )
  ORIGINAL[1]: ((unsigned int )'E') << 24
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( unsigned int ) 'E' ) << 24
  ORIGINAL[2]: (unsigned int )'E'
  TYPE[2]: CALL
  TOKENIZED[2]: ( unsigned int ) 'E'
  ORIGINAL[3]: ofmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478486
FRAGMENT_COUNT: 14
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ie -> timestamp != timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR2
  ORIGINAL[2]: ie -> timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ie -> timestamp <= timestamp
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 <= VAR2
  ORIGINAL[4]: ie -> timestamp
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: ie -> min_distance
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ie -> min_distance
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ie -> pos = pos
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 = VAR2
  ORIGINAL[8]: ie -> pos
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: ie -> timestamp
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: timestamp
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ie
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ie
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ie
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064772067
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: avctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_MP2
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479587
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: i + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640282
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640658
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641178
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775874
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: for (i = 0;i < ic -> nb_programs;i++)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776601
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719478395
FRAGMENT_COUNT: 12
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> parser
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> last_IP_pts = ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> last_IP_pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> first_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> cur_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> cur_dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> reference_dts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> probe_packets
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: first_dts
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 68719480410
FRAGMENT_COUNT: 9
  ORIGINAL[0]: strcmp(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: *p = (tag -> value)
  TYPE[1]: CALL
  TOKENIZED[1]: *p = ( VAR1 -> VAR2 )
  ORIGINAL[2]: av_log(ctx,32,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 32 , \
  ORIGINAL[3]: tag -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: indent
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771800
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !(s -> flags & 0x20000) && s -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 & 0x20000 ) && VAR1 -> VAR3 -> VAR4
  ORIGINAL[1]: !(s -> flags & 0x20000)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 & 0x20000 )
  ORIGINAL[2]: s -> iformat -> read_header
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: s -> iformat
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: read_header
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776215
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> codec -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: bit_rate
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719481170
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pkt
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt
  ORIGINAL[1]: flags |= AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 |= VAR2
  ORIGINAL[2]: width || height
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 || VAR2
  ORIGINAL[3]: sample_rate
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: width
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: height
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: width
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641153
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640491
FRAGMENT_COUNT: 1
  ORIGINAL[0]: st -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )

CENTER_NODE: 68719480945
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: &new_tb . num
  TYPE[1]: CALL
  TOKENIZED[1]: &new_tb . VAR1
  ORIGINAL[2]: &new_tb . den
  TYPE[2]: CALL
  TOKENIZED[2]: &new_tb . VAR1
  ORIGINAL[3]: pts_num
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pts_den
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640666
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480237
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat -> read_close
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: (s -> iformat -> read_close)(s)
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[5]: s -> iformat -> read_close
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476927
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: s -> maxsize
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: remaining < size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2
  ORIGINAL[3]: s -> maxsize
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: remaining = (remaining > 0?remaining : 0)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = ( VAR1 > 0?remaining : 0 )
  ORIGINAL[5]: s -> maxsize
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: maxsize
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641317
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 68719478748
FRAGMENT_COUNT: 11
  ORIGINAL[0]: &pos_min
  TYPE[0]: CALL
  TOKENIZED[0]: &pos_min
  ORIGINAL[1]: pos_min < pos_limit
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: pos <= pos_min
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= VAR2
  ORIGINAL[3]: pos_min
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_min
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_min
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pos_min
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pos
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pos_min
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pos_min
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pos_min
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771357
FRAGMENT_COUNT: 4
  ORIGINAL[0]: filename && av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && FUN1 ( VAR2 , ( sizeof ( VAR2 ) ) , VAR1 , 1 ) >= 0
  ORIGINAL[1]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[2]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640532
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476896
FRAGMENT_COUNT: 4
  ORIGINAL[0]: type == AVMEDIA_TYPE_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: fmt -> audio_codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: audio_codec
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771484
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ic -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: iformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: read_header
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480291
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ac -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ac -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_programs
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ac
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ac
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773512
FRAGMENT_COUNT: 4
  ORIGINAL[0]: free_packet_buffer(&s -> raw_packet_buffer,&s -> raw_packet_buffer_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> raw_packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: &s -> raw_packet_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640815
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774930
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: &tag
  TYPE[1]: CALL
  TOKENIZED[1]: &tag
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774225
FRAGMENT_COUNT: 21
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st = ic -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[3]: ic -> streams[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: ic -> streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[6]: st -> duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (int64_t )0x8000000000000000UL
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[8]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[9]: ic -> duration
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: (int64_t )0x8000000000000000UL
  TYPE[10]: CALL
  TOKENIZED[10]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[11]: for (i = 0;i < ic -> nb_streams;i++)
  TYPE[11]: CONTROL_STRUCTURE
  TOKENIZED[11]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[12]: streams
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: duration
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: duration
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: i
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 47244641136
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641213
FRAGMENT_COUNT: 2
  ORIGINAL[0]: c >= 'A' && c <= 'F'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 'A' && VAR1 <= 'F'
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244641133
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640908
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719481386
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *sep
  TYPE[0]: CALL
  TOKENIZED[0]: *sep
  ORIGINAL[1]: next = sep + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + 1
  ORIGINAL[2]: *sep
  TYPE[2]: CALL
  TOKENIZED[2]: *sep
  ORIGINAL[3]: sep
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sep
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641054
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771867
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> audio_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id = s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> audio_codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640550
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771130
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[2]: 1LL << 48
  TYPE[2]: CALL
  TOKENIZED[2]: 1LL << 48
  ORIGINAL[3]: 1LL << 48
  TYPE[3]: CALL
  TOKENIZED[3]: 1LL << 48

CENTER_NODE: 68719480171
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: nb_streams
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640818
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 1
  ORIGINAL[0]: st -> pts_wrap_behavior != 0 && st -> pts_wrap_reference != ((int64_t )0x8000000000000000UL) && timestamp != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 0 && VAR1 -> VAR3 != ( ( VAR4 ) 0x8000000000000000UL ) && VAR5 != ( ( VAR4 ) 0x8000000000000000UL )

CENTER_NODE: 47244641208
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640677
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774782
FRAGMENT_COUNT: 23
  ORIGINAL[0]: !avcodec_is_open(st -> codec) && !st -> info -> found_decoder
  TYPE[0]: CALL
  TOKENIZED[0]: !avcodec_is_open ( VAR1 -> VAR2 ) && !st -> VAR3 -> VAR4
  ORIGINAL[1]: st -> codec -> codec?st -> codec -> codec : (avcodec_find_decoder(st -> codec -> codec_id))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> codec?st -> VAR2 -> VAR2 : ( FUN1 ( VAR1 -> VAR2 -> VAR3 ) )
  ORIGINAL[2]: st -> codec -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avcodec_find_decoder(st -> codec -> codec_id)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 -> VAR2 -> VAR3 )
  ORIGINAL[7]: st -> codec -> codec_id
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[8]: st -> codec
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> codec
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: st -> codec -> codec
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[11]: st -> codec
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: st -> codec
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: st -> codec
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: st -> codec
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: st -> codec
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: codec
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: codec
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: codec
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: codec
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: codec_id
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: st
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: st
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1

CENTER_NODE: 68719476976
FRAGMENT_COUNT: 9
  ORIGINAL[0]: pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ret < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: ret = avio_read(s,pkt -> data + old_size,size)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 + VAR5 , VAR6 )
  ORIGINAL[3]: pkt -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_shrink_packet(pkt,old_size + ((ret > 0?ret : 0)))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 + ( ( VAR3 > 0?ret : 0 ) ) )
  ORIGINAL[5]: old_size + ((ret > 0?ret : 0))
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 + ( ( VAR2 > 0?ret : 0 ) )
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: old_size
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719478807
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: data_offset
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pos_min
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774426
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: av_rescale_q(ic -> duration,((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , ( ( VAR3 ) { ( 1 ) , ( 1000000 ) } ) , VAR4 -> VAR5 )
  ORIGINAL[2]: ic -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (AVRational ){(1), (1000000)}
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[4]: {(1), (1000000)}
  TYPE[4]: CALL
  TOKENIZED[4]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[5]: st -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641181
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640345
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !av_strcasecmp(mime_type,\
  TYPE[0]: CALL
  TOKENIZED[0]: !av_strcasecmp ( VAR1 , \
  ORIGINAL[1]: if (!av_strcasecmp(mime_type,\
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: if ( !av_strcasecmp ( VAR1 , \

CENTER_NODE: 47244641129
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641104
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641144
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476747
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ev == MG_REQUEST
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: mg_get_header(conn, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: conn
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: conn
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: conn
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776622
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ic -> nb_streams && !printed
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !printed
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: is_output?\
  TYPE[3]: CALL
  TOKENIZED[3]: is_output?\
  ORIGINAL[4]: is_output?ic -> oformat -> name : ic -> iformat -> name
  TYPE[4]: CALL
  TOKENIZED[4]: is_output?ic -> VAR1 -> VAR2 : VAR3 -> VAR4 -> VAR2
  ORIGINAL[5]: is_output?\
  TYPE[5]: CALL
  TOKENIZED[5]: is_output?\
  ORIGINAL[6]: index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: is_output
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: url
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477070
FRAGMENT_COUNT: 3
  ORIGINAL[0]: {(\
  TYPE[0]: CALL
  TOKENIZED[0]: { ( \
  ORIGINAL[1]: AV_CODEC_ID_MPEG2VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AVMEDIA_TYPE_VIDEO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772230
FRAGMENT_COUNT: 2
  ORIGINAL[0]: pktl == s -> parse_queue_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 -> VAR3
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244640806
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641020
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 47244640662
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776806
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !percentd_found
  TYPE[0]: CALL
  TOKENIZED[0]: !percentd_found
  ORIGINAL[1]: *q = '\\0'
  TYPE[1]: CALL
  TOKENIZED[1]: *q = '\\0'
  ORIGINAL[2]: *q
  TYPE[2]: CALL
  TOKENIZED[2]: *q
  ORIGINAL[3]: q
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476773
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: mg_create_server(NULL, stonesoup_ev_handler)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_server
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771122
FRAGMENT_COUNT: 4
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8
  ORIGINAL[2]: '6' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: '6' << 16
  ORIGINAL[3]: 63 << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 63 << 8

CENTER_NODE: 68719481197
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640665
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477770
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> first_dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl && pktl -> pkt . dts != st -> first_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR1 -> VAR2 . VAR3 != VAR4 -> VAR5
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (char [32]){(0)}
  TYPE[3]: CALL
  TOKENIZED[3]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[4]: st -> first_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: first_dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640531
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774943
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (codec_tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: *tag = codec_tags -> tag
  TYPE[1]: CALL
  TOKENIZED[1]: *tag = VAR1 -> VAR2
  ORIGINAL[2]: *tag
  TYPE[2]: CALL
  TOKENIZED[2]: *tag
  ORIGINAL[3]: codec_tags -> tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: tag
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064774032
FRAGMENT_COUNT: 4
  ORIGINAL[0]: index < 0 || index == st -> nb_index_entries - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 == VAR2 -> VAR3 - 1
  ORIGINAL[1]: nonkey = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: nonkey
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641175
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481198
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064776373
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ac -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ac -> programs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ac -> programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: programs
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ac
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641164
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641083
FRAGMENT_COUNT: 1
  ORIGINAL[0]: st -> disposition & 0x0008
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0008

CENTER_NODE: 68719478549
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: wanted_timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776003
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat -> read_play
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: iformat
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: read_play
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641150
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777250
FRAGMENT_COUNT: 14
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> streams[i] -> id == id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[3]: s -> streams[i] -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[4]: s -> streams[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: s -> streams
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: - 1
  TYPE[6]: CALL
  TOKENIZED[6]: - 1
  ORIGINAL[7]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[8]: streams
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: id
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: id
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244640551
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640844
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640657
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771994
FRAGMENT_COUNT: 19
  ORIGINAL[0]: !pktl || ret == - '\\v'
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl || VAR1 == - '\\v'
  ORIGINAL[1]: i < s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: s -> nb_streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> nb_streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: nb_streams
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 47244641147
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771125
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 47244640812
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481421
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 47244640670
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776410
FRAGMENT_COUNT: 5
  ORIGINAL[0]: v % (100 * 1000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % ( 100 * 1000 )
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: d / 1000
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 / 1000
  ORIGINAL[4]: postfix
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777267
FRAGMENT_COUNT: 14
  ORIGINAL[0]: rel[1] == '/'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '/'
  ORIGINAL[1]: rel[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: sep[1] = '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ] = '\\0'
  ORIGINAL[3]: sep[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: sep += 3
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 += 3
  ORIGINAL[5]: sep = strchr(sep,'/')
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR1 , '/' )
  ORIGINAL[6]: strchr(sep,'/')
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , '/' )
  ORIGINAL[7]: sep
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: sep
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: sep
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: sep
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: sep
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: sep
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: buf
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641022
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481358
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !strcmp(pattern,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: len_p > len_h
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2
  ORIGINAL[2]: len_h
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: len_p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len_h
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len_h
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478004
FRAGMENT_COUNT: 22
  ORIGINAL[0]: pkt -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt -> stream_index
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> stream_index
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> duration
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> stream_index
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> duration
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pkt -> duration
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> duration
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: pkt -> stream_index
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pkt -> pts
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: pkt -> dts == ((int64_t )0x8000000000000000UL)
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[15]: pkt -> dts
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: pkt -> dts
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: dts
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pkt
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pkt
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 68719480705
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcl
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719480780
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640416
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774152
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: avformat_queue_attached_pictures(s)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640787
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477582
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63 && st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL) && st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63 && VAR3 -> VAR5 == ( ( VAR6 ) 0x8000000000000000UL ) && VAR3 -> VAR7 != ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[1]: pts_wrap_reference = st -> first_dts - av_rescale(60,st -> time_base . den,st -> time_base . num)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 - FUN1 ( 60 , VAR2 -> VAR4 . VAR5 , VAR2 -> VAR4 . VAR6 )
  ORIGINAL[2]: pts_wrap_behavior = (st -> first_dts) < (1LL << st -> pts_wrap_bits) - (1LL << st -> pts_wrap_bits - 3) || (st -> first_dts) < (1LL << st -> pts_wrap_bits) - (av_rescale(60,st -> time_base . den,st -> time_base . num))?1 : - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( VAR2 -> VAR3 ) < ( 1LL << VAR2 -> VAR4 ) - ( 1LL << VAR2 -> VAR4 - 3 ) || ( VAR2 -> VAR3 ) < ( 1LL << VAR2 -> VAR4 ) - ( FUN1 ( 60 , VAR2 -> VAR5 . VAR6 , VAR2 -> VAR5 . VAR7 ) ) ?1 : - 1
  ORIGINAL[3]: (st -> first_dts) < (1LL << st -> pts_wrap_bits) - (1LL << st -> pts_wrap_bits - 3) || (st -> first_dts) < (1LL << st -> pts_wrap_bits) - (av_rescale(60,st -> time_base . den,st -> time_base . num))?1 : - 1
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) < ( 1LL << VAR1 -> VAR3 ) - ( 1LL << VAR1 -> VAR3 - 3 ) || ( VAR1 -> VAR2 ) < ( 1LL << VAR1 -> VAR3 ) - ( FUN1 ( 60 , VAR1 -> VAR4 . VAR5 , VAR1 -> VAR4 . VAR6 ) ) ?1 : - 1
  ORIGINAL[4]: pts_wrap_behavior
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pts_wrap_behavior
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pts_wrap_behavior
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pts_wrap_behavior
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477047
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &score_ret
  TYPE[0]: CALL
  TOKENIZED[0]: &score_ret
  ORIGINAL[1]: score_ret >  *score_max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > *score_max
  ORIGINAL[2]: *score_max = score_ret
  TYPE[2]: CALL
  TOKENIZED[2]: *score_max = VAR1
  ORIGINAL[3]: *score_max
  TYPE[3]: CALL
  TOKENIZED[3]: *score_max
  ORIGINAL[4]: score_ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: score_ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771322
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = av_new_packet(pkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 )
  ORIGINAL[1]: av_new_packet(pkt,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640824
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771676
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640607
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771159
FRAGMENT_COUNT: 4
  ORIGINAL[0]: f -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: next
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: f
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773520
FRAGMENT_COUNT: 3
  ORIGINAL[0]: first_audio_index = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = - 1
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1
  ORIGINAL[2]: first_audio_index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640268
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771204
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *p) != '\\0' && ( *p) != ','
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) != '\\0' && ( *p ) != ' , '
  ORIGINAL[1]: (q - ext1) < sizeof(ext1) - 1
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 - VAR2 ) < sizeof ( VAR2 ) - 1
  ORIGINAL[2]: q - ext1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2
  ORIGINAL[3]: sizeof(ext1) - 1
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 ) - 1
  ORIGINAL[4]: q
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ext1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ext1
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640735
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 68719479317
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *avctx = st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: *avctx = VAR1 -> VAR2
  ORIGINAL[1]: avctx -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec_type
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478418
FRAGMENT_COUNT: 13
  ORIGINAL[0]: *st = s -> streams[stream_index]
  TYPE[0]: CALL
  TOKENIZED[0]: *st = VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> nb_index_entries
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> index_entries
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> index_entries
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244641156
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641167
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244640669
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480661
FRAGMENT_COUNT: 8
  ORIGINAL[0]: j < 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 16
  ORIGINAL[1]: j < len
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: j
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: j
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: j
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: j
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641222
FRAGMENT_COUNT: 1
  ORIGINAL[0]: proto
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064777655
FRAGMENT_COUNT: 4
  ORIGINAL[0]: tessin_vaudevillist[10]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 10 ]
  ORIGINAL[1]: tessin_vaudevillist[10]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 10 ]
  ORIGINAL[2]: tessin_vaudevillist
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: yaxche_concertment
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064775034
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[1]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[2]: (c -> codec_id) == AV_CODEC_ID_MPEG2VIDEO
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: c -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: AV_CODEC_ID_MPEG2VIDEO
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476877
FRAGMENT_COUNT: 7
  ORIGINAL[0]: filename && fmt -> extensions && av_match_ext(filename,fmt -> extensions)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 -> VAR3 && FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[1]: score += 5
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += 5
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: score
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: score
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477051
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_probe_input_format2(pd,is_opened,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &score )
  ORIGINAL[1]: pd
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: is_opened
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064774431
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ic -> bit_rate <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: bit_rate = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: bit_rate
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480335
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter
  ORIGINAL[1]: chapter = (av_mallocz(sizeof(AVChapter )))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( sizeof ( VAR2 ) ) )
  ORIGINAL[2]: !chapter
  TYPE[2]: CALL
  TOKENIZED[2]: !chapter
  ORIGINAL[3]: chapter
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: chapter
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chapter
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640699
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640661
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641141
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774642
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !strcmp(ic -> iformat -> name,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[1]: !strcmp(ic -> iformat -> name,\
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[2]: strcmp(ic -> iformat -> name,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[3]: ic -> iformat -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 68719478410
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481503
FRAGMENT_COUNT: 6
  ORIGINAL[0]: dbhost != 0 && dbport != 0 && dbuser != 0 && dbpassword != 0 && dbdatabase != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0 && VAR2 != 0 && VAR3 != 0 && VAR4 != 0 && VAR5 != 0
  ORIGINAL[1]: stonesoup_i < stonesoup_nFields
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: stonesoup_nFields
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_nFields
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_nFields
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772202
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !desc
  TYPE[0]: CALL
  TOKENIZED[0]: !desc
  ORIGINAL[1]: av_codec_set_codec_descriptor(enc,desc)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: enc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773321
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &cur_pkt
  TYPE[0]: CALL
  TOKENIZED[0]: &cur_pkt
  ORIGINAL[1]: (st -> discard) < AVDISCARD_ALL
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) < VAR3
  ORIGINAL[2]: av_free_packet(&cur_pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &cur_pkt )
  ORIGINAL[3]: &cur_pkt
  TYPE[3]: CALL
  TOKENIZED[3]: &cur_pkt
  ORIGINAL[4]: &cur_pkt
  TYPE[4]: CALL
  TOKENIZED[4]: &cur_pkt
  ORIGINAL[5]: cur_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: cur_pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: cur_pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777334
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret2 && !ret1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && !ret1
  ORIGINAL[1]: av_timegm(&time1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &time1 )
  ORIGINAL[2]: &time1
  TYPE[2]: CALL
  TOKENIZED[2]: &time1

CENTER_NODE: 30064772977
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pkt_buf_end = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf_end = ( ( void * ) 0 )
  ORIGINAL[1]: *pkt_buf_end
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buf_end
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: pkt_buf_end
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640698
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641296
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771940
FRAGMENT_COUNT: 6
  ORIGINAL[0]: pd -> buf
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pd -> buf
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (st -> codec -> codec_id) != AV_CODEC_ID_NONE && score > 100 / 4 || end
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4 && VAR5 > 100 / 4 || VAR6
  ORIGINAL[3]: av_freep((&pd -> buf))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( &pd -> VAR1 ) )
  ORIGINAL[4]: &pd -> buf
  TYPE[4]: CALL
  TOKENIZED[4]: &pd -> VAR1
  ORIGINAL[5]: pd -> buf
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2

CENTER_NODE: 47244640828
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774890
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (tags -> id) == id
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[3]: tags -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: id
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: tags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641227
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640809
FRAGMENT_COUNT: 0

