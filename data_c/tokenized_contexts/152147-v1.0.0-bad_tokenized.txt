# Tokenized code fragments for 152147-v1.0.0-bad
# Total center nodes processed: 82
# Total code fragments found: 384

CENTER_NODE: 47244640457
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640288
FRAGMENT_COUNT: 1
  ORIGINAL[0]: len >= 1 && dirent[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 1 && VAR2 [ 0 ] == 47

CENTER_NODE: 30064771992
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !(base[0] == '\\0')
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 [ 0 ] == '\\0' )
  ORIGINAL[1]: memcpy(p,base,len = saved_lengths[0])
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 = VAR4 [ 0 ] )
  ORIGINAL[2]: len = saved_lengths[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 [ 0 ]
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: base
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477689
FRAGMENT_COUNT: 5
  ORIGINAL[0]: strncmp(parent_dirent,child_dirent,len)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: parent_dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: parent_dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child_dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640578
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640589
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772383
FRAGMENT_COUNT: 2
  ORIGINAL[0]: relpath_is_canonical(relpath)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: relpath
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477677
FRAGMENT_COUNT: 6
  ORIGINAL[0]: uri_ancestor_len == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 1
  ORIGINAL[1]: uri1 + i
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: uri1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772338
FRAGMENT_COUNT: 4
  ORIGINAL[0]: canonicalize(type_relpath,relpath,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: type_relpath
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: relpath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476978
FRAGMENT_COUNT: 4
  ORIGINAL[0]: len == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: len > 0 && relpath[len] != 47
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 0 && VAR2 [ VAR1 ] != 47
  ORIGINAL[2]: len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771880
FRAGMENT_COUNT: 6
  ORIGINAL[0]: len == 1 && dirent[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 1 && VAR2 [ 0 ] == 47
  ORIGINAL[1]: len == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 1
  ORIGINAL[2]: dirent[0] == 47
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] == 47
  ORIGINAL[3]: dirent[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dirent
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477543
FRAGMENT_COUNT: 6
  ORIGINAL[0]: dirent + start
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 + VAR2
  ORIGINAL[1]: start
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: start
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirent
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478351
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: duotriode_rarely
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477334
FRAGMENT_COUNT: 4
  ORIGINAL[0]: internal_style(relpath,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: relpath
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477787
FRAGMENT_COUNT: 4
  ORIGINAL[0]: canonicalize(type_uri,uri,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: type_uri
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: uri
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640437
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244640525
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477764
FRAGMENT_COUNT: 10
  ORIGINAL[0]: apr_filepath_merge(&buffer,((void *)0),path_apr,0x04,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &buffer , ( ( void * ) 0 ) , VAR1 , 0x04 , VAR2 )
  ORIGINAL[1]: &buffer
  TYPE[1]: CALL
  TOKENIZED[1]: &buffer
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: path_apr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pool
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pool
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pool
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pool
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640520
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476826
FRAGMENT_COUNT: 3
  ORIGINAL[0]: stonesoup_trace_counter = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: *milzbrand_foglietto = 0
  TYPE[1]: CALL
  TOKENIZED[1]: *milzbrand_foglietto = 0
  ORIGINAL[2]: milzbrand_foglietto
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773101
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_path_is_url(uri)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: uri = svn_path_uri_encode(uri,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: svn_path_uri_encode(uri,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: uri
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772100
FRAGMENT_COUNT: 5
  ORIGINAL[0]: relpath_is_canonical(relpath)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: relpath_is_canonical(relpath)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: (void )0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void ) 0
  ORIGINAL[3]: __assert_fail(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476970
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !dirent
  TYPE[0]: CALL
  TOKENIZED[0]: !dirent
  ORIGINAL[1]: dirent[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477642
FRAGMENT_COUNT: 6
  ORIGINAL[0]: relpath_is_canonical(relpath2)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: apr_pstrndup(pool,relpath1,get_longest_ancestor_length(type_relpath,relpath1,relpath2,pool))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , FUN2 ( VAR3 , VAR2 , VAR4 , VAR1 ) )
  ORIGINAL[2]: get_longest_ancestor_length(type_relpath,relpath1,relpath2,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: relpath1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771275
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c < 'a' || c > 'z'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 'a' || VAR1 > 'z'
  ORIGINAL[1]: c < 'a'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 'a'
  ORIGINAL[2]: c > 'z'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > 'z'
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640577
FRAGMENT_COUNT: 1
  ORIGINAL[0]: status == 20000 + 23
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 20000 + 23

CENTER_NODE: 68719477591
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_relpath_basename(relpath,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: pool
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: base_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: relpath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640371
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i == path1_len && path2[i] == 47 || i == path2_len && path1[i] == 47 || i == path1_len && i == path2_len
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 && VAR3 [ VAR1 ] == 47 || VAR1 == VAR4 && VAR5 [ VAR1 ] == 47 || VAR1 == VAR2 && VAR1 == VAR4
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244640470
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064772163
FRAGMENT_COUNT: 4
  ORIGINAL[0]: dirpath != base_name?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != base_name? ( ( void ) 0 ) : FUN1 ( \
  ORIGINAL[1]: dirpath != base_name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2
  ORIGINAL[2]: __assert_fail(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: <global> __PRETTY_FUNCTION__
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 30064773076
FRAGMENT_COUNT: 6
  ORIGINAL[0]: svn_fspath__is_canonical(fspath1)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: svn_fspath__is_canonical(fspath1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: (void )0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void ) 0
  ORIGINAL[3]: __assert_fail(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: fspath1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: <global> __PRETTY_FUNCTION__
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: <global> VAR1

CENTER_NODE: 30064771267
FRAGMENT_COUNT: 8
  ORIGINAL[0]: c < 65 || c > 'Z'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 65 || VAR1 > 'Z'
  ORIGINAL[1]: c < 65
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 65
  ORIGINAL[2]: c > 'Z'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > 'Z'
  ORIGINAL[3]: (char )(c - 65 + 'a')
  TYPE[3]: CALL
  TOKENIZED[3]: ( char ) ( VAR1 - 65 + 'a' )
  ORIGINAL[4]: c - 65 + 'a'
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 - 65 + 'a'
  ORIGINAL[5]: c - 65
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 - 65
  ORIGINAL[6]: c
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: c
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773009
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_relpath_skip_ancestor(parent_fspath + 1,child_fspath + 1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 + 1 , VAR2 + 1 )
  ORIGINAL[1]: parent_fspath + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 1
  ORIGINAL[2]: parent_fspath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child_fspath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476766
FRAGMENT_COUNT: 7
  ORIGINAL[0]: dirpath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: stat(dirpath, &st) == -1
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[2]: retval = mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[3]: retval == 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == 0
  ORIGINAL[4]: retval
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: retval
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: retval
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640407
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while ((s = (va_arg(va,const char *))) != ((void *)0))
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( ( VAR1 = ( FUN1 ( VAR2 , const char * ) ) ) != ( ( void * ) 0 ) )

CENTER_NODE: 68719478270
FRAGMENT_COUNT: 3
  ORIGINAL[0]: len == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 1
  ORIGINAL[1]: fspath[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: fspath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477741
FRAGMENT_COUNT: 3
  ORIGINAL[0]: uri_skip_ancestor(parent_uri,child_uri)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: parent_uri
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: child_uri
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477732
FRAGMENT_COUNT: 8
  ORIGINAL[0]: strncmp(parent_uri,child_uri,len)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: len
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: parent_uri
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child_uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: len
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719478170
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *pcommon
  TYPE[0]: CALL
  TOKENIZED[0]: *pcommon
  ORIGINAL[1]: pcondensed_targets != ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != ( ( void * ) 0 )
  ORIGINAL[2]: *pcommon
  TYPE[2]: CALL
  TOKENIZED[2]: *pcommon
  ORIGINAL[3]: *pcommon
  TYPE[3]: CALL
  TOKENIZED[3]: *pcommon
  ORIGINAL[4]: basedir_len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pcommon
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477632
FRAGMENT_COUNT: 5
  ORIGINAL[0]: apr_pstrndup(pool,dirent1,get_longest_ancestor_length(type_dirent,dirent1,dirent2,pool))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , FUN2 ( VAR3 , VAR2 , VAR4 , VAR1 ) )
  ORIGINAL[1]: get_longest_ancestor_length(type_dirent,dirent1,dirent2,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dirent1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640396
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while ((s = (va_arg(va,const char *))) != ((void *)0))
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( ( VAR1 = ( FUN1 ( VAR2 , const char * ) ) ) != ( ( void * ) 0 ) )

CENTER_NODE: 30064772097
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *base_name = svn_dirent_basename(dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: *base_name = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: *base_name
  TYPE[1]: CALL
  TOKENIZED[1]: *base_name
  ORIGINAL[2]: svn_dirent_basename(dirent,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: base_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirent
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772295
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_dirent_skip_ancestor(parent_dirent,child_dirent) != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 ) != ( ( void * ) 0 )
  ORIGINAL[1]: svn_dirent_skip_ancestor(parent_dirent,child_dirent)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 47244640465
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477331
FRAGMENT_COUNT: 2
  ORIGINAL[0]: dirent[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772265
FRAGMENT_COUNT: 2
  ORIGINAL[0]: child_relpath[len] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] == 47
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064772225
FRAGMENT_COUNT: 5
  ORIGINAL[0]: is_child(type_dirent,parent_dirent,child_dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: type_dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: parent_dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child_dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477792
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *dst = canonicalize(type_dirent,dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: *dst = FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: canonicalize(type_dirent,dirent,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: dst
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: type_dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dst
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771886
FRAGMENT_COUNT: 2
  ORIGINAL[0]: svn_uri_is_canonical(uri,((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064772297
FRAGMENT_COUNT: 5
  ORIGINAL[0]: uri_skip_ancestor(parent_uri,child_uri) != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 ) != ( ( void * ) 0 )
  ORIGINAL[1]: uri_skip_ancestor(parent_uri,child_uri)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: parent_uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: child_uri
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772142
FRAGMENT_COUNT: 7
  ORIGINAL[0]: svn_uri_is_root(uri,len)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: apr_pstrmemdup(pool,uri,uri_previous_segment(uri,len))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , FUN2 ( VAR2 , VAR3 ) )
  ORIGINAL[2]: uri_previous_segment(uri,len)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: uri
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: uri
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476789
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: va_end(argptr)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: argptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773019
FRAGMENT_COUNT: 7
  ORIGINAL[0]: fspath[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == 47
  ORIGINAL[1]: fspath[1] == '\\0'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ] == '\\0'
  ORIGINAL[2]: fspath[1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ]
  ORIGINAL[3]: fspath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: fspath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fspath
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fspath
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772342
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *ptr) == 47
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ptr ) == 47
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: ptr++
  TYPE[2]: CALL
  TOKENIZED[2]: ptr++
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477356
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_dirent_is_absolute(component)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: clen + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 1
  ORIGINAL[2]: clen
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: component
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: clen
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478039
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < abs_targets -> nelts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ((const char **)(abs_targets -> elts))[i]
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( const char ** ) ( VAR1 -> VAR2 ) ) [ VAR3 ]
  ORIGINAL[2]: (const char **)(abs_targets -> elts)
  TYPE[2]: CALL
  TOKENIZED[2]: ( const char ** ) ( VAR1 -> VAR2 )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478260
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *url
  TYPE[0]: CALL
  TOKENIZED[0]: *url
  ORIGINAL[1]: apr_pstrcat(pool,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: (char *)((void *)0)
  TYPE[2]: CALL
  TOKENIZED[2]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dirent
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772984
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fspath[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == 47
  ORIGINAL[1]: fspath[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: fspath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fspath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476736
FRAGMENT_COUNT: 2
  ORIGINAL[0]: type_uri=0
  TYPE[0]: CALL
  TOKENIZED[0]: type_uri=0
  ORIGINAL[1]: type_uri
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477329
FRAGMENT_COUNT: 4
  ORIGINAL[0]: internal_style(dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640580
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640459
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773044
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *dirpath = svn_fspath__dirname(fspath,result_pool)
  TYPE[0]: CALL
  TOKENIZED[0]: *dirpath = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: *dirpath
  TYPE[1]: CALL
  TOKENIZED[1]: *dirpath
  ORIGINAL[2]: svn_fspath__dirname(fspath,result_pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: dirpath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fspath
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478317
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fspath[1] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '\\0'
  ORIGINAL[1]: result = apr_pstrcat(result_pool,fspath,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , \
  ORIGINAL[2]: apr_pstrcat(result_pool,fspath,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[3]: result
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: result_pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: result
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477620
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_uri_is_root(uri,len)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: svn_path_uri_decode(uri + start,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 + VAR2 , VAR3 )
  ORIGINAL[2]: uri + start
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + VAR2
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476994
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i == 0 && len > 1 && ( *uri) == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0 && VAR2 > 1 && ( *uri ) == 47
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771832
FRAGMENT_COUNT: 5
  ORIGINAL[0]: type == type_uri || type == type_dirent && dirent_is_rooted(path2)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 || VAR1 == VAR3 && FUN1 ( VAR4 )
  ORIGINAL[1]: type == type_uri
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type == type_dirent && dirent_is_rooted(path2)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == VAR2 && FUN1 ( VAR3 )
  ORIGINAL[3]: type == type_dirent
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 == VAR2
  ORIGINAL[4]: dirent_is_rooted(path2)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )

CENTER_NODE: 30064771289
FRAGMENT_COUNT: 5
  ORIGINAL[0]: len > 0 && dirent[len] != 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0 && VAR2 [ VAR1 ] != 47
  ORIGINAL[1]: --len
  TYPE[1]: CALL
  TOKENIZED[1]: --len
  ORIGINAL[2]: while (len > 0 && dirent[len] != 47)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( VAR1 > 0 && VAR2 [ VAR1 ] != 47 )
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640502
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719477515
FRAGMENT_COUNT: 6
  ORIGINAL[0]: len == dirent_root_length(dirent,len)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == FUN1 ( VAR2 , VAR1 )
  ORIGINAL[1]: apr_pstrmemdup(pool,dirent,len)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirent
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478216
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_err__temp
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: svn_err__temp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: svn_err__temp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476803
FRAGMENT_COUNT: 7
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: stonesoup_tainted_file_name = getenv(stonesoup_env_var_name)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[2]: stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[3]: fopen(stonesoup_tainted_file_name,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , \
  ORIGINAL[4]: stonesoup_tainted_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_tainted_file_name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_tainted_file
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772987
FRAGMENT_COUNT: 10
  ORIGINAL[0]: fspath[0] == 47 && fspath[1] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == 47 && VAR1 [ 1 ] == '\\0'
  ORIGINAL[1]: fspath[0] == 47
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ] == 47
  ORIGINAL[2]: fspath[1] == '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ] == '\\0'
  ORIGINAL[3]: apr_pstrcat(pool,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , \
  ORIGINAL[4]: svn_relpath_canonicalize(fspath,pool)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[5]: (char *)((void *)0)
  TYPE[5]: CALL
  TOKENIZED[5]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[6]: (void *)0
  TYPE[6]: CALL
  TOKENIZED[6]: ( void * ) 0
  ORIGINAL[7]: pool
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fspath
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pool
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772300
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !dirent
  TYPE[0]: CALL
  TOKENIZED[0]: !dirent
  ORIGINAL[1]: dirent[0] == 47
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ] == 47
  ORIGINAL[2]: dirent[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: !0
  TYPE[3]: CALL
  TOKENIZED[3]: !0

CENTER_NODE: 30064772042
FRAGMENT_COUNT: 34
  ORIGINAL[0]: blen == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: clen == 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 0
  ORIGINAL[2]: apr_pmemdup(pool,base,blen + 1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 + 1 )
  ORIGINAL[3]: blen + 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 1
  ORIGINAL[4]: path = (apr_palloc(pool,blen + 1 + clen + 1))
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = ( FUN1 ( VAR2 , VAR3 + 1 + VAR4 + 1 ) )
  ORIGINAL[5]: apr_palloc(pool,blen + 1 + clen + 1)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , VAR2 + 1 + VAR3 + 1 )
  ORIGINAL[6]: blen + 1 + clen + 1
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 + 1 + VAR2 + 1
  ORIGINAL[7]: blen + 1 + clen
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 + 1 + VAR2
  ORIGINAL[8]: blen + 1
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 + 1
  ORIGINAL[9]: memcpy(path,base,blen)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[10]: path[blen] = 47
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 [ VAR2 ] = 47
  ORIGINAL[11]: path[blen]
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 [ VAR2 ]
  ORIGINAL[12]: memcpy((path + blen + 1),component,clen + 1)
  TYPE[12]: CALL
  TOKENIZED[12]: FUN1 ( ( VAR1 + VAR2 + 1 ) , VAR3 , VAR4 + 1 )
  ORIGINAL[13]: path + blen + 1
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 + VAR2 + 1
  ORIGINAL[14]: path + blen
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 + VAR2
  ORIGINAL[15]: clen + 1
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 + 1
  ORIGINAL[16]: clen
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pool
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: base
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: blen
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: path
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pool
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: blen
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: clen
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: path
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: base
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: blen
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: path
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: blen
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: path
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: blen
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: component
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: clen
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: path
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1

CENTER_NODE: 30064772113
FRAGMENT_COUNT: 8
  ORIGINAL[0]: start > 0 && relpath[start - 1] != 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0 && VAR2 [ VAR1 - 1 ] != 47
  ORIGINAL[1]: start > 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 0
  ORIGINAL[2]: relpath[start - 1] != 47
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 - 1 ] != 47
  ORIGINAL[3]: --start
  TYPE[3]: CALL
  TOKENIZED[3]: --start
  ORIGINAL[4]: while (start > 0 && relpath[start - 1] != 47)
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: while ( VAR1 > 0 && VAR2 [ VAR1 - 1 ] != 47 )
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: start
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pool
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640461
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477168
FRAGMENT_COUNT: 32
  ORIGINAL[0]: *src
  TYPE[0]: CALL
  TOKENIZED[0]: *src
  ORIGINAL[1]: src[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: src[2]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 2 ]
  ORIGINAL[3]: src[3]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 3 ]
  ORIGINAL[4]: src[3]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 3 ]
  ORIGINAL[5]: src[1]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ 1 ]
  ORIGINAL[6]: src[2]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 [ 2 ]
  ORIGINAL[7]: src[3]
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 [ 3 ]
  ORIGINAL[8]: src[4]
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 [ 4 ]
  ORIGINAL[9]: src[4]
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 [ 4 ]
  ORIGINAL[10]: src[1]
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 [ 1 ]
  ORIGINAL[11]: src[2]
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 [ 2 ]
  ORIGINAL[12]: src[3]
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 [ 3 ]
  ORIGINAL[13]: src[4]
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 [ 4 ]
  ORIGINAL[14]: src[5]
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 [ 5 ]
  ORIGINAL[15]: src[5]
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 [ 5 ]
  ORIGINAL[16]: src[1]
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 [ 1 ]
  ORIGINAL[17]: src[1]
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 [ 1 ]
  ORIGINAL[18]: *src
  TYPE[18]: CALL
  TOKENIZED[18]: *src
  ORIGINAL[19]: *src
  TYPE[19]: CALL
  TOKENIZED[19]: *src
  ORIGINAL[20]: src[0]
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 [ 0 ]
  ORIGINAL[21]: src[0]
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 [ 0 ]
  ORIGINAL[22]: src[1]
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 [ 1 ]
  ORIGINAL[23]: src[2]
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 [ 2 ]
  ORIGINAL[24]: src = schema_data
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 = VAR2
  ORIGINAL[25]: *src
  TYPE[25]: CALL
  TOKENIZED[25]: *src
  ORIGINAL[26]: *src
  TYPE[26]: CALL
  TOKENIZED[26]: *src
  ORIGINAL[27]: src++
  TYPE[27]: CALL
  TOKENIZED[27]: src++
  ORIGINAL[28]: schema_data
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: src
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: src
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: src
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1

CENTER_NODE: 68719477811
FRAGMENT_COUNT: 4
  ORIGINAL[0]: seglen = (ptr - seg)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( VAR2 - VAR3 )
  ORIGINAL[1]: seglen == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 1
  ORIGINAL[2]: seglen
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: seglen
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478293
FRAGMENT_COUNT: 3
  ORIGINAL[0]: strchr(result,47) == ((void *)0)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 47 ) == ( ( void * ) 0 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: result
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: result
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772526
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !( *ptr) && ( *(ptr - 1)) == 47
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *ptr ) && ( * ( VAR1 - 1 ) ) == 47
  ORIGINAL[1]: *(ptr - 1)
  TYPE[1]: CALL
  TOKENIZED[1]: * ( VAR1 - 1 )
  ORIGINAL[2]: ptr - 1 != uri
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 1 != VAR2
  ORIGINAL[3]: ptr - 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - 1
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: uri
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771316
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i == 5 && strncmp(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 5 && FUN1 ( \
  ORIGINAL[1]: i += 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += 2
  ORIGINAL[2]: for (i += 2;i < len;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 += 2 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

