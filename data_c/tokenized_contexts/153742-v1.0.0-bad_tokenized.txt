# Tokenized code fragments for 153742-v1.0.0-bad
# Total center nodes processed: 95
# Total code fragments found: 443

CENTER_NODE: 68719477430
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < sizeof(log_levels) / sizeof(log_levels[0])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < sizeof ( VAR2 ) / sizeof ( VAR2 [ 0 ] )
  ORIGINAL[1]: level = (strtol(arg,&tail,'\\n'))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 , &tail , '\\n' ) )
  ORIGINAL[2]: strtol(arg,&tail,'\\n')
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &tail , '\\n' )
  ORIGINAL[3]: level
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: arg
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: level
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772749
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772577
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *codec = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *codec = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772165
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719477837
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772188
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_strerror(err,errbuf,sizeof(errbuf)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , sizeof ( VAR2 ) ) < 0
  ORIGINAL[1]: errbuf_ptr = (strerror(-err))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( -err ) )
  ORIGINAL[2]: strerror(-err)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( -err )
  ORIGINAL[3]: errbuf_ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773099
FRAGMENT_COUNT: 5
  ORIGINAL[0]: bretta_recompounding != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: lovering_dermochrome = ((char *)(malloc(liblabs_aethereal + 1)))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( char * ) ( FUN1 ( VAR2 + 1 ) ) )
  ORIGINAL[2]: (char *)(malloc(liblabs_aethereal + 1))
  TYPE[2]: CALL
  TOKENIZED[2]: ( char * ) ( FUN1 ( VAR1 + 1 ) )
  ORIGINAL[3]: lovering_dermochrome
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: lovering_dermochrome
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477188
FRAGMENT_COUNT: 4
  ORIGINAL[0]: sizeof(opt_stripped) > (p - opt + 1)
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( VAR1 ) > ( VAR2 - VAR3 + 1 )
  ORIGINAL[1]: sizeof(opt_stripped)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: opt_stripped
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: opt_stripped
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773394
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_free(fb)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: fb
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771970
FRAGMENT_COUNT: 18
  ORIGINAL[0]: ret >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: ret != -((int )((0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != - ( ( int ) ( ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24 ) )
  ORIGINAL[2]: -((int )((0xF8 | 'O' << 8 | 'P' << 16) | ((unsigned int )'T') << 24))
  TYPE[2]: CALL
  TOKENIZED[2]: - ( ( int ) ( ( 0xF8 | 'O' << 8 | 'P' << 16 ) | ( ( unsigned int ) 'T' ) << 24 ) )
  ORIGINAL[3]: av_log(((void *)0),16,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[4]: (void *)0
  TYPE[4]: CALL
  TOKENIZED[4]: ( void * ) 0
  ORIGINAL[5]: argv[optindex]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ]
  ORIGINAL[6]: opt[0] == 'n' && opt[1] == 'o' && (po = find_option(options,opt + 2)) && po -> name && po -> flags & 0x00002
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 [ 0 ] == 'n' && VAR1 [ 1 ] == 'o' && ( VAR2 = FUN1 ( VAR3 , VAR1 + 2 ) ) && VAR2 -> VAR4 && VAR2 -> VAR5 & 0x00002
  ORIGINAL[7]: opt[0] == 'n' && opt[1] == 'o' && (po = find_option(options,opt + 2)) && po -> name
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 [ 0 ] == 'n' && VAR1 [ 1 ] == 'o' && ( VAR2 = FUN1 ( VAR3 , VAR1 + 2 ) ) && VAR2 -> VAR4
  ORIGINAL[8]: opt[0] == 'n' && opt[1] == 'o' && (po = find_option(options,opt + 2))
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 [ 0 ] == 'n' && VAR1 [ 1 ] == 'o' && ( VAR2 = FUN1 ( VAR3 , VAR1 + 2 ) )
  ORIGINAL[9]: opt[0] == 'n' && opt[1] == 'o'
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 [ 0 ] == 'n' && VAR1 [ 1 ] == 'o'
  ORIGINAL[10]: opt[0] == 'n'
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 [ 0 ] == 'n'
  ORIGINAL[11]: opt[0]
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 [ 0 ]
  ORIGINAL[12]: ret
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: opt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: argv
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: optindex
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: ret
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: opt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064772523
FRAGMENT_COUNT: 4
  ORIGINAL[0]: encoder?av_codec_is_encoder(prev) : av_codec_is_decoder(prev)
  TYPE[0]: CALL
  TOKENIZED[0]: encoder?av_codec_is_encoder ( VAR1 ) : FUN1 ( VAR1 )
  ORIGINAL[1]: av_codec_is_encoder(prev)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: encoder
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: prev
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771808
FRAGMENT_COUNT: 5
  ORIGINAL[0]: sizeof(( *octx -> groups))
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( ( *octx -> VAR1 ) )
  ORIGINAL[1]: *octx -> groups
  TYPE[1]: CALL
  TOKENIZED[1]: *octx -> VAR1
  ORIGINAL[2]: octx -> groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: octx -> groups
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: octx -> groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2

CENTER_NODE: 30064773397
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *buf =  *pool
  TYPE[0]: CALL
  TOKENIZED[0]: *buf = *pool
  ORIGINAL[1]: *pool
  TYPE[1]: CALL
  TOKENIZED[1]: *pool
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640578
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772161
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log_get_level() > 40?av_log_get_level() : 40
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ) > 40?av_log_get_level ( ) : 40
  ORIGINAL[1]: av_log_get_level() > 40
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ) > 40
  ORIGINAL[2]: av_log_get_level()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: av_log_get_level()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 47244640411
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477012
FRAGMENT_COUNT: 6
  ORIGINAL[0]: po -> name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: po -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: po -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: flags
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: po
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: po
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476832
FRAGMENT_COUNT: 2
  ORIGINAL[0]: &swr_opts
  TYPE[0]: CALL
  TOKENIZED[0]: &swr_opts
  ORIGINAL[1]: <global> swr_opts
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 68719477045
FRAGMENT_COUNT: 6
  ORIGINAL[0]: opt[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: opt[1] == '-'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ] == '-'
  ORIGINAL[2]: opt[1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ]
  ORIGINAL[3]: opt[2]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 2 ]
  ORIGINAL[4]: opt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477775
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *p != 0
  TYPE[0]: CALL
  TOKENIZED[0]: *p != 0
  ORIGINAL[1]: sizeof(name)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640421
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771607
FRAGMENT_COUNT: 19
  ORIGINAL[0]: i < argc
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: dump_argument(argv[i])
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 [ VAR2 ] )
  ORIGINAL[3]: argv[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: fputc((i < argc - 1?32 : '\\n'),report_file)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( VAR1 < VAR2 - 1?32 : '\\n' ) , VAR3 )
  ORIGINAL[5]: i < argc - 1?32 : '\\n'
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 < VAR2 - 1?32 : '\\n'
  ORIGINAL[6]: i < argc - 1
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 < VAR2 - 1
  ORIGINAL[7]: argc - 1
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 - 1
  ORIGINAL[8]: for (i = 0;i < argc;i++)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[9]: <global> report_file
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: <global> VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: argc
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: argv
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: i
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: argc
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: <global> report_file
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: <global> VAR1
  ORIGINAL[18]: <global> report_file
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: <global> VAR1

CENTER_NODE: 68719477906
FRAGMENT_COUNT: 4
  ORIGINAL[0]: name = avio_enum_protocols(&opaque,1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &opaque , 1 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772370
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 47244640426
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476925
FRAGMENT_COUNT: 5
  ORIGINAL[0]: child = av_opt_child_class_next(class,child)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR1 )
  ORIGINAL[1]: show_help_children(child,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: flags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477977
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: av_log(((void *)0),16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772181
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (ret = av_parse_cpu_caps(&flags,arg)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( &flags , VAR2 ) ) < 0
  ORIGINAL[1]: av_force_cpu_flags(flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772699
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 68719477783
FRAGMENT_COUNT: 2
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AVMEDIA_TYPE_AUDIO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640349
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < nb_groups;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 ; i++ )

CENTER_NODE: 47244640416
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476840
FRAGMENT_COUNT: 4
  ORIGINAL[0]: line[1024]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1024 ]
  ORIGINAL[1]: print_prefix = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: print_prefix
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: print_prefix
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476745
FRAGMENT_COUNT: 3
  ORIGINAL[0]: size_filepath = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: retval = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: retval
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771136
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: * stonesoup_tainted_file = 0
  TYPE[1]: CALL
  TOKENIZED[1]: * VAR1 = 0
  ORIGINAL[2]: stonesoup_tainted_file
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_result
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773464
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: unbrined_sculduddery
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772721
FRAGMENT_COUNT: 3
  ORIGINAL[0]: **filter __attribute__((unused))  = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: **filter FUN1 ( ( VAR1 ) ) = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: filter
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477993
FRAGMENT_COUNT: 8
  ORIGINAL[0]: fmt -> name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: fmt -> long_name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt -> extensions
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> mime_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: fmt -> mime_type
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: mime_type
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772371
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 30064771716
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: &l -> VAR1
  ORIGINAL[1]: l -> nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: l -> nb_groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: nb_groups
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: l
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: l
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: l
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478213
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *size < new_size
  TYPE[0]: CALL
  TOKENIZED[0]: *size < VAR1
  ORIGINAL[1]: !tmp
  TYPE[1]: CALL
  TOKENIZED[1]: !tmp
  ORIGINAL[2]: exit(1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( 1 )
  ORIGINAL[3]: tmp +  *size * elem_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + *size * VAR2
  ORIGINAL[4]: tmp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tmp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tmp
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773017
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: av_log(s,16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: spec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772369
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 30064772537
FRAGMENT_COUNT: 7
  ORIGINAL[0]: (( *da) -> type) != (( *db) -> type)
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( *da ) -> VAR1 ) != ( ( *db ) -> VAR1 )
  ORIGINAL[1]: ( *db) -> type
  TYPE[1]: CALL
  TOKENIZED[1]: ( *db ) -> VAR1
  ORIGINAL[2]: (( *da) -> type) - (( *db) -> type)
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( *da ) -> VAR1 ) - ( ( *db ) -> VAR1 )
  ORIGINAL[3]: ( *da) -> type
  TYPE[3]: CALL
  TOKENIZED[3]: ( *da ) -> VAR1
  ORIGINAL[4]: ( *db) -> type
  TYPE[4]: CALL
  TOKENIZED[4]: ( *db ) -> VAR1
  ORIGINAL[5]: *db
  TYPE[5]: CALL
  TOKENIZED[5]: *db
  ORIGINAL[6]: type
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771482
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: &g -> opts[i]
  TYPE[1]: CALL
  TOKENIZED[1]: &g -> VAR1 [ VAR2 ]
  ORIGINAL[2]: g -> opts[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: g -> opts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771264
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064773292
FRAGMENT_COUNT: 59
  ORIGINAL[0]: !( *pool) && (ret = alloc_buffer(pool,s,pool)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *pool ) && ( VAR1 = FUN1 ( VAR2 , VAR3 , VAR2 ) ) < 0
  ORIGINAL[1]: buf -> w != s -> width || buf -> h != s -> height || (buf -> pix_fmt) != (s -> pix_fmt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR3 -> VAR4 || VAR1 -> VAR5 != VAR3 -> VAR6 || ( VAR1 -> VAR7 ) != ( VAR3 -> VAR7 )
  ORIGINAL[2]: buf -> w != s -> width || buf -> h != s -> height
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 != VAR3 -> VAR4 || VAR1 -> VAR5 != VAR3 -> VAR6
  ORIGINAL[3]: (buf -> pix_fmt) != (s -> pix_fmt)
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) != ( VAR3 -> VAR2 )
  ORIGINAL[4]: av_freep((&buf -> base[0]))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( &buf -> VAR1 [ 0 ] ) )
  ORIGINAL[5]: &buf -> base[0]
  TYPE[5]: CALL
  TOKENIZED[5]: &buf -> VAR1 [ 0 ]
  ORIGINAL[6]: buf -> base[0]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[7]: buf -> base
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: av_free(buf)
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 )
  ORIGINAL[9]: (ret = alloc_buffer(pool,s,&buf)) < 0
  TYPE[9]: CALL
  TOKENIZED[9]: ( VAR1 = FUN1 ( VAR2 , VAR3 , &buf ) ) < 0
  ORIGINAL[10]: ret = alloc_buffer(pool,s,&buf)
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 = FUN1 ( VAR2 , VAR3 , &buf )
  ORIGINAL[11]: alloc_buffer(pool,s,&buf)
  TYPE[11]: CALL
  TOKENIZED[11]: FUN1 ( VAR1 , VAR2 , &buf )
  ORIGINAL[12]: &buf
  TYPE[12]: CALL
  TOKENIZED[12]: &buf
  ORIGINAL[13]: !(!buf -> refcount)
  TYPE[13]: CALL
  TOKENIZED[13]: ! ( !buf -> VAR1 )
  ORIGINAL[14]: !buf -> refcount
  TYPE[14]: CALL
  TOKENIZED[14]: !buf -> VAR1
  ORIGINAL[15]: buf -> refcount
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: buf -> refcount++
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> refcount++
  ORIGINAL[17]: buf -> refcount
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: frame -> opaque = buf
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2 = VAR3
  ORIGINAL[19]: frame -> opaque
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: frame -> type = 2
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2 = 2
  ORIGINAL[21]: frame -> type
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2
  ORIGINAL[22]: frame -> extended_data = frame -> data
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2 = VAR1 -> VAR3
  ORIGINAL[23]: frame -> extended_data
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2
  ORIGINAL[24]: frame -> data
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2
  ORIGINAL[25]: i = 0
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 = 0
  ORIGINAL[26]: i < sizeof(buf -> data) / sizeof(buf -> data[0])
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[27]: sizeof(buf -> data) / sizeof(buf -> data[0])
  TYPE[27]: CALL
  TOKENIZED[27]: sizeof ( VAR1 -> VAR2 ) / sizeof ( VAR1 -> VAR2 [ 0 ] )
  ORIGINAL[28]: sizeof(buf -> data)
  TYPE[28]: CALL
  TOKENIZED[28]: sizeof ( VAR1 -> VAR2 )
  ORIGINAL[29]: buf -> data
  TYPE[29]: CALL
  TOKENIZED[29]: VAR1 -> VAR2
  ORIGINAL[30]: sizeof(buf -> data[0])
  TYPE[30]: CALL
  TOKENIZED[30]: sizeof ( VAR1 -> VAR2 [ 0 ] )
  ORIGINAL[31]: buf -> data[0]
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[32]: buf -> data
  TYPE[32]: CALL
  TOKENIZED[32]: VAR1 -> VAR2
  ORIGINAL[33]: base
  TYPE[33]: FIELD_IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: refcount
  TYPE[34]: FIELD_IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: refcount
  TYPE[35]: FIELD_IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: opaque
  TYPE[36]: FIELD_IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: type
  TYPE[37]: FIELD_IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: extended_data
  TYPE[38]: FIELD_IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: data
  TYPE[39]: FIELD_IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: data
  TYPE[40]: FIELD_IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: data
  TYPE[41]: FIELD_IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: buf
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: buf
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: ret
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: pool
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: s
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: buf
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: buf
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: buf
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: frame
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: buf
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: frame
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: frame
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: frame
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1
  ORIGINAL[55]: i
  TYPE[55]: IDENTIFIER
  TOKENIZED[55]: VAR1
  ORIGINAL[56]: i
  TYPE[56]: IDENTIFIER
  TOKENIZED[56]: VAR1
  ORIGINAL[57]: buf
  TYPE[57]: IDENTIFIER
  TOKENIZED[57]: VAR1
  ORIGINAL[58]: buf
  TYPE[58]: IDENTIFIER
  TOKENIZED[58]: VAR1

CENTER_NODE: 68719478367
FRAGMENT_COUNT: 4
  ORIGINAL[0]: frame -> opaque
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: opaque
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477507
FRAGMENT_COUNT: 6
  ORIGINAL[0]: strtol(arg,&tail,'\\n')
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &tail , '\\n' )
  ORIGINAL[1]: &tail
  TYPE[1]: CALL
  TOKENIZED[1]: &tail
  ORIGINAL[2]: max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tail
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: arg
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773043
FRAGMENT_COUNT: 7
  ORIGINAL[0]: t = av_dict_get(opts,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: av_dict_get(opts,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: check_stream_specifier(s,st,(p + 1))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , ( VAR3 + 1 ) )
  ORIGINAL[3]: t
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: opts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: t
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477679
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772973
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ferror(f)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: ('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24
  TYPE[1]: CALL
  TOKENIZED[1]: ( 'E' | 'O' << 8 | 'F' << 16 ) | ( ( unsigned int ) 32 ) << 24
  ORIGINAL[2]: 'E' | 'O' << 8 | 'F' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: 'E' | 'O' << 8 | 'F' << 16
  ORIGINAL[3]: ((unsigned int )32) << 24
  TYPE[3]: CALL
  TOKENIZED[3]: ( ( unsigned int ) 32 ) << 24
  ORIGINAL[4]: (unsigned int )32
  TYPE[4]: CALL
  TOKENIZED[4]: ( unsigned int ) 32

CENTER_NODE: 47244640474
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478233
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !desc
  TYPE[0]: CALL
  TOKENIZED[0]: !desc
  ORIGINAL[1]: pixel_size = desc -> comp[0] . step_minus1 + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ 0 ] . VAR4 + 1
  ORIGINAL[2]: buf = (av_mallocz(sizeof(( *buf))))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( FUN1 ( sizeof ( ( *buf ) ) ) )
  ORIGINAL[3]: av_mallocz(sizeof(( *buf)))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( sizeof ( ( *buf ) ) )
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772724
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 47244640368
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477303
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < octx -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: octx -> nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: octx -> groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: groups
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: l
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: octx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771378
FRAGMENT_COUNT: 10
  ORIGINAL[0]: po -> flags & 0x00100
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x00100
  ORIGINAL[1]: po -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: po -> flags & 0x20000
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x20000
  ORIGINAL[3]: po -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: flags
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: po
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771775
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &g -> nb_opts
  TYPE[0]: CALL
  TOKENIZED[0]: &g -> VAR1
  ORIGINAL[1]: g -> nb_opts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: g -> nb_opts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: nb_opts
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: g
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: g
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: g
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640431
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771584
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *p) < 32 || ( *p) > '~'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) < 32 || ( *p ) > '~'
  ORIGINAL[1]: fputc(( *p),report_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( *p ) , VAR1 )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: <global> report_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 30064771182
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: AV_PIX_FMT_YUV420P
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_PIX_FMT_YUV420P
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773367
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0
  ORIGINAL[1]: for (tmp =  *pool;tmp;tmp = tmp -> next)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: for ( VAR1 = *pool ; VAR1 ; VAR1 = VAR1 -> VAR2 )
  ORIGINAL[2]: tmp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tmp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771169
FRAGMENT_COUNT: 4
  ORIGINAL[0]: message_param = ((struct stonesoup_message_buffer *)param)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( struct VAR2 * ) VAR3 )
  ORIGINAL[1]: (struct stonesoup_message_buffer *)param
  TYPE[1]: CALL
  TOKENIZED[1]: ( struct VAR1 * ) VAR2
  ORIGINAL[2]: message_param
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: message_param
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478087
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !base[i]
  TYPE[0]: CALL
  TOKENIZED[0]: !base [ VAR1 ]
  ORIGINAL[1]: base[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: base[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: base
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: base
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477550
FRAGMENT_COUNT: 5
  ORIGINAL[0]: flags & 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 2
  ORIGINAL[1]: version = avcodec_version()
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( )
  ORIGINAL[2]: avcodec_version()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: version
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: version
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477450
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_bprintf(bp,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: bp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477699
FRAGMENT_COUNT: 7
  ORIGINAL[0]: (name == ((void *)0) || strcmp(ofmt -> name,name) < 0) && strcmp(ofmt -> name,last_name) > 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 == ( ( void * ) 0 ) || FUN1 ( VAR2 -> VAR1 , VAR1 ) < 0 ) && FUN1 ( VAR2 -> VAR1 , VAR3 ) > 0
  ORIGINAL[1]: ofmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ofmt -> long_name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: long_name
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ofmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: long_name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ofmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476929
FRAGMENT_COUNT: 8
  ORIGINAL[0]: p?(p - name) : strlen(name)
  TYPE[0]: CALL
  TOKENIZED[0]: p? ( VAR1 - VAR2 ) : FUN1 ( VAR2 )
  ORIGINAL[1]: p - name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: strlen(name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: name
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: name
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772707
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 68719477915
FRAGMENT_COUNT: 9
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: (pix_desc -> flags) & 8?'H' : '.'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) & 8?'H' : ' . '
  ORIGINAL[2]: pix_desc -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pix_desc -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pix_desc -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pix_desc -> nb_components
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: flags
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pix_desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pix_desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640443
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772584
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772702
FRAGMENT_COUNT: 2
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: bsf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477674
FRAGMENT_COUNT: 4
  ORIGINAL[0]: idx = locate_option(argc,argv,options,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , \
  ORIGINAL[1]: locate_option(argc,argv,options,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , \
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771229
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: is_duration?\
  TYPE[3]: CALL
  TOKENIZED[3]: is_duration?\
  ORIGINAL[4]: context
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640323
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 1
  ORIGINAL[1]: i < argc
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 1;i < argc;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 1 ; VAR1 < VAR2 ; i++ )

CENTER_NODE: 68719476837
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477889
FRAGMENT_COUNT: 9
  ORIGINAL[0]: codec = next_codec_for_id(desc -> id,codec,encoder)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , VAR4 )
  ORIGINAL[1]: codec -> capabilities
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec -> long_name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec -> long_name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: codec
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719478415
FRAGMENT_COUNT: 5
  ORIGINAL[0]: questioners_conchies > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0
  ORIGINAL[1]: atoi(molesting_kletter)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: molesting_kletter
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: molesting_kletter
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772885
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !strcmp(topic,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: !strcmp(topic,\
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 , \
  ORIGINAL[2]: strcmp(topic,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: topic
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476873
FRAGMENT_COUNT: 7
  ORIGINAL[0]: type == 0x80
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0x80
  ORIGINAL[1]: (int )d
  TYPE[1]: CALL
  TOKENIZED[1]: ( int ) VAR1
  ORIGINAL[2]: d
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: d
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: d
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: d
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: d
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773410
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: paiocke_ghazali
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772698
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 30064772898
FRAGMENT_COUNT: 4
  ORIGINAL[0]: yesno = av_toupper(c) == 'Y'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 ) == 'Y'
  ORIGINAL[1]: av_toupper(c) == 'Y'
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) == 'Y'
  ORIGINAL[2]: yesno
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772784
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i = - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = - 1
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476894
FRAGMENT_COUNT: 4
  ORIGINAL[0]: po -> name != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[1]: buf[64]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 64 ]
  ORIGINAL[2]: buf[64]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 64 ]
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640581
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477821
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i == nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: nb_codecs
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: nb_codecs
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: nb_codecs
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640406
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772777
FRAGMENT_COUNT: 5
  ORIGINAL[0]: layout & j
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & VAR2
  ORIGINAL[1]: layout & j - 1?\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 & VAR2 - 1?\
  ORIGINAL[2]: layout & j - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 & VAR2 - 1
  ORIGINAL[3]: j - 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - 1
  ORIGINAL[4]: layout
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477957
FRAGMENT_COUNT: 5
  ORIGINAL[0]: avcodec_find_encoder_by_name(name)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: encoder
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

