# Tokenized code fragments for 153460-v1.0.0-bad
# Total center nodes processed: 136
# Total code fragments found: 551

CENTER_NODE: 30064773532
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = avcodec_close(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: avcodec_close(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479263
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *first_hwaccel = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *first_hwaccel = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: <global> first_hwaccel
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> first_hwaccel
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: first_hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478436
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> sub_charenc_mode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sub_charenc_mode
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: avctx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479125
FRAGMENT_COUNT: 6
  ORIGINAL[0]: hwaccel = av_hwaccel_next(hwaccel)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: hwaccel -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: hwaccel -> pix_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: hwaccel
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: hwaccel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774316
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avctx -> extradata = str
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: avctx -> extradata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: extradata
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: str
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: avctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771221
FRAGMENT_COUNT: 8
  ORIGINAL[0]: s -> width = -(-width >> s -> lowres)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = - ( -width >> VAR1 -> VAR3 )
  ORIGINAL[1]: s -> width
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: -(-width >> s -> lowres)
  TYPE[2]: CALL
  TOKENIZED[2]: - ( -width >> VAR1 -> VAR2 )
  ORIGINAL[3]: width
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: width
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773121
FRAGMENT_COUNT: 5
  ORIGINAL[0]: side_metadata < end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: *key = side_metadata
  TYPE[1]: CALL
  TOKENIZED[1]: *key = VAR1
  ORIGINAL[2]: key
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: side_metadata
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: val
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771994
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame == ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( void * ) 0 )
  ORIGINAL[1]: frame -> extended_data = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: frame -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771375
FRAGMENT_COUNT: 20
  ORIGINAL[0]: frame -> nb_samples
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: planar && nb_channels > 8
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR2 > 8
  ORIGINAL[2]: !(frame -> extended_data = (av_mallocz(nb_channels * sizeof(( *frame -> extended_data)))))
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 -> VAR2 = ( FUN1 ( VAR3 * sizeof ( ( *frame -> VAR2 ) ) ) ) )
  ORIGINAL[3]: av_samples_fill_arrays(frame -> extended_data,&frame -> linesize[0],((uint8_t *)((intptr_t )buf)),nb_channels,frame -> nb_samples,sample_fmt,align)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , &frame -> VAR3 [ 0 ] , ( ( VAR4 * ) ( ( VAR5 ) VAR6 ) ) , VAR7 , VAR1 -> VAR8 , VAR9 , VAR10 )
  ORIGINAL[4]: frame -> extended_data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: &frame -> linesize[0]
  TYPE[5]: CALL
  TOKENIZED[5]: &frame -> VAR1 [ 0 ]
  ORIGINAL[6]: (uint8_t *)((intptr_t )buf)
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 * ) ( ( VAR2 ) VAR3 )
  ORIGINAL[7]: frame -> nb_samples
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: nb_samples
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: nb_channels
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: frame
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: sample_fmt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: align
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: frame
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: frame
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: frame
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: frame
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: frame
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: frame
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: frame
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 68719477494
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> best_effort_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: best_effort_timestamp
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771951
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (desc -> flags) & 8
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) & 8
  ORIGINAL[1]: desc -> flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2

CENTER_NODE: 47244640344
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478167
FRAGMENT_COUNT: 8
  ORIGINAL[0]: reordered_pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: ctx -> pts_correction_num_faulty_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: reordered_pts <= ctx -> pts_correction_last_pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= VAR2 -> VAR3
  ORIGINAL[3]: ctx -> pts_correction_last_pts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: reordered_pts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: reordered_pts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: reordered_pts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772041
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_timebase
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773926
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_SRT == 94216)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 94216 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 68719479082
FRAGMENT_COUNT: 5
  ORIGINAL[0]: v >= 0xff
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0xff
  ORIGINAL[1]: *(s++) = 0xff
  TYPE[1]: CALL
  TOKENIZED[1]: * ( s++ ) = 0xff
  ORIGINAL[2]: v -= 0xff
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -= 0xff
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774276
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_OBTAIN)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 30064771804
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (avctx -> get_buffer)(avctx,frame)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) ( VAR1 , VAR3 )
  ORIGINAL[1]: avctx -> get_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: get_buffer
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773628
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 0 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064774032
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fmt < 0 || fmt >= AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 || VAR1 >= VAR2
  ORIGINAL[1]: map[fmt][be]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] [ VAR3 ]
  ORIGINAL[2]: map[fmt]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: be
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773648
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec -> name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: name
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772056
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: bits_per_sample = av_get_bits_per_sample(ctx -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: av_get_bits_per_sample(ctx -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: ctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: bits_per_sample
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478893
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_F32LE), (AV_CODEC_ID_PCM_F32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_F32BE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_F32LE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_F32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477518
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771159
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !( *p)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *p )
  ORIGINAL[1]: min_size = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: min_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479109
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_vlog(avc,24,msg,argument_list)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , VAR2 , VAR3 )
  ORIGINAL[1]: av_log(avc,24,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[2]: msg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477305
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame -> type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avctx -> codec_type
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: audio_get_buffer(avctx,frame)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477497
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_duration
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772034
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> decode_error_flags = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> decode_error_flags
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: decode_error_flags
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478748
FRAGMENT_COUNT: 6
  ORIGINAL[0]: buf[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: (enc -> sample_fmt) != AV_SAMPLE_FMT_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[2]: buf + strlen(buf)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + FUN1 ( VAR1 )
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477549
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ret = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771813
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0

CENTER_NODE: 68719478541
FRAGMENT_COUNT: 3
  ORIGINAL[0]: id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_OPUS_DEPRECATED
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_OPUS
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772044
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> codec_descriptor
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771075
FRAGMENT_COUNT: 2
  ORIGINAL[0]: va_end(argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: argptr
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477506
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478275
FRAGMENT_COUNT: 7
  ORIGINAL[0]: 1 && avctx -> active_thread_type & 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 && VAR1 -> VAR2 & 1
  ORIGINAL[1]: ret = ((avctx -> codec -> decode)(avctx,picture,got_picture_ptr,&tmp))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 , VAR6 , &tmp ) )
  ORIGINAL[2]: (avctx -> codec -> decode)(avctx,picture,got_picture_ptr,&tmp)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , &tmp )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719478833
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: video_free_buffers(avctx)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: AVMEDIA_TYPE_VIDEO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640560
FRAGMENT_COUNT: 1
  ORIGINAL[0]: size < 4
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 4

CENTER_NODE: 30064771120
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[8]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 8 ]

CENTER_NODE: 68719477499
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_duration = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> pkt_duration
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772051
FRAGMENT_COUNT: 3
  ORIGINAL[0]: sub -> pts = ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: sub -> pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (int64_t )0x8000000000000000UL
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 68719478935
FRAGMENT_COUNT: 6
  ORIGINAL[0]: bps > 0 && ch > 0 && frame_bytes > 0 && ch < 32768 && bps < 32768
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0 && VAR2 > 0 && VAR3 > 0 && VAR2 < 32768 && VAR1 < 32768
  ORIGINAL[1]: bps = avctx -> bits_per_coded_sample
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3
  ORIGINAL[2]: avctx -> bits_per_coded_sample
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bps
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: bps
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478075
FRAGMENT_COUNT: 17
  ORIGINAL[0]: user_pkt =  *avpkt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = *avpkt
  ORIGINAL[1]: *avpkt
  TYPE[1]: CALL
  TOKENIZED[1]: *avpkt
  ORIGINAL[2]: user_pkt . data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: user_pkt . size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: user_pkt . data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: user_pkt . size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: user_pkt . data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: user_pkt . destruct
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: user_pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avpkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: user_pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: user_pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: user_pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: user_pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: user_pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: user_pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: user_pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1

CENTER_NODE: 68719477512
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: metadata
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773946
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: sizeof(\
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( \

CENTER_NODE: 68719477449
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: r = func(c,arg,i,0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , 0 )
  ORIGINAL[2]: func(c,arg,i,0)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[3]: r
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: func
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: r
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719476773
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: mg_create_server(NULL, stonesoup_ev_handler)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_server
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773939
FRAGMENT_COUNT: 3
  ORIGINAL[0]: __sync_bool_compare_and_swap(&patricia_unpunched,0,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &patricia_unpunched , 0 , 1 )
  ORIGINAL[1]: &patricia_unpunched
  TYPE[1]: CALL
  TOKENIZED[1]: &patricia_unpunched
  ORIGINAL[2]: <global> patricia_unpunched
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064774013
FRAGMENT_COUNT: 2
  ORIGINAL[0]: [4UL]{(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 4UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_F64LE), (AV_CODEC_ID_PCM_F64BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }

CENTER_NODE: 68719479239
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stonesoup_data != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: strlen(yashiro_molluscivorous)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: yashiro_molluscivorous
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: yashiro_molluscivorous
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: yashiro_molluscivorous
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773616
FRAGMENT_COUNT: 2
  ORIGINAL[0]: find_encdec(id,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 1 )
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640674
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < size && !(tab[i][0] == a && tab[i][1] == b)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 && ! ( VAR3 [ VAR1 ] [ 0 ] == VAR4 && VAR3 [ VAR1 ] [ 1 ] == VAR5 )
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479099
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(avc,24,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , 24 , \
  ORIGINAL[1]: avc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: feature
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773671
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (codec_tag & 0xff) >= 'a'
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 & 0xff ) >= 'a'
  ORIGINAL[1]: (codec_tag & 0xff) <= 'z'
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 & 0xff ) <= 'z'
  ORIGINAL[2]: codec_tag & 0xff
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 & 0xff
  ORIGINAL[3]: codec_tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772043
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> codec_descriptor
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: codec_descriptor
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772075
FRAGMENT_COUNT: 10
  ORIGINAL[0]: avcodec_is_open(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: !codec && !avctx -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: !codec && !avctx -> VAR1
  ORIGINAL[2]: !codec
  TYPE[2]: CALL
  TOKENIZED[2]: !codec
  ORIGINAL[3]: !avctx -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: !avctx -> VAR1
  ORIGINAL[4]: av_log(avctx,16,\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , 16 , \
  ORIGINAL[5]: - 22
  TYPE[5]: CALL
  TOKENIZED[5]: - 22
  ORIGINAL[6]: codec && avctx -> codec && codec != avctx -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 && VAR2 -> VAR1 && VAR1 != VAR2 -> VAR1
  ORIGINAL[7]: codec && avctx -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 && VAR2 -> VAR1
  ORIGINAL[8]: avctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: codec
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719476846
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> encode_sub
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: encode_sub
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477923
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_alloc_packet2(((void *)0),avpkt,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , VAR2 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avpkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640536
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772040
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_timebase
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_timebase
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640331
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476849
FRAGMENT_COUNT: 4
  ORIGINAL[0]: codec -> decode
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771695
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *desc = av_pix_fmt_desc_get((frame -> format))
  TYPE[0]: CALL
  TOKENIZED[0]: *desc = FUN1 ( ( VAR1 -> VAR2 ) )
  ORIGINAL[1]: av_pix_fmt_desc_get((frame -> format))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 -> VAR2 ) )
  ORIGINAL[2]: frame -> format
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774297
FRAGMENT_COUNT: 3
  ORIGINAL[0]: x >> 24 & 0xff
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >> 24 & 0xff
  ORIGINAL[1]: x >> 24
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >> 24
  ORIGINAL[2]: x
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774008
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [1UL]{(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 1UL ] { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_FIRST_AUDIO), (AV_CODEC_ID_PCM_S16BE)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[2]: AV_CODEC_ID_FIRST_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S16BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773565
FRAGMENT_COUNT: 4
  ORIGINAL[0]: avcodec_is_open(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: av_freep((&avctx -> internal -> byte_buffer))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &avctx -> VAR1 -> VAR2 ) )
  ORIGINAL[2]: &avctx -> internal -> byte_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: &avctx -> VAR1 -> VAR2
  ORIGINAL[3]: avctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478881
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(AV_CODEC_ID_PCM_S32LE), (AV_CODEC_ID_PCM_S32BE)}
  TYPE[0]: CALL
  TOKENIZED[0]: { ( VAR1 ) , ( VAR2 ) }
  ORIGINAL[1]: AV_CODEC_ID_PCM_S32LE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AV_CODEC_ID_PCM_S32BE
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719477500
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479156
FRAGMENT_COUNT: 2
  ORIGINAL[0]: !ff_avcodec_locked
  TYPE[0]: CALL
  TOKENIZED[0]: !ff_avcodec_locked
  ORIGINAL[1]: <global> ff_avcodec_locked
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 47244640553
FRAGMENT_COUNT: 1
  ORIGINAL[0]: sub -> start_display_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 30064773916
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(AV_CODEC_ID_PCM_S8_PLANAR == 65563)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 65563 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064771800
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> codec -> type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: av_frame_set_channels(frame,s -> channels)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[2]: s -> channels
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !ptr
  TYPE[0]: CALL
  TOKENIZED[0]: !ptr

CENTER_NODE: 30064771868
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !((s -> codec_type) == AVMEDIA_TYPE_VIDEO)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( ( VAR1 -> VAR2 ) == VAR3 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 30064773956
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avctx -> pts_correction_last_pts = avctx -> pts_correction_last_dts = - 9223372036854775807L - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR1 -> VAR3 = - 9223372036854775807L - 1
  ORIGINAL[1]: avctx -> pts_correction_last_pts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> pts_correction_last_dts = - 9223372036854775807L - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = - 9223372036854775807L - 1

CENTER_NODE: 47244640410
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771167
FRAGMENT_COUNT: 3
  ORIGINAL[0]: min_size > 18446744073709551615UL - 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 18446744073709551615UL - 16
  ORIGINAL[1]: *size = 0
  TYPE[1]: CALL
  TOKENIZED[1]: *size = 0
  ORIGINAL[2]: *size
  TYPE[2]: CALL
  TOKENIZED[2]: *size

CENTER_NODE: 68719478867
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_PCM_U32BE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064773931
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(100 >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 100 >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 30064773321
FRAGMENT_COUNT: 14
  ORIGINAL[0]: avctx -> internal -> skip_samples &&  *got_frame_ptr
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 && *got_frame_ptr
  ORIGINAL[1]: frame -> nb_samples <= avctx -> internal -> skip_samples
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 <= VAR3 -> VAR4 -> VAR5
  ORIGINAL[2]: frame -> nb_samples
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> internal -> skip_samples
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: frame -> nb_samples
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: frame -> nb_samples
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: nb_samples
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: frame
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: frame
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: frame
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: frame
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: frame
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719477227
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < 4 && size[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 4 && VAR2 [ VAR1 ]
  ORIGINAL[1]: size[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: size[2]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 2 ]
  ORIGINAL[3]: i < 8
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < 8
  ORIGINAL[4]: size[1]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 1 ]
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771175
FRAGMENT_COUNT: 4
  ORIGINAL[0]: **p = ptr
  TYPE[0]: CALL
  TOKENIZED[0]: **p = VAR1
  ORIGINAL[1]: p
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: min_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774279
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *ff_lockmgr_cb)(&avformat_mutex,AV_LOCK_RELEASE)
  TYPE[0]: CALL
  TOKENIZED[0]: ( *ff_lockmgr_cb ) ( &avformat_mutex , VAR1 )
  ORIGINAL[1]: &avformat_mutex
  TYPE[1]: CALL
  TOKENIZED[1]: &avformat_mutex
  ORIGINAL[2]: <global> ff_lockmgr_cb
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> avformat_mutex
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: AV_LOCK_RELEASE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772039
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &frame -> metadata
  TYPE[0]: CALL
  TOKENIZED[0]: &frame -> VAR1
  ORIGINAL[1]: frame -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frame
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640738
FRAGMENT_COUNT: 1
  ORIGINAL[0]: <global> ff_lockmgr_cb
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: <global> VAR1

CENTER_NODE: 30064773936
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 92 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 92 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 92 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 92 << 8

CENTER_NODE: 30064771261
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (s -> codec_id) == AV_CODEC_ID_MSZH || (s -> codec_id) == AV_CODEC_ID_ZLIB
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: h_align = 4
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 4
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;
  ORIGINAL[3]: h_align
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773482
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < sub -> num_rects
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: av_freep((&sub -> rects[i] -> pict . data[0]))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &sub -> VAR1 [ VAR2 ] -> VAR3 . VAR4 [ 0 ] ) )
  ORIGINAL[2]: &sub -> rects[i] -> pict . data[0]
  TYPE[2]: CALL
  TOKENIZED[2]: &sub -> VAR1 [ VAR2 ] -> VAR3 . VAR4 [ 0 ]
  ORIGINAL[3]: sub
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640746
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476747
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ev == MG_REQUEST
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: mg_get_header(conn, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: conn
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: conn
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: conn
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771322
FRAGMENT_COUNT: 4
  ORIGINAL[0]: align = (((align > linesize_align[1]?align : linesize_align[1])) > linesize_align[2]?((align > linesize_align[1]?align : linesize_align[1])) : linesize_align[2])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( ( VAR1 > VAR2 [ 1 ] ?align : VAR2 [ 1 ] ) ) > VAR2 [ 2 ] ? ( ( VAR1 > VAR2 [ 1 ] ?align : VAR2 [ 1 ] ) ) : VAR2 [ 2 ] )
  ORIGINAL[1]: ((align > linesize_align[1]?align : linesize_align[1])) > linesize_align[2]?((align > linesize_align[1]?align : linesize_align[1])) : linesize_align[2]
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 > VAR2 [ 1 ] ?align : VAR2 [ 1 ] ) ) > VAR2 [ 2 ] ? ( ( VAR1 > VAR2 [ 1 ] ?align : VAR2 [ 1 ] ) ) : VAR2 [ 2 ]
  ORIGINAL[2]: align
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: width
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477501
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_pos
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_pos
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771830
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < avci -> buffer_count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: pic -> data[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[2]: pic -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640675
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !(AV_CODEC_ID_ADPCM_G722 == 69660)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 == 69660 )

CENTER_NODE: 68719478807
FRAGMENT_COUNT: 14
  ORIGINAL[0]: *avci = s -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: *avci = VAR1 -> VAR2
  ORIGINAL[1]: s -> internal
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avci -> buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avci -> buffer_count
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avci -> buffer
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avci -> buffer
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: avci
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: avci
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avci
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avci
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: avci
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: avci
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: avci
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064772027
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> sample_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: v
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640744
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477441
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < count
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: r = func(c,(((char *)arg) + i * size))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , ( ( ( char * ) VAR3 ) + VAR4 * VAR5 ) )
  ORIGINAL[2]: ret[i] = r
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[3]: ret[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: r
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640676
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773906
FRAGMENT_COUNT: 11
  ORIGINAL[0]: profile == - 'c' || !codec -> profiles
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 'c' || !codec -> VAR2
  ORIGINAL[1]: p -> profile != - 'c'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != - 'c'
  ORIGINAL[2]: p -> profile
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: - 'c'
  TYPE[3]: CALL
  TOKENIZED[3]: - 'c'
  ORIGINAL[4]: p -> profile == profile
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 == VAR2
  ORIGINAL[5]: p -> profile
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (void *)0
  TYPE[6]: CALL
  TOKENIZED[6]: ( void * ) 0
  ORIGINAL[7]: for (p = codec -> profiles;p -> profile != - 'c';p++)
  TYPE[7]: CONTROL_STRUCTURE
  TOKENIZED[7]: for ( VAR1 = VAR2 -> VAR3 ; VAR1 -> VAR4 != - 'c' ; p++ )
  ORIGINAL[8]: profile
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: p
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: profile
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771401
FRAGMENT_COUNT: 11
  ORIGINAL[0]: av_samples_get_buffer_size(((void *)0),avctx -> channels,frame -> nb_samples,avctx -> sample_fmt,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 -> VAR2 , VAR3 -> VAR4 , VAR1 -> VAR5 , 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: avctx -> channels
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: frame -> nb_samples
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: avctx -> sample_fmt
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: avctx -> channels
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: channels
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: avctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: frame
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: avctx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avctx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719476842
FRAGMENT_COUNT: 3
  ORIGINAL[0]: initialized = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: initialized
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: initialized
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477507
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channels
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channels
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477503
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> channel_layout
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: channel_layout
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772022
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> channel_layout = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> channel_layout
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: channel_layout
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772031
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> metadata = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: metadata
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640678
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772032
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> decode_error_flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: decode_error_flags
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479195
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> internal
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: internal
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477519
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pkt_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pkt_size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771979
FRAGMENT_COUNT: 8
  ORIGINAL[0]: frame -> sample_aspect_ratio = ((AVRational ){(0), (1)})
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( VAR3 ) { ( 0 ) , ( 1 ) } )
  ORIGINAL[1]: frame -> sample_aspect_ratio
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (AVRational ){(0), (1)}
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) { ( 0 ) , ( 1 ) }
  ORIGINAL[3]: sample_aspect_ratio
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: frame
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frame
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771119
FRAGMENT_COUNT: 3
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c - 32
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - 32
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479191
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec_id < AV_CODEC_ID_FIRST_SUBTITLE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: codec_id < AV_CODEC_ID_FIRST_UNKNOWN
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: codec_id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec_id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_FIRST_UNKNOWN
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478453
FRAGMENT_COUNT: 11
  ORIGINAL[0]: avpkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: &tmp
  TYPE[1]: CALL
  TOKENIZED[1]: &tmp
  ORIGINAL[2]: &pkt_recoded
  TYPE[2]: CALL
  TOKENIZED[2]: &pkt_recoded
  ORIGINAL[3]: &tmp
  TYPE[3]: CALL
  TOKENIZED[3]: &tmp
  ORIGINAL[4]: tmp . data
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: tmp . size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: tmp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tmp
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: tmp
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tmp
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: tmp
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064773995
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_freep((&avci -> audio_data))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &avci -> VAR1 ) )
  ORIGINAL[1]: &avci -> audio_data
  TYPE[1]: CALL
  TOKENIZED[1]: &avci -> VAR1

CENTER_NODE: 47244640482
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478911
FRAGMENT_COUNT: 2
  ORIGINAL[0]: codec_id
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AV_CODEC_ID_ADPCM_IMA_QT
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 68719477509
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> sample_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: sample_rate
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476818
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_fast_malloc(ptr,size,min_size,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , 0 )
  ORIGINAL[1]: size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: min_size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640538
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772013
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> best_effort_timestamp = v
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR3
  ORIGINAL[1]: s -> best_effort_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: best_effort_timestamp
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772649
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !avpkt -> data || avpkt -> size < size
  TYPE[0]: CALL
  TOKENIZED[0]: !avpkt -> VAR1 || VAR2 -> VAR3 < VAR3
  ORIGINAL[1]: av_fast_padded_malloc((&avctx -> internal -> byte_buffer),&avctx -> internal -> byte_buffer_size,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &avctx -> VAR1 -> VAR2 ) , &avctx -> VAR1 -> VAR3 , VAR4 )
  ORIGINAL[2]: &avctx -> internal -> byte_buffer_size
  TYPE[2]: CALL
  TOKENIZED[2]: &avctx -> VAR1 -> VAR2
  ORIGINAL[3]: avctx -> internal -> byte_buffer_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: avctx -> internal -> byte_buffer_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640491
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (ret = av_samples_get_buffer_size(&frame -> linesize[0],s -> channels,s -> frame_size,s -> sample_fmt,0)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( &frame -> VAR2 [ 0 ] , VAR3 -> VAR4 , VAR3 -> VAR5 , VAR3 -> VAR6 , 0 ) ) < 0
  ORIGINAL[1]: goto fail;
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: goto VAR1 ;

CENTER_NODE: 30064771959
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *fmt
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt
  ORIGINAL[1]: *fmt
  TYPE[1]: CALL
  TOKENIZED[1]: *fmt
  ORIGINAL[2]: fmt[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771204
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *p != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *p != ( ( void * ) 0 )
  ORIGINAL[1]: p = &( *p) -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = & ( *p ) -> VAR2
  ORIGINAL[2]: &( *p) -> next
  TYPE[2]: CALL
  TOKENIZED[2]: & ( *p ) -> VAR1
  ORIGINAL[3]: while (*p != ((void *)0))
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: while ( *p != ( ( void * ) 0 ) )
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477968
FRAGMENT_COUNT: 18
  ORIGINAL[0]: *padded_frame = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *padded_frame = ( ( void * ) 0 )
  ORIGINAL[1]: user_pkt =  *avpkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = *avpkt
  ORIGINAL[2]: *avpkt
  TYPE[2]: CALL
  TOKENIZED[2]: *avpkt
  ORIGINAL[3]: user_pkt . data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: user_pkt . size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: user_pkt . data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: user_pkt . size
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: user_pkt . data
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: user_pkt . destruct
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 . VAR2
  ORIGINAL[9]: user_pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: avpkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: user_pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: user_pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: user_pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: user_pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: user_pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: user_pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: user_pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064774016
FRAGMENT_COUNT: 4
  ORIGINAL[0]: [5UL]{(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[0]: CALL
  TOKENIZED[0]: [ 5UL ] { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[1]: {(AV_CODEC_ID_PCM_U8), (AV_CODEC_ID_PCM_U8)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( VAR1 ) , ( VAR1 ) }
  ORIGINAL[2]: AV_CODEC_ID_PCM_U8
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U8
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640672
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640356
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772009
FRAGMENT_COUNT: 7
  ORIGINAL[0]: f -> extended_data != f -> data
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != VAR1 -> VAR3
  ORIGINAL[1]: f -> extended_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: &f -> extended_data
  TYPE[2]: CALL
  TOKENIZED[2]: &f -> VAR1
  ORIGINAL[3]: f -> extended_data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: extended_data
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: f
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: f
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

