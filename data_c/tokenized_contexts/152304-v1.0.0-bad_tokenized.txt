# Tokenized code fragments for 152304-v1.0.0-bad
# Total center nodes processed: 90
# Total code fragments found: 426

CENTER_NODE: 30064771177
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_parse_time(&us,timestr,is_duration) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &us , VAR1 , VAR2 ) < 0
  ORIGINAL[1]: av_parse_time(&us,timestr,is_duration)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &us , VAR1 , VAR2 )
  ORIGINAL[2]: &us
  TYPE[2]: CALL
  TOKENIZED[2]: &us
  ORIGINAL[3]: timestr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: is_duration
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772738
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < AV_SAMPLE_FMT_NB
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: av_get_sample_fmt_string(fmt_str,(sizeof(fmt_str)),i)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 )
  ORIGINAL[3]: for (i = - 1;i < AV_SAMPLE_FMT_NB;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = - 1 ; VAR1 < VAR2 ; i++ )
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640578
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772847
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c = getchar()
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( )
  ORIGINAL[1]: getchar()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: yesno
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478191
FRAGMENT_COUNT: 5
  ORIGINAL[0]: 1 == 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 == 1
  ORIGINAL[1]: metewand_imposed + 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 2
  ORIGINAL[2]: metewand_imposed
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: metewand_imposed
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: metewand_imposed
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477677
FRAGMENT_COUNT: 15
  ORIGINAL[0]: ifmt = av_iformat_next(ifmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: (name == ((void *)0) || strcmp(ifmt -> name,name) < 0) && strcmp(ifmt -> name,last_name) > 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 == ( ( void * ) 0 ) || FUN1 ( VAR2 -> VAR1 , VAR1 ) < 0 ) && FUN1 ( VAR2 -> VAR1 , VAR3 ) > 0
  ORIGINAL[2]: encode = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: name && strcmp(ifmt -> name,name) == 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 && FUN1 ( VAR2 -> VAR1 , VAR1 ) == 0
  ORIGINAL[4]: strcmp(ifmt -> name,name) == 0
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 -> VAR2 , VAR2 ) == 0
  ORIGINAL[5]: strcmp(ifmt -> name,name)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 -> VAR2 , VAR2 )
  ORIGINAL[6]: ifmt -> name
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: name
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: name
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: name
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: name
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: name
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ifmt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: name
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: name
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477645
FRAGMENT_COUNT: 4
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: program_name
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: program_name
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: program_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477768
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (( *da) -> type) != (( *db) -> type)
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( *da ) -> VAR1 ) != ( ( *db ) -> VAR1 )
  ORIGINAL[1]: ( *da) -> name
  TYPE[1]: CALL
  TOKENIZED[1]: ( *da ) -> VAR1
  ORIGINAL[2]: *db
  TYPE[2]: CALL
  TOKENIZED[2]: *db
  ORIGINAL[3]: db
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: db
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477923
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !name
  TYPE[0]: CALL
  TOKENIZED[0]: !name
  ORIGINAL[1]: codec = ((encoder?avcodec_find_encoder_by_name(name) : avcodec_find_decoder_by_name(name)))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( encoder?avcodec_find_encoder_by_name ( VAR2 ) : FUN1 ( VAR2 ) ) )
  ORIGINAL[2]: print_codec(codec)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: desc = avcodec_descriptor_get_by_name(name)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[4]: avcodec_descriptor_get_by_name(name)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: name
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772320
FRAGMENT_COUNT: 1
  ORIGINAL[0]: av_log_set_callback(log_callback_help)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )

CENTER_NODE: 30064772567
FRAGMENT_COUNT: 10
  ORIGINAL[0]: i < nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: desc -> props
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: desc -> props & 1 << 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 1 << 1
  ORIGINAL[3]: desc -> props
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: 1 << 1
  TYPE[4]: CALL
  TOKENIZED[4]: 1 << 1
  ORIGINAL[5]: desc -> props
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: props
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: desc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: desc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064773018
FRAGMENT_COUNT: 15
  ORIGINAL[0]: t -> key
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_opt_find((&cc),(t -> key),((void *)0),flags,0x00002) || codec && codec -> priv_class && av_opt_find((&codec -> priv_class),(t -> key),((void *)0),flags,0x00002)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &cc ) , ( VAR1 -> VAR2 ) , ( ( void * ) 0 ) , VAR3 , 0x00002 ) || VAR4 && VAR4 -> VAR5 && FUN1 ( ( &codec -> VAR5 ) , ( VAR1 -> VAR2 ) , ( ( void * ) 0 ) , VAR3 , 0x00002 )
  ORIGINAL[2]: t -> key
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: t -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_dict_set(&ret,(t -> key),(t -> value),0)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( &ret , ( VAR1 -> VAR2 ) , ( VAR1 -> VAR3 ) , 0 )
  ORIGINAL[5]: &ret
  TYPE[5]: CALL
  TOKENIZED[5]: &ret
  ORIGINAL[6]: t -> key
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: t -> value
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: t -> key[0]
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[9]: key
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: t
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: t
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: t
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: t
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: t
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477148
FRAGMENT_COUNT: 7
  ORIGINAL[0]: sizeof(opt_stripped)
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( VAR1 )
  ORIGINAL[1]: p - opt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: p
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: p
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640263
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772525
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *rcodecs = codecs
  TYPE[0]: CALL
  TOKENIZED[0]: *rcodecs = VAR1
  ORIGINAL[1]: *rcodecs
  TYPE[1]: CALL
  TOKENIZED[1]: *rcodecs
  ORIGINAL[2]: codecs
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: nb_codecs
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773443
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !buf -> refcount
  TYPE[0]: CALL
  TOKENIZED[0]: !buf -> VAR1
  ORIGINAL[1]: tmp =  *pool
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = *pool
  ORIGINAL[2]: *pool
  TYPE[2]: CALL
  TOKENIZED[2]: *pool
  ORIGINAL[3]: for (tmp =  *pool;tmp;tmp = tmp -> next)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = *pool ; VAR1 ; VAR1 = VAR1 -> VAR2 )
  ORIGINAL[4]: tmp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tmp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640397
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (ret = av_parse_cpu_caps(&flags,arg)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( &flags , VAR2 ) ) < 0

CENTER_NODE: 30064771303
FRAGMENT_COUNT: 4
  ORIGINAL[0]: po -> flags & 0x00002 || po -> flags & 0x80
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x00002 || VAR1 -> VAR2 & 0x80
  ORIGINAL[1]: parse_number_or_die(opt,arg,0x0400,(- 2147483647 - 1),2147483647)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , 0x0400 , ( - 2147483647 - 1 ) , 2147483647 )
  ORIGINAL[2]: - 2147483647 - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 2147483647 - 1
  ORIGINAL[3]: - 2147483647
  TYPE[3]: CALL
  TOKENIZED[3]: - 2147483647

CENTER_NODE: 68719477057
FRAGMENT_COUNT: 13
  ORIGINAL[0]: !po -> name && cur_opt[0] == 'n' && cur_opt[1] == 'o'
  TYPE[0]: CALL
  TOKENIZED[0]: !po -> VAR1 && VAR2 [ 0 ] == 'n' && VAR2 [ 1 ] == 'o'
  ORIGINAL[1]: po = find_option(options,cur_opt + 2)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 + 2 )
  ORIGINAL[2]: find_option(options,cur_opt + 2)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 + 2 )
  ORIGINAL[3]: po -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: po -> flags
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: options
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: po
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: po
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: po
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: po
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064772960
FRAGMENT_COUNT: 15
  ORIGINAL[0]: base[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: base[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: !f && codec_name
  TYPE[2]: CALL
  TOKENIZED[2]: !f && VAR1
  ORIGINAL[3]: snprintf(filename,filename_size,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[4]: base[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: i != 1?\
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 != 1?\
  ORIGINAL[6]: base
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: base
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: filename
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: filename_size
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: base
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: codec_name
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: preset_name
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477745
FRAGMENT_COUNT: 6
  ORIGINAL[0]: type
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: AVMEDIA_TYPE_AUDIO
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_DATA
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_SUBTITLE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVMEDIA_TYPE_ATTACHMENT
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477337
FRAGMENT_COUNT: 6
  ORIGINAL[0]: po -> flags & 0x0001
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x0001
  ORIGINAL[1]: arg = argv[optindex++]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 [ optindex++ ]
  ORIGINAL[2]: argv[optindex++]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ optindex++ ]
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argv
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: arg
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771140
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_dict_free(&resample_opts)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &resample_opts )
  ORIGINAL[1]: &resample_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &resample_opts

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477243
FRAGMENT_COUNT: 21
  ORIGINAL[0]: global_group = {(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( \
  ORIGINAL[1]: memset(octx,0,sizeof(( *octx)))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 0 , sizeof ( ( *octx ) ) )
  ORIGINAL[2]: sizeof(( *octx))
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( ( *octx ) )
  ORIGINAL[3]: *octx
  TYPE[3]: CALL
  TOKENIZED[3]: *octx
  ORIGINAL[4]: octx -> groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: octx -> nb_groups
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: octx -> groups
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: octx -> nb_groups
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: octx -> groups
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: octx -> global_opts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: octx -> global_opts
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: octx
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: octx
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: octx
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: octx
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: octx
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: octx
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: octx
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: octx
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: octx
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: octx
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 47244640354
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476882
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *child = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *child = ( ( void * ) 0 )
  ORIGINAL[1]: class -> option
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: option
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: class
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477026
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(((void *)0),48,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 48 , \
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477794
FRAGMENT_COUNT: 9
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: codec = next_codec_for_id(id,codec,encoder)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR1 , VAR3 )
  ORIGINAL[2]: next_codec_for_id(id,codec,encoder)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: printf(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: codec -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: id
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: codec
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772932
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !( *bufptr)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *bufptr )
  ORIGINAL[1]: fclose(f)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772665
FRAGMENT_COUNT: 5
  ORIGINAL[0]: name = avio_enum_protocols(&opaque,0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( &opaque , 0 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: while (name = avio_enum_protocols(&opaque,0))
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( VAR1 = FUN1 ( &opaque , 0 ) )
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771550
FRAGMENT_COUNT: 4
  ORIGINAL[0]: idx = locate_option(argc,argv,options,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , \
  ORIGINAL[1]: locate_option(argc,argv,options,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , \
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: env
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476897
FRAGMENT_COUNT: 9
  ORIGINAL[0]: len = (p?(p - name) : strlen(name))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( p? ( VAR2 - VAR3 ) : FUN1 ( VAR3 ) )
  ORIGINAL[1]: po -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: !strncmp(name,po -> name,len) && strlen(po -> name) == len
  TYPE[2]: CALL
  TOKENIZED[2]: !strncmp ( VAR1 , VAR2 -> VAR1 , VAR3 ) && FUN1 ( VAR2 -> VAR1 ) == VAR3
  ORIGINAL[3]: po -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: po -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: po++
  TYPE[5]: CALL
  TOKENIZED[5]: po++
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: po
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: po
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771215
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064771194
FRAGMENT_COUNT: 6
  ORIGINAL[0]: po -> name != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( void * ) 0 )
  ORIGINAL[1]: (po -> flags & req_flags) != req_flags
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 & VAR3 ) != VAR3
  ORIGINAL[2]: po -> flags & req_flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & VAR3
  ORIGINAL[3]: po -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: req_flags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: req_flags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772295
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !warned_cfg
  TYPE[0]: CALL
  TOKENIZED[0]: !warned_cfg
  ORIGINAL[1]: warned_cfg = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: <global> warned_cfg
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 68719477074
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ( *p) >= '+'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) >= '+'
  ORIGINAL[1]: *p
  TYPE[1]: CALL
  TOKENIZED[1]: *p
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640409
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772649
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 )

CENTER_NODE: 30064771080
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ss_tc_root = getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: ss_tc_root
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ss_tc_root
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772535
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772319
FRAGMENT_COUNT: 3
  ORIGINAL[0]: print_all_libs_info(1 | 2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 | 2 , 32 )
  ORIGINAL[1]: 1 | 2
  TYPE[1]: CALL
  TOKENIZED[1]: 1 | 2
  ORIGINAL[2]: idx
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478471
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *pool
  TYPE[0]: CALL
  TOKENIZED[0]: *pool
  ORIGINAL[1]: buf -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: next
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477484
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *errbuf_ptr = errbuf
  TYPE[0]: CALL
  TOKENIZED[0]: *errbuf_ptr = VAR1
  ORIGINAL[1]: errbuf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: errbuf_ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errbuf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772116
FRAGMENT_COUNT: 2
  ORIGINAL[0]: init_report(((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064771132
FRAGMENT_COUNT: 6
  ORIGINAL[0]: sws_getContext(16,16,AV_PIX_FMT_YUV420P,16,16,AV_PIX_FMT_YUV420P,4,((void *)0),((void *)0),((void *)0))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 16 , 16 , VAR1 , 16 , 16 , VAR1 , 4 , ( ( void * ) 0 ) , ( ( void * ) 0 ) , ( ( void * ) 0 ) )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: AV_PIX_FMT_YUV420P
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_PIX_FMT_YUV420P
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477728
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c -> sample_fmts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ( *p) != AV_SAMPLE_FMT_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: ( *p ) != VAR1
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: AV_SAMPLE_FMT_NONE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640467
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771667
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: &l -> VAR1
  ORIGINAL[1]: l -> nb_groups
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: l -> nb_groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: nb_groups
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: l
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: l
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: l
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640484
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < 63
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 63
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < 63;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < 63 ; i++ )

CENTER_NODE: 47244640575
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477980
FRAGMENT_COUNT: 7
  ORIGINAL[0]: par = strchr(topic,'=')
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , '=' )
  ORIGINAL[1]: *(par++) = 0
  TYPE[1]: CALL
  TOKENIZED[1]: * ( par++ ) = 0
  ORIGINAL[2]: *(par++)
  TYPE[2]: CALL
  TOKENIZED[2]: * ( par++ )
  ORIGINAL[3]: par++
  TYPE[3]: CALL
  TOKENIZED[3]: par++
  ORIGINAL[4]: par
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: par
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: topic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772073
FRAGMENT_COUNT: 6
  ORIGINAL[0]: expand_filename_template(&filename,(av_x_if_null(filename_template,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &filename , ( FUN2 ( VAR1 , \
  ORIGINAL[1]: &filename
  TYPE[1]: CALL
  TOKENIZED[1]: &filename
  ORIGINAL[2]: av_x_if_null(filename_template,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: <global> report_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: tm
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filename_template
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772322
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_all_libs_info(2,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 2 , 32 )

CENTER_NODE: 47244640375
FRAGMENT_COUNT: 1
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail

CENTER_NODE: 30064772769
FRAGMENT_COUNT: 12
  ORIGINAL[0]: !fmt
  TYPE[0]: CALL
  TOKENIZED[0]: !fmt
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: fmt -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> long_name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: name
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: fmt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: fmt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 30064772675
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 30064772815
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (fmt -> subtitle_codec) != AV_CODEC_ID_NONE && (desc = avcodec_descriptor_get(fmt -> subtitle_codec))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3 && ( VAR4 = FUN1 ( VAR1 -> VAR2 ) )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: desc -> name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477425
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c == '%'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '%'
  ORIGINAL[1]: av_bprint_chars(bp,c,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , 1 )
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: bp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772673
FRAGMENT_COUNT: 3
  ORIGINAL[0]: descr[64]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 64 ]
  ORIGINAL[1]: descr[64]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 64 ]
  ORIGINAL[2]: descr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478456
FRAGMENT_COUNT: 10
  ORIGINAL[0]: frame -> type != 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != 2
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i < sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[3]: sizeof(frame -> data) / sizeof(frame -> data[0])
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 -> VAR2 ) / sizeof ( VAR1 -> VAR2 [ 0 ] )
  ORIGINAL[4]: i++
  TYPE[4]: CALL
  TOKENIZED[4]: i++
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: frame
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064772321
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_program_info(0,32)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 0 , 32 )

CENTER_NODE: 30064773422
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < sizeof(buf -> data) / sizeof(buf -> data[0])
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < sizeof ( VAR2 -> VAR3 ) / sizeof ( VAR2 -> VAR3 [ 0 ] )
  ORIGINAL[1]: frame -> data[i] = buf -> data[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] = VAR4 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: frame -> data[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: frame -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: buf -> data[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773232
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !tmp
  TYPE[0]: CALL
  TOKENIZED[0]: !tmp
  ORIGINAL[1]: av_log(((void *)0),16,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 16 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 68719476994
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772965
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret = avformat_match_stream_specifier(s,st,spec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avformat_match_stream_specifier(s,st,spec)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477861
FRAGMENT_COUNT: 8
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: bsf = av_bitstream_filter_next(bsf)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[2]: av_bitstream_filter_next(bsf)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: printf(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: bsf -> name
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: bsf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: bsf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: bsf
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476835
FRAGMENT_COUNT: 4
  ORIGINAL[0]: type == 0x0400 && ((int64_t )d) != d
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0x0400 && ( ( VAR2 ) VAR3 ) != VAR3
  ORIGINAL[1]: error = \
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = \
  ORIGINAL[2]: error
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: error
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772650
FRAGMENT_COUNT: 1
  ORIGINAL[0]: print_codecs(1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( 1 )

CENTER_NODE: 30064771799
FRAGMENT_COUNT: 9
  ORIGINAL[0]: j < l -> nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: l -> groups[j]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: l -> groups
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: &l -> groups
  TYPE[3]: CALL
  TOKENIZED[3]: &l -> VAR1
  ORIGINAL[4]: l -> groups
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: groups
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: l
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: l
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: j
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772123
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *tail
  TYPE[0]: CALL
  TOKENIZED[0]: *tail
  ORIGINAL[1]: av_log(((void *)0),8,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 8 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: arg
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771649
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < nb_groups
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: p -> sep && !strcmp(p -> sep,opt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 && !strcmp ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[3]: p -> sep
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: !strcmp(p -> sep,opt)
  TYPE[4]: CALL
  TOKENIZED[4]: !strcmp ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: nb_groups
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771142
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stdout,fmt,vl)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: stdout
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: vl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477225
FRAGMENT_COUNT: 11
  ORIGINAL[0]: global?&octx -> global_opts : &octx -> cur_group
  TYPE[0]: CALL
  TOKENIZED[0]: global?&octx -> VAR1 : &octx -> VAR2
  ORIGINAL[1]: &octx -> global_opts
  TYPE[1]: CALL
  TOKENIZED[1]: &octx -> VAR1
  ORIGINAL[2]: octx -> global_opts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: &octx -> cur_group
  TYPE[3]: CALL
  TOKENIZED[3]: &octx -> VAR1
  ORIGINAL[4]: octx -> cur_group
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: global_opts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: cur_group
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: g
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: global
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: octx
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: octx
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640419
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477884
FRAGMENT_COUNT: 2
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064773472
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *buf = (fb -> priv)
  TYPE[0]: CALL
  TOKENIZED[0]: *buf = ( VAR1 -> VAR2 )
  ORIGINAL[1]: fb -> priv
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fb
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476819
FRAGMENT_COUNT: 5
  ORIGINAL[0]: __builtin_va_end(vl2)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: fputs(line,report_file)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: line
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: line
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: <global> report_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 68719478369
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> flags & 0x4000 || !buf -> linesize[i] || !buf -> base[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x4000 || !buf -> VAR3 [ VAR4 ] || !buf -> VAR5 [ VAR4 ]
  ORIGINAL[1]: pixel_size * edge
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * VAR2
  ORIGINAL[2]: edge
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pixel_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: edge
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640414
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772699
FRAGMENT_COUNT: 11
  ORIGINAL[0]: pix_desc = av_pix_fmt_desc_next(pix_desc)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: printf(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: sws_isSupportedInput(pix_fmt)?'I' : '.'
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) ?'I' : ' . '
  ORIGINAL[3]: sws_isSupportedOutput(pix_fmt)?'O' : '.'
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 ) ?'O' : ' . '
  ORIGINAL[4]: (pix_desc -> flags) & 8?'H' : '.'
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 -> VAR2 ) & 8?'H' : ' . '
  ORIGINAL[5]: (pix_desc -> flags) & 2?'P' : '.'
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 ) & 2?'P' : ' . '
  ORIGINAL[6]: (pix_desc -> flags) & 4?'B' : '.'
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 -> VAR2 ) & 4?'B' : ' . '
  ORIGINAL[7]: pix_desc -> name
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pix_desc -> nb_components
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: av_get_bits_per_pixel(pix_desc)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 )
  ORIGINAL[10]: pix_desc
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064772612
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < nb_codecs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: codec = next_codec_for_id(desc -> id,codec,encoder)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR1 , VAR4 )
  ORIGINAL[2]: next_codec_for_id(desc -> id,codec,encoder)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR3 , VAR4 )
  ORIGINAL[3]: desc -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: encoder
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772658
FRAGMENT_COUNT: 1
  ORIGINAL[0]: printf(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \

CENTER_NODE: 47244640399
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477753
FRAGMENT_COUNT: 5
  ORIGINAL[0]: prev = (av_codec_next(prev))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR1 ) )
  ORIGINAL[1]: prev -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: id
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: prev
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: prev
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640404
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771396
FRAGMENT_COUNT: 6
  ORIGINAL[0]: prepare_app_arguments(&argc,&argv)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &argc , &argv )
  ORIGINAL[1]: &argc
  TYPE[1]: CALL
  TOKENIZED[1]: &argc
  ORIGINAL[2]: &argv
  TYPE[2]: CALL
  TOKENIZED[2]: &argv
  ORIGINAL[3]: argv
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argv
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: argv
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

