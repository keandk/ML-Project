# Tokenized code fragments for 153317-v1.0.0-bad
# Total center nodes processed: 194
# Total code fragments found: 781

CENTER_NODE: 68719480370
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> info
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> info -> last_dts = ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3 = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641167
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773407
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !st -> need_parsing || !st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: !st -> VAR1 || !st -> VAR2
  ORIGINAL[1]: compute_pkt_fields(s,st,((void *)0),pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , ( ( void * ) 0 ) , VAR3 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773085
FRAGMENT_COUNT: 7
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: &pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: &pktl -> VAR1
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064775139
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: c -> time_base . den < 5L * c -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4
  ORIGINAL[2]: c -> time_base . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: 5L * c -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: 5L * VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: c -> time_base . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3

CENTER_NODE: 30064774542
FRAGMENT_COUNT: 16
  ORIGINAL[0]: ic -> bit_rate <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: ic -> bit_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> bit_rate
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: bit_rate
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ic
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ic
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ic
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064771565
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *fmt = av_probe_input_format3(pd,1,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = FUN1 ( VAR1 , 1 , &score )
  ORIGINAL[1]: av_probe_input_format3(pd,1,&score)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 1 , &score )
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479017
FRAGMENT_COUNT: 9
  ORIGINAL[0]: stream_index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: st = s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: timestamp = av_rescale(timestamp,st -> time_base . den,1000000 * ((int64_t )st -> time_base . num))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 , 1000000 * ( ( VAR5 ) VAR2 -> VAR3 . VAR6 ) )
  ORIGINAL[3]: av_rescale(timestamp,st -> time_base . den,1000000 * ((int64_t )st -> time_base . num))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 , 1000000 * ( ( VAR5 ) VAR2 -> VAR3 . VAR6 ) )
  ORIGINAL[4]: timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: timestamp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: timestamp
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: timestamp
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641152
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641170
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640446
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776015
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (int )((0xF8 | 'S' << 8 | 'T' << 16) | ((unsigned int )'R') << 24)
  TYPE[0]: CALL
  TOKENIZED[0]: ( int ) ( ( 0xF8 | 'S' << 8 | 'T' << 16 ) | ( ( unsigned int ) 'R' ) << 24 )
  ORIGINAL[1]: (0xF8 | 'S' << 8 | 'T' << 16) | ((unsigned int )'R') << 24
  TYPE[1]: CALL
  TOKENIZED[1]: ( 0xF8 | 'S' << 8 | 'T' << 16 ) | ( ( unsigned int ) 'R' ) << 24
  ORIGINAL[2]: 0xF8 | 'S' << 8 | 'T' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: 0xF8 | 'S' << 8 | 'T' << 16
  ORIGINAL[3]: ((unsigned int )'R') << 24
  TYPE[3]: CALL
  TOKENIZED[3]: ( ( unsigned int ) 'R' ) << 24

CENTER_NODE: 68719478260
FRAGMENT_COUNT: 11
  ORIGINAL[0]: pktl =  *pkt_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = *pkt_buffer
  ORIGINAL[1]: *pkt_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buffer
  ORIGINAL[2]: pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pktl -> next
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pktl -> next
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt_buffer
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pktl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pktl
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pktl
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064777504
FRAGMENT_COUNT: 3
  ORIGINAL[0]: undef = {(0), (1)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( 0 ) , ( 1 ) }
  ORIGINAL[1]: {(0), (1)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 0 ) , ( 1 ) }
  ORIGINAL[2]: undef
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476952
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !name || !names
  TYPE[0]: CALL
  TOKENIZED[0]: !name || !names
  ORIGINAL[1]: namelen = (strlen(name))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 ) )
  ORIGINAL[2]: strlen(name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: namelen
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: namelen
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777455
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ofmt -> codec_tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: av_codec_get_tag(ofmt -> codec_tag,codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , VAR3 )
  ORIGINAL[2]: ofmt -> codec_tag
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_tag
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ofmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481526
FRAGMENT_COUNT: 5
  ORIGINAL[0]: decoctible_quotieties != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: decoctible_quotieties != 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != 0
  ORIGINAL[2]: free(((char *)decoctible_quotieties))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( char * ) VAR1 ) )
  ORIGINAL[3]: *scaphism_amphissus
  TYPE[3]: CALL
  TOKENIZED[3]: *scaphism_amphissus
  ORIGINAL[4]: scaphism_amphissus
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771763
FRAGMENT_COUNT: 18
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> iformat -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: !s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: !s -> VAR1
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: &s -> iformat
  TYPE[5]: CALL
  TOKENIZED[5]: &s -> VAR1
  ORIGINAL[6]: s -> iformat
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: s
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 30064775040
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_codec_get_tag2 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: av_codec_get_tag2(tags,id,&tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641047
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774383
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE || (st -> codec -> codec_type) == AVMEDIA_TYPE_DATA
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4 || ( VAR1 -> VAR2 -> VAR3 ) == VAR5
  ORIGINAL[1]: start_time1 < start_time_text
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: start_time_text = start_time1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: start_time1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: start_time_text
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start_time_text
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: start_time1
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: end_time1
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064776136
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !(s -> nb_streams > 0)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 > 0 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064771463
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: av_shrink_packet(pkt,old_size + ((ret > 0?ret : 0)))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 + ( ( VAR3 > 0?ret : 0 ) ) )
  ORIGINAL[2]: old_size + ((ret > 0?ret : 0))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + ( ( VAR2 > 0?ret : 0 ) )
  ORIGINAL[3]: ret > 0?ret : 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 > 0?ret : 0
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: old_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641319
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641147
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774332
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ret >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: ret = av_seek_frame(s,stream_index,ts,flags | dir ^ 1)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , VAR5 | VAR6 ^ 1 )
  ORIGINAL[2]: av_seek_frame(s,stream_index,ts,flags | dir ^ 1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 | VAR5 ^ 1 )
  ORIGINAL[3]: flags | dir ^ 1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 | VAR2 ^ 1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773669
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> parser = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[2]: st -> parser
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773615
FRAGMENT_COUNT: 4
  ORIGINAL[0]: free_packet_buffer(&s -> parse_queue,&s -> parse_queue_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> parse_queue
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> parse_queue
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640684
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640835
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640483
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064771316
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ( *p) != '\\0' && ( *p) != ','
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) != '\\0' && ( *p ) != ' , '
  ORIGINAL[1]: (q - ext1) < sizeof(ext1) - 1
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 - VAR2 ) < sizeof ( VAR2 ) - 1
  ORIGINAL[2]: q - ext1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2
  ORIGINAL[3]: sizeof(ext1) - 1
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 ) - 1
  ORIGINAL[4]: q
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ext1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ext1
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773513
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pktl -> pkt . stream_index == next_pkt -> stream_index
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 == VAR4 -> VAR3
  ORIGINAL[1]: 2 << wrap_bits - 1
  TYPE[1]: CALL
  TOKENIZED[1]: 2 << VAR1 - 1
  ORIGINAL[2]: wrap_bits - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 1
  ORIGINAL[3]: wrap_bits
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064775039
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_U32BE : AV_CODEC_ID_PCM_U32LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_U32BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_U32BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_U32LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771658
FRAGMENT_COUNT: 8
  ORIGINAL[0]: max_probe_size > (probe_size + 1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > ( VAR2 + 1 )
  ORIGINAL[1]: probe_size + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + 1
  ORIGINAL[2]: probe_size + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: probe_size < offset
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 < VAR2
  ORIGINAL[4]: (ret = avio_read(pb,buf + buf_offset,probe_size - buf_offset)) < 0
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 = FUN1 ( VAR2 , VAR3 + VAR4 , VAR5 - VAR4 ) ) < 0
  ORIGINAL[5]: ret != -((int )(('E' | 'O' << 8 | 'F' << 16) | ((unsigned int )32) << 24))
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 != - ( ( int ) ( ( 'E' | 'O' << 8 | 'F' << 16 ) | ( ( unsigned int ) 32 ) << 24 ) )
  ORIGINAL[6]: max_probe_size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: probe_size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640693
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640711
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776269
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1 || s -> flags & 0x80
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1 || VAR1 -> VAR3 & 0x80
  ORIGINAL[1]: s -> iformat && s -> iformat -> flags & 0x1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[2]: s -> flags & 0x80
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x80
  ORIGINAL[3]: s -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 68719481493
FRAGMENT_COUNT: 8
  ORIGINAL[0]: start += strspn(start,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 += FUN1 ( VAR1 , \
  ORIGINAL[1]: sep = start + strcspn(start,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + FUN1 ( VAR2 , \
  ORIGINAL[2]: start + strcspn(start,\
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + FUN1 ( VAR1 , \
  ORIGINAL[3]: start
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: sep
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: sep
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: sep
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640844
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477673
FRAGMENT_COUNT: 6
  ORIGINAL[0]: desc -> props
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: props
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: desc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479678
FRAGMENT_COUNT: 9
  ORIGINAL[0]: s -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> nb_chapters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> chapters[i] -> end == ((int64_t )0x8000000000000000UL)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == ( ( VAR5 ) 0x8000000000000000UL )
  ORIGINAL[4]: j < s -> nb_chapters
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 < VAR2 -> VAR3
  ORIGINAL[5]: s -> nb_chapters
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: nb_chapters
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: j
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640862
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771137
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ss_tc_root = getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: ss_tc_root
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ss_tc_root
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641066
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641204
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481249
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &time2
  TYPE[0]: CALL
  TOKENIZED[0]: &time2
  ORIGINAL[1]: time2
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: time2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: time2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771237
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 68719477063
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: pkt -> pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064773707
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> cur_dts = av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 , VAR1 -> VAR4 . VAR5 * ( ( VAR6 ) VAR7 -> VAR4 . VAR8 ) , VAR1 -> VAR4 . VAR8 * ( ( VAR6 ) VAR7 -> VAR4 . VAR5 ) )
  ORIGINAL[2]: st -> cur_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_rescale(timestamp,st -> time_base . den * ((int64_t )ref_st -> time_base . num),st -> time_base . num * ((int64_t )ref_st -> time_base . den))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 . VAR4 * ( ( VAR5 ) VAR6 -> VAR3 . VAR7 ) , VAR2 -> VAR3 . VAR7 * ( ( VAR5 ) VAR6 -> VAR3 . VAR4 ) )
  ORIGINAL[4]: st -> time_base . den * ((int64_t )ref_st -> time_base . num)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[5]: st -> time_base . num * ((int64_t )ref_st -> time_base . den)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 . VAR3 * ( ( VAR4 ) VAR5 -> VAR2 . VAR6 )
  ORIGINAL[6]: timestamp
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719479508
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &thread_opt
  TYPE[0]: CALL
  TOKENIZED[0]: &thread_opt
  ORIGINAL[1]: &thread_opt
  TYPE[1]: CALL
  TOKENIZED[1]: &thread_opt
  ORIGINAL[2]: thread_opt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: thread_opt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: options
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: thread_opt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: thread_opt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774344
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: duration
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640681
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479759
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE && codec
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4 && VAR2
  ORIGINAL[1]: (st -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[2]: codec
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: codec
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776125
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: (s -> iformat -> read_pause)(s)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[2]: s -> iformat -> read_pause
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777262
FRAGMENT_COUNT: 11
  ORIGINAL[0]: pkt -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: pkt -> dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (int64_t )0x8000000000000000UL
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[3]: pkt -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: dts
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719477614
FRAGMENT_COUNT: 10
  ORIGINAL[0]: enc -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: enc -> bit_rate
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: enc -> sample_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: enc -> block_align
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: (enc -> codec_id) == AV_CODEC_ID_WMAV1
  TYPE[4]: CALL
  TOKENIZED[4]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[5]: enc -> codec_id
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: enc -> codec_id
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: codec_id
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: enc
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: enc
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244641159
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640851
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641173
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773866
FRAGMENT_COUNT: 4
  ORIGINAL[0]: m >= 0 && m < nb_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR1 < VAR2
  ORIGINAL[1]: !(entries[m] . flags & 0x1)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 [ VAR2 ] . VAR3 & 0x1 )
  ORIGINAL[2]: entries[m] . flags & 0x1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3 & 0x1
  ORIGINAL[3]: entries[m] . flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] . VAR3

CENTER_NODE: 47244641156
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771358
FRAGMENT_COUNT: 10
  ORIGINAL[0]: fmt = av_oformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> name && short_name && match_format(short_name,fmt -> name)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR3 && FUN1 ( VAR3 , VAR1 -> VAR2 )
  ORIGINAL[2]: fmt -> name && short_name
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 && VAR3
  ORIGINAL[3]: fmt -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: match_format(short_name,fmt -> name)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[5]: fmt -> name
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: name
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: short_name
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: short_name
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771101
FRAGMENT_COUNT: 4
  ORIGINAL[0]: strlen(str) >= shmsz
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) >= VAR2
  ORIGINAL[1]: fprintf(stderr, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: stderr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errors
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771809
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i] -> disposition
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> streams[i] -> discard
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[5]: s -> streams[i] -> attached_pic
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[6]: disposition
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772300
FRAGMENT_COUNT: 5
  ORIGINAL[0]: frame_size <= 0 || st -> codec -> sample_rate <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 0 || VAR2 -> VAR3 -> VAR4 <= 0
  ORIGINAL[1]: *pnum = frame_size
  TYPE[1]: CALL
  TOKENIZED[1]: *pnum = VAR1
  ORIGINAL[2]: *pnum
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum
  ORIGINAL[3]: frame_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pden
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777695
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec -> width == 1280
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1280
  ORIGINAL[1]: data = avci100_720p_extradata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: data
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: avci100_720p_extradata
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640555
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777238
FRAGMENT_COUNT: 6
  ORIGINAL[0]: av_strlcatf(str,size,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: proto
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: str
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: proto
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: authorization
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064774623
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ic -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_size(ic -> pb)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[2]: ic -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640710
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477165
FRAGMENT_COUNT: 4
  ORIGINAL[0]: &score
  TYPE[0]: CALL
  TOKENIZED[0]: &score
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: is_opened
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640931
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640858
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640841
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477020
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> maxsize
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: maxsize
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776875
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: 2208988800ULL * 1000000ULL
  TYPE[1]: CALL
  TOKENIZED[1]: 2208988800ULL * 1000000ULL

CENTER_NODE: 47244641045
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478660
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772558
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < delay && pts_buffer[i] > pts_buffer[i + 1]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 && VAR3 [ VAR1 ] > VAR3 [ VAR1 + 1 ]
  ORIGINAL[1]: pts_buffer[i] = SWAP_tmp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] = VAR3
  ORIGINAL[2]: pts_buffer[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: SWAP_tmp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777217
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: av_log(((void *)0),24,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 24 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: s -> index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: new_tb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640439
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640352
FRAGMENT_COUNT: 2
  ORIGINAL[0]: score_ret >  *score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > *score_max
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064777171
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i < s
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: i * 2 + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * 2 + 1
  ORIGINAL[2]: i * 2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641201
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479657
FRAGMENT_COUNT: 3
  ORIGINAL[0]: id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: id
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640597
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478880
FRAGMENT_COUNT: 16
  ORIGINAL[0]: &pos_min
  TYPE[0]: CALL
  TOKENIZED[0]: &pos_min
  ORIGINAL[1]: av_log(s,48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[2]: av_ts_make_string(((char [32]){(0)}),ts_min)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[3]: av_ts_make_string(((char [32]){(0)}),ts)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[4]: av_ts_make_string(((char [32]){(0)}),ts_max)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[5]: av_ts_make_string(((char [32]){(0)}),target_ts)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 )
  ORIGINAL[6]: pos_min
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pos_min
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pos_min
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pos_min
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pos
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pos_max
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pos_limit
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: start_pos
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: no_change
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064772151
FRAGMENT_COUNT: 20
  ORIGINAL[0]: (pkt -> stream_index) >= ((unsigned int )(s -> nb_streams))
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) >= ( ( unsigned int ) ( VAR3 -> VAR4 ) )
  ORIGINAL[1]: s -> use_wallclock_as_timestamps
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> dts = pkt -> pts = av_rescale_q(av_gettime(),((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR1 -> VAR3 = FUN1 ( FUN2 ( ) , ( ( VAR4 ) { ( 1 ) , ( 1000000 ) } ) , VAR5 -> VAR6 )
  ORIGINAL[3]: pkt -> dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> pts = av_rescale_q(av_gettime(),((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = FUN1 ( FUN2 ( ) , ( ( VAR3 ) { ( 1 ) , ( 1000000 ) } ) , VAR4 -> VAR5 )
  ORIGINAL[5]: pkt -> pts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: av_rescale_q(av_gettime(),((AVRational ){(1), (1000000)}),st -> time_base)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( FUN2 ( ) , ( ( VAR1 ) { ( 1 ) , ( 1000000 ) } ) , VAR2 -> VAR3 )
  ORIGINAL[7]: av_gettime()
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( )
  ORIGINAL[8]: (AVRational ){(1), (1000000)}
  TYPE[8]: CALL
  TOKENIZED[8]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[9]: {(1), (1000000)}
  TYPE[9]: CALL
  TOKENIZED[9]: { ( 1 ) , ( 1000000 ) }
  ORIGINAL[10]: st -> time_base
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: use_wallclock_as_timestamps
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: dts
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pts
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: time_base
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: s
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: st
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pktl
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1

CENTER_NODE: 47244641087
FRAGMENT_COUNT: 2
  ORIGINAL[0]: v % (100 * 1000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % ( 100 * 1000 )
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244641198
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480821
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478543
FRAGMENT_COUNT: 6
  ORIGINAL[0]: 2 * i < st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: 2 * VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: index_entries
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640838
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641072
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641127
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec_id == AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: codec_id = fmt -> video_codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3
  ORIGINAL[2]: fmt -> video_codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_id
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: codec_id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481124
FRAGMENT_COUNT: 15
  ORIGINAL[0]: *ptr && (av_isspace(( *ptr)) || ( *ptr) == ',')
  TYPE[0]: CALL
  TOKENIZED[0]: *ptr && ( FUN1 ( ( *ptr ) ) || ( *ptr ) == ' , ' )
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: *ptr
  TYPE[2]: CALL
  TOKENIZED[2]: *ptr
  ORIGINAL[3]: !(ptr = (strchr(key,'=')))
  TYPE[3]: CALL
  TOKENIZED[3]: ! ( VAR1 = ( FUN1 ( VAR2 , '=' ) ) )
  ORIGINAL[4]: ptr[1]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 1 ]
  ORIGINAL[5]: ptr[1]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ 1 ]
  ORIGINAL[6]: ptr
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ptr
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ptr
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ptr
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ptr
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ptr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ptr
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ptr
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ptr
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244641231
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771225
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479256
FRAGMENT_COUNT: 10
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = ic -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: st -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> time_base
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> time_base
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: start_time
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771234
FRAGMENT_COUNT: 4
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8
  ORIGINAL[2]: '6' << 16
  TYPE[2]: CALL
  TOKENIZED[2]: '6' << 16
  ORIGINAL[3]: 63 << 8
  TYPE[3]: CALL
  TOKENIZED[3]: 63 << 8

CENTER_NODE: 68719477510
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> raw_packet_buffer_remaining_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (st -> codec -> codec_id) != AV_CODEC_ID_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4
  ORIGINAL[2]: av_log(s,48,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[3]: st -> index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064776712
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244640889
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: while ((tags -> id) != AV_CODEC_ID_NONE)
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( ( VAR1 -> VAR2 ) != VAR3 )

CENTER_NODE: 47244640721
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481053
FRAGMENT_COUNT: 5
  ORIGINAL[0]: v & 0x0100
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 0x0100
  ORIGINAL[1]: len++
  TYPE[1]: CALL
  TOKENIZED[1]: len++
  ORIGINAL[2]: v = 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 1
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771801
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl -> pkt
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: &pktl -> pkt
  TYPE[2]: CALL
  TOKENIZED[2]: &pktl -> VAR1
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477018
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: name
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: short_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: fmt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773822
FRAGMENT_COUNT: 9
  ORIGINAL[0]: index < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: ie -> timestamp != timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != VAR2
  ORIGINAL[2]: ie -> timestamp <= timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 <= VAR2
  ORIGINAL[3]: ie -> size = size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 = VAR2
  ORIGINAL[4]: ie -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: size
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ie
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ie
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719478614
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: &st -> index_entries_allocated_size
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: pos
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640854
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774123
FRAGMENT_COUNT: 3
  ORIGINAL[0]: avio_seek(s -> pb,pos,0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , VAR3 , 0 )
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pos
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478489
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_VIDEO && !(st -> disposition & 0x0400)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4 && ! ( VAR1 -> VAR5 & 0x0400 )
  ORIGINAL[1]: first_audio_index < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: first_audio_index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: first_audio_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: first_audio_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: first_audio_index
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772356
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63 && st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL) && st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63 && VAR3 -> VAR5 == ( ( VAR6 ) 0x8000000000000000UL ) && VAR3 -> VAR7 != ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[1]: pts_wrap_reference = st -> first_dts - av_rescale(60,st -> time_base . den,st -> time_base . num)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 - FUN1 ( 60 , VAR2 -> VAR4 . VAR5 , VAR2 -> VAR4 . VAR6 )
  ORIGINAL[2]: st -> first_dts - av_rescale(60,st -> time_base . den,st -> time_base . num)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 - FUN1 ( 60 , VAR1 -> VAR3 . VAR4 , VAR1 -> VAR3 . VAR5 )
  ORIGINAL[3]: st -> first_dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_rescale(60,st -> time_base . den,st -> time_base . num)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( 60 , VAR1 -> VAR2 . VAR3 , VAR1 -> VAR2 . VAR4 )
  ORIGINAL[5]: pts_wrap_reference
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064777067
FRAGMENT_COUNT: 6
  ORIGINAL[0]: proto_size > p + 1 - url?p + 1 - url : proto_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2 + 1 - url?p + 1 - VAR3 : VAR1
  ORIGINAL[1]: proto_size > p + 1 - url
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2 + 1 - VAR3
  ORIGINAL[2]: p + 1 - url
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1 - VAR2
  ORIGINAL[3]: p + 1 - url
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 1 - VAR2
  ORIGINAL[4]: p + 1
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + 1
  ORIGINAL[5]: url
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480464
FRAGMENT_COUNT: 11
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter
  ORIGINAL[1]: !chapter
  TYPE[1]: CALL
  TOKENIZED[1]: !chapter
  ORIGINAL[2]: chapter -> metadata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: chapter -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: chapter -> time_base = time_base
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = VAR2
  ORIGINAL[5]: chapter -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: chapter -> start
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: start
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: chapter
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: chapter
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: chapter
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771534
FRAGMENT_COUNT: 14
  ORIGINAL[0]: !is_opened == !(fmt1 -> flags & 0x1)
  TYPE[0]: CALL
  TOKENIZED[0]: !is_opened == ! ( VAR1 -> VAR2 & 0x1 )
  ORIGINAL[1]: score > score_max
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > VAR2
  ORIGINAL[2]: score_max = score
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: fmt = fmt1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = VAR2
  ORIGINAL[4]: score == score_max
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 == VAR2
  ORIGINAL[5]: fmt1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: score_max
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: score_max
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: score
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: fmt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: fmt1
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: score
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: score_max
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 30064771232
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: abort()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )

CENTER_NODE: 30064777836
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stonesoup_file_desc > -1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > -1
  ORIGINAL[1]: tracepoint(stonesoup_trace, variable_signed_integral, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: stonesoup_buffer[127]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 127 ]
  ORIGINAL[3]: &(stonesoup_buffer[127])
  TYPE[3]: CALL
  TOKENIZED[3]: & ( VAR1 [ 127 ] )
  ORIGINAL[4]: stonesoup_buffer[127]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ 127 ]
  ORIGINAL[5]: stonesoup_trace
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: variable_signed_integral
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774768
FRAGMENT_COUNT: 5
  ORIGINAL[0]: has_duration(ic)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: ic -> duration_estimation_method = AVFMT_DURATION_FROM_BITRATE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3
  ORIGINAL[2]: ic -> duration_estimation_method
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: AVFMT_DURATION_FROM_BITRATE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776607
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640810
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641176
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776114
FRAGMENT_COUNT: 13
  ORIGINAL[0]: s -> iformat -> read_play
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: s -> iformat
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (s -> iformat -> read_play)(s)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[3]: s -> iformat -> read_play
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: s -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> pb
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: read_play
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: iformat
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: read_play
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pb
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244641190
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777858
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *first_iformat = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *first_iformat = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: first_iformat
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: first_oformat
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776233
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: av_freep((&s -> priv_data))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[2]: &s -> priv_data
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480897
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481177
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640692
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777587
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *(spec++)) == ':'
  TYPE[0]: CALL
  TOKENIZED[0]: ( * ( spec++ ) ) == ':'
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477883
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> first_dts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl && pktl -> pkt . dts != st -> first_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR1 -> VAR2 . VAR3 != VAR4 -> VAR5
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (char [32]){(0)}
  TYPE[3]: CALL
  TOKENIZED[3]: ( char [ 32 ] ) { ( 0 ) }
  ORIGINAL[4]: st -> first_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: first_dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640735
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480647
FRAGMENT_COUNT: 10
  ORIGINAL[0]: ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ic -> metadata
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: ic -> start_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: ic -> start_time
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: start_time
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: us
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640685
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776428
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: program -> start_time = program -> end_time = ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR1 -> VAR3 = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[3]: program -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: program -> end_time = ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: program -> end_time
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (int64_t )0x8000000000000000UL
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 68719480175
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ic -> programs[i] == last
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] == VAR4
  ORIGINAL[1]: last = ((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( void * ) 0 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: last
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: last
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480891
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478663
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ts = read_timestamp(s,stream_index,ppos,pos_limit)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: read_timestamp(s,stream_index,ppos,pos_limit)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: read_timestamp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719479047
FRAGMENT_COUNT: 4
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: stream_index
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: timestamp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: flags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774133
FRAGMENT_COUNT: 18
  ORIGINAL[0]: index < 0 && st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0 && VAR2 -> VAR3
  ORIGINAL[1]: index < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> nb_index_entries
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> nb_index_entries
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: nb_index_entries
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: st
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: st
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1

CENTER_NODE: 68719481474
FRAGMENT_COUNT: 7
  ORIGINAL[0]: len_p > len_h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: len_h - len_p
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: len_h
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hostname
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len_h
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len_p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len_h
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719481311
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064771240
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064775116
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: 60 * 12
  TYPE[1]: CALL
  TOKENIZED[1]: 60 * 12
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641186
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640680
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641250
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640847
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640722
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641158
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244640554
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773112
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !pkt
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt
  ORIGINAL[1]: got_output = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: got_output
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777379
FRAGMENT_COUNT: 14
  ORIGINAL[0]: rel[1] == '/'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '/'
  ORIGINAL[1]: rel[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: sep[1] = '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ] = '\\0'
  ORIGINAL[3]: sep[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: sep += 3
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 += 3
  ORIGINAL[5]: sep = strchr(sep,'/')
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR1 , '/' )
  ORIGINAL[6]: strchr(sep,'/')
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , '/' )
  ORIGINAL[7]: sep
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: sep
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: sep
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: sep
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: sep
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: sep
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: buf
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719477685
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: parse_queue_end
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641183
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771270
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> pts_wrap_behavior == - 1 && timestamp >= st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == - 1 && VAR3 >= VAR1 -> VAR4
  ORIGINAL[1]: 1ULL << st -> pts_wrap_bits
  TYPE[1]: CALL
  TOKENIZED[1]: 1ULL << VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_bits
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pts_wrap_bits
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481285
FRAGMENT_COUNT: 8
  ORIGINAL[0]: width || height
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 || VAR2
  ORIGINAL[1]: size += 8
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += 8
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640867
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481310
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244641164
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478022
FRAGMENT_COUNT: 7
  ORIGINAL[0]: &den
  TYPE[0]: CALL
  TOKENIZED[0]: &den
  ORIGINAL[1]: st -> reference_dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: (pc -> dts_ref_dts_delta) * num / den
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) * VAR3 / VAR4
  ORIGINAL[3]: (pc -> dts_ref_dts_delta) * num
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 -> VAR2 ) * VAR3
  ORIGINAL[4]: den
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: den
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640689
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476861
FRAGMENT_COUNT: 3
  ORIGINAL[0]: * stonesoup_envSize = NULL
  TYPE[0]: CALL
  TOKENIZED[0]: * VAR1 = VAR2
  ORIGINAL[1]: *stonesoup_tainted_buff
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_tainted_buff
  ORIGINAL[2]: stonesoup_tainted_buff
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719480816
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641187
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640305
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640829
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479579
FRAGMENT_COUNT: 7
  ORIGINAL[0]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064776887
FRAGMENT_COUNT: 16
  ORIGINAL[0]: c == '%'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '%'
  ORIGINAL[1]: av_isdigit(( *p))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( *p ) )
  ORIGINAL[2]: *p
  TYPE[2]: CALL
  TOKENIZED[2]: *p
  ORIGINAL[3]: nd = nd * '\\n' + ( *(p++)) - 48
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[4]: nd * '\\n' + ( *(p++)) - 48
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[5]: nd * '\\n' + ( *(p++))
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 * '\\n' + ( * ( p++ ) )
  ORIGINAL[6]: nd * '\\n'
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 * '\\n'
  ORIGINAL[7]: *(p++)
  TYPE[7]: CALL
  TOKENIZED[7]: * ( p++ )
  ORIGINAL[8]: p++
  TYPE[8]: CALL
  TOKENIZED[8]: p++
  ORIGINAL[9]: av_isdigit(c)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 )
  ORIGINAL[10]: while (av_isdigit(( *p)))
  TYPE[10]: CONTROL_STRUCTURE
  TOKENIZED[10]: while ( FUN1 ( ( *p ) ) )
  ORIGINAL[11]: p
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: nd
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: nd
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: p
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: c
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244641077
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: sizeof(buf)
  TYPE[0]: CALL
  TOKENIZED[0]: sizeof ( VAR1 )
  ORIGINAL[1]: filename
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477459
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479468
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !st -> sample_aspect_ratio . num && !st -> codec -> sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: !st -> VAR1 . VAR2 && !st -> VAR3 -> VAR1 . VAR2
  ORIGINAL[2]: st -> codec_info_nb_frames
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_info_nb_frames
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641179
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640573
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640630
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641194
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776525
FRAGMENT_COUNT: 4
  ORIGINAL[0]: m && !(av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ! ( FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[1]: !(av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[2]: av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[3]: m
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479633
FRAGMENT_COUNT: 5
  ORIGINAL[0]: tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: tags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773932
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: index = av_index_search_timestamp(st,target_ts,flags & ~1)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 & ~1 )
  ORIGINAL[2]: av_index_search_timestamp(st,target_ts,flags & ~1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 & ~1 )
  ORIGINAL[3]: index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477216
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ic -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: err < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: ic -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477596
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec_id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771910
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> iformat -> priv_data_size > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 > 0
  ORIGINAL[1]: s -> iformat -> priv_class
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: (ret = av_opt_set_dict(s -> priv_data,&tmp)) < 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , &tmp ) ) < 0
  ORIGINAL[3]: !(s -> flags & 0x20000)
  TYPE[3]: CALL
  TOKENIZED[3]: ! ( VAR1 -> VAR2 & 0x20000 )
  ORIGINAL[4]: s -> flags & 0x20000
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 & 0x20000
  ORIGINAL[5]: s -> flags
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2

CENTER_NODE: 30064776506
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !tmp
  TYPE[0]: CALL
  TOKENIZED[0]: !tmp
  ORIGINAL[1]: program -> stream_index[program -> nb_stream_indexes++] = idx
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR1 -> nb_stream_indexes++ ] = VAR3
  ORIGINAL[2]: program -> stream_index[program -> nb_stream_indexes++]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR1 -> nb_stream_indexes++ ]
  ORIGINAL[3]: idx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

