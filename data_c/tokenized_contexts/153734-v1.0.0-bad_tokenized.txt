# Tokenized code fragments for 153734-v1.0.0-bad
# Total center nodes processed: 27
# Total code fragments found: 238

CENTER_NODE: 30064771175
FRAGMENT_COUNT: 5
  ORIGINAL[0]: buff[0] >= 79
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] >= 79
  ORIGINAL[1]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: stonesoup_trace
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: trace_point
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: buff
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477011
FRAGMENT_COUNT: 8
  ORIGINAL[0]: Camellia_ofb128_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , ( ( long ) VAR3 ) , ( & ( ( VAR4 * ) ( VAR5 -> VAR6 ) ) -> VAR7 ) , VAR5 -> VAR8 , &ctx -> VAR9 )
  ORIGINAL[1]: (long )inl
  TYPE[1]: CALL
  TOKENIZED[1]: ( long ) VAR1
  ORIGINAL[2]: &((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks
  TYPE[2]: CALL
  TOKENIZED[2]: & ( ( VAR1 * ) ( VAR2 -> VAR3 ) ) -> VAR4
  ORIGINAL[3]: ctx -> iv
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: &ctx -> num
  TYPE[4]: CALL
  TOKENIZED[4]: &ctx -> VAR1
  ORIGINAL[5]: inl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: in
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: out
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477305
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret = Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 * 8 , ( VAR3 -> VAR5 ) )
  ORIGINAL[1]: Camellia_set_key(key,ctx -> key_len * 8,(ctx -> cipher_data))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 * 8 , ( VAR2 -> VAR4 ) )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: key
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771699
FRAGMENT_COUNT: 5
  ORIGINAL[0]: inl && inl >= chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 >= VAR2
  ORIGINAL[1]: in += chunk
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2
  ORIGINAL[2]: in
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: chunk
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: out
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771543
FRAGMENT_COUNT: 40
  ORIGINAL[0]: inl && inl >= chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 >= VAR2
  ORIGINAL[1]: inl >= chunk
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= VAR2
  ORIGINAL[2]: Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , ( ( long ) ( 128 == 1 && ! ( VAR3 -> VAR4 & 0x2000 ) ?inl * 8 : VAR5 ) ) , ( & ( ( VAR6 * ) ( VAR3 -> VAR7 ) ) -> VAR8 ) , VAR3 -> VAR9 , &ctx -> VAR10 , VAR3 -> VAR11 )
  ORIGINAL[3]: (long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)
  TYPE[3]: CALL
  TOKENIZED[3]: ( long ) ( 128 == 1 && ! ( VAR1 -> VAR2 & 0x2000 ) ?inl * 8 : VAR3 )
  ORIGINAL[4]: 128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl
  TYPE[4]: CALL
  TOKENIZED[4]: 128 == 1 && ! ( VAR1 -> VAR2 & 0x2000 ) ?inl * 8 : VAR3
  ORIGINAL[5]: 128 == 1 && !(ctx -> flags & 0x2000)
  TYPE[5]: CALL
  TOKENIZED[5]: 128 == 1 && ! ( VAR1 -> VAR2 & 0x2000 )
  ORIGINAL[6]: 128 == 1
  TYPE[6]: CALL
  TOKENIZED[6]: 128 == 1
  ORIGINAL[7]: &((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks
  TYPE[7]: CALL
  TOKENIZED[7]: & ( ( VAR1 * ) ( VAR2 -> VAR3 ) ) -> VAR4
  ORIGINAL[8]: ((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks
  TYPE[8]: CALL
  TOKENIZED[8]: ( ( VAR1 * ) ( VAR2 -> VAR3 ) ) -> VAR4
  ORIGINAL[9]: (EVP_CAMELLIA_KEY *)(ctx -> cipher_data)
  TYPE[9]: CALL
  TOKENIZED[9]: ( VAR1 * ) ( VAR2 -> VAR3 )
  ORIGINAL[10]: ctx -> cipher_data
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: ctx -> iv
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: &ctx -> num
  TYPE[12]: CALL
  TOKENIZED[12]: &ctx -> VAR1
  ORIGINAL[13]: ctx -> num
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: ctx -> encrypt
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: inl -= chunk
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -= VAR2
  ORIGINAL[16]: in += chunk
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 += VAR2
  ORIGINAL[17]: out += chunk
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 += VAR2
  ORIGINAL[18]: inl < chunk
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 < VAR2
  ORIGINAL[19]: while (inl && inl >= chunk)
  TYPE[19]: CONTROL_STRUCTURE
  TOKENIZED[19]: while ( VAR1 && VAR1 >= VAR2 )
  ORIGINAL[20]: cipher_data
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ks
  TYPE[21]: FIELD_IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: iv
  TYPE[22]: FIELD_IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: num
  TYPE[23]: FIELD_IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: encrypt
  TYPE[24]: FIELD_IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: inl
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: in
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: out
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: ctx
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: ctx
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: ctx
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: ctx
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: inl
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: chunk
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: in
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: chunk
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: out
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: chunk
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: inl
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: chunk
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1

CENTER_NODE: 30064771488
FRAGMENT_COUNT: 57
  ORIGINAL[0]: inl >= ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[1]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[2]: (size_t )1
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 ) 1
  ORIGINAL[3]: sizeof(long ) * 8 - 2
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( long ) * 8 - 2
  ORIGINAL[4]: sizeof(long ) * 8
  TYPE[4]: CALL
  TOKENIZED[4]: sizeof ( long ) * 8
  ORIGINAL[5]: sizeof(long )
  TYPE[5]: CALL
  TOKENIZED[5]: sizeof ( long )
  ORIGINAL[6]: Camellia_cbc_encrypt(in,out,((long )(((size_t )1) << sizeof(long ) * 8 - 2)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , VAR2 , ( ( long ) ( ( ( VAR3 ) 1 ) << sizeof ( long ) * 8 - 2 ) ) , ( & ( ( VAR4 * ) ( VAR5 -> VAR6 ) ) -> VAR7 ) , VAR5 -> VAR8 , VAR5 -> VAR9 )
  ORIGINAL[7]: (long )(((size_t )1) << sizeof(long ) * 8 - 2)
  TYPE[7]: CALL
  TOKENIZED[7]: ( long ) ( ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2 )
  ORIGINAL[8]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[8]: CALL
  TOKENIZED[8]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[9]: (size_t )1
  TYPE[9]: CALL
  TOKENIZED[9]: ( VAR1 ) 1
  ORIGINAL[10]: sizeof(long ) * 8 - 2
  TYPE[10]: CALL
  TOKENIZED[10]: sizeof ( long ) * 8 - 2
  ORIGINAL[11]: sizeof(long ) * 8
  TYPE[11]: CALL
  TOKENIZED[11]: sizeof ( long ) * 8
  ORIGINAL[12]: sizeof(long )
  TYPE[12]: CALL
  TOKENIZED[12]: sizeof ( long )
  ORIGINAL[13]: &((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks
  TYPE[13]: CALL
  TOKENIZED[13]: & ( ( VAR1 * ) ( VAR2 -> VAR3 ) ) -> VAR4
  ORIGINAL[14]: ((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks
  TYPE[14]: CALL
  TOKENIZED[14]: ( ( VAR1 * ) ( VAR2 -> VAR3 ) ) -> VAR4
  ORIGINAL[15]: (EVP_CAMELLIA_KEY *)(ctx -> cipher_data)
  TYPE[15]: CALL
  TOKENIZED[15]: ( VAR1 * ) ( VAR2 -> VAR3 )
  ORIGINAL[16]: ctx -> cipher_data
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: ctx -> iv
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: ctx -> encrypt
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2
  ORIGINAL[19]: inl -= ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -= ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[20]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[20]: CALL
  TOKENIZED[20]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[21]: (size_t )1
  TYPE[21]: CALL
  TOKENIZED[21]: ( VAR1 ) 1
  ORIGINAL[22]: sizeof(long ) * 8 - 2
  TYPE[22]: CALL
  TOKENIZED[22]: sizeof ( long ) * 8 - 2
  ORIGINAL[23]: sizeof(long ) * 8
  TYPE[23]: CALL
  TOKENIZED[23]: sizeof ( long ) * 8
  ORIGINAL[24]: sizeof(long )
  TYPE[24]: CALL
  TOKENIZED[24]: sizeof ( long )
  ORIGINAL[25]: in += ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 += ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[26]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[26]: CALL
  TOKENIZED[26]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[27]: (size_t )1
  TYPE[27]: CALL
  TOKENIZED[27]: ( VAR1 ) 1
  ORIGINAL[28]: sizeof(long ) * 8 - 2
  TYPE[28]: CALL
  TOKENIZED[28]: sizeof ( long ) * 8 - 2
  ORIGINAL[29]: sizeof(long ) * 8
  TYPE[29]: CALL
  TOKENIZED[29]: sizeof ( long ) * 8
  ORIGINAL[30]: sizeof(long )
  TYPE[30]: CALL
  TOKENIZED[30]: sizeof ( long )
  ORIGINAL[31]: out += ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[31]: CALL
  TOKENIZED[31]: VAR1 += ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[32]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[32]: CALL
  TOKENIZED[32]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[33]: (size_t )1
  TYPE[33]: CALL
  TOKENIZED[33]: ( VAR1 ) 1
  ORIGINAL[34]: sizeof(long ) * 8 - 2
  TYPE[34]: CALL
  TOKENIZED[34]: sizeof ( long ) * 8 - 2
  ORIGINAL[35]: sizeof(long ) * 8
  TYPE[35]: CALL
  TOKENIZED[35]: sizeof ( long ) * 8
  ORIGINAL[36]: sizeof(long )
  TYPE[36]: CALL
  TOKENIZED[36]: sizeof ( long )
  ORIGINAL[37]: while (inl >= ((size_t )1) << sizeof(long ) * 8 - 2)
  TYPE[37]: CONTROL_STRUCTURE
  TOKENIZED[37]: while ( VAR1 >= ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2 )
  ORIGINAL[38]: cipher_data
  TYPE[38]: FIELD_IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: ks
  TYPE[39]: FIELD_IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: iv
  TYPE[40]: FIELD_IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: encrypt
  TYPE[41]: FIELD_IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: inl
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: long
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: long
  ORIGINAL[44]: in
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: out
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: long
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: long
  ORIGINAL[47]: ctx
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: ctx
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: ctx
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: inl
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: long
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: long
  ORIGINAL[52]: in
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: long
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: long
  ORIGINAL[54]: out
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1
  ORIGINAL[55]: long
  TYPE[55]: IDENTIFIER
  TOKENIZED[55]: long
  ORIGINAL[56]: inl
  TYPE[56]: IDENTIFIER
  TOKENIZED[56]: VAR1

CENTER_NODE: 47244640301
FRAGMENT_COUNT: 1
  ORIGINAL[0]: inl < bl
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2

CENTER_NODE: 30064771805
FRAGMENT_COUNT: 5
  ORIGINAL[0]: inl && inl >= chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 >= VAR2
  ORIGINAL[1]: out += chunk
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2
  ORIGINAL[2]: out
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: chunk
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: inl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771159
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *stonesoup_s != (char)0
  TYPE[0]: CALL
  TOKENIZED[0]: *stonesoup_s != ( char ) 0
  ORIGINAL[1]: stonesoup_s++
  TYPE[1]: CALL
  TOKENIZED[1]: stonesoup_s++
  ORIGINAL[2]: for (stonesoup_s = stonesoup_shm;*stonesoup_s != (char)0;stonesoup_s++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = VAR2 ; *stonesoup_s != ( char ) 0 ; stonesoup_s++ )
  ORIGINAL[3]: stonesoup_s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771323
FRAGMENT_COUNT: 2
  ORIGINAL[0]: &camellia_128_ofb
  TYPE[0]: CALL
  TOKENIZED[0]: &camellia_128_ofb
  ORIGINAL[1]: <global> camellia_128_ofb
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064771405
FRAGMENT_COUNT: 5
  ORIGINAL[0]: bl = (ctx -> cipher -> block_size)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( VAR2 -> VAR3 -> VAR4 )
  ORIGINAL[1]: ctx -> cipher -> block_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: ctx -> cipher
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: block_size
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: bl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771867
FRAGMENT_COUNT: 13
  ORIGINAL[0]: stonesoup_oc_i < 64
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 64
  ORIGINAL[1]: ++stonesoup_oc_i
  TYPE[1]: CALL
  TOKENIZED[1]: ++stonesoup_oc_i
  ORIGINAL[2]: stonesoup_function_buff[stonesoup_oc_i] = stonesoup_toupper(stonesoup_function_buff[stonesoup_oc_i])
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] = FUN1 ( VAR1 [ VAR2 ] )
  ORIGINAL[3]: stonesoup_function_buff[stonesoup_oc_i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: stonesoup_toupper(stonesoup_function_buff[stonesoup_oc_i])
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 [ VAR2 ] )
  ORIGINAL[5]: stonesoup_function_buff[stonesoup_oc_i]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ]
  ORIGINAL[6]: for (;stonesoup_oc_i < 64;++stonesoup_oc_i)
  TYPE[6]: CONTROL_STRUCTURE
  TOKENIZED[6]: for ( ; VAR1 < 64 ; ++stonesoup_oc_i )
  ORIGINAL[7]: stonesoup_oc_i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_oc_i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: stonesoup_function_buff
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: stonesoup_oc_i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: stonesoup_function_buff
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: stonesoup_oc_i
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064771115
FRAGMENT_COUNT: 5
  ORIGINAL[0]: filepath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: stonesoup_printf_context = fopen(filepath, \
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[2]: fopen(filepath, \
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: <global> stonesoup_printf_context
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: filepath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771261
FRAGMENT_COUNT: 11
  ORIGINAL[0]: inl < bl
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: inl -= bl
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -= VAR2
  ORIGINAL[2]: i = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: i <= inl
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 <= VAR2
  ORIGINAL[4]: inl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: bl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: inl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: bl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: inl
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 30064771828
FRAGMENT_COUNT: 9
  ORIGINAL[0]: 8 == 1
  TYPE[0]: CALL
  TOKENIZED[0]: 8 == 1
  ORIGINAL[1]: ctx -> flags & 0x2000
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & 0x2000
  ORIGINAL[2]: ctx -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: flags
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477242
FRAGMENT_COUNT: 6
  ORIGINAL[0]: inl < chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: chunk = inl
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: chunk
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: chunk
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: chunk
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: inl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477422
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getopt(argc, argv, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: argc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argv
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771640
FRAGMENT_COUNT: 4
  ORIGINAL[0]: 1 == 1
  TYPE[0]: CALL
  TOKENIZED[0]: 1 == 1
  ORIGINAL[1]: chunk >>= 3
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >>= 3
  ORIGINAL[2]: chunk
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: inl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771728
FRAGMENT_COUNT: 9
  ORIGINAL[0]: inl && inl >= chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 >= VAR2
  ORIGINAL[1]: (EVP_CAMELLIA_KEY *)(ctx -> cipher_data)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 * ) ( VAR2 -> VAR3 )
  ORIGINAL[2]: ctx -> cipher_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: cipher_data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ctx
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477105
FRAGMENT_COUNT: 4
  ORIGINAL[0]: inl >= ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[1]: ctx -> cipher_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: cipher_data
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ctx
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771484
FRAGMENT_COUNT: 2
  ORIGINAL[0]: &camellia_192_cbc
  TYPE[0]: CALL
  TOKENIZED[0]: &camellia_192_cbc
  ORIGINAL[1]: <global> camellia_192_cbc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064771363
FRAGMENT_COUNT: 9
  ORIGINAL[0]: Camellia_cbc_encrypt(in,out,((long )inl),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,ctx -> encrypt)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , ( ( long ) VAR3 ) , ( & ( ( VAR4 * ) ( VAR5 -> VAR6 ) ) -> VAR7 ) , VAR5 -> VAR8 , VAR5 -> VAR9 )
  ORIGINAL[1]: (long )inl
  TYPE[1]: CALL
  TOKENIZED[1]: ( long ) VAR1
  ORIGINAL[2]: &((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks
  TYPE[2]: CALL
  TOKENIZED[2]: & ( ( VAR1 * ) ( VAR2 -> VAR3 ) ) -> VAR4
  ORIGINAL[3]: ctx -> iv
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ctx -> encrypt
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: inl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: in
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: out
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: inl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 1
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122

CENTER_NODE: 30064771401
FRAGMENT_COUNT: 5
  ORIGINAL[0]: inl && inl >= chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 >= VAR2
  ORIGINAL[1]: out += chunk
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2
  ORIGINAL[2]: out
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: chunk
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: inl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771204
FRAGMENT_COUNT: 5
  ORIGINAL[0]: inl >= ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[1]: in += ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[2]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[3]: in
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: out
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771306
FRAGMENT_COUNT: 5
  ORIGINAL[0]: inl >= ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[1]: out += ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += ( ( VAR2 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[2]: ((size_t )1) << sizeof(long ) * 8 - 2
  TYPE[2]: CALL
  TOKENIZED[2]: ( ( VAR1 ) 1 ) << sizeof ( long ) * 8 - 2
  ORIGINAL[3]: inl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: out
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476877
FRAGMENT_COUNT: 7
  ORIGINAL[0]: inl && inl >= chunk
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 >= VAR2
  ORIGINAL[1]: Camellia_cfb128_encrypt(in,out,((long )(128 == 1 && !(ctx -> flags & 0x2000)?inl * 8 : inl)),(&((EVP_CAMELLIA_KEY *)(ctx -> cipher_data)) -> ks),ctx -> iv,&ctx -> num,ctx -> encrypt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , ( ( long ) ( 128 == 1 && ! ( VAR3 -> VAR4 & 0x2000 ) ?inl * 8 : VAR5 ) ) , ( & ( ( VAR6 * ) ( VAR3 -> VAR7 ) ) -> VAR8 ) , VAR3 -> VAR9 , &ctx -> VAR10 , VAR3 -> VAR11 )
  ORIGINAL[2]: inl -= chunk
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -= VAR2
  ORIGINAL[3]: inl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: inl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: chunk
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: inl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

