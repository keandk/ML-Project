# Tokenized code fragments for 153414-v1.0.0-bad
# Total center nodes processed: 83
# Total code fragments found: 352

CENTER_NODE: 68719476764
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stat(dirpath, &st) == -1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[1]: retval = mkdir(dirpath, 0700)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[2]: mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[3]: retval
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: retval
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772266
FRAGMENT_COUNT: 2
  ORIGINAL[0]: relpath_is_canonical(relpath)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: relpath
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064772967
FRAGMENT_COUNT: 6
  ORIGINAL[0]: result = apr_pstrcat(result_pool,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: apr_pstrcat(result_pool,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: svn_relpath_get_longest_ancestor(fspath1 + 1,fspath2 + 1,result_pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 + 1 , VAR2 + 1 , VAR3 )
  ORIGINAL[3]: (char *)((void *)0)
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[4]: result
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: result_pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640557
FRAGMENT_COUNT: 2
  ORIGINAL[0]: status == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719477318
FRAGMENT_COUNT: 7
  ORIGINAL[0]: add_separator == 0 && total_len == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0 && VAR2 == 1
  ORIGINAL[1]: dirent = p = (apr_palloc(pool,total_len + 1))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 = ( FUN1 ( VAR3 , VAR4 + 1 ) )
  ORIGINAL[2]: p = (apr_palloc(pool,total_len + 1))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( FUN1 ( VAR2 , VAR3 + 1 ) )
  ORIGINAL[3]: dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dirent
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dirent
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719477627
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_path_uri_decode(result,result_pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: result
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: result
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: result_pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640269
FRAGMENT_COUNT: 2
  ORIGINAL[0]: c < 'a' || c > 'z'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 'a' || VAR1 > 'z'
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719477792
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !( *ptr) && ( *(ptr - 1)) == 47 && ptr - 1 != uri
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *ptr ) && ( * ( VAR1 - 1 ) ) == 47 && VAR1 - 1 != VAR2
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: *ptr
  TYPE[2]: CALL
  TOKENIZED[2]: *ptr
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ptr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ptr
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ptr
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477490
FRAGMENT_COUNT: 4
  ORIGINAL[0]: strlen(uri)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: len
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: uri
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477650
FRAGMENT_COUNT: 8
  ORIGINAL[0]: svn_dirent_is_absolute(relative)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: svn_dirent_is_canonical(relative,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: relative
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: relative
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: relative
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: relative
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: relative
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771214
FRAGMENT_COUNT: 5
  ORIGINAL[0]: len > 0 && relpath[len] != 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0 && VAR2 [ VAR1 ] != 47
  ORIGINAL[1]: --len
  TYPE[1]: CALL
  TOKENIZED[1]: --len
  ORIGINAL[2]: while (len > 0 && relpath[len] != 47)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: while ( VAR1 > 0 && VAR2 [ VAR1 ] != 47 )
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477587
FRAGMENT_COUNT: 6
  ORIGINAL[0]: child_dirent[len] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] == 47
  ORIGINAL[1]: root_len == len
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: root_len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771397
FRAGMENT_COUNT: 7
  ORIGINAL[0]: src[1] == 52 && src[2] == 52 && src[3] == 51
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == 52 && VAR1 [ 2 ] == 52 && VAR1 [ 3 ] == 51
  ORIGINAL[1]: src[4] == 47 || !src[4]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 4 ] == 47 || !src [ 4 ]
  ORIGINAL[2]: src[4] == 47
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 4 ] == 47
  ORIGINAL[3]: src[4]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 4 ]
  ORIGINAL[4]: !src[4]
  TYPE[4]: CALL
  TOKENIZED[4]: !src [ 4 ]
  ORIGINAL[5]: src[4]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ 4 ]
  ORIGINAL[6]: src
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640572
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477161
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i == path1_len && path2[i] == 47 || i == path2_len && path1[i] == 47 || i == path1_len && i == path2_len
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 && VAR3 [ VAR1 ] == 47 || VAR1 == VAR4 && VAR5 [ VAR1 ] == 47 || VAR1 == VAR2 && VAR1 == VAR4
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640379
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while ((s = (va_arg(va,const char *))) != ((void *)0))
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( ( VAR1 = ( FUN1 ( VAR2 , const char * ) ) ) != ( ( void * ) 0 ) )

CENTER_NODE: 68719476738
FRAGMENT_COUNT: 3
  ORIGINAL[0]: type_dirent=1
  TYPE[0]: CALL
  TOKENIZED[0]: type_dirent=1
  ORIGINAL[1]: type_relpath=2
  TYPE[1]: CALL
  TOKENIZED[1]: type_relpath=2
  ORIGINAL[2]: type_relpath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477675
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *dst = canonicalize(type_dirent,dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: *dst = FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: canonicalize(type_dirent,dirent,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: dst
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: type_dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dst
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772881
FRAGMENT_COUNT: 4
  ORIGINAL[0]: len == 1 && fspath[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 1 && VAR2 [ 0 ] == 47
  ORIGINAL[1]: len == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 1
  ORIGINAL[2]: fspath[0] == 47
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] == 47
  ORIGINAL[3]: fspath[0]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 0 ]

CENTER_NODE: 30064772894
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_fspath__is_canonical(fspath)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: svn_fspath__is_canonical(fspath)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: (void )0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void ) 0
  ORIGINAL[3]: __assert_fail(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( \
  ORIGINAL[4]: fspath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478133
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_dirent_get_absolute(&dirent,dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &dirent , VAR1 , VAR2 )
  ORIGINAL[1]: pool
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640444
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640485
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 68719476817
FRAGMENT_COUNT: 2
  ORIGINAL[0]: len >= 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 1
  ORIGINAL[1]: len
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640390
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while ((s = (va_arg(va,const char *))) != ((void *)0))
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( ( VAR1 = ( FUN1 ( VAR2 , const char * ) ) ) != ( ( void * ) 0 ) )

CENTER_NODE: 30064771785
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_dirent_is_canonical(component,pool)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: svn_dirent_is_canonical(component,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: __assert_fail(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: <global> __PRETTY_FUNCTION__
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 47244640440
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640448
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477669
FRAGMENT_COUNT: 3
  ORIGINAL[0]: canonicalize(type_uri,uri,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: type_uri
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: uri
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478149
FRAGMENT_COUNT: 6
  ORIGINAL[0]: fspath[0] == 47 && fspath[1] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == 47 && VAR1 [ 1 ] == '\\0'
  ORIGINAL[1]: apr_pstrcat(pool,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: svn_relpath_canonicalize(fspath,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: (char *)((void *)0)
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772889
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (void )0
  TYPE[0]: CALL
  TOKENIZED[0]: ( void ) 0
  ORIGINAL[1]: svn_fspath__is_canonical(child_fspath)?((void )0) : __assert_fail(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[2]: svn_fspath__is_canonical(child_fspath)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: (void )0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void ) 0

CENTER_NODE: 47244640508
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771762
FRAGMENT_COUNT: 4
  ORIGINAL[0]: len == 1 && dirent[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 1 && VAR2 [ 0 ] == 47
  ORIGINAL[1]: len == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 1
  ORIGINAL[2]: dirent[0] == 47
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ] == 47
  ORIGINAL[3]: !0
  TYPE[3]: CALL
  TOKENIZED[3]: !0

CENTER_NODE: 47244640284
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !dirent
  TYPE[0]: CALL
  TOKENIZED[0]: !dirent

CENTER_NODE: 68719477682
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *ptr = dirent
  TYPE[0]: CALL
  TOKENIZED[0]: *ptr = VAR1
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: ptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772182
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !dirent
  TYPE[0]: CALL
  TOKENIZED[0]: !dirent
  ORIGINAL[1]: dirent[0] == 47
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ] == 47
  ORIGINAL[2]: dirent[0]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 0 ]
  ORIGINAL[3]: dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirent
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478273
FRAGMENT_COUNT: 9
  ORIGINAL[0]: stonesoup_data != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: tracepoint(stonesoup_trace, variable_buffer, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: tracepoint(stonesoup_trace, variable_signed_integral, \
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[3]: stonesoup_data->after
  TYPE[3]: CALL
  TOKENIZED[3]: stonesoup_data->after
  ORIGINAL[4]: &stonesoup_data->after
  TYPE[4]: CALL
  TOKENIZED[4]: &stonesoup_data->after
  ORIGINAL[5]: stonesoup_trace
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_trace
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: variable_signed_integral
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_trace
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772911
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_fspath__is_canonical(fspath)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: svn_fspath__is_canonical(fspath)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: (void )0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void ) 0
  ORIGINAL[3]: (void )0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void ) 0

CENTER_NODE: 68719477439
FRAGMENT_COUNT: 4
  ORIGINAL[0]: strlen(relpath)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: len
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: relpath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: relpath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477215
FRAGMENT_COUNT: 3
  ORIGINAL[0]: dirent[0] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == '\\0'
  ORIGINAL[1]: dirent[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476875
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: len > 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 1
  ORIGINAL[2]: len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772651
FRAGMENT_COUNT: 6
  ORIGINAL[0]: targets -> nelts == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == 1
  ORIGINAL[1]: *pcommon = (apr_pstrdup(result_pool, *pcommon))
  TYPE[1]: CALL
  TOKENIZED[1]: *pcommon = ( FUN1 ( VAR1 , *pcommon ) )
  ORIGINAL[2]: *pcommon
  TYPE[2]: CALL
  TOKENIZED[2]: *pcommon
  ORIGINAL[3]: apr_pstrdup(result_pool, *pcommon)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , *pcommon )
  ORIGINAL[4]: pcommon
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: result_pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477212
FRAGMENT_COUNT: 4
  ORIGINAL[0]: internal_style(dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771979
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *base_name = svn_dirent_basename(dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: *base_name = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: *base_name
  TYPE[1]: CALL
  TOKENIZED[1]: *base_name
  ORIGINAL[2]: svn_dirent_basename(dirent,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: base_name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: base_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dirent
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477694
FRAGMENT_COUNT: 4
  ORIGINAL[0]: seglen = (ptr - seg)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( VAR2 - VAR3 )
  ORIGINAL[1]: seglen == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 1
  ORIGINAL[2]: seglen
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: seglen
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771967
FRAGMENT_COUNT: 5
  ORIGINAL[0]: apr_pstrmemdup(pool,dirent + start,len - start)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 + VAR3 , VAR4 - VAR3 )
  ORIGINAL[1]: dirent + start
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 + VAR2
  ORIGINAL[2]: len - start
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771168
FRAGMENT_COUNT: 9
  ORIGINAL[0]: len == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: len > 0 && dirent[len] != 47
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 0 && VAR2 [ VAR1 ] != 47
  ORIGINAL[2]: len > 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > 0
  ORIGINAL[3]: dirent[len] != 47
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] != 47
  ORIGINAL[4]: --len
  TYPE[4]: CALL
  TOKENIZED[4]: --len
  ORIGINAL[5]: while (len > 0 && dirent[len] != 47)
  TYPE[5]: CONTROL_STRUCTURE
  TOKENIZED[5]: while ( VAR1 > 0 && VAR2 [ VAR1 ] != 47 )
  ORIGINAL[6]: len
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: len
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: dirent
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477525
FRAGMENT_COUNT: 6
  ORIGINAL[0]: relpath_is_canonical(relpath2)?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: apr_pstrndup(pool,relpath1,get_longest_ancestor_length(type_relpath,relpath1,relpath2,pool))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , FUN2 ( VAR3 , VAR2 , VAR4 , VAR1 ) )
  ORIGINAL[2]: get_longest_ancestor_length(type_relpath,relpath1,relpath2,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: relpath1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772010
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *dirpath = (svn_relpath_dirname(relpath,pool))
  TYPE[0]: CALL
  TOKENIZED[0]: *dirpath = ( FUN1 ( VAR1 , VAR2 ) )
  ORIGINAL[1]: *dirpath
  TYPE[1]: CALL
  TOKENIZED[1]: *dirpath
  ORIGINAL[2]: svn_relpath_dirname(relpath,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: dirpath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: base_name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771142
FRAGMENT_COUNT: 4
  ORIGINAL[0]: mkdir(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: tracepoint(stonesoup_trace,trace_location,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: stonesoup_setup_printf_context()
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( )
  ORIGINAL[3]: sca_paleocyclic
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719477175
FRAGMENT_COUNT: 7
  ORIGINAL[0]: path2[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: apr_pstrdup(pool,path2)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: path2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: path2
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: path2
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771151
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c < 65 || c > 'Z'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 65 || VAR1 > 'Z'
  ORIGINAL[1]: c < 65
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 65
  ORIGINAL[2]: c > 'Z'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > 'Z'
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477449
FRAGMENT_COUNT: 3
  ORIGINAL[0]: relpath_is_canonical(relpath)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: __assert_fail(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: <global> __PRETTY_FUNCTION__
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 47244640563
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478183
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_fspath__dirname(fspath,result_pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: dirpath
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: fspath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: result_pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: result_pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772524
FRAGMENT_COUNT: 5
  ORIGINAL[0]: targets -> nelts == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == 1
  ORIGINAL[1]: i = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: for (i = 1;i < targets -> nelts;++i)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 1 ; VAR1 < VAR2 -> VAR3 ; ++i )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772180
FRAGMENT_COUNT: 5
  ORIGINAL[0]: uri_skip_ancestor(parent_uri,child_uri) != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 ) != ( ( void * ) 0 )
  ORIGINAL[1]: uri_skip_ancestor(parent_uri,child_uri)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: parent_uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: child_uri
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772176
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_dirent_skip_ancestor(parent_dirent,child_dirent) != ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 ) != ( ( void * ) 0 )
  ORIGINAL[1]: svn_dirent_skip_ancestor(parent_dirent,child_dirent)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064771136
FRAGMENT_COUNT: 1
  ORIGINAL[0]: buffer[64]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 64 ]

CENTER_NODE: 30064772108
FRAGMENT_COUNT: 5
  ORIGINAL[0]: is_child(type_dirent,parent_dirent,child_dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: type_dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: parent_dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: child_dirent
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772164
FRAGMENT_COUNT: 7
  ORIGINAL[0]: 0 != strncmp(parent_uri,child_uri,len)
  TYPE[0]: CALL
  TOKENIZED[0]: 0 != FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: child_uri[len] == 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] == 0
  ORIGINAL[2]: child_uri[len]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: child_uri[len] == 47
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ] == 47
  ORIGINAL[4]: child_uri[len]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ]
  ORIGINAL[5]: child_uri
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: len
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772944
FRAGMENT_COUNT: 19
  ORIGINAL[0]: relpath[0] == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == '\\0'
  ORIGINAL[1]: fspath[1] == '\\0'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ] == '\\0'
  ORIGINAL[2]: fspath[1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ]
  ORIGINAL[3]: result = apr_pstrcat(result_pool,\
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[4]: apr_pstrcat(result_pool,\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 , \
  ORIGINAL[5]: (char *)((void *)0)
  TYPE[5]: CALL
  TOKENIZED[5]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[6]: (void *)0
  TYPE[6]: CALL
  TOKENIZED[6]: ( void * ) 0
  ORIGINAL[7]: result = apr_pstrcat(result_pool,fspath,\
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 = FUN1 ( VAR2 , VAR3 , \
  ORIGINAL[8]: apr_pstrcat(result_pool,fspath,\
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[9]: (char *)((void *)0)
  TYPE[9]: CALL
  TOKENIZED[9]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[10]: (void *)0
  TYPE[10]: CALL
  TOKENIZED[10]: ( void * ) 0
  ORIGINAL[11]: result
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: result_pool
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: relpath
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: result
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: result_pool
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: fspath
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: relpath
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: result
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 68719477558
FRAGMENT_COUNT: 5
  ORIGINAL[0]: uri_ancestor_len == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: uri_ancestor_len == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 1
  ORIGINAL[2]: uri_ancestor_len
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: uri_ancestor_len
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: uri_ancestor_len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478100
FRAGMENT_COUNT: 5
  ORIGINAL[0]: strncmp(url,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: url
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: url
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: url
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: url
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477476
FRAGMENT_COUNT: 4
  ORIGINAL[0]: strlen(uri)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: len
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: uri
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771760
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_relpath_canonicalize(internal_style(relpath,pool),pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( FUN2 ( VAR1 , VAR2 ) , VAR2 )
  ORIGINAL[1]: internal_style(relpath,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640420
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244640442
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477511
FRAGMENT_COUNT: 9
  ORIGINAL[0]: *dirpath = (svn_uri_dirname(uri,pool))
  TYPE[0]: CALL
  TOKENIZED[0]: *dirpath = ( FUN1 ( VAR1 , VAR2 ) )
  ORIGINAL[1]: *base_name = svn_uri_basename(uri,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: *base_name = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: *base_name
  TYPE[2]: CALL
  TOKENIZED[2]: *base_name
  ORIGINAL[3]: svn_uri_basename(uri,pool)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: base_name
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: base_name
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: uri
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pool
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771933
FRAGMENT_COUNT: 6
  ORIGINAL[0]: clen == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: memcpy(path,base,blen)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: path
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: base
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: blen
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: path
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640561
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477393
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_dirent_is_canonical(dirent,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: dirent
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477517
FRAGMENT_COUNT: 4
  ORIGINAL[0]: get_longest_ancestor_length(type_dirent,dirent1,dirent2,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: dirent1
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: type_dirent
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dirent1
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771771
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_uri_is_canonical(uri,((void *)0))?((void )0) : __assert_fail(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) ) ? ( ( void ) 0 ) : FUN2 ( \
  ORIGINAL[1]: svn_uri_is_canonical(uri,((void *)0))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( ( void * ) 0 ) )
  ORIGINAL[2]: __assert_fail(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: <global> __PRETTY_FUNCTION__
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 30064772978
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_path_is_url(uri)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: uri = svn_uri_canonicalize(uri,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: svn_uri_canonicalize(uri,pool)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: uri
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: uri
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772139
FRAGMENT_COUNT: 8
  ORIGINAL[0]: len == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: 0 != strncmp(parent_relpath,child_relpath,len)
  TYPE[1]: CALL
  TOKENIZED[1]: 0 != FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: strncmp(parent_relpath,child_relpath,len)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: child_relpath[len] == 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ] == 0
  ORIGINAL[5]: child_relpath[len]
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 [ VAR2 ]
  ORIGINAL[6]: child_relpath
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: len
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640503
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477673
FRAGMENT_COUNT: 4
  ORIGINAL[0]: canonicalize(type_relpath,relpath,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: type_relpath
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: relpath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772867
FRAGMENT_COUNT: 4
  ORIGINAL[0]: fspath[0] == 47
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ] == 47
  ORIGINAL[1]: fspath[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: fspath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fspath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476791
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stonesoup_printf_context != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: <global> stonesoup_printf_context
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1
  ORIGINAL[4]: <global> stonesoup_printf_context
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1
  ORIGINAL[5]: stonesoup_printf_context
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640453
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064771194
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i > 0 && uri[i - 1] == ':' && i < len - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0 && VAR2 [ VAR1 - 1 ] == ':' && VAR1 < VAR3 - 1
  ORIGINAL[1]: uri[i + 1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 + 1 ]
  ORIGINAL[2]: i + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

