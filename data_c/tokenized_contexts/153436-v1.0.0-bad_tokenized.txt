# Tokenized code fragments for 153436-v1.0.0-bad
# Total center nodes processed: 34
# Total code fragments found: 151

CENTER_NODE: 30064771892
FRAGMENT_COUNT: 4
  ORIGINAL[0]: did_split = av_packet_split_side_data(pkt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: av_packet_split_side_data(pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: did_split
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640431
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477627
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stonesoup_heap_buffer_64 = (char*) malloc(64 * sizeof(char))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( char* ) FUN1 ( 64 * sizeof ( char ) )
  ORIGINAL[1]: stonesoup_heap_buffer_64 != NULL
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != VAR2
  ORIGINAL[2]: stonesoup_heap_buffer_64
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_heap_buffer_64
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_heap_buffer_64
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640396
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ts == ts2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2

CENTER_NODE: 30064771175
FRAGMENT_COUNT: 6
  ORIGINAL[0]: num >= den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2
  ORIGINAL[1]: val += num / den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2 / VAR3
  ORIGINAL[2]: num / den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 / VAR2
  ORIGINAL[3]: val
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: num
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477119
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> oformat -> write_header
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ret = ((s -> oformat -> write_header)(s))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 ) )
  ORIGINAL[2]: ret >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771578
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640430
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476875
FRAGMENT_COUNT: 7
  ORIGINAL[0]: j < 14
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 14
  ORIGINAL[1]: j += 1 + (j > 2)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += 1 + ( VAR1 > 2 )
  ORIGINAL[2]: 1 + (j > 2)
  TYPE[2]: CALL
  TOKENIZED[2]: 1 + ( VAR1 > 2 )
  ORIGINAL[3]: q . den / q . num < min_precission && q . num % j == 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4 && VAR1 . VAR3 % VAR5 == 0
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: j
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: j
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772497
FRAGMENT_COUNT: 3
  ORIGINAL[0]: * stonesoup_printf_context = NULL
  TYPE[0]: CALL
  TOKENIZED[0]: * VAR1 = VAR2
  ORIGINAL[1]: stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719476945
FRAGMENT_COUNT: 8
  ORIGINAL[0]: avpriv_toupper4(avctag -> tag) == avpriv_toupper4(st -> codec -> codec_tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 ) == FUN1 ( VAR3 -> VAR4 -> VAR5 )
  ORIGINAL[1]: id = avctag -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR1
  ORIGINAL[2]: id == (st -> codec -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == ( VAR2 -> VAR3 -> VAR4 )
  ORIGINAL[3]: st -> codec -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: id
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719477318
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> interleaver_chunk_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> interleaver_chunk_duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> max_chunk_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> interleaver_chunk_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: interleaver_chunk_size
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771194
FRAGMENT_COUNT: 6
  ORIGINAL[0]: num < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: num = num % den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 % VAR2
  ORIGINAL[2]: num % den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 % VAR2
  ORIGINAL[3]: num
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: num
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: den
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771142
FRAGMENT_COUNT: 11
  ORIGINAL[0]: sscanf(stonesoup_envKey, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: (stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0666 ) ) >= 0
  ORIGINAL[2]: stonesoup_shmid = shmget(stonesoup_key, stonesoup_shmsz, 0666)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 , 0666 )
  ORIGINAL[3]: (stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)) != (char *) -1
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) != ( char * ) -1
  ORIGINAL[4]: stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = FUN1 ( VAR2 , VAR3 , 0 )
  ORIGINAL[5]: shmat(stonesoup_shmid, NULL, 0)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , VAR2 , 0 )
  ORIGINAL[6]: (char *) -1
  TYPE[6]: CALL
  TOKENIZED[6]: ( char * ) -1
  ORIGINAL[7]: -1
  TYPE[7]: CALL
  TOKENIZED[7]: -1
  ORIGINAL[8]: stonesoup_shm
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: stonesoup_shmid
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: NULL
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640367
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476764
FRAGMENT_COUNT: 6
  ORIGINAL[0]: retval == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: size_filepath = strlen(dirpath) + strlen(\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 ) + FUN1 ( \
  ORIGINAL[2]: strlen(dirpath) + strlen(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 ) + FUN1 ( \
  ORIGINAL[3]: size_filepath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size_filepath
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640354
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640424
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771933
FRAGMENT_COUNT: 11
  ORIGINAL[0]: ret >= 0 && s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 -> VAR3
  ORIGINAL[1]: ret >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> pb
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> pb
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640353
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640366
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771301
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: !oformat
  TYPE[1]: CALL
  TOKENIZED[1]: !oformat
  ORIGINAL[2]: !oformat
  TYPE[2]: CALL
  TOKENIZED[2]: !oformat
  ORIGINAL[3]: !s -> priv_data
  TYPE[3]: CALL
  TOKENIZED[3]: !s -> VAR1
  ORIGINAL[4]: avformat_free_context(s)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771711
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)) && pkt -> dts == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 == 0 || VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) ) && VAR1 -> VAR4 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: pkt -> pts == 0 || pkt -> pts == ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == 0 || VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: pkt -> pts == 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == 0
  ORIGINAL[3]: pkt -> pts == ((int64_t )0x8000000000000000UL)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[4]: pkt -> dts == ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: pkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (int64_t )0x8000000000000000UL
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[7]: dts
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771397
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !codec -> block_align
  TYPE[0]: CALL
  TOKENIZED[0]: !codec -> VAR1
  ORIGINAL[1]: codec -> block_align = codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR1 -> VAR3 * FUN1 ( VAR1 -> VAR4 ) >> 3
  ORIGINAL[2]: codec -> block_align
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec -> channels * av_get_bits_per_sample(codec -> codec_id) >> 3
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 * FUN1 ( VAR1 -> VAR3 ) >> 3
  ORIGINAL[4]: codec -> channels * av_get_bits_per_sample(codec -> codec_id)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 * FUN1 ( VAR1 -> VAR3 )

CENTER_NODE: 68719477607
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_freep((&s -> priv_data))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[1]: ret
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771168
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c >= 97
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 97
  ORIGINAL[2]: c <= 122
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 122
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477525
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> oformat -> interleave_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ff_interleave_packet_per_dts(s,out,in,flush)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: out
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772176
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772347
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pkt -> dts == ((int64_t )0x8000000000000000UL) && !(s -> oformat -> flags & 0x80)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) && ! ( VAR4 -> VAR5 -> VAR6 & 0x80 )
  ORIGINAL[1]: interleave_packet(s,&opkt,pkt,flush)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &opkt , VAR2 , VAR3 )
  ORIGINAL[2]: &opkt
  TYPE[2]: CALL
  TOKENIZED[2]: &opkt
  ORIGINAL[3]: &opkt
  TYPE[3]: CALL
  TOKENIZED[3]: &opkt
  ORIGINAL[4]: &opkt
  TYPE[4]: CALL
  TOKENIZED[4]: &opkt
  ORIGINAL[5]: s -> pb && s -> pb -> error
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: opkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: opkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719477694
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *out_file = NULL
  TYPE[0]: CALL
  TOKENIZED[0]: *out_file = VAR1
  ORIGINAL[1]: NULL
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: out_file
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: NULL
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: NULL
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640425
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772430
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s -> oformat || !s -> oformat -> get_output_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || !s -> VAR1 -> VAR2
  ORIGINAL[1]: !s -> oformat
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1
  ORIGINAL[2]: !s -> oformat -> get_output_timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: !s -> VAR1 -> VAR2
  ORIGINAL[3]: s -> oformat -> get_output_timestamp
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3

