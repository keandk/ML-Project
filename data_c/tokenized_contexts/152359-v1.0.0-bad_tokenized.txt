# Tokenized code fragments for 152359-v1.0.0-bad
# Total center nodes processed: 36
# Total code fragments found: 134

CENTER_NODE: 47244640349
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477287
FRAGMENT_COUNT: 5
  ORIGINAL[0]: max && (st -> interleaver_chunk_duration) > max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ( VAR2 -> VAR3 ) > VAR1
  ORIGINAL[1]: ((pkt -> dts - syncto) / 8) - max
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( VAR1 -> VAR2 - VAR3 ) / 8 ) - VAR4
  ORIGINAL[2]: (pkt -> dts - syncto) / 8
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 - VAR3 ) / 8
  ORIGINAL[3]: max
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640427
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640420
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477572
FRAGMENT_COUNT: 7
  ORIGINAL[0]: carpetbag_anemochore != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: eyeline_stupend = beethovian_snubbishness
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: umbrette_shuzo = eyeline_stupend + 5
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 + 5
  ORIGINAL[3]: eyeline_stupend + 5
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 + 5
  ORIGINAL[4]: umbrette_shuzo
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: eyeline_stupend
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: umbrette_shuzo
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771404
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_cmp_q(st -> sample_aspect_ratio,codec -> sample_aspect_ratio) && ((av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) >= 0?av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio) : -(av_q2d(st -> sample_aspect_ratio) - av_q2d(codec -> sample_aspect_ratio)))) > 0.004 * av_q2d(st -> sample_aspect_ratio)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR2 ) && ( ( FUN2 ( VAR1 -> VAR2 ) - FUN2 ( VAR3 -> VAR2 ) >= 0?av_q2d ( VAR1 -> VAR2 ) - FUN2 ( VAR3 -> VAR2 ) : - ( FUN2 ( VAR1 -> VAR2 ) - FUN2 ( VAR3 -> VAR2 ) ) ) ) > 0 . 004 * FUN2 ( VAR1 -> VAR2 )
  ORIGINAL[1]: ret = - 22
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 22
  ORIGINAL[2]: - 22
  TYPE[2]: CALL
  TOKENIZED[2]: - 22
  ORIGINAL[3]: goto fail;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: goto VAR1 ;
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477462
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> oformat -> interleave_packet
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ret = (s -> oformat -> interleave_packet)(s,out,in,flush)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 , VAR6 , VAR7 )
  ORIGINAL[2]: (s -> oformat -> interleave_packet)(s,out,in,flush)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477695
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 30064771714
FRAGMENT_COUNT: 14
  ORIGINAL[0]: i < delay && st -> pts_buffer[i] > st -> pts_buffer[i + 1]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 && VAR3 -> VAR4 [ VAR1 ] > VAR3 -> VAR4 [ VAR1 + 1 ]
  ORIGINAL[1]: st -> pts_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_buffer[i + 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 + 1 ]
  ORIGINAL[3]: st -> pts_buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> pts_buffer[i + 1]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 + 1 ]
  ORIGINAL[5]: st -> pts_buffer
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> pts_buffer[i + 1] = st -> pts_buffer[i]
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 [ VAR3 + 1 ] = VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[7]: st -> pts_buffer[i + 1]
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 [ VAR3 + 1 ]
  ORIGINAL[8]: st -> pts_buffer
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: i + 1
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 + 1
  ORIGINAL[10]: st -> pts_buffer[i]
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[11]: st -> pts_buffer
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: st -> pts_buffer
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719476789
FRAGMENT_COUNT: 4
  ORIGINAL[0]: f -> val = val
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = VAR2
  ORIGINAL[1]: f -> val
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: val
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: val
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476740
FRAGMENT_COUNT: 6
  ORIGINAL[0]: mg_vprintf_data((struct mg_connection*) stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( struct mg_connection* ) VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: (struct mg_connection*) stonesoup_printf_context
  TYPE[1]: CALL
  TOKENIZED[1]: ( struct mg_connection* ) VAR1
  ORIGINAL[2]: argptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: format
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: argptr
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477607
FRAGMENT_COUNT: 8
  ORIGINAL[0]: herwick_nonrotatable > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0
  ORIGINAL[1]: tracepoint(stonesoup_trace, variable_buffer, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: stonesoup_dbpassword
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_trace
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: variable_buffer
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_dbpassword
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_dbpassword
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stonesoup_dbpassword
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640421
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771559
FRAGMENT_COUNT: 3
  ORIGINAL[0]: __sync_bool_compare_and_swap(&modulet_starchmen,0,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &modulet_starchmen , 0 , 1 )
  ORIGINAL[1]: &modulet_starchmen
  TYPE[1]: CALL
  TOKENIZED[1]: &modulet_starchmen
  ORIGINAL[2]: <global> modulet_starchmen
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1

CENTER_NODE: 30064772307
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret = interleave_packet(s,&pkt,((void *)0),1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , &pkt , ( ( void * ) 0 ) , 1 )
  ORIGINAL[1]: interleave_packet(s,&pkt,((void *)0),1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , &pkt , ( ( void * ) 0 ) , 1 )
  ORIGINAL[2]: s -> pb && s -> pb -> error
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771133
FRAGMENT_COUNT: 9
  ORIGINAL[0]: den = f -> den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 -> VAR1
  ORIGINAL[1]: f -> den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: den
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: den
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: f
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: f
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: f
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: f
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: f
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771245
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: !s -> priv_data
  TYPE[1]: CALL
  TOKENIZED[1]: !s -> VAR1
  ORIGINAL[2]: ret = - 12
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = - 12
  ORIGINAL[3]: - 12
  TYPE[3]: CALL
  TOKENIZED[3]: - 12
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640432
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244640362
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477035
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: den != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[2]: den <= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 <= 0
  ORIGINAL[3]: frac_init(&st -> pts,0,0,den)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &st -> VAR1 , 0 , 0 , VAR2 )
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640426
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640363
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771181
FRAGMENT_COUNT: 15
  ORIGINAL[0]: q . den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: q . den / q . num < min_precission && q . den < 1 << 24
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 / VAR1 . VAR3 < VAR4 && VAR1 . VAR2 < 1 << 24
  ORIGINAL[2]: q . den / q . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 / VAR1 . VAR3
  ORIGINAL[3]: q . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: q . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: q . den
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: q . den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: den
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: q
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: q
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: q
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: q
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: q
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: q
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: q
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244640425
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064772041
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> audio_preload && (st -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO != ((st2 -> codec -> codec_type) == AVMEDIA_TYPE_AUDIO)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && ( VAR3 -> VAR4 -> VAR5 ) == VAR6 != ( ( VAR7 -> VAR4 -> VAR5 ) == VAR6 )
  ORIGINAL[1]: (AVRational ){(1), (1000000)}
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[2]: {(1), (1000000)}
  TYPE[2]: CALL
  TOKENIZED[2]: { ( 1 ) , ( 1000000 ) }

CENTER_NODE: 47244640259
FRAGMENT_COUNT: 1
  ORIGINAL[0]: data_size < buffer_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2

CENTER_NODE: 68719477195
FRAGMENT_COUNT: 4
  ORIGINAL[0]: did_split = av_packet_split_side_data(pkt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[1]: av_packet_split_side_data(pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: did_split
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771108
FRAGMENT_COUNT: 5
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: *stonesoup_server = mg_create_server(NULL, stonesoup_ev_handler)
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_server = FUN1 ( VAR1 , VAR2 )
  ORIGINAL[2]: mg_create_server(NULL, stonesoup_ev_handler)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: stonesoup_server
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: NULL
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772287
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ret <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 <= 0
  ORIGINAL[1]: ret = split_write_packet(s,&opkt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , &opkt )
  ORIGINAL[2]: split_write_packet(s,&opkt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &opkt )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640447
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !s -> oformat || !s -> oformat -> get_output_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || !s -> VAR1 -> VAR2

CENTER_NODE: 47244640298
FRAGMENT_COUNT: 1
  ORIGINAL[0]: id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2

CENTER_NODE: 68719477453
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771855
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !pkt
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt
  ORIGINAL[1]: ret = compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR2 -> VAR3 [ VAR4 -> VAR5 ] , VAR4 )
  ORIGINAL[2]: compute_pkt_fields2(s,s -> streams[pkt -> stream_index],pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR1 -> VAR2 [ VAR3 -> VAR4 ] , VAR3 )
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

