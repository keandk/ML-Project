# Tokenized code fragments for 152151-v1.0.0-bad
# Total center nodes processed: 194
# Total code fragments found: 825

CENTER_NODE: 47244640854
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773754
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (((unsigned int )( *nb_index_entries)) + 1) >= (2147483647 * 2U + 1U) / sizeof(AVIndexEntry )
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( ( unsigned int ) ( *nb_index_entries ) ) + 1 ) >= ( 2147483647 * 2U + 1U ) / sizeof ( VAR1 )
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 47244641198
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771235
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: sizeof(\
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( \

CENTER_NODE: 30064776716
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 47244640851
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477611
FRAGMENT_COUNT: 6
  ORIGINAL[0]: enc -> frame_size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !mux
  TYPE[1]: CALL
  TOKENIZED[1]: !mux
  ORIGINAL[2]: enc -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: bit_rate
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: enc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: enc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640838
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640832
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641183
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776945
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: buf[i + j]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 + VAR3 ]
  ORIGINAL[2]: i + j
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641152
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640290
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479275
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ic -> bit_rate
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: i < ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: ic -> nb_streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: streams
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641231
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776063
FRAGMENT_COUNT: 7
  ORIGINAL[0]: wanted_stream_nb >= 0 && real_stream_index != wanted_stream_nb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0 && VAR2 != VAR1
  ORIGINAL[1]: st -> disposition & (0x80 | 0x0100)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 & ( 0x80 | 0x0100 )
  ORIGINAL[2]: st -> disposition
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: 0x80 | 0x0100
  TYPE[3]: CALL
  TOKENIZED[3]: 0x80 | 0x0100
  ORIGINAL[4]: continue;
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: continue ;
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: decoder_ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777247
FRAGMENT_COUNT: 13
  ORIGINAL[0]: local_pkt =  *pkt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = *pkt
  ORIGINAL[1]: *pkt
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt
  ORIGINAL[2]: local_pkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pkt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244641319
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773631
FRAGMENT_COUNT: 5
  ORIGINAL[0]: &s -> raw_packet_buffer_end
  TYPE[0]: CALL
  TOKENIZED[0]: &s -> VAR1
  ORIGINAL[1]: s -> raw_packet_buffer_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: raw_packet_buffer_end
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776183
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&st -> info))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &st -> VAR1 ) )
  ORIGINAL[1]: &st -> info
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719480824
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479606
FRAGMENT_COUNT: 10
  ORIGINAL[0]: sflags & 1 << bps - 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 & 1 << VAR2 - 1
  ORIGINAL[1]: be?AV_CODEC_ID_PCM_S16BE : AV_CODEC_ID_PCM_S16LE
  TYPE[1]: CALL
  TOKENIZED[1]: be?AV_CODEC_ID_PCM_S16BE : VAR1
  ORIGINAL[2]: be?AV_CODEC_ID_PCM_S24BE : AV_CODEC_ID_PCM_S24LE
  TYPE[2]: CALL
  TOKENIZED[2]: be?AV_CODEC_ID_PCM_S24BE : VAR1
  ORIGINAL[3]: be?AV_CODEC_ID_PCM_S32BE : AV_CODEC_ID_PCM_S32LE
  TYPE[3]: CALL
  TOKENIZED[3]: be?AV_CODEC_ID_PCM_S32BE : VAR1
  ORIGINAL[4]: bps
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AV_CODEC_ID_PCM_S8
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: be
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: be
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: be
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: AV_CODEC_ID_NONE
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719478677
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: ts = wrap_timestamp(s -> streams[stream_index],ts)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 [ VAR4 ] , VAR1 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ts
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777681
FRAGMENT_COUNT: 12
  ORIGINAL[0]: st -> codec -> width == 1920
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 == 1920
  ORIGINAL[1]: (st -> codec -> field_order) == AV_FIELD_PROGRESSIVE
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[2]: st -> codec -> field_order
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> codec
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> codec
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: field_order
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: AV_FIELD_PROGRESSIVE
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640680
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640841
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771608
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {(filename?filename : \
  TYPE[0]: CALL
  TOKENIZED[0]: { ( filename?filename : \
  ORIGINAL[1]: filename?filename : \
  TYPE[1]: CALL
  TOKENIZED[1]: filename?filename : \
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479206
FRAGMENT_COUNT: 9
  ORIGINAL[0]: start_time == 9223372036854775807L || start_time > start_time_text && start_time - start_time_text < 1000000
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 9223372036854775807L || VAR1 > VAR2 && VAR1 - VAR2 < 1000000
  ORIGINAL[1]: start_time = start_time_text
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: start_time > start_time_text
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > VAR2
  ORIGINAL[3]: av_log(ic,40,\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , 40 , \
  ORIGINAL[4]: start_time != 9223372036854775807L
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 != 9223372036854775807L
  ORIGINAL[5]: start_time
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: start_time
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: start_time
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: start_time
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719477549
FRAGMENT_COUNT: 14
  ORIGINAL[0]: s -> raw_packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !pktl || ret == - '\\v'
  TYPE[1]: CALL
  TOKENIZED[1]: !pktl || VAR1 == - '\\v'
  ORIGINAL[2]: i < s -> nb_streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 -> VAR3
  ORIGINAL[3]: s -> nb_streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> flags
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> flags
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: s -> nb_streams
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: s -> raw_packet_buffer_end
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: s -> raw_packet_buffer_remaining_size
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: nb_streams
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 47244641045
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640574
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478481
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> nb_streams <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777084
FRAGMENT_COUNT: 9
  ORIGINAL[0]: p = (strchr(url,':'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ':' ) )
  ORIGINAL[1]: !ls
  TYPE[1]: CALL
  TOKENIZED[1]: !ls
  ORIGINAL[2]: ls = ls2
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: ls && ls2
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 && VAR2
  ORIGINAL[4]: ls
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ls
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ls2
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ls
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ls
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476852
FRAGMENT_COUNT: 4
  ORIGINAL[0]: vfprintf(stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: va_end(argptr)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: argptr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771465
FRAGMENT_COUNT: 4
  ORIGINAL[0]: filename && av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && FUN1 ( VAR2 , ( sizeof ( VAR2 ) ) , VAR1 , 1 ) >= 0
  ORIGINAL[1]: av_get_frame_filename(buf,(sizeof(buf)),filename,1) >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 ) >= 0
  ORIGINAL[2]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480899
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pkt_dump_internal(avcl,((void *)0),level,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 , VAR5 -> VAR6 )
  ORIGINAL[1]: level
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dump_payload
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777754
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *next = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *next = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: start
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: next
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640862
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771453
FRAGMENT_COUNT: 22
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: ret < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: ret = avio_read(s,pkt -> data + old_size,size)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 + VAR5 , VAR6 )
  ORIGINAL[3]: avio_read(s,pkt -> data + old_size,size)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 -> VAR3 + VAR4 , VAR5 )
  ORIGINAL[4]: pkt -> data + old_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 + VAR3
  ORIGINAL[5]: pkt -> data
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: av_shrink_packet(pkt,old_size + ((ret > 0?ret : 0)))
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , VAR2 + ( ( VAR3 > 0?ret : 0 ) ) )
  ORIGINAL[7]: old_size + ((ret > 0?ret : 0))
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 + ( ( VAR2 > 0?ret : 0 ) )
  ORIGINAL[8]: ret > 0?ret : 0
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 > 0?ret : 0
  ORIGINAL[9]: ret > 0
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 > 0
  ORIGINAL[10]: data
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ret
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ret
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ret
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: old_size
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: size
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: old_size
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ret
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ret
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 30064776393
FRAGMENT_COUNT: 12
  ORIGINAL[0]: i < ac -> nb_programs
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ac -> nb_programs
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: &ac -> nb_programs
  TYPE[2]: CALL
  TOKENIZED[2]: &ac -> VAR1
  ORIGINAL[3]: ac -> nb_programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: nb_programs
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ac
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ac
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ac
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ac
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ac
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ac
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244641170
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 8
  ORIGINAL[0]: type == AVMEDIA_TYPE_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: fmt -> subtitle_codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: subtitle_codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: type
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: AVMEDIA_TYPE_SUBTITLE
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: fmt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: AV_CODEC_ID_NONE
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641250
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640630
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771226
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 47244640835
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719481049
FRAGMENT_COUNT: 7
  ORIGINAL[0]: c >= 48 && c <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 48 && VAR1 <= '9'
  ORIGINAL[1]: c >= 'A' && c <= 'F'
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 'A' && VAR1 <= 'F'
  ORIGINAL[2]: v << 4 | c
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 << 4 | VAR2
  ORIGINAL[3]: v << 4
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 << 4
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: c
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: c
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064772183
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2 || (avctx -> codec_id) == AV_CODEC_ID_MP3
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4 || ( VAR1 -> VAR2 ) == VAR5
  ORIGINAL[1]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[2]: (avctx -> codec_id) == AV_CODEC_ID_MP3
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: avctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: AV_CODEC_ID_MP3
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640692
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640595
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !add_to_pktbuf(&s -> parse_queue,&out_pkt,&s -> parse_queue_end)
  TYPE[0]: CALL
  TOKENIZED[0]: !add_to_pktbuf ( &s -> VAR1 , &out_pkt , &s -> VAR2 )
  ORIGINAL[1]: ret = - 12
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 12
  ORIGINAL[2]: goto fail;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: goto VAR1 ;

CENTER_NODE: 47244640833
FRAGMENT_COUNT: 1
  ORIGINAL[0]: avctx -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 30064776132
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_pause(s -> pb,1)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , 1 )
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244641127
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479647
FRAGMENT_COUNT: 8
  ORIGINAL[0]: (codec_tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: codec_tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: *tag
  TYPE[2]: CALL
  TOKENIZED[2]: *tag
  ORIGINAL[3]: codec_tags -> tag
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: tag
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: codec_tags
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: codec_tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: codec_tags
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064774178
FRAGMENT_COUNT: 9
  ORIGINAL[0]: &pkt
  TYPE[0]: CALL
  TOKENIZED[0]: &pkt
  ORIGINAL[1]: read_status < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < 0
  ORIGINAL[2]: av_free_packet(&pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &pkt )
  ORIGINAL[3]: &pkt
  TYPE[3]: CALL
  TOKENIZED[3]: &pkt
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064771438
FRAGMENT_COUNT: 12
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: avio_read(s,pkt -> data,size)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 -> VAR3 , VAR4 )
  ORIGINAL[2]: pkt -> data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: data
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pkt
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640304
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640685
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640867
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775065
FRAGMENT_COUNT: 6
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: id = ff_codec_get_id(tags[i],tag)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 [ VAR3 ] , VAR4 )
  ORIGINAL[2]: ff_codec_get_id(tags[i],tag)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 [ VAR2 ] , VAR3 )
  ORIGINAL[3]: tags[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: tag
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641072
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771885
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(s -> priv_data = av_mallocz((s -> iformat -> priv_data_size)))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = FUN1 ( ( VAR1 -> VAR3 -> VAR4 ) ) )
  ORIGINAL[1]: ret = - 12
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 12
  ORIGINAL[2]: - 12
  TYPE[2]: CALL
  TOKENIZED[2]: - 12
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771281
FRAGMENT_COUNT: 5
  ORIGINAL[0]: format -> next = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = ( ( void * ) 0 )
  ORIGINAL[1]: format -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: next
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: format
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477340
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: *packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: *packet_buffer
  ORIGINAL[2]: packet_buffer
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064776443
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> chapters[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> chapters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> chapters[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: chapters
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641066
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481079
FRAGMENT_COUNT: 2
  ORIGINAL[0]: str[0]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 0 ]
  ORIGINAL[1]: str
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479702
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: 60 * 12
  TYPE[1]: CALL
  TOKENIZED[1]: 60 * 12
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776741
FRAGMENT_COUNT: 23
  ORIGINAL[0]: ic -> nb_streams && !printed
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !printed
  ORIGINAL[1]: !is_output
  TYPE[1]: CALL
  TOKENIZED[1]: !is_output
  ORIGINAL[2]: av_log(((void *)0),32,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: ic -> duration
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: (int64_t )0x8000000000000000UL
  TYPE[6]: CALL
  TOKENIZED[6]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[7]: ic -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[8]: ic -> start_time
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: (int64_t )0x8000000000000000UL
  TYPE[9]: CALL
  TOKENIZED[9]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[10]: av_log(((void *)0),32,\
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[11]: (void *)0
  TYPE[11]: CALL
  TOKENIZED[11]: ( void * ) 0
  ORIGINAL[12]: ic -> bit_rate
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: av_log(((void *)0),32,\
  TYPE[13]: CALL
  TOKENIZED[13]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[14]: (void *)0
  TYPE[14]: CALL
  TOKENIZED[14]: ( void * ) 0
  ORIGINAL[15]: duration
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: start_time
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: bit_rate
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: is_output
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: ic
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ic
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: i
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1

CENTER_NODE: 68719476900
FRAGMENT_COUNT: 8
  ORIGINAL[0]: st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> pts_wrap_reference
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_behavior == - 1 && timestamp >= st -> pts_wrap_reference
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 == - 1 && VAR3 >= VAR1 -> VAR4
  ORIGINAL[3]: st -> pts_wrap_behavior
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> pts_wrap_reference
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> pts_wrap_bits
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pts_wrap_bits
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640681
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777549
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *spec) <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: ( *spec ) <= '9'
  ORIGINAL[1]: *spec
  TYPE[1]: CALL
  TOKENIZED[1]: *spec
  ORIGINAL[2]: *spec
  TYPE[2]: CALL
  TOKENIZED[2]: *spec
  ORIGINAL[3]: *spec
  TYPE[3]: CALL
  TOKENIZED[3]: *spec
  ORIGINAL[4]: spec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: spec
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: spec
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: spec
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064772482
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> first_dts != ((int64_t )0x8000000000000000UL) || dts == ((int64_t )0x8000000000000000UL) || st -> cur_dts == ((int64_t )0x8000000000000000UL) || is_relative(dts)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) || VAR4 == ( ( VAR3 ) 0x8000000000000000UL ) || VAR1 -> VAR5 == ( ( VAR3 ) 0x8000000000000000UL ) || FUN1 ( VAR4 )
  ORIGINAL[1]: st -> first_dts = (dts - ((st -> cur_dts) - (9223372036854775807L - (1LL << 48))))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( VAR3 - ( ( VAR1 -> VAR4 ) - ( 9223372036854775807L - ( 1LL << 48 ) ) ) )
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: dts - ((st -> cur_dts) - (9223372036854775807L - (1LL << 48)))
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - ( ( VAR2 -> VAR3 ) - ( 9223372036854775807L - ( 1LL << 48 ) ) )
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479567
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (tags -> id) == id
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[3]: AV_CODEC_ID_NONE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777327
FRAGMENT_COUNT: 16
  ORIGINAL[0]: *ptr && ( *ptr) != '\\\
  TYPE[0]: CALL
  TOKENIZED[0]: *ptr && ( *ptr ) != '\\\
  ORIGINAL[1]: *ptr
  TYPE[1]: CALL
  TOKENIZED[1]: *ptr
  ORIGINAL[2]: *ptr
  TYPE[2]: CALL
  TOKENIZED[2]: *ptr
  ORIGINAL[3]: ( *ptr) == '\\\\'
  TYPE[3]: CALL
  TOKENIZED[3]: ( *ptr ) == '\\\\'
  ORIGINAL[4]: *ptr
  TYPE[4]: CALL
  TOKENIZED[4]: *ptr
  ORIGINAL[5]: *ptr
  TYPE[5]: CALL
  TOKENIZED[5]: *ptr
  ORIGINAL[6]: *ptr
  TYPE[6]: CALL
  TOKENIZED[6]: *ptr
  ORIGINAL[7]: ptr
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ptr
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ptr
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ptr
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ptr
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ptr
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ptr
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ptr
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: ptr
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 68719477153
FRAGMENT_COUNT: 8
  ORIGINAL[0]: *fmt = av_probe_input_format3(pd,is_opened,&score_ret)
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = FUN1 ( VAR1 , VAR2 , &score_ret )
  ORIGINAL[1]: &score_ret
  TYPE[1]: CALL
  TOKENIZED[1]: &score_ret
  ORIGINAL[2]: score_ret >  *score_max
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > *score_max
  ORIGINAL[3]: *score_max
  TYPE[3]: CALL
  TOKENIZED[3]: *score_max
  ORIGINAL[4]: score_ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: score_ret
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: score_max
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: score_ret
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064777153
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[1]: hex_table_uc[16] = {(48), ('1'), ('2'), ('3'), ('4'), ('5'), ('6'), ('7'), (56), ('9'), ('A'), ('B'), ('C'), ('D'), ('E'), ('F')}
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 16 ] = { ( 48 ) , ( '1' ) , ( '2' ) , ( '3' ) , ( '4' ) , ( '5' ) , ( '6' ) , ( '7' ) , ( 56 ) , ( '9' ) , ( 'A' ) , ( 'B' ) , ( 'C' ) , ( 'D' ) , ( 'E' ) , ( 'F' ) }
  ORIGINAL[2]: hex_table_uc
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481313
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064773281
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !( *pkt_buffer)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *pkt_buffer )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 47244640931
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641159
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479935
FRAGMENT_COUNT: 25
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> need_parsing
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> need_parsing
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> request_probe
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> time_base
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> disposition
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> codec
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: st -> first_dts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: st -> index
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: st -> index
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: st -> codec_info_nb_frames
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: st -> time_base
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: st -> codec_info_nb_frames
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: st -> avg_frame_rate
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: st -> codec_info_nb_frames
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2
  ORIGINAL[17]: st -> avg_frame_rate
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: st -> parser && st -> parser -> parser -> split
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR2 -> VAR3
  ORIGINAL[19]: st -> parser
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2
  ORIGINAL[20]: st -> codec
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2
  ORIGINAL[21]: st -> codec
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2
  ORIGINAL[22]: codec
  TYPE[22]: FIELD_IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: st
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1

CENTER_NODE: 30064775072
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> start_time == ((int64_t )0x8000000000000000UL)?0 : s -> start_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) ?0 : VAR1 -> VAR2
  ORIGINAL[1]: s -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: s -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: s -> start_time
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: start_time
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640555
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478521
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773724
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *st = s -> streams[stream_index]
  TYPE[0]: CALL
  TOKENIZED[0]: *st = VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776531
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_dict_count(m) == 1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) == 1
  ORIGINAL[1]: av_dict_count(m)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: m
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: m
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640722
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640597
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773468
FRAGMENT_COUNT: 15
  ORIGINAL[0]: s -> debug & 0x1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 0x1
  ORIGINAL[1]: av_log(s,48,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , 48 , \
  ORIGINAL[2]: pkt -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_ts_make_string(((char [32]){(0)}),pkt -> pts)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[4]: av_ts_make_string(((char [32]){(0)}),pkt -> dts)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( ( char [ 32 ] ) { ( 0 ) } ) , VAR1 -> VAR2 )
  ORIGINAL[5]: pkt -> size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> flags
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: size
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 68719477139
FRAGMENT_COUNT: 6
  ORIGINAL[0]: score > score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: score_max = score
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: score_max
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score_max
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: score
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: score_max
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776924
FRAGMENT_COUNT: 5
  ORIGINAL[0]: q - buf + len > (buf_size - 1)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 + VAR3 > ( VAR4 - 1 )
  ORIGINAL[1]: !percentd_found
  TYPE[1]: CALL
  TOKENIZED[1]: !percentd_found
  ORIGINAL[2]: - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: percentd_found
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777008
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: (pkt -> dts) * av_q2d(time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) * FUN1 ( VAR3 )
  ORIGINAL[2]: pkt -> dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: av_q2d(time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: time_base
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477685
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: next
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pktl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640829
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641194
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640382
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1 || !s -> iformat && (s -> iformat = av_probe_input_format2(&pd,0,&score))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1 || !s -> VAR2 && ( VAR1 -> VAR2 = FUN1 ( &pd , 0 , &score ) )

CENTER_NODE: 30064771190
FRAGMENT_COUNT: 7
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: getenv(\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( \
  ORIGINAL[3]: strcmp(getenv(\
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( FUN2 ( \
  ORIGINAL[4]: strcmp(getenv(\
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( FUN2 ( \
  ORIGINAL[5]: getenv(\
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( \
  ORIGINAL[6]: NULL
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476936
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ( *p) != '\\0' && ( *p) != ','
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) != '\\0' && ( *p ) != ' , '
  ORIGINAL[1]: q - ext1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: *q
  TYPE[2]: CALL
  TOKENIZED[2]: *q
  ORIGINAL[3]: q
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: q
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ext1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: q
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: q
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641176
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776252
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: av_freep((&s -> chapters))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &s -> VAR1 ) )
  ORIGINAL[2]: &s -> chapters
  TYPE[2]: CALL
  TOKENIZED[2]: &s -> VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771237
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: 9223372036854775807L - (1LL << 48)
  TYPE[2]: CALL
  TOKENIZED[2]: 9223372036854775807L - ( 1LL << 48 )
  ORIGINAL[3]: 1LL << 48
  TYPE[3]: CALL
  TOKENIZED[3]: 1LL << 48
  ORIGINAL[4]: ts
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774535
FRAGMENT_COUNT: 13
  ORIGINAL[0]: st -> start_time == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: ic -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: ic -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: duration
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ic
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: ic
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: ic
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: ic
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064772029
FRAGMENT_COUNT: 5
  ORIGINAL[0]: end || ff_log2_c((pd -> buf_size)) != ff_log2_c((pd -> buf_size - pkt -> size))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 || FUN1 ( ( VAR2 -> VAR3 ) ) != FUN1 ( ( VAR2 -> VAR3 - VAR4 -> VAR5 ) )
  ORIGINAL[1]: ff_log2_c((pd -> buf_size)) != ff_log2_c((pd -> buf_size - pkt -> size))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 -> VAR2 ) ) != FUN1 ( ( VAR1 -> VAR2 - VAR3 -> VAR4 ) )
  ORIGINAL[2]: ff_log2_c((pd -> buf_size))
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( ( VAR1 -> VAR2 ) )
  ORIGINAL[3]: ff_log2_c((pd -> buf_size - pkt -> size))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( VAR1 -> VAR2 - VAR3 -> VAR4 ) )
  ORIGINAL[4]: end
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640847
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640485
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244641204
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771148
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ss_tc_root != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: malloc (size_dirpath * sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 * sizeof ( char ) )
  ORIGINAL[2]: size_dirpath * sizeof(char)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * sizeof ( char )
  ORIGINAL[3]: sizeof(char)
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( char )
  ORIGINAL[4]: size_dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777438
FRAGMENT_COUNT: 3
  ORIGINAL[0]: time2 = {(0)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( 0 ) }
  ORIGINAL[1]: {(0)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 0 ) }
  ORIGINAL[2]: time2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477672
FRAGMENT_COUNT: 7
  ORIGINAL[0]: enc -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !desc
  TYPE[1]: CALL
  TOKENIZED[1]: !desc
  ORIGINAL[2]: enc -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec_id
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: enc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: enc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064775022
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: avpriv_toupper4(tag) == avpriv_toupper4(tags[i] . tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) == FUN1 ( VAR2 [ VAR3 ] . VAR1 )
  ORIGINAL[2]: for (i = 0;tags[i] . id != AV_CODEC_ID_NONE;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR2 [ VAR1 ] . VAR3 != VAR4 ; i++ )
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641201
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640693
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640810
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479340
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ret != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: read_size += pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += VAR2 -> VAR3
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: read_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: read_size
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477158
FRAGMENT_COUNT: 3
  ORIGINAL[0]: score = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: score
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771097
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !str
  TYPE[0]: CALL
  TOKENIZED[0]: !str
  ORIGINAL[1]: fprintf(stderr, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: stderr
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: errors
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772875
FRAGMENT_COUNT: 35
  ORIGINAL[0]: pkt -> dts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> reference_dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> reference_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: pkt -> dts = st -> reference_dts + (pc -> dts_ref_dts_delta) * num / den
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = VAR3 -> VAR4 + ( VAR5 -> VAR6 ) * VAR7 / VAR8
  ORIGINAL[5]: pkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> reference_dts + (pc -> dts_ref_dts_delta) * num / den
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 + ( VAR3 -> VAR4 ) * VAR5 / VAR6
  ORIGINAL[7]: st -> reference_dts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: (pc -> dts_ref_dts_delta) * num / den
  TYPE[8]: CALL
  TOKENIZED[8]: ( VAR1 -> VAR2 ) * VAR3 / VAR4
  ORIGINAL[9]: (pc -> dts_ref_dts_delta) * num
  TYPE[9]: CALL
  TOKENIZED[9]: ( VAR1 -> VAR2 ) * VAR3
  ORIGINAL[10]: pc -> dts_ref_dts_delta
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> pts = pkt -> dts + (pc -> pts_dts_delta) * num / den
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 = VAR1 -> VAR3 + ( VAR4 -> VAR5 ) * VAR6 / VAR7
  ORIGINAL[12]: pkt -> pts
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pkt -> dts + (pc -> pts_dts_delta) * num / den
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 + ( VAR3 -> VAR4 ) * VAR5 / VAR6
  ORIGINAL[14]: pkt -> dts
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: (pc -> pts_dts_delta) * num / den
  TYPE[15]: CALL
  TOKENIZED[15]: ( VAR1 -> VAR2 ) * VAR3 / VAR4
  ORIGINAL[16]: (pc -> pts_dts_delta) * num
  TYPE[16]: CALL
  TOKENIZED[16]: ( VAR1 -> VAR2 ) * VAR3
  ORIGINAL[17]: pc -> pts_dts_delta
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: dts
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: reference_dts
  TYPE[19]: FIELD_IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: dts_ref_dts_delta
  TYPE[20]: FIELD_IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pts
  TYPE[21]: FIELD_IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: dts
  TYPE[22]: FIELD_IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: pts_dts_delta
  TYPE[23]: FIELD_IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: pkt
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: st
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: pc
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: num
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: den
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: pkt
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: pkt
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: pc
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: num
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: den
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: pc
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1

CENTER_NODE: 30064775045
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: &tag
  TYPE[1]: CALL
  TOKENIZED[1]: &tag
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479051
FRAGMENT_COUNT: 3
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481263
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ofmt -> codec_tag
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ofmt -> codec_tag
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: codec_tag
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ofmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640710
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480560
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: g
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771390
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719481200
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *sep
  TYPE[0]: CALL
  TOKENIZED[0]: *sep
  ORIGINAL[1]: sep
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: sep
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: sep
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641164
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481299
FRAGMENT_COUNT: 10
  ORIGINAL[0]: &data
  TYPE[0]: CALL
  TOKENIZED[0]: &data
  ORIGINAL[1]: &data
  TYPE[1]: CALL
  TOKENIZED[1]: &data
  ORIGINAL[2]: data
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: data
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: channels
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: data
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: data
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: data
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: data
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: data
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 68719481332
FRAGMENT_COUNT: 7
  ORIGINAL[0]: stream_sample_aspect_ratio . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: stream_sample_aspect_ratio . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: stream_sample_aspect_ratio . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: stream_sample_aspect_ratio . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: den
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stream_sample_aspect_ratio
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_sample_aspect_ratio
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641269
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )

CENTER_NODE: 68719480281
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641179
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477636
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *pden
  TYPE[0]: CALL
  TOKENIZED[0]: *pden
  ORIGINAL[1]: st -> time_base . num * 1000LL > st -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 * 1000LL > VAR1 -> VAR2 . VAR4
  ORIGINAL[2]: *pnum = st -> time_base . num
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum = VAR1 -> VAR2 . VAR3
  ORIGINAL[3]: *pden
  TYPE[3]: CALL
  TOKENIZED[3]: *pden
  ORIGINAL[4]: pden
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640844
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641187
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777212
FRAGMENT_COUNT: 13
  ORIGINAL[0]: &new_tb . den
  TYPE[0]: CALL
  TOKENIZED[0]: &new_tb . VAR1
  ORIGINAL[1]: new_tb . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: new_tb . den
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: new_tb . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: den
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: new_tb
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: new_tb
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: new_tb
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: new_tb
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: new_tb
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: new_tb
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: new_tb
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: new_tb
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244641147
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771821
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> streams[i] -> disposition & 0x0400 && (s -> streams[i] -> discard) < AVDISCARD_ALL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 & 0x0400 && ( VAR1 -> VAR2 [ VAR3 ] -> VAR5 ) < VAR6
  ORIGINAL[1]: add_to_pktbuf(&s -> raw_packet_buffer,&copy,&s -> raw_packet_buffer_end)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &s -> VAR1 , &copy , &s -> VAR2 )
  ORIGINAL[2]: &copy
  TYPE[2]: CALL
  TOKENIZED[2]: &copy
  ORIGINAL[3]: copy
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: copy
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640446
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480893
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771229
FRAGMENT_COUNT: 2
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8

CENTER_NODE: 47244640315
FRAGMENT_COUNT: 1
  ORIGINAL[0]: filename && fmt -> extensions && av_match_ext(filename,fmt -> extensions)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 -> VAR3 && FUN1 ( VAR1 , VAR2 -> VAR3 )

CENTER_NODE: 30064773082
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: *pktl =  *pkt_buf
  TYPE[1]: CALL
  TOKENIZED[1]: *pktl = *pkt_buf
  ORIGINAL[2]: *pkt_buf
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buf
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt_buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pkt_buf
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772653
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !pktl
  TYPE[0]: CALL
  TOKENIZED[0]: !pktl
  ORIGINAL[1]: pktl = (s -> parse_queue?s -> parse_queue : s -> packet_buffer)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> parse_queue?s -> VAR3 : VAR2 -> VAR4 )
  ORIGINAL[2]: s -> parse_queue?s -> parse_queue : s -> packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> parse_queue?s -> VAR2 : VAR1 -> VAR3
  ORIGINAL[3]: s -> parse_queue
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> parse_queue
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> packet_buffer
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478619
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: distance
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 30064772447
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < program -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[program -> stream_index[i]]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 -> VAR4 [ VAR5 ] ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: program
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641190
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480478
FRAGMENT_COUNT: 12
  ORIGINAL[0]: idx >= ac -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= VAR2 -> VAR3
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i < ac -> nb_programs
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 < VAR2 -> VAR3
  ORIGINAL[3]: ac -> nb_programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: i++
  TYPE[4]: CALL
  TOKENIZED[4]: i++
  ORIGINAL[5]: ac -> programs[i] -> id != progid
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 != VAR5
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ac
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: i
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: i
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244641047
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774758
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !strcmp(ic -> iformat -> name,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[1]: ic -> iformat -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: strcmp(ic -> iformat -> name,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[3]: ic -> iformat -> name
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: ic -> iformat
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: name
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775137
FRAGMENT_COUNT: 7
  ORIGINAL[0]: 101L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: 101L * VAR1 -> VAR2 . VAR3
  ORIGINAL[1]: c -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: c -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: c -> time_base
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: c -> time_base . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 . VAR3
  ORIGINAL[5]: c -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: num
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064774251
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat -> read_timestamp && !(s -> iformat -> flags & 0x2000)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 && ! ( VAR1 -> VAR2 -> VAR4 & 0x2000 )
  ORIGINAL[1]: s -> iformat -> read_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: !(s -> iformat -> flags & 0x2000)
  TYPE[2]: CALL
  TOKENIZED[2]: ! ( VAR1 -> VAR2 -> VAR3 & 0x2000 )
  ORIGINAL[3]: s -> iformat -> flags & 0x2000
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3 & 0x2000

CENTER_NODE: 47244641077
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774304
FRAGMENT_COUNT: 11
  ORIGINAL[0]: s -> iformat -> read_seek2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ret = ((s -> iformat -> read_seek2)(s,stream_index,min_ts,ts,max_ts,flags))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 , VAR5 , VAR6 , VAR7 , VAR8 , VAR9 ) )
  ORIGINAL[2]: (s -> iformat -> read_seek2)(s,stream_index,min_ts,ts,max_ts,flags)
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[3]: s -> iformat -> read_seek2
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: min_ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ts
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: max_ts
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: flags
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719478927
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pos < pos_min
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: pos_min
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pos
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos_min
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_min
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640439
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640711
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640684
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641058
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2

CENTER_NODE: 47244640830
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641019
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ic -> programs[i] == last
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] == VAR4
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064773853
FRAGMENT_COUNT: 6
  ORIGINAL[0]: b - a > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 - VAR2 > 1
  ORIGINAL[1]: timestamp = entries[m] . timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 [ VAR3 ] . VAR1
  ORIGINAL[2]: entries[m] . timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[3]: entries[m]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ VAR2 ]
  ORIGINAL[4]: timestamp
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776516
FRAGMENT_COUNT: 3
  ORIGINAL[0]: lrintf((d * 100))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 * 100 ) )
  ORIGINAL[1]: d * 100
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 * 100
  ORIGINAL[2]: d
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640735
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064774340
FRAGMENT_COUNT: 21
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st = ic -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[3]: ic -> streams[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[4]: ic -> streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[6]: st -> duration
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (int64_t )0x8000000000000000UL
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[8]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[9]: ic -> duration
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: (int64_t )0x8000000000000000UL
  TYPE[10]: CALL
  TOKENIZED[10]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[11]: for (i = 0;i < ic -> nb_streams;i++)
  TYPE[11]: CONTROL_STRUCTURE
  TOKENIZED[11]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[12]: streams
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: duration
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: duration
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: i
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ic
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: i
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ic
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 30064773697
FRAGMENT_COUNT: 6
  ORIGINAL[0]: j < 16 + 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 16 + 1
  ORIGINAL[1]: st -> pts_buffer[j] = ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> pts_buffer[j]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: for (j = 0;j < 16 + 1;j++)
  TYPE[4]: CONTROL_STRUCTURE
  TOKENIZED[4]: for ( VAR1 = 0 ; VAR1 < 16 + 1 ; j++ )
  ORIGINAL[5]: j
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064776877
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_gettime() / 1000
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ) / 1000
  ORIGINAL[1]: av_gettime()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )

CENTER_NODE: 47244641156
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478701
FRAGMENT_COUNT: 4
  ORIGINAL[0]: index > 0?index : 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0?index : 0
  ORIGINAL[1]: index > 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 > 0
  ORIGINAL[2]: index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641167
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640689
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481314
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 68719480819
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064777795
FRAGMENT_COUNT: 4
  ORIGINAL[0]: stonesoup_taint_num < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: stonesoup_taint_num = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: stonesoup_taint_num
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stonesoup_trace
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640858
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773606
FRAGMENT_COUNT: 15
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: !(next_pkt -> pts == ((int64_t )0x8000000000000000UL) && next_pkt -> dts != ((int64_t )0x8000000000000000UL) && !eof)
  TYPE[1]: CALL
  TOKENIZED[1]: ! ( VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL ) && !eof )
  ORIGINAL[2]: pkt -> dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: is_relative(pkt -> dts)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[4]: pkt -> dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: dts
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pkt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pkt
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pkt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: pkt
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: pkt
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: pkt
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: pkt
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244640721
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771344
FRAGMENT_COUNT: 5
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: !av_strcasecmp(name,names)
  TYPE[1]: CALL
  TOKENIZED[1]: !av_strcasecmp ( VAR1 , VAR2 )
  ORIGINAL[2]: av_strcasecmp(name,names)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: names
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776359
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> last_IP_pts = ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> last_IP_pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL

CENTER_NODE: 30064771407
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !s -> maxsize || s -> maxsize < newsize
  TYPE[0]: CALL
  TOKENIZED[0]: !s -> VAR1 || VAR2 -> VAR1 < VAR3
  ORIGINAL[1]: s -> maxsize = newsize - (!newsize)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = VAR3 - ( !newsize )
  ORIGINAL[2]: s -> maxsize
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: newsize - (!newsize)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - ( !newsize )
  ORIGINAL[4]: !newsize
  TYPE[4]: CALL
  TOKENIZED[4]: !newsize
  ORIGINAL[5]: newsize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719478662
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: index_entries
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064777769
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ++stonesoup_global_variable
  TYPE[0]: CALL
  TOKENIZED[0]: ++stonesoup_global_variable
  ORIGINAL[1]: <global> stonesoup_global_variable
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1
  ORIGINAL[2]: characterology_tripolar
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774941
FRAGMENT_COUNT: 22
  ORIGINAL[0]: st -> info -> found_decoder < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3 < 0
  ORIGINAL[1]: (pkt . size > 0 || !pkt . data && got_picture) && ret >= 0 && (!has_codec_parameters(st,((void *)0)) || !has_decode_delay_been_guessed(st) || !st -> codec_info_nb_frames && st -> codec -> codec -> capabilities & 0x0400)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 . VAR2 > 0 || !pkt . VAR3 && VAR4 ) && VAR5 >= 0 && ( !has_codec_parameters ( VAR6 , ( ( void * ) 0 ) ) || !has_decode_delay_been_guessed ( VAR6 ) || !st -> VAR7 && VAR6 -> VAR8 -> VAR8 -> VAR9 & 0x0400 )
  ORIGINAL[2]: (pkt . size > 0 || !pkt . data && got_picture) && ret >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 . VAR2 > 0 || !pkt . VAR3 && VAR4 ) && VAR5 >= 0
  ORIGINAL[3]: pkt . size > 0 || !pkt . data && got_picture
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2 > 0 || !pkt . VAR3 && VAR4
  ORIGINAL[4]: pkt . size > 0
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2 > 0
  ORIGINAL[5]: pkt . size
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: !has_codec_parameters(st,((void *)0)) || !has_decode_delay_been_guessed(st) || !st -> codec_info_nb_frames && st -> codec -> codec -> capabilities & 0x0400
  TYPE[6]: CALL
  TOKENIZED[6]: !has_codec_parameters ( VAR1 , ( ( void * ) 0 ) ) || !has_decode_delay_been_guessed ( VAR1 ) || !st -> VAR2 && VAR1 -> VAR3 -> VAR3 -> VAR4 & 0x0400
  ORIGINAL[7]: got_picture = 0
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 = 0
  ORIGINAL[8]: avcodec_get_frame_defaults(frame)
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 )
  ORIGINAL[9]: st -> codec -> codec_type
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[10]: st -> codec
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: ret >= 0
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 >= 0
  ORIGINAL[12]: while ((pkt . size > 0 || !pkt . data && got_picture) && ret >= 0 && (!has_codec_parameters(st,((void *)0)) || !has_decode_delay_been_guessed(st) || !st -> codec_info_nb_frames && st -> codec -> codec -> capabilities & 0x0400))
  TYPE[12]: CONTROL_STRUCTURE
  TOKENIZED[12]: while ( ( VAR1 . VAR2 > 0 || !pkt . VAR3 && VAR4 ) && VAR5 >= 0 && ( !has_codec_parameters ( VAR6 , ( ( void * ) 0 ) ) || !has_decode_delay_been_guessed ( VAR6 ) || !st -> VAR7 && VAR6 -> VAR8 -> VAR8 -> VAR9 & 0x0400 ) )
  ORIGINAL[13]: size
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: codec
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: codec_type
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: got_picture
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: frame
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ret
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pkt
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 47244640358
FRAGMENT_COUNT: 1
  ORIGINAL[0]: err < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0

CENTER_NODE: 68719481481
FRAGMENT_COUNT: 6
  ORIGINAL[0]: hostname[len_h - len_p]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 - VAR3 ]
  ORIGINAL[1]: len_h == len_p
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: hostname[len_h - len_p - 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 - VAR3 - 1 ]
  ORIGINAL[3]: hostname
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: hostname
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len_h
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641173
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640554
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771552
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {{(\
  TYPE[0]: CALL
  TOKENIZED[0]: { { ( \
  ORIGINAL[1]: {(\
  TYPE[1]: CALL
  TOKENIZED[1]: { ( \
  ORIGINAL[2]: AV_CODEC_ID_AC3
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_AUDIO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719478851
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &pos_max
  TYPE[0]: CALL
  TOKENIZED[0]: &pos_max
  ORIGINAL[1]: no_change == 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == 0
  ORIGINAL[2]: target_ts - ts_min
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - VAR2
  ORIGINAL[3]: pos_max - pos_min
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: pos_max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_max
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pos_min
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pos_max
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244640573
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477455
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

