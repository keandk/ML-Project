# Tokenized code fragments for 152971-v1.0.0-bad
# Total center nodes processed: 193
# Total code fragments found: 853

CENTER_NODE: 30064776824
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 30064774459
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: ic -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: duration
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640692
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641205
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771586
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !strcmp(fmt -> name,fmt_id_type[i] . name)
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 -> VAR2 , VAR3 [ VAR4 ] . VAR2 )
  ORIGINAL[1]: st -> codec -> codec_id = fmt_id_type[i] . id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 [ VAR5 ] . VAR6
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: fmt_id_type[i] . id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: codec_id
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt_id_type
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719480909
FRAGMENT_COUNT: 2
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: avcl
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 47244641186
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641197
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771676
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !buftmp
  TYPE[0]: CALL
  TOKENIZED[0]: !buftmp
  ORIGINAL[1]: buf = buftmp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: buftmp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064773836
FRAGMENT_COUNT: 5
  ORIGINAL[0]: max_entries = ((s -> max_index_size) / sizeof(AVIndexEntry ))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( VAR2 -> VAR3 ) / sizeof ( VAR4 ) )
  ORIGINAL[1]: (s -> max_index_size) / sizeof(AVIndexEntry )
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) / sizeof ( VAR3 )
  ORIGINAL[2]: s -> max_index_size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: sizeof(AVIndexEntry )
  TYPE[3]: CALL
  TOKENIZED[3]: sizeof ( VAR1 )
  ORIGINAL[4]: max_entries
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479549
FRAGMENT_COUNT: 6
  ORIGINAL[0]: avctx -> width
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> info -> found_decoder >= 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 >= 0
  ORIGINAL[2]: avctx -> pix_fmt
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pix_fmt
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: avctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641166
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478750
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: index_entries
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244641211
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771868
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !av_filename_number_test(filename)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_filename_number_test ( VAR1 )
  ORIGINAL[1]: ret = - 22
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 22
  ORIGINAL[2]: - 22
  TYPE[2]: CALL
  TOKENIZED[2]: - 22
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476877
FRAGMENT_COUNT: 7
  ORIGINAL[0]: (stonesoup_shm = shmat(stonesoup_shmid, NULL, 0)) != (char *) -1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) != ( char * ) -1
  ORIGINAL[1]: *stonesoup_tainted_buff = (char*)calloc(stonesoup_shmsz, sizeof(char))
  TYPE[1]: CALL
  TOKENIZED[1]: *stonesoup_tainted_buff = ( char* ) FUN1 ( VAR1 , sizeof ( char ) )
  ORIGINAL[2]: stonesoup_s = stonesoup_shm
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: stonesoup_s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_shm
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641079
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640729
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777491
FRAGMENT_COUNT: 14
  ORIGINAL[0]: rel[1] == '/'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] == '/'
  ORIGINAL[1]: rel[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]
  ORIGINAL[2]: sep[1] = '\\0'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ] = '\\0'
  ORIGINAL[3]: sep[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: sep += 3
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 += 3
  ORIGINAL[5]: sep = strchr(sep,'/')
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR1 , '/' )
  ORIGINAL[6]: strchr(sep,'/')
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 , '/' )
  ORIGINAL[7]: sep
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: sep
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: sep
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: sep
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: sep
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: sep
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: buf
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1

CENTER_NODE: 68719480661
FRAGMENT_COUNT: 5
  ORIGINAL[0]: lang -> value
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: value
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: lang
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: lang
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: lang
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640562
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640874
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641159
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640325
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fmt = av_iformat_next(fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR1 )
  ORIGINAL[1]: while (fmt = av_iformat_next(fmt))
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: while ( VAR1 = FUN1 ( VAR1 ) )

CENTER_NODE: 68719477049
FRAGMENT_COUNT: 4
  ORIGINAL[0]: orig_size = size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2
  ORIGINAL[1]: orig_size
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: orig_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479699
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_S24BE : AV_CODEC_ID_PCM_S24LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_S24BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S24BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_S24LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478004
FRAGMENT_COUNT: 9
  ORIGINAL[0]: pktl -> pkt . pts == pktl -> pkt . dts && (pktl -> pkt . dts == ((int64_t )0x8000000000000000UL) || pktl -> pkt . dts == st -> first_dts) && !pktl -> pkt . duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 == VAR1 -> VAR2 . VAR4 && ( VAR1 -> VAR2 . VAR4 == ( ( VAR5 ) 0x8000000000000000UL ) || VAR1 -> VAR2 . VAR4 == VAR6 -> VAR7 ) && !pktl -> VAR2 . VAR8
  ORIGINAL[1]: !st -> codec -> has_b_frames
  TYPE[1]: CALL
  TOKENIZED[1]: !st -> VAR1 -> VAR2
  ORIGINAL[2]: pktl -> pkt . pts = cur_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 = VAR4
  ORIGINAL[3]: pktl -> pkt
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pktl
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pktl
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064776987
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (av_gettime() / 1000 * 1000) + 2208988800ULL * 1000000ULL
  TYPE[0]: CALL
  TOKENIZED[0]: ( FUN1 ( ) / 1000 * 1000 ) + 2208988800ULL * 1000000ULL
  ORIGINAL[1]: 2208988800ULL * 1000000ULL
  TYPE[1]: CALL
  TOKENIZED[1]: 2208988800ULL * 1000000ULL

CENTER_NODE: 47244640688
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640854
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479718
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: tags
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: id
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771238
FRAGMENT_COUNT: 3
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \
  ORIGINAL[2]: sizeof(\
  TYPE[2]: CALL
  TOKENIZED[2]: sizeof ( \

CENTER_NODE: 30064773816
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772663
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < delay && pts_buffer[i] > pts_buffer[i + 1]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 && VAR3 [ VAR1 ] > VAR3 [ VAR1 + 1 ]
  ORIGINAL[1]: SWAP_tmp = pts_buffer[i + 1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 [ VAR3 + 1 ]
  ORIGINAL[2]: pts_buffer[i + 1]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 + 1 ]
  ORIGINAL[3]: SWAP_tmp
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pts_buffer
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777301
FRAGMENT_COUNT: 5
  ORIGINAL[0]: c >= 48 && c <= '9'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 48 && VAR1 <= '9'
  ORIGINAL[1]: c = c - 48
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 - 48
  ORIGINAL[2]: c - 48
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - 48
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: v
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640695
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641163
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776272
FRAGMENT_COUNT: 13
  ORIGINAL[0]: &st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: &st -> VAR1
  ORIGINAL[1]: st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 47244640687
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640848
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775128
FRAGMENT_COUNT: 15
  ORIGINAL[0]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[1]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[2]: tags[i] . id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[3]: avpriv_toupper4(tag) == avpriv_toupper4(tags[i] . tag)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 ) == FUN1 ( VAR2 [ VAR3 ] . VAR1 )
  ORIGINAL[4]: avpriv_toupper4(tag)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: avpriv_toupper4(tags[i] . tag)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 [ VAR2 ] . VAR3 )
  ORIGINAL[6]: tags[i] . tag
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 [ VAR2 ] . VAR3
  ORIGINAL[7]: tags[i]
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 [ VAR2 ]
  ORIGINAL[8]: for (i = 0;tags[i] . id != AV_CODEC_ID_NONE;i++)
  TYPE[8]: CONTROL_STRUCTURE
  TOKENIZED[8]: for ( VAR1 = 0 ; VAR2 [ VAR1 ] . VAR3 != VAR4 ; i++ )
  ORIGINAL[9]: tag
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: AV_CODEC_ID_NONE
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: tag
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: tags
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: i
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: AV_CODEC_ID_NONE
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 30064771543
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *fmt = av_probe_input_format3(pd,is_opened,&score_ret)
  TYPE[0]: CALL
  TOKENIZED[0]: *fmt = FUN1 ( VAR1 , VAR2 , &score_ret )
  ORIGINAL[1]: av_probe_input_format3(pd,is_opened,&score_ret)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , &score_ret )
  ORIGINAL[2]: &score_ret
  TYPE[2]: CALL
  TOKENIZED[2]: &score_ret
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pd
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: is_opened
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640561
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481386
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !data
  TYPE[0]: CALL
  TOKENIZED[0]: !data
  ORIGINAL[1]: bytestream_put_le32(&data,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &data , VAR1 )
  ORIGINAL[2]: bytestream_put_le32(&data,channels)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( &data , VAR1 )
  ORIGINAL[3]: &data
  TYPE[3]: CALL
  TOKENIZED[3]: &data
  ORIGINAL[4]: channels
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: data
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: channels
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: channel_layout
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641050
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 30064772331
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *pden = 0
  TYPE[0]: CALL
  TOKENIZED[0]: *pden = 0
  ORIGINAL[1]: *pden
  TYPE[1]: CALL
  TOKENIZED[1]: *pden
  ORIGINAL[2]: st
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640291
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640837
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777577
FRAGMENT_COUNT: 5
  ORIGINAL[0]: codec_id == (ofmt -> video_codec) || codec_id == (ofmt -> audio_codec) || codec_id == (ofmt -> subtitle_codec)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( VAR2 -> VAR3 ) || VAR1 == ( VAR2 -> VAR4 ) || VAR1 == ( VAR2 -> VAR5 )
  ORIGINAL[1]: -((int )(('P' | 'A' << 8 | 'W' << 16) | ((unsigned int )'E') << 24))
  TYPE[1]: CALL
  TOKENIZED[1]: - ( ( int ) ( ( 'P' | 'A' << 8 | 'W' << 16 ) | ( ( unsigned int ) 'E' ) << 24 ) )
  ORIGINAL[2]: (int )(('P' | 'A' << 8 | 'W' << 16) | ((unsigned int )'E') << 24)
  TYPE[2]: CALL
  TOKENIZED[2]: ( int ) ( ( 'P' | 'A' << 8 | 'W' << 16 ) | ( ( unsigned int ) 'E' ) << 24 )
  ORIGINAL[3]: ('P' | 'A' << 8 | 'W' << 16) | ((unsigned int )'E') << 24
  TYPE[3]: CALL
  TOKENIZED[3]: ( 'P' | 'A' << 8 | 'W' << 16 ) | ( ( unsigned int ) 'E' ) << 24
  ORIGINAL[4]: ofmt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640861
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479239
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (st -> codec -> codec_type) == AVMEDIA_TYPE_SUBTITLE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[1]: (st -> codec -> codec_type) == AVMEDIA_TYPE_DATA
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4
  ORIGINAL[2]: st -> codec -> codec_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: AVMEDIA_TYPE_DATA
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480908
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064774693
FRAGMENT_COUNT: 8
  ORIGINAL[0]: i < ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: av_rescale(8 * filesize,st -> time_base . den,(ic -> bit_rate) * ((int64_t )st -> time_base . num))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( 8 * VAR1 , VAR2 -> VAR3 . VAR4 , ( VAR5 -> VAR6 ) * ( ( VAR7 ) VAR2 -> VAR3 . VAR8 ) )
  ORIGINAL[2]: 8 * filesize
  TYPE[2]: CALL
  TOKENIZED[2]: 8 * VAR1
  ORIGINAL[3]: st -> time_base . den
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: st -> time_base
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: (ic -> bit_rate) * ((int64_t )st -> time_base . num)
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 -> VAR2 ) * ( ( VAR3 ) VAR4 -> VAR5 . VAR6 )
  ORIGINAL[6]: den
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641073
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641054
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641052
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641201
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773201
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pkt_buf_end = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf_end = ( ( void * ) 0 )
  ORIGINAL[1]: *pkt_buf_end
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt_buf_end
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: pkt_buf_end
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640742
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064776233
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: avio_pause(s -> pb,0)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 -> VAR2 , 0 )
  ORIGINAL[2]: s -> pb
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pb
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774782
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: duration -= st -> first_dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -= VAR2 -> VAR3
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: duration
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: duration
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719479655
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (tags -> id) == id
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[3]: AV_CODEC_ID_NONE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640580
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640836
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776624
FRAGMENT_COUNT: 4
  ORIGINAL[0]: v = (lrintf((d * 100)))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( ( VAR2 * 100 ) ) )
  ORIGINAL[1]: lrintf((d * 100))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( VAR1 * 100 ) )
  ORIGINAL[2]: d * 100
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * 100
  ORIGINAL[3]: v
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771552
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_probe_input_format2(pd,is_opened,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &score )
  ORIGINAL[1]: &score
  TYPE[1]: CALL
  TOKENIZED[1]: &score
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064775079
FRAGMENT_COUNT: 25
  ORIGINAL[0]: st -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[2]: st -> codec -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[3]: st -> codec -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> codec -> codec_type
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: avcodec_decode_video2(st -> codec,frame,&got_picture,(&pkt))
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( VAR1 -> VAR2 , VAR3 , &got_picture , ( &pkt ) )
  ORIGINAL[9]: st -> codec
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: &got_picture
  TYPE[10]: CALL
  TOKENIZED[10]: &got_picture
  ORIGINAL[11]: &pkt
  TYPE[11]: CALL
  TOKENIZED[11]: &pkt
  ORIGINAL[12]: st -> codec
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: st -> codec
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: codec
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: st
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: st
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: st
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: frame
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: st
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: st
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1

CENTER_NODE: 30064771115
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (shm = shmat(shmid, NULL, 0)) == (char *) -1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 , VAR3 , 0 ) ) == ( char * ) -1
  ORIGINAL[1]: s = shm
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: shm
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480519
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: program -> id = id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR2
  ORIGINAL[3]: program -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: id
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: id
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: id
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641174
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641326
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641134
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477507
FRAGMENT_COUNT: 13
  ORIGINAL[0]: st -> request_probe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> probe_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> probe_packets
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> probe_packets
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> index
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> probe_packets
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: (st -> codec -> codec_id) != AV_CODEC_ID_NONE && score > 100 / 4 || end
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4 && VAR5 > 100 / 4 || VAR6
  ORIGINAL[8]: av_freep((&pd -> buf))
  TYPE[8]: CALL
  TOKENIZED[8]: FUN1 ( ( &pd -> VAR1 ) )
  ORIGINAL[9]: st -> request_probe
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: request_probe
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064772465
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> correct_ts_overflow && st -> pts_wrap_bits < 63 && st -> pts_wrap_reference == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR3 -> VAR4 < 63 && VAR3 -> VAR5 == ( ( VAR6 ) 0x8000000000000000UL )
  ORIGINAL[1]: st -> first_dts != ((int64_t )0x8000000000000000UL)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[2]: st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: st -> first_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: first_dts
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640696
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771261
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> pts_wrap_behavior == 1 && timestamp < st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == 1 && VAR3 < VAR1 -> VAR4
  ORIGINAL[1]: 1ULL << st -> pts_wrap_bits
  TYPE[1]: CALL
  TOKENIZED[1]: 1ULL << VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_bits
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pts_wrap_bits
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477348
FRAGMENT_COUNT: 6
  ORIGINAL[0]: *packet_buffer
  TYPE[0]: CALL
  TOKENIZED[0]: *packet_buffer
  ORIGINAL[1]: *packet_buffer = pktl
  TYPE[1]: CALL
  TOKENIZED[1]: *packet_buffer = VAR1
  ORIGINAL[2]: *packet_buffer
  TYPE[2]: CALL
  TOKENIZED[2]: *packet_buffer
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640707
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719476952
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !name || !names
  TYPE[0]: CALL
  TOKENIZED[0]: !name || !names
  ORIGINAL[1]: namelen = (strlen(name))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( FUN1 ( VAR2 ) )
  ORIGINAL[2]: strlen(name)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: namelen
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: name
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: namelen
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477687
FRAGMENT_COUNT: 6
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1 || (avctx -> codec_id) == AV_CODEC_ID_MP2
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3 || ( VAR1 -> VAR2 ) == VAR4
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: avctx -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avctx -> codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: codec_id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641170
FRAGMENT_COUNT: 1
  ORIGINAL[0]: c < 32 || c > '~'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 32 || VAR1 > '~'

CENTER_NODE: 68719477219
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ic -> pb && !ic -> data_offset
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !ic -> VAR3
  ORIGINAL[1]: ic -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ic -> data_offset
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> data_offset
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> pb
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771185
FRAGMENT_COUNT: 2
  ORIGINAL[0]: fclose(stonesoup_printf_context)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: <global> stonesoup_printf_context
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: <global> VAR1

CENTER_NODE: 47244640453
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479722
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777819
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !size
  TYPE[0]: CALL
  TOKENIZED[0]: !size
  ORIGINAL[1]: st -> codec -> extradata = (av_mallocz((size + 16)))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = ( FUN1 ( ( VAR4 + 16 ) ) )
  ORIGINAL[2]: st -> codec -> extradata
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: av_mallocz((size + 16))
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( ( VAR1 + 16 ) )
  ORIGINAL[5]: st -> codec -> extradata
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: extradata
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: size
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064776641
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_dict_count(m) == 1 && av_dict_get(m,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) == 1 && FUN2 ( VAR1 , \
  ORIGINAL[1]: av_dict_count(m) == 1
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) == 1
  ORIGINAL[2]: av_dict_get(m,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: (void *)0
  TYPE[3]: CALL
  TOKENIZED[3]: ( void * ) 0
  ORIGINAL[4]: m
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777551
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ret2 = av_small_strptime(datestr,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[1]: av_small_strptime(datestr,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: ret2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ret2
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480291
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ic -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: related_stream >= 0 && wanted_stream_nb < 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 >= 0 && VAR2 < 0
  ORIGINAL[2]: av_find_program_from_stream(ic,((void *)0),related_stream)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 )
  ORIGINAL[3]: ic -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ic -> nb_streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ic
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ic
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641154
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776118
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ic -> programs[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[1]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[2]: ic -> programs[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: ic -> programs
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: programs
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ic
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640838
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481104
FRAGMENT_COUNT: 4
  ORIGINAL[0]: lowercase?hex_table_lc : hex_table_uc
  TYPE[0]: CALL
  TOKENIZED[0]: lowercase?hex_table_lc : VAR1
  ORIGINAL[1]: hex_table_uc
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: lowercase
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: hex_table_uc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771322
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ( *p) != '\\0' && ( *p) != ',' && (q - ext1) < sizeof(ext1) - 1
  TYPE[0]: CALL
  TOKENIZED[0]: ( *p ) != '\\0' && ( *p ) != ' , ' && ( VAR1 - VAR2 ) < sizeof ( VAR2 ) - 1
  ORIGINAL[1]: *(q++) =  *(p++)
  TYPE[1]: CALL
  TOKENIZED[1]: * ( q++ ) = * ( p++ )
  ORIGINAL[2]: *(q++)
  TYPE[2]: CALL
  TOKENIZED[2]: * ( q++ )
  ORIGINAL[3]: *(p++)
  TYPE[3]: CALL
  TOKENIZED[3]: * ( p++ )
  ORIGINAL[4]: p++
  TYPE[4]: CALL
  TOKENIZED[4]: p++

CENTER_NODE: 47244640717
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477106
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !lpd . buf
  TYPE[0]: CALL
  TOKENIZED[0]: !lpd . VAR1
  ORIGINAL[1]: lpd . buf
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: lpd . buf
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: buf
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: lpd
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: lpd
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477011
FRAGMENT_COUNT: 4
  ORIGINAL[0]: type == AVMEDIA_TYPE_AUDIO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_SUBTITLE
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_SUBTITLE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641183
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481401
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244641194
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477698
FRAGMENT_COUNT: 4
  ORIGINAL[0]: enc -> frame_size > 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 1
  ORIGINAL[1]: !mux
  TYPE[1]: CALL
  TOKENIZED[1]: !mux
  ORIGINAL[2]: mux
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: mux
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774354
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat -> read_seek
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: ret = - 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = - 1
  ORIGINAL[2]: - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 1
  ORIGINAL[3]: ret
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ret
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641074
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777362
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: local_pkt . pts = av_rescale_q(pkt -> pts,src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 = FUN1 ( VAR3 -> VAR2 , VAR4 -> VAR5 [ VAR3 -> VAR6 ] -> VAR7 , VAR8 -> VAR5 [ VAR9 ] -> VAR7 )
  ORIGINAL[2]: local_pkt . pts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: av_rescale_q(pkt -> pts,src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 -> VAR2 , VAR3 -> VAR4 [ VAR1 -> VAR5 ] -> VAR6 , VAR7 -> VAR4 [ VAR8 ] -> VAR6 )
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480844
FRAGMENT_COUNT: 6
  ORIGINAL[0]: c == '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == '\\0'
  ORIGINAL[1]: !percentd_found
  TYPE[1]: CALL
  TOKENIZED[1]: !percentd_found
  ORIGINAL[2]: break;
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: break ;
  ORIGINAL[3]: percentd_found
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: percentd_found
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: percentd_found
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773321
FRAGMENT_COUNT: 19
  ORIGINAL[0]: st -> parser -> flags
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: st -> parser
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> parser -> duration
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> parser -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: st -> parser -> pts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[5]: st -> parser -> dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[6]: st -> parser -> pos
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[7]: (st -> need_parsing) == AVSTREAM_PARSE_FULL_RAW
  TYPE[7]: CALL
  TOKENIZED[7]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[8]: st -> parser -> frame_offset
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[9]: st -> parser
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: st -> parser -> pict_type
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[11]: st -> parser -> key_frame
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[12]: st -> parser -> pict_type
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[13]: parser
  TYPE[13]: FIELD_IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: frame_offset
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: st
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: st
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1

CENTER_NODE: 30064774892
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ((double )(st -> start_time)) / 1000000
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( double ) ( VAR1 -> VAR2 ) ) / 1000000
  ORIGINAL[1]: (double )(st -> start_time)
  TYPE[1]: CALL
  TOKENIZED[1]: ( double ) ( VAR1 -> VAR2 )
  ORIGINAL[2]: st -> start_time
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244640865
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641180
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774281
FRAGMENT_COUNT: 10
  ORIGINAL[0]: (ret = avio_seek(s -> pb,ie -> pos,0)) < 0
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 -> VAR5 , 0 ) ) < 0
  ORIGINAL[1]: (ret = avio_seek(s -> pb,s -> data_offset,0)) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = FUN1 ( VAR2 -> VAR3 , VAR2 -> VAR4 , 0 ) ) < 0
  ORIGINAL[2]: read_status = av_read_frame(s,&pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 , &pkt )
  ORIGINAL[3]: av_read_frame(s,&pkt)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , &pkt )
  ORIGINAL[4]: &pkt
  TYPE[4]: CALL
  TOKENIZED[4]: &pkt
  ORIGINAL[5]: read_status == - '\\v'
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 == - '\\v'
  ORIGINAL[6]: stream_index == pkt . stream_index && pkt . dts > timestamp
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 == VAR2 . VAR1 && VAR2 . VAR3 > VAR4
  ORIGINAL[7]: nonkey++ > 1000 && (st -> codec -> codec_id) != AV_CODEC_ID_CDGRAPHICS
  TYPE[7]: CALL
  TOKENIZED[7]: nonkey++ > 1000 && ( VAR1 -> VAR2 -> VAR3 ) != VAR4
  ORIGINAL[8]: read_status
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640691
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641208
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640851
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640604
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771375
FRAGMENT_COUNT: 4
  ORIGINAL[0]: filename && fmt -> extensions && av_match_ext(filename,fmt -> extensions)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 -> VAR3 && FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[1]: score += 5
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 += 5
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: score
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641083
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !chapter
  TYPE[0]: CALL
  TOKENIZED[0]: !chapter

CENTER_NODE: 68719481553
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !strcmp(pattern,\
  TYPE[0]: CALL
  TOKENIZED[0]: !strcmp ( VAR1 , \
  ORIGINAL[1]: pattern[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: pattern
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pattern
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064772430
FRAGMENT_COUNT: 8
  ORIGINAL[0]: desc -> props & 1 << 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 & 1 << 0
  ORIGINAL[1]: desc -> props
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: 1 << 0
  TYPE[2]: CALL
  TOKENIZED[2]: 1 << 0
  ORIGINAL[3]: props
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: desc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: desc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: desc
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064773739
FRAGMENT_COUNT: 3
  ORIGINAL[0]: free_packet_buffer(&s -> raw_packet_buffer,&s -> raw_packet_buffer_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> raw_packet_buffer_end
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> raw_packet_buffer_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 30064774395
FRAGMENT_COUNT: 6
  ORIGINAL[0]: stream_index == - 1 && s -> nb_streams == 1
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == - 1 && VAR2 -> VAR3 == 1
  ORIGINAL[1]: s -> streams[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ 0 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: streams
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641257
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772075
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ******reseized_predoubt = 0
  TYPE[0]: CALL
  TOKENIZED[0]: ******reseized_predoubt = 0
  ORIGINAL[1]: reseized_predoubt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: wellton_leptochrous
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719478935
FRAGMENT_COUNT: 8
  ORIGINAL[0]: no_change == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: pos_max - pos_limit
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 - VAR2
  ORIGINAL[2]: pos_limit
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pos_limit
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_max
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos_limit
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pos_limit
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pos_limit
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064775228
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: 60 * 12
  TYPE[1]: CALL
  TOKENIZED[1]: 60 * 12
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477776
FRAGMENT_COUNT: 5
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: parse_queue_end
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: s
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476927
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *p = format
  TYPE[0]: CALL
  TOKENIZED[0]: *p = VAR1
  ORIGINAL[1]: format -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: next
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: format
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: format
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064774032
FRAGMENT_COUNT: 5
  ORIGINAL[0]: e -> timestamp <= target_ts || e -> pos == (e -> min_distance)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= VAR3 || VAR1 -> VAR4 == ( VAR1 -> VAR5 )
  ORIGINAL[1]: pos_min = e -> pos
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3
  ORIGINAL[2]: e -> pos
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pos_min
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ts_min
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476890
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c >= 97 && c <= 122
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 97 && VAR1 <= 122
  ORIGINAL[1]: c
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640446
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064772863
FRAGMENT_COUNT: 52
  ORIGINAL[0]: pkt -> pts != ((int64_t )0x8000000000000000UL) && pkt -> dts != ((int64_t )0x8000000000000000UL) && st -> pts_wrap_bits < 63
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 != ( ( VAR3 ) 0x8000000000000000UL ) && VAR5 -> VAR6 < 63
  ORIGINAL[1]: st -> pts_wrap_bits
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> pts_wrap_bits - 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 - 1
  ORIGINAL[3]: st -> pts_wrap_bits
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> pts_wrap_bits
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> pts_wrap_bits
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> pts_wrap_bits
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pts_wrap_bits
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: st
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: st
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: st
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: st
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: st
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: st
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: st
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: st
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: st
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: st
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: st
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: st
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: st
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: st
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: st
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: st
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: st
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: st
  TYPE[28]: IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: st
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: st
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: st
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: st
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: st
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: st
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: st
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: st
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: st
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: st
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: st
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: st
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: st
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: st
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: st
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: st
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: st
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: st
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: st
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: st
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: st
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: st
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: st
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1

CENTER_NODE: 68719477314
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> flags |= 0x80
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 |= 0x80
  ORIGINAL[2]: s -> flags
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> iformat
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: iformat
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641317
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ( *spec) <= '9' && ( *spec) >= 48
  TYPE[0]: CALL
  TOKENIZED[0]: ( *spec ) <= '9' && ( *spec ) >= 48
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 30064777217
FRAGMENT_COUNT: 5
  ORIGINAL[0]: (at = (strchr(p,'@'))) && at < ls
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 = ( FUN1 ( VAR2 , '@' ) ) ) && VAR1 < VAR3
  ORIGINAL[1]: p = at + 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 + 1
  ORIGINAL[2]: at + 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 + 1
  ORIGINAL[3]: at
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640858
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776381
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1 || s -> flags & 0x80
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1 || VAR1 -> VAR3 & 0x80
  ORIGINAL[1]: s -> iformat && s -> iformat -> flags & 0x1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1
  ORIGINAL[2]: s -> flags & 0x80
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 & 0x80
  ORIGINAL[3]: s -> flags
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2

CENTER_NODE: 68719481259
FRAGMENT_COUNT: 8
  ORIGINAL[0]: &dest
  TYPE[0]: CALL
  TOKENIZED[0]: &dest
  ORIGINAL[1]: dest && dest < dest_end
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && VAR1 < VAR2
  ORIGINAL[2]: dest++
  TYPE[2]: CALL
  TOKENIZED[2]: dest++
  ORIGINAL[3]: *dest
  TYPE[3]: CALL
  TOKENIZED[3]: *dest
  ORIGINAL[4]: dest
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: dest
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: dest
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: dest
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719480981
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: f
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771240
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064775796
FRAGMENT_COUNT: 35
  ORIGINAL[0]: st -> codec -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: st -> codec -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[2]: st -> codec -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[3]: st -> codec -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> codec -> codec
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[6]: st -> codec
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> codec
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: st -> codec -> extradata
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[9]: st -> codec -> ticks_per_frame
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[10]: st -> codec -> extradata
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[11]: st -> codec
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: st -> codec -> extradata_size
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[13]: st -> codec -> extradata
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[14]: st -> codec
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: st -> codec
  TYPE[15]: CALL
  TOKENIZED[15]: VAR1 -> VAR2
  ORIGINAL[16]: st -> codec -> codec_type
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[17]: (st -> codec -> codec_id) == AV_CODEC_ID_RAWVIDEO && !st -> codec -> codec_tag && !st -> codec -> bits_per_coded_sample
  TYPE[17]: CALL
  TOKENIZED[17]: ( VAR1 -> VAR2 -> VAR3 ) == VAR4 && !st -> VAR2 -> VAR5 && !st -> VAR2 -> VAR6
  ORIGINAL[18]: st -> codec -> codec_id
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[19]: st -> codec -> codec_tag
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[20]: st -> codec -> bits_per_coded_sample
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[21]: st -> codec -> pix_fmt
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[22]: st -> codec
  TYPE[22]: CALL
  TOKENIZED[22]: VAR1 -> VAR2
  ORIGINAL[23]: st -> codec -> pix_fmt
  TYPE[23]: CALL
  TOKENIZED[23]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[24]: st -> codec -> codec_tag
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[25]: st -> codec
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 -> VAR2
  ORIGINAL[26]: st -> codec
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 -> VAR2
  ORIGINAL[27]: st -> codec -> ticks_per_frame
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[28]: st -> codec -> ticks_per_frame
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[29]: st -> codec -> bits_per_coded_sample
  TYPE[29]: CALL
  TOKENIZED[29]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[30]: st -> codec -> bits_per_coded_sample
  TYPE[30]: CALL
  TOKENIZED[30]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[31]: codec
  TYPE[31]: FIELD_IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: pix_fmt
  TYPE[32]: FIELD_IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: st
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: st
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1

CENTER_NODE: 30064776438
FRAGMENT_COUNT: 5
  ORIGINAL[0]: s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> bit_rate = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = 0
  ORIGINAL[2]: st -> codec -> bit_rate
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: bit_rate
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776622
FRAGMENT_COUNT: 7
  ORIGINAL[0]: program -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !tmp
  TYPE[1]: CALL
  TOKENIZED[1]: !tmp
  ORIGINAL[2]: program -> nb_stream_indexes++
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> nb_stream_indexes++
  ORIGINAL[3]: program -> nb_stream_indexes
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: nb_stream_indexes
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: program
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: program
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640637
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771805
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: i++
  TYPE[1]: CALL
  TOKENIZED[1]: i++
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641177
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477770
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> info
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> has_b_frames < 3
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 < 3
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640581
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478748
FRAGMENT_COUNT: 5
  ORIGINAL[0]: m == nb_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: nb_entries
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: nb_entries
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: m
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: nb_entries
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771979
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> audio_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id = s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: st -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> audio_codec_id
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: codec_id
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771230
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 68719478486
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pktl -> pkt
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: pktl -> next
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: next_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719480989
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481170
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_strlcatf(str,size,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: proto
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: str
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: proto
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640718
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640938
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719480410
FRAGMENT_COUNT: 10
  ORIGINAL[0]: !s
  TYPE[0]: CALL
  TOKENIZED[0]: !s
  ORIGINAL[1]: i = (s -> nb_programs - 1)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> VAR3 - 1 )
  ORIGINAL[2]: i >= 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 0
  ORIGINAL[3]: i--
  TYPE[3]: CALL
  TOKENIZED[3]: i--
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: i
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: i
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640735
FRAGMENT_COUNT: 1
  ORIGINAL[0]: pos > pos_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2

CENTER_NODE: 47244640817
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640842
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777655
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stream_sample_aspect_ratio . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2
  ORIGINAL[1]: num
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stream_sample_aspect_ratio
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_sample_aspect_ratio
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frame_sample_aspect_ratio
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641171
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773402
FRAGMENT_COUNT: 7
  ORIGINAL[0]: pktl -> next
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: !pktl -> next
  TYPE[1]: CALL
  TOKENIZED[1]: !pktl -> VAR1
  ORIGINAL[2]: pktl -> next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: next
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pktl
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pktl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pktl
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064777874
FRAGMENT_COUNT: 11
  ORIGINAL[0]: match_host_pattern(start,hostname)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[1]: ret = 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 1
  ORIGINAL[2]: start = next
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = VAR2
  ORIGINAL[3]: break;
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: break ;
  ORIGINAL[4]: start
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: hostname
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ret
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: start
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: next
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: buf
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 68719479139
FRAGMENT_COUNT: 3
  ORIGINAL[0]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719479355
FRAGMENT_COUNT: 10
  ORIGINAL[0]: st -> start_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ic -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[4]: st -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: (AVRational ){(1), (1000000)}
  TYPE[5]: CALL
  TOKENIZED[5]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[6]: st -> time_base
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: time_base
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064773939
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ff_add_index_entry(&st -> index_entries,&st -> nb_index_entries,&st -> index_entries_allocated_size,pos,timestamp,size,distance,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &st -> VAR1 , &st -> VAR2 , &st -> VAR3 , VAR4 , VAR5 , VAR6 , VAR7 , VAR8 )
  ORIGINAL[1]: &st -> index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1
  ORIGINAL[2]: &st -> nb_index_entries
  TYPE[2]: CALL
  TOKENIZED[2]: &st -> VAR1
  ORIGINAL[3]: &st -> index_entries_allocated_size
  TYPE[3]: CALL
  TOKENIZED[3]: &st -> VAR1
  ORIGINAL[4]: pos
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: distance
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: flags
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479776
FRAGMENT_COUNT: 6
  ORIGINAL[0]: j < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: ch1 -> start
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ch1 -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: time_base
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ch1
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ch1
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719477077
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: !pkt -> VAR1
  ORIGINAL[1]: old_size = pkt -> size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: old_size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pkt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: old_size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771401
FRAGMENT_COUNT: 27
  ORIGINAL[0]: s -> maxsize >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0
  ORIGINAL[1]: remaining < size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: newsize = avio_size(s)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = FUN1 ( VAR2 )
  ORIGINAL[3]: avio_size(s)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: !s -> maxsize || s -> maxsize < newsize
  TYPE[4]: CALL
  TOKENIZED[4]: !s -> VAR1 || VAR2 -> VAR1 < VAR3
  ORIGINAL[5]: !s -> maxsize
  TYPE[5]: CALL
  TOKENIZED[5]: !s -> VAR1
  ORIGINAL[6]: s -> maxsize
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: remaining = s -> maxsize - avio_tell(s)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 = VAR2 -> VAR3 - FUN1 ( VAR2 )
  ORIGINAL[8]: s -> maxsize - avio_tell(s)
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 - FUN1 ( VAR1 )
  ORIGINAL[9]: s -> maxsize
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: avio_tell(s)
  TYPE[10]: CALL
  TOKENIZED[10]: FUN1 ( VAR1 )
  ORIGINAL[11]: remaining = (remaining > 0?remaining : 0)
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 = ( VAR1 > 0?remaining : 0 )
  ORIGINAL[12]: remaining > 0?remaining : 0
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 > 0?remaining : 0
  ORIGINAL[13]: remaining > 0
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 > 0
  ORIGINAL[14]: maxsize
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: maxsize
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: remaining
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: size
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: newsize
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: s
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: s
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: remaining
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: s
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: s
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: remaining
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: remaining
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: s
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1

CENTER_NODE: 47244640305
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477098
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[1]: sizeof(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641276
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )

CENTER_NODE: 68719481402
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640676
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 30064775257
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: ((const union unaligned_32 *)\
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( const union VAR1 * ) \
  ORIGINAL[2]: (const union unaligned_32 *)\
  TYPE[2]: CALL
  TOKENIZED[2]: ( const union VAR1 * ) \
  ORIGINAL[3]: l
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640699
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641238
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640845
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776846
FRAGMENT_COUNT: 9
  ORIGINAL[0]: ic -> nb_streams && !printed
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && !printed
  ORIGINAL[1]: av_log(((void *)0),32,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: is_output?\
  TYPE[3]: CALL
  TOKENIZED[3]: is_output?\
  ORIGINAL[4]: is_output?ic -> oformat -> name : ic -> iformat -> name
  TYPE[4]: CALL
  TOKENIZED[4]: is_output?ic -> VAR1 -> VAR2 : VAR3 -> VAR4 -> VAR2
  ORIGINAL[5]: is_output?\
  TYPE[5]: CALL
  TOKENIZED[5]: is_output?\
  ORIGINAL[6]: index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: is_output
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: url
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641190
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771233
FRAGMENT_COUNT: 2
  ORIGINAL[0]: '6' << 16 | 63 << 8 | 'h'
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8 | 'h'
  ORIGINAL[1]: '6' << 16 | 63 << 8
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16 | 63 << 8

CENTER_NODE: 47244640728
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478763
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stream_index >= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 >= 0
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719478453
FRAGMENT_COUNT: 6
  ORIGINAL[0]: st -> skip_to_keyframe
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: *pkt = cur_pkt
  TYPE[1]: CALL
  TOKENIZED[1]: *pkt = VAR1
  ORIGINAL[2]: got_packet = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: got_packet
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: got_packet
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: got_packet
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640839
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773772
FRAGMENT_COUNT: 42
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: st = s -> streams[i]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[4]: s -> streams[i]
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[5]: s -> streams
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> parser
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: st -> last_IP_pts = ((int64_t )0x8000000000000000UL)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[8]: st -> last_IP_pts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: (int64_t )0x8000000000000000UL
  TYPE[9]: CALL
  TOKENIZED[9]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[10]: st -> first_dts == ((int64_t )0x8000000000000000UL)
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[11]: st -> first_dts
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: (int64_t )0x8000000000000000UL
  TYPE[12]: CALL
  TOKENIZED[12]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[13]: st -> reference_dts = ((int64_t )0x8000000000000000UL)
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[14]: st -> reference_dts
  TYPE[14]: CALL
  TOKENIZED[14]: VAR1 -> VAR2
  ORIGINAL[15]: (int64_t )0x8000000000000000UL
  TYPE[15]: CALL
  TOKENIZED[15]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[16]: st -> probe_packets = 2500
  TYPE[16]: CALL
  TOKENIZED[16]: VAR1 -> VAR2 = 2500
  ORIGINAL[17]: st -> probe_packets
  TYPE[17]: CALL
  TOKENIZED[17]: VAR1 -> VAR2
  ORIGINAL[18]: j = 0
  TYPE[18]: CALL
  TOKENIZED[18]: VAR1 = 0
  ORIGINAL[19]: j < 16 + 1
  TYPE[19]: CALL
  TOKENIZED[19]: VAR1 < 16 + 1
  ORIGINAL[20]: 16 + 1
  TYPE[20]: CALL
  TOKENIZED[20]: 16 + 1
  ORIGINAL[21]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[21]: CONTROL_STRUCTURE
  TOKENIZED[21]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[22]: nb_streams
  TYPE[22]: FIELD_IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: streams
  TYPE[23]: FIELD_IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: parser
  TYPE[24]: FIELD_IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: last_IP_pts
  TYPE[25]: FIELD_IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: first_dts
  TYPE[26]: FIELD_IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: reference_dts
  TYPE[27]: FIELD_IDENTIFIER
  TOKENIZED[27]: VAR1
  ORIGINAL[28]: probe_packets
  TYPE[28]: FIELD_IDENTIFIER
  TOKENIZED[28]: VAR1
  ORIGINAL[29]: i
  TYPE[29]: IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: s
  TYPE[30]: IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: i
  TYPE[31]: IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: st
  TYPE[32]: IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: s
  TYPE[33]: IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: i
  TYPE[34]: IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: st
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: st
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: st
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: st
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: st
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: j
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: j
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1

CENTER_NODE: 30064773753
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st = s -> streams[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: s -> streams[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[3]: s -> streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775171
FRAGMENT_COUNT: 7
  ORIGINAL[0]: tags && tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 [ VAR2 ]
  ORIGINAL[1]: tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: tags[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: tags
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771158
FRAGMENT_COUNT: 5
  ORIGINAL[0]: stat(dirpath, &st) == -1
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , &st ) == -1
  ORIGINAL[1]: retval = mkdir(dirpath, 0700)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , 0700 )
  ORIGINAL[2]: mkdir(dirpath, 0700)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 0700 )
  ORIGINAL[3]: retval
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dirpath
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064777318
FRAGMENT_COUNT: 11
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: &new_tb . num
  TYPE[1]: CALL
  TOKENIZED[1]: &new_tb . VAR1
  ORIGINAL[2]: new_tb . num
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2
  ORIGINAL[3]: &new_tb . den
  TYPE[3]: CALL
  TOKENIZED[3]: &new_tb . VAR1
  ORIGINAL[4]: new_tb . num
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: new_tb . num
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 . VAR2
  ORIGINAL[6]: new_tb . num
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 . VAR2
  ORIGINAL[7]: new_tb . num
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 . VAR2
  ORIGINAL[8]: new_tb
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: pts_num
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pts_den
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1

CENTER_NODE: 47244640869
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641213
FRAGMENT_COUNT: 1
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else

CENTER_NODE: 47244641084
FRAGMENT_COUNT: 0

