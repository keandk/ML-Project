# Tokenized code fragments for 153769-v1.0.0-bad
# Total center nodes processed: 193
# Total code fragments found: 749

CENTER_NODE: 47244641035
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773964
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: index = av_index_search_timestamp(st,target_ts,flags & ~1)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 & ~1 )
  ORIGINAL[2]: av_index_search_timestamp(st,target_ts,flags & ~1)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 & ~1 )
  ORIGINAL[3]: flags & ~1
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 & ~1
  ORIGINAL[4]: index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: target_ts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640436
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640674
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481320
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_wav_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 47244640852
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640429
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719478548
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ((unsigned int )(st -> nb_index_entries)) >= max_entries
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( unsigned int ) ( VAR1 -> VAR2 ) ) >= VAR3
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719480826
FRAGMENT_COUNT: 3
  ORIGINAL[0]: hex_dump_internal(((void *)0),f,0,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 )
  ORIGINAL[1]: buf
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: size
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640821
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479129
FRAGMENT_COUNT: 3
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064772457
FRAGMENT_COUNT: 5
  ORIGINAL[0]: program -> pts_wrap_reference != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: program = av_find_program_from_stream(s,program,stream_index)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR1 , VAR3 )
  ORIGINAL[2]: av_find_program_from_stream(s,program,stream_index)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: program
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: program
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641146
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771179
FRAGMENT_COUNT: 9
  ORIGINAL[0]: len < 10
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 10
  ORIGINAL[1]: *modulus_function = stonesoup_modulus_function2
  TYPE[1]: CALL
  TOKENIZED[1]: *modulus_function = VAR1
  ORIGINAL[2]: *modulus_function
  TYPE[2]: CALL
  TOKENIZED[2]: *modulus_function
  ORIGINAL[3]: tracepoint(stonesoup_trace, trace_point, \
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[4]: len
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: modulus_function
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_trace
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: trace_point
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_trace
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640679
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771262
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ext++
  TYPE[0]: CALL
  TOKENIZED[0]: ext++
  ORIGINAL[1]: ext
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ext
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: p
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064775153
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < 60 * 12
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 60 * 12
  ORIGINAL[1]: ((const int [6UL]){(24), (30), (60), (12), (15), (48)})[i - 60 * 12]
  TYPE[1]: CALL
  TOKENIZED[1]: ( ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) } ) [ VAR1 - 60 * 12 ]
  ORIGINAL[2]: (const int [6UL]){(24), (30), (60), (12), (15), (48)}
  TYPE[2]: CALL
  TOKENIZED[2]: ( const int [ 6UL ] ) { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }
  ORIGINAL[3]: {(24), (30), (60), (12), (15), (48)}
  TYPE[3]: CALL
  TOKENIZED[3]: { ( 24 ) , ( 30 ) , ( 60 ) , ( 12 ) , ( 15 ) , ( 48 ) }
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776744
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_log(((void *)0),32,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , 32 , \
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0

CENTER_NODE: 68719481067
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_reduce(&new_tb . num,&new_tb . den,pts_num,pts_den,2147483647)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &new_tb . VAR1 , &new_tb . VAR2 , VAR3 , VAR4 , 2147483647 )
  ORIGINAL[1]: &new_tb . num
  TYPE[1]: CALL
  TOKENIZED[1]: &new_tb . VAR1
  ORIGINAL[2]: &new_tb . den
  TYPE[2]: CALL
  TOKENIZED[2]: &new_tb . VAR1
  ORIGINAL[3]: pts_num
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pts_den
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641166
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774150
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pos < pos_min
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: pos = pos_min
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2
  ORIGINAL[2]: pos > pos_max
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 > VAR2
  ORIGINAL[3]: pos
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_min
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pos
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pos_min
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: pos
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pos_max
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064771870
FRAGMENT_COUNT: 22
  ORIGINAL[0]: !(s -> flags & 0x20000) && s -> iformat -> read_header
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 & 0x20000 ) && VAR1 -> VAR3 -> VAR4
  ORIGINAL[1]: (ret = ((s -> iformat -> read_header)(s))) < 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 ) ) ) < 0
  ORIGINAL[2]: ret = ((s -> iformat -> read_header)(s))
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = ( ( VAR2 -> VAR3 -> VAR4 ) ( VAR2 ) )
  ORIGINAL[3]: ff_id3v2_free_extra_meta(&id3v2_extra_meta)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( &id3v2_extra_meta )
  ORIGINAL[4]: &id3v2_extra_meta
  TYPE[4]: CALL
  TOKENIZED[4]: &id3v2_extra_meta
  ORIGINAL[5]: av_dict_free(&tmp)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( &tmp )
  ORIGINAL[6]: &tmp
  TYPE[6]: CALL
  TOKENIZED[6]: &tmp
  ORIGINAL[7]: s -> pb && !(s -> flags & 0x80)
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2 && ! ( VAR1 -> VAR3 & 0x80 )
  ORIGINAL[8]: s -> pb
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: avformat_free_context(s)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( VAR1 )
  ORIGINAL[10]: *ps = ((void *)0)
  TYPE[10]: CALL
  TOKENIZED[10]: *ps = ( ( void * ) 0 )
  ORIGINAL[11]: *ps
  TYPE[11]: CALL
  TOKENIZED[11]: *ps
  ORIGINAL[12]: (void *)0
  TYPE[12]: CALL
  TOKENIZED[12]: ( void * ) 0
  ORIGINAL[13]: goto fail;
  TYPE[13]: CONTROL_STRUCTURE
  TOKENIZED[13]: goto VAR1 ;
  ORIGINAL[14]: pb
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: id3v2_extra_meta
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: id3v2_extra_meta
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: tmp
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: s
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: ps
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ret
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1

CENTER_NODE: 47244641062
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479290
FRAGMENT_COUNT: 6
  ORIGINAL[0]: ic -> duration == ((int64_t )0x8000000000000000UL) && ic -> bit_rate != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 == ( ( VAR3 ) 0x8000000000000000UL ) && VAR1 -> VAR4 != 0
  ORIGINAL[1]: filesize = (ic -> pb?avio_size(ic -> pb) : 0)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> pb?avio_size ( VAR2 -> VAR3 ) : 0 )
  ORIGINAL[2]: ic -> pb?avio_size(ic -> pb) : 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> pb?avio_size ( VAR1 -> VAR2 ) : 0
  ORIGINAL[3]: filesize
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ic
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: filesize
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064772709
FRAGMENT_COUNT: 10
  ORIGINAL[0]: pktl -> pkt . dts == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 == ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[1]: pktl -> pkt . dts
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: pktl -> pkt . dts == st -> first_dts
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3 == VAR4 -> VAR5
  ORIGINAL[3]: pktl -> pkt . dts
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: pktl -> pkt
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> first_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pktl -> pkt
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pktl -> pkt
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: dts
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640831
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640683
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481199
FRAGMENT_COUNT: 7
  ORIGINAL[0]: base && strstr(base,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && FUN1 ( VAR1 , \
  ORIGINAL[1]: sep = strstr(buf,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[2]: rel[1] == '/'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ 1 ] == '/'
  ORIGINAL[3]: rel[1]
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 [ 1 ]
  ORIGINAL[4]: sep
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: rel
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: buf
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719478671
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ff_index_search_timestamp((st -> index_entries),st -> nb_index_entries,wanted_timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( VAR1 -> VAR2 ) , VAR1 -> VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: wanted_timestamp
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: flags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771508
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_probe_input_format2(pd,is_opened,&score)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , &score )
  ORIGINAL[1]: &score
  TYPE[1]: CALL
  TOKENIZED[1]: &score
  ORIGINAL[2]: score
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719480283
FRAGMENT_COUNT: 3
  ORIGINAL[0]: s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: iformat
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: s
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640368
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )

CENTER_NODE: 68719477048
FRAGMENT_COUNT: 4
  ORIGINAL[0]: av_get_frame_filename(buf,(sizeof(buf)),filename,1)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( sizeof ( VAR1 ) ) , VAR2 , 1 )
  ORIGINAL[1]: sizeof(buf)
  TYPE[1]: CALL
  TOKENIZED[1]: sizeof ( VAR1 )
  ORIGINAL[2]: filename
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: filename
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640331
FRAGMENT_COUNT: 2
  ORIGINAL[0]: score_ret >  *score_max
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > *score_max
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 47244641180
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640819
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641137
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776215
FRAGMENT_COUNT: 3
  ORIGINAL[0]: av_freep((&st -> probe_data . buf))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( &st -> VAR1 . VAR2 ) )
  ORIGINAL[1]: &st -> probe_data . buf
  TYPE[1]: CALL
  TOKENIZED[1]: &st -> VAR1 . VAR2
  ORIGINAL[2]: st -> probe_data . buf
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 . VAR3

CENTER_NODE: 68719478334
FRAGMENT_COUNT: 10
  ORIGINAL[0]: st -> parser
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: (st -> need_parsing) == AVSTREAM_PARSE_HEADERS
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[2]: st -> need_parsing
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> need_parsing
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> index
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> discard
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: st -> skip_to_keyframe
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: need_parsing
  TYPE[7]: FIELD_IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640834
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776905
FRAGMENT_COUNT: 2
  ORIGINAL[0]: av_gettime() / 1000
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ) / 1000
  ORIGINAL[1]: av_gettime()
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( )

CENTER_NODE: 47244640701
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640841
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773648
FRAGMENT_COUNT: 3
  ORIGINAL[0]: free_packet_buffer(&s -> parse_queue,&s -> parse_queue_end)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( &s -> VAR1 , &s -> VAR2 )
  ORIGINAL[1]: &s -> parse_queue_end
  TYPE[1]: CALL
  TOKENIZED[1]: &s -> VAR1
  ORIGINAL[2]: s -> parse_queue_end
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2

CENTER_NODE: 47244640700
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641177
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773862
FRAGMENT_COUNT: 6
  ORIGINAL[0]: &st -> nb_index_entries
  TYPE[0]: CALL
  TOKENIZED[0]: &st -> VAR1
  ORIGINAL[1]: st -> nb_index_entries
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: nb_index_entries
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481088
FRAGMENT_COUNT: 7
  ORIGINAL[0]: av_strlcatf(str,size,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: proto
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: str
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: proto
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: size
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719476802
FRAGMENT_COUNT: 7
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: stonesoup_tainted_file = fopen(stonesoup_tainted_file_name,\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , \
  ORIGINAL[2]: stonesoup_tainted_file != 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 != 0
  ORIGINAL[3]: stonesoup_tainted_file
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stonesoup_tainted_file
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: stonesoup_tainted_file
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_tainted_file
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244641149
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477535
FRAGMENT_COUNT: 21
  ORIGINAL[0]: *pkt
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt
  ORIGINAL[1]: s -> streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pkt -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: pkt -> data
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pkt -> size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pkt -> flags
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> stream_index
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: pkt -> stream_index
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> stream_index
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> dts
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pkt -> pts
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: pkt -> dts
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: pkt -> pts
  TYPE[12]: CALL
  TOKENIZED[12]: VAR1 -> VAR2
  ORIGINAL[13]: pkt -> size
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: stream_index
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pktl
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: pkt
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: pkt
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: pkt
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: pkt
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1

CENTER_NODE: 30064776293
FRAGMENT_COUNT: 15
  ORIGINAL[0]: *pb = s -> pb
  TYPE[0]: CALL
  TOKENIZED[0]: *pb = VAR1 -> VAR2
  ORIGINAL[1]: s -> pb
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: pb
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pb
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: s
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: s
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: s
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: s
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: s
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244641056
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480900
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt_dump_internal(((void *)0),f,0,pkt,dump_payload,st -> time_base)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( ( void * ) 0 ) , VAR1 , 0 , VAR2 , VAR3 , VAR4 -> VAR5 )
  ORIGINAL[1]: pkt
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771187
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !('h' >= 100)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( 'h' >= 100 )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0

CENTER_NODE: 30064775157
FRAGMENT_COUNT: 4
  ORIGINAL[0]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[1]: c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \
  ORIGINAL[2]: (c -> codec_id) == AV_CODEC_ID_H264
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[3]: if (c -> time_base . den >= 101L * c -> time_base . num || c -> time_base . den < 5L * c -> time_base . num || c -> codec_tag == ((const union unaligned_32 *)\
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: if ( VAR1 -> VAR2 . VAR3 >= 101L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR2 . VAR3 < 5L * VAR1 -> VAR2 . VAR4 || VAR1 -> VAR5 == ( ( const union VAR6 * ) \

CENTER_NODE: 47244641037
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777209
FRAGMENT_COUNT: 6
  ORIGINAL[0]: p += strspn(p,\
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 += FUN1 ( VAR1 , \
  ORIGINAL[1]: strspn(p,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: c >= 48 && c <= '9'
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 >= 48 && VAR1 <= '9'
  ORIGINAL[3]: c >= 'A' && c <= 'F'
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 >= 'A' && VAR1 <= 'F'
  ORIGINAL[4]: p
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: p
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641194
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476937
FRAGMENT_COUNT: 10
  ORIGINAL[0]: fmt -> name
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt -> mime_type
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: fmt -> mime_type
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: fmt -> extensions
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: fmt -> extensions
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: extensions
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: fmt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: filename
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: fmt
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640564
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479657
FRAGMENT_COUNT: 5
  ORIGINAL[0]: tags[i]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ]
  ORIGINAL[1]: tags[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: tags
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641188
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479538
FRAGMENT_COUNT: 3
  ORIGINAL[0]: st -> codec -> codec_type
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: AVMEDIA_TYPE_VIDEO
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640820
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481176
FRAGMENT_COUNT: 5
  ORIGINAL[0]: dest < dest_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: dest_end
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dest
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dest
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: dest_end
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480227
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: ic -> streams[real_stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: ic -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: real_stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: real_stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481030
FRAGMENT_COUNT: 6
  ORIGINAL[0]: i < s
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: src[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 ]
  ORIGINAL[2]: src[i]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 ]
  ORIGINAL[3]: hex_table
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: src
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: i
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719481265
FRAGMENT_COUNT: 4
  ORIGINAL[0]: ofmt -> query_codec
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: ofmt -> query_codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: query_codec
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ofmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064777765
FRAGMENT_COUNT: 5
  ORIGINAL[0]: len_p > len_h
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2
  ORIGINAL[1]: !strcmp(pattern,&hostname[len_h - len_p])
  TYPE[1]: CALL
  TOKENIZED[1]: !strcmp ( VAR1 , &hostname [ VAR2 - VAR3 ] )
  ORIGINAL[2]: strcmp(pattern,&hostname[len_h - len_p])
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &hostname [ VAR2 - VAR3 ] )
  ORIGINAL[3]: &hostname[len_h - len_p]
  TYPE[3]: CALL
  TOKENIZED[3]: &hostname [ VAR1 - VAR2 ]
  ORIGINAL[4]: pattern
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771193
FRAGMENT_COUNT: 2
  ORIGINAL[0]: \
  TYPE[0]: CALL
  TOKENIZED[0]: \
  ORIGINAL[1]: \
  TYPE[1]: CALL
  TOKENIZED[1]: \

CENTER_NODE: 47244640712
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640800
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640671
FRAGMENT_COUNT: 0

CENTER_NODE: 30064773869
FRAGMENT_COUNT: 5
  ORIGINAL[0]: b && entries[b - 1] . timestamp < wanted_timestamp
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR2 [ VAR1 - 1 ] . VAR3 < VAR4
  ORIGINAL[1]: entries[b - 1] . timestamp < wanted_timestamp
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ VAR2 - 1 ] . VAR3 < VAR4
  ORIGINAL[2]: entries[b - 1] . timestamp
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 [ VAR2 - 1 ] . VAR3
  ORIGINAL[3]: b
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: wanted_timestamp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640844
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477023
FRAGMENT_COUNT: 3
  ORIGINAL[0]: pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: size
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pkt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640545
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640921
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244641163
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640587
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777545
FRAGMENT_COUNT: 4
  ORIGINAL[0]: frame_sample_aspect_ratio = frame?frame -> sample_aspect_ratio : codec_sample_aspect_ratio
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = frame?frame -> VAR2 : VAR3
  ORIGINAL[1]: frame?frame -> sample_aspect_ratio : codec_sample_aspect_ratio
  TYPE[1]: CALL
  TOKENIZED[1]: frame?frame -> VAR1 : VAR2
  ORIGINAL[2]: frame_sample_aspect_ratio
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_sample_aspect_ratio
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771114
FRAGMENT_COUNT: 5
  ORIGINAL[0]: filepath != NULL
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != VAR2
  ORIGINAL[1]: sprintf(filepath, \
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: filepath
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: dirpath
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: <global> stonesoup_printf_context
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: <global> VAR1

CENTER_NODE: 30064773741
FRAGMENT_COUNT: 7
  ORIGINAL[0]: i < s -> nb_streams
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: st -> time_base . den
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: st -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: time_base
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: den
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640675
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641154
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641057
FRAGMENT_COUNT: 0

CENTER_NODE: 30064774157
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st = s -> streams[stream_index]
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[1]: s -> streams[stream_index]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> streams
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641309
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476823
FRAGMENT_COUNT: 3
  ORIGINAL[0]: tracepoint(stonesoup_trace, trace_location, \
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[1]: modulus_param_str[0]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 0 ]
  ORIGINAL[2]: modulus_param_str
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719481123
FRAGMENT_COUNT: 6
  ORIGINAL[0]: pkt -> duration
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: local_pkt . duration = (av_rescale_q((pkt -> duration),src -> streams[pkt -> stream_index] -> time_base,dst -> streams[dst_stream] -> time_base))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2 = ( FUN1 ( ( VAR3 -> VAR2 ) , VAR4 -> VAR5 [ VAR3 -> VAR6 ] -> VAR7 , VAR8 -> VAR5 [ VAR9 ] -> VAR7 ) )
  ORIGINAL[2]: av_write_frame(dst,&local_pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , &local_pkt )
  ORIGINAL[3]: &local_pkt
  TYPE[3]: CALL
  TOKENIZED[3]: &local_pkt
  ORIGINAL[4]: dst
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: local_pkt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640828
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641067
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477602
FRAGMENT_COUNT: 3
  ORIGINAL[0]: (avctx -> codec_id) == AV_CODEC_ID_MP1
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR3
  ORIGINAL[1]: avctx -> codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: AV_CODEC_ID_MP1
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477856
FRAGMENT_COUNT: 12
  ORIGINAL[0]: st -> start_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> start_time
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: update_wrap_reference(s,st,stream_index) && st -> pts_wrap_behavior == - 1
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 ) && VAR2 -> VAR4 == - 1
  ORIGINAL[3]: st -> pts_wrap_behavior
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> first_dts
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> cur_dts
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: pkt -> dts
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: wrap_timestamp(st,pkt -> dts)
  TYPE[7]: CALL
  TOKENIZED[7]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: st
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: pkt
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: st
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1

CENTER_NODE: 47244640544
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771679
FRAGMENT_COUNT: 3
  ORIGINAL[0]: !( *fmt)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *fmt )
  ORIGINAL[1]: -((int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24))
  TYPE[1]: CALL
  TOKENIZED[1]: - ( ( int ) ( ( 'I' | 'N' << 8 | 'D' << 16 ) | ( ( unsigned int ) 'A' ) << 24 ) )
  ORIGINAL[2]: (int )(('I' | 'N' << 8 | 'D' << 16) | ((unsigned int )'A') << 24)
  TYPE[2]: CALL
  TOKENIZED[2]: ( int ) ( ( 'I' | 'N' << 8 | 'D' << 16 ) | ( ( unsigned int ) 'A' ) << 24 )

CENTER_NODE: 47244641184
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480341
FRAGMENT_COUNT: 15
  ORIGINAL[0]: s -> iformat
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: s -> priv_data
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: s -> priv_data
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: s -> nb_streams
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: s -> nb_programs
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: s -> programs
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: s -> priv_data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: s -> nb_chapters--
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> nb_chapters--
  ORIGINAL[8]: s -> nb_chapters
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: av_dict_free(&s -> chapters[s -> nb_chapters] -> metadata)
  TYPE[9]: CALL
  TOKENIZED[9]: FUN1 ( &s -> VAR1 [ VAR2 -> VAR3 ] -> VAR4 )
  ORIGINAL[10]: s -> chapters
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2
  ORIGINAL[11]: chapters
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: s
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: s
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: s
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1

CENTER_NODE: 47244640284
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064771740
FRAGMENT_COUNT: 4
  ORIGINAL[0]: *pktl = (av_mallocz(sizeof(AVPacketList )))
  TYPE[0]: CALL
  TOKENIZED[0]: *pktl = ( FUN1 ( sizeof ( VAR1 ) ) )
  ORIGINAL[1]: av_mallocz(sizeof(AVPacketList ))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( sizeof ( VAR1 ) )
  ORIGINAL[2]: pktl
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pktl
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774837
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !avctx -> frame_size && determinable_frame_size(avctx)
  TYPE[0]: CALL
  TOKENIZED[0]: !avctx -> VAR1 && FUN1 ( VAR2 )
  ORIGINAL[1]: st -> info -> found_decoder
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[2]: st -> info
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: info
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: found_decoder
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: st
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064771191
FRAGMENT_COUNT: 3
  ORIGINAL[0]: '6' << 16 | 63 << 8
  TYPE[0]: CALL
  TOKENIZED[0]: '6' << 16 | 63 << 8
  ORIGINAL[1]: '6' << 16
  TYPE[1]: CALL
  TOKENIZED[1]: '6' << 16
  ORIGINAL[2]: 63 << 8
  TYPE[2]: CALL
  TOKENIZED[2]: 63 << 8

CENTER_NODE: 30064777621
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: (s -> streams[i] -> codec -> codec_type) == type && index-- == 0
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 [ VAR3 ] -> VAR4 -> VAR5 ) == VAR6 && index-- == 0
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719481461
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !size
  TYPE[0]: CALL
  TOKENIZED[0]: !size
  ORIGINAL[1]: av_freep((&st -> codec -> extradata))
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( &st -> VAR1 -> VAR2 ) )
  ORIGINAL[2]: st -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: codec
  TYPE[3]: FIELD_IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: st
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640670
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479258
FRAGMENT_COUNT: 4
  ORIGINAL[0]: update_stream_timings(ic)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: i = 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = 0
  ORIGINAL[2]: i
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719481319
FRAGMENT_COUNT: 1
  ORIGINAL[0]: ff_codec_bmp_tags
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064777065
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: fprintf(f,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , \
  ORIGINAL[2]: pkt -> size
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: f
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064773782
FRAGMENT_COUNT: 2
  ORIGINAL[0]: (((unsigned int )( *nb_index_entries)) + 1) >= (2147483647 * 2U + 1U) / sizeof(AVIndexEntry )
  TYPE[0]: CALL
  TOKENIZED[0]: ( ( ( unsigned int ) ( *nb_index_entries ) ) + 1 ) >= ( 2147483647 * 2U + 1U ) / sizeof ( VAR1 )
  ORIGINAL[1]: - 1
  TYPE[1]: CALL
  TOKENIZED[1]: - 1

CENTER_NODE: 30064771196
FRAGMENT_COUNT: 3
  ORIGINAL[0]: ts > 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[1]: 9223372036854775807L - (1LL << 48) - (1LL << 48)
  TYPE[1]: CALL
  TOKENIZED[1]: 9223372036854775807L - ( 1LL << 48 ) - ( 1LL << 48 )
  ORIGINAL[2]: ts
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640725
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 30064777395
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i++
  TYPE[0]: CALL
  TOKENIZED[0]: i++
  ORIGINAL[1]: s -> streams[i] -> id == id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 == VAR4
  ORIGINAL[2]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[2]: CONTROL_STRUCTURE
  TOKENIZED[2]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064771392
FRAGMENT_COUNT: 25
  ORIGINAL[0]: ret < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0
  ORIGINAL[1]: pkt -> pos = avio_tell(s)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = FUN1 ( VAR3 )
  ORIGINAL[2]: pkt -> pos
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: avio_tell(s)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 )
  ORIGINAL[4]: ret = avio_read(s,pkt -> data,size)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 = FUN1 ( VAR2 , VAR3 -> VAR4 , VAR5 )
  ORIGINAL[5]: avio_read(s,pkt -> data,size)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , VAR2 -> VAR3 , VAR4 )
  ORIGINAL[6]: pkt -> data
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: ret <= 0
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 <= 0
  ORIGINAL[8]: pkt -> size < orig_size
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2 < VAR3
  ORIGINAL[9]: pkt -> size
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: pos
  TYPE[10]: FIELD_IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: data
  TYPE[11]: FIELD_IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: size
  TYPE[12]: FIELD_IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: ret
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: ret
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: pkt
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: s
  TYPE[16]: IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: ret
  TYPE[17]: IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: s
  TYPE[18]: IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: size
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: ret
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: pkt
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: orig_size
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: ret
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1

CENTER_NODE: 47244640848
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478152
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *pkt_buf
  TYPE[0]: CALL
  TOKENIZED[0]: *pkt_buf
  ORIGINAL[1]: *pktl =  *pkt_buf
  TYPE[1]: CALL
  TOKENIZED[1]: *pktl = *pkt_buf
  ORIGINAL[2]: *pkt_buf
  TYPE[2]: CALL
  TOKENIZED[2]: *pkt_buf
  ORIGINAL[3]: *pkt_buf
  TYPE[3]: CALL
  TOKENIZED[3]: *pkt_buf
  ORIGINAL[4]: pkt_buf
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640643
FRAGMENT_COUNT: 4
  ORIGINAL[0]: i = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = 0
  ORIGINAL[1]: i < s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2 -> VAR3
  ORIGINAL[2]: i++
  TYPE[2]: CALL
  TOKENIZED[2]: i++
  ORIGINAL[3]: for (i = 0;i < s -> nb_streams;i++)
  TYPE[3]: CONTROL_STRUCTURE
  TOKENIZED[3]: for ( VAR1 = 0 ; VAR1 < VAR2 -> VAR3 ; i++ )

CENTER_NODE: 68719478819
FRAGMENT_COUNT: 8
  ORIGINAL[0]: ts_max == ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[1]: tmp_ts = ff_read_timestamp(s,stream_index,&tmp_pos,9223372036854775807L,read_timestamp)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 , VAR3 , &tmp_pos , 9223372036854775807L , VAR4 )
  ORIGINAL[2]: tmp_ts == ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 == ( ( VAR2 ) 0x8000000000000000UL )
  ORIGINAL[3]: (int64_t )0x8000000000000000UL
  TYPE[3]: CALL
  TOKENIZED[3]: ( VAR1 ) 0x8000000000000000UL
  ORIGINAL[4]: tmp_pos >= filesize
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 >= VAR2
  ORIGINAL[5]: tmp_ts
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: tmp_ts
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: tmp_ts
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771300
FRAGMENT_COUNT: 6
  ORIGINAL[0]: p = (strchr(names,','))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , ' , ' ) )
  ORIGINAL[1]: !av_strncasecmp(name,names,len)
  TYPE[1]: CALL
  TOKENIZED[1]: !av_strncasecmp ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[2]: av_strncasecmp(name,names,len)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[3]: name
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: names
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: len
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064773309
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !( *pkt_buffer)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( *pkt_buffer )
  ORIGINAL[1]: av_log(((void *)0),0,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , 0 , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: abort()
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( )

CENTER_NODE: 47244641142
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477420
FRAGMENT_COUNT: 28
  ORIGINAL[0]: st -> request_probe > 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 > 0
  ORIGINAL[1]: --st -> probe_packets
  TYPE[1]: CALL
  TOKENIZED[1]: --st -> VAR1
  ORIGINAL[2]: *new_buf = (av_realloc((pd -> buf),(pd -> buf_size + pkt -> size + 32)))
  TYPE[2]: CALL
  TOKENIZED[2]: *new_buf = ( FUN1 ( ( VAR1 -> VAR2 ) , ( VAR1 -> VAR3 + VAR4 -> VAR5 + 32 ) ) )
  ORIGINAL[3]: av_realloc((pd -> buf),(pd -> buf_size + pkt -> size + 32))
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( ( VAR1 -> VAR2 ) , ( VAR1 -> VAR3 + VAR4 -> VAR5 + 32 ) )
  ORIGINAL[4]: pd -> buf
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pd -> buf_size + pkt -> size + 32
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2 + VAR3 -> VAR4 + 32
  ORIGINAL[6]: pd -> buf_size + pkt -> size
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2 + VAR3 -> VAR4
  ORIGINAL[7]: pd -> buf_size
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> size
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: !new_buf
  TYPE[9]: CALL
  TOKENIZED[9]: !new_buf
  ORIGINAL[10]: st -> probe_packets = 0
  TYPE[10]: CALL
  TOKENIZED[10]: VAR1 -> VAR2 = 0
  ORIGINAL[11]: st -> probe_packets
  TYPE[11]: CALL
  TOKENIZED[11]: VAR1 -> VAR2
  ORIGINAL[12]: !pd -> buf_size
  TYPE[12]: CALL
  TOKENIZED[12]: !pd -> VAR1
  ORIGINAL[13]: pd -> buf_size
  TYPE[13]: CALL
  TOKENIZED[13]: VAR1 -> VAR2
  ORIGINAL[14]: buf
  TYPE[14]: FIELD_IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: buf_size
  TYPE[15]: FIELD_IDENTIFIER
  TOKENIZED[15]: VAR1
  ORIGINAL[16]: size
  TYPE[16]: FIELD_IDENTIFIER
  TOKENIZED[16]: VAR1
  ORIGINAL[17]: probe_packets
  TYPE[17]: FIELD_IDENTIFIER
  TOKENIZED[17]: VAR1
  ORIGINAL[18]: buf_size
  TYPE[18]: FIELD_IDENTIFIER
  TOKENIZED[18]: VAR1
  ORIGINAL[19]: pkt
  TYPE[19]: IDENTIFIER
  TOKENIZED[19]: VAR1
  ORIGINAL[20]: new_buf
  TYPE[20]: IDENTIFIER
  TOKENIZED[20]: VAR1
  ORIGINAL[21]: pd
  TYPE[21]: IDENTIFIER
  TOKENIZED[21]: VAR1
  ORIGINAL[22]: pd
  TYPE[22]: IDENTIFIER
  TOKENIZED[22]: VAR1
  ORIGINAL[23]: pkt
  TYPE[23]: IDENTIFIER
  TOKENIZED[23]: VAR1
  ORIGINAL[24]: new_buf
  TYPE[24]: IDENTIFIER
  TOKENIZED[24]: VAR1
  ORIGINAL[25]: st
  TYPE[25]: IDENTIFIER
  TOKENIZED[25]: VAR1
  ORIGINAL[26]: pd
  TYPE[26]: IDENTIFIER
  TOKENIZED[26]: VAR1
  ORIGINAL[27]: end
  TYPE[27]: IDENTIFIER
  TOKENIZED[27]: VAR1

CENTER_NODE: 68719480817
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !f
  TYPE[0]: CALL
  TOKENIZED[0]: !f
  ORIGINAL[1]: av_log(avcl,level,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , \
  ORIGINAL[2]: c
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: c
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: c
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: avcl
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: level
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: c
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: c
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719479050
FRAGMENT_COUNT: 8
  ORIGINAL[0]: !(s -> iformat -> flags & 0x4000)
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 -> VAR3 & 0x4000 )
  ORIGINAL[1]: seek_frame_generic(s,stream_index,timestamp,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: stream_index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: stream_index
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stream_index
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: timestamp
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641240
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640276
FRAGMENT_COUNT: 2
  ORIGINAL[0]: else
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: else
  ORIGINAL[1]: f
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064776034
FRAGMENT_COUNT: 6
  ORIGINAL[0]: j < ic -> programs[i] -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[1]: ic -> programs[i] -> stream_index[j] == s
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ] == VAR6
  ORIGINAL[2]: ic -> programs[i] -> stream_index[j]
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ]
  ORIGINAL[3]: ic -> programs[i] -> stream_index
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244641294
FRAGMENT_COUNT: 1
  ORIGINAL[0]: sample_rate
  TYPE[0]: IDENTIFIER
  TOKENIZED[0]: VAR1

CENTER_NODE: 30064772214
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !mux && enc -> frame_size > 1
  TYPE[0]: CALL
  TOKENIZED[0]: !mux && VAR1 -> VAR2 > 1
  ORIGINAL[1]: !mux
  TYPE[1]: CALL
  TOKENIZED[1]: !mux
  ORIGINAL[2]: enc -> frame_size > 1
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 > 1
  ORIGINAL[3]: enc -> frame_size
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: frame_size
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: mux
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: enc
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640563
FRAGMENT_COUNT: 0

CENTER_NODE: 68719478676
FRAGMENT_COUNT: 5
  ORIGINAL[0]: read_timestamp(s,stream_index,ppos,pos_limit)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: s
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: stream_index
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: ppos
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pos_limit
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776921
FRAGMENT_COUNT: 5
  ORIGINAL[0]: av_isdigit(( *p))
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( *p ) )
  ORIGINAL[1]: nd = nd * '\\n' + ( *(p++)) - 48
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[2]: nd * '\\n' + ( *(p++)) - 48
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 * '\\n' + ( * ( p++ ) ) - 48
  ORIGINAL[3]: nd * '\\n' + ( *(p++))
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 * '\\n' + ( * ( p++ ) )
  ORIGINAL[4]: nd
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064772372
FRAGMENT_COUNT: 4
  ORIGINAL[0]: pktl == s -> parse_queue_end
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2 -> VAR3
  ORIGINAL[1]: s -> packet_buffer
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: packet_buffer
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640534
FRAGMENT_COUNT: 1
  ORIGINAL[0]: pc && (st -> need_parsing) == AVSTREAM_PARSE_TIMESTAMPS && pkt -> size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && ( VAR2 -> VAR3 ) == VAR4 && VAR5 -> VAR6

CENTER_NODE: 47244640362
FRAGMENT_COUNT: 1
  ORIGINAL[0]: s -> iformat && s -> iformat -> flags & 0x1 || !s -> iformat && (s -> iformat = av_probe_input_format2(&pd,0,&score))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 && VAR1 -> VAR2 -> VAR3 & 0x1 || !s -> VAR2 && ( VAR1 -> VAR2 = FUN1 ( &pd , 0 , &score ) )

CENTER_NODE: 30064776377
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !(st -> info = (av_mallocz(sizeof(( *st -> info)))))
  TYPE[0]: CALL
  TOKENIZED[0]: ! ( VAR1 -> VAR2 = ( FUN1 ( sizeof ( ( *st -> VAR2 ) ) ) ) )
  ORIGINAL[1]: st -> probe_packets = 2500
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 = 2500
  ORIGINAL[2]: st -> probe_packets
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064774293
FRAGMENT_COUNT: 7
  ORIGINAL[0]: ret = seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = FUN1 ( VAR2 , VAR3 , VAR4 , VAR5 )
  ORIGINAL[1]: seek_frame_internal(s,stream_index,timestamp,flags)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[2]: ret
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: stream_index
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: flags
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 68719480449
FRAGMENT_COUNT: 5
  ORIGINAL[0]: i < s -> nb_chapters
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3
  ORIGINAL[1]: s -> chapters[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ]
  ORIGINAL[2]: s -> chapters
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: i
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: i
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776643
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> sample_aspect_ratio . num && av_cmp_q(st -> sample_aspect_ratio,st -> codec -> sample_aspect_ratio)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 && FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR4 -> VAR2 )
  ORIGINAL[1]: st -> sample_aspect_ratio . num
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: av_cmp_q(st -> sample_aspect_ratio,st -> codec -> sample_aspect_ratio)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR3 -> VAR2 )
  ORIGINAL[3]: st -> sample_aspect_ratio
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec -> sample_aspect_ratio
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 -> VAR3

CENTER_NODE: 30064773664
FRAGMENT_COUNT: 10
  ORIGINAL[0]: s -> nb_streams <= 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 <= 0
  ORIGINAL[1]: s -> nb_streams
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: - 1
  TYPE[2]: CALL
  TOKENIZED[2]: - 1
  ORIGINAL[3]: i = 0
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 = 0
  ORIGINAL[4]: i < s -> nb_streams
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 < VAR2 -> VAR3
  ORIGINAL[5]: s -> nb_streams
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: nb_streams
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: i
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: i
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: s
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 30064775053
FRAGMENT_COUNT: 5
  ORIGINAL[0]: tags[i] . id != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ VAR2 ] . VAR3 != VAR4
  ORIGINAL[1]: avpriv_toupper4(tag) == avpriv_toupper4(tags[i] . tag)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 ) == FUN1 ( VAR2 [ VAR3 ] . VAR1 )
  ORIGINAL[2]: avpriv_toupper4(tag)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 )
  ORIGINAL[3]: avpriv_toupper4(tags[i] . tag)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 [ VAR2 ] . VAR3 )
  ORIGINAL[4]: tags[i] . tag
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 [ VAR2 ] . VAR3

CENTER_NODE: 68719479172
FRAGMENT_COUNT: 9
  ORIGINAL[0]: st -> start_time
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> time_base
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: st -> duration != ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[3]: st -> duration
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> duration
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: st -> time_base
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 -> VAR2
  ORIGINAL[6]: time_base
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: st
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: st
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064774778
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (!strcmp(ic -> iformat -> name,\
  TYPE[0]: CALL
  TOKENIZED[0]: ( !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[1]: (!strcmp(ic -> iformat -> name,\
  TYPE[1]: CALL
  TOKENIZED[1]: ( !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[2]: !strcmp(ic -> iformat -> name,\
  TYPE[2]: CALL
  TOKENIZED[2]: !strcmp ( VAR1 -> VAR2 -> VAR3 , \
  ORIGINAL[3]: ic -> pb -> seekable
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[4]: ic -> pb
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: pb
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: seekable
  TYPE[6]: FIELD_IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: file_size
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ic
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719480532
FRAGMENT_COUNT: 9
  ORIGINAL[0]: strcmp(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: *p = (tag -> value)
  TYPE[1]: CALL
  TOKENIZED[1]: *p = ( VAR1 -> VAR2 )
  ORIGINAL[2]: av_log(ctx,32,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 32 , \
  ORIGINAL[3]: tag -> key
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ctx
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ctx
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: indent
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ctx
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ctx
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 30064772272
FRAGMENT_COUNT: 5
  ORIGINAL[0]: st -> time_base . num * 1000LL > st -> time_base . den
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 . VAR3 * 1000LL > VAR1 -> VAR2 . VAR4
  ORIGINAL[1]: *pnum = st -> time_base . num
  TYPE[1]: CALL
  TOKENIZED[1]: *pnum = VAR1 -> VAR2 . VAR3
  ORIGINAL[2]: *pnum
  TYPE[2]: CALL
  TOKENIZED[2]: *pnum
  ORIGINAL[3]: st -> time_base . num
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 . VAR3
  ORIGINAL[4]: pden
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640837
FRAGMENT_COUNT: 0

CENTER_NODE: 30064777466
FRAGMENT_COUNT: 3
  ORIGINAL[0]: time2 = {(0)}
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = { ( 0 ) }
  ORIGINAL[1]: {(0)}
  TYPE[1]: CALL
  TOKENIZED[1]: { ( 0 ) }
  ORIGINAL[2]: time2
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064773505
FRAGMENT_COUNT: 7
  ORIGINAL[0]: !genpts
  TYPE[0]: CALL
  TOKENIZED[0]: !genpts
  ORIGINAL[1]: ret = (s -> packet_buffer?read_from_packet_buffer(&s -> packet_buffer,&s -> packet_buffer_end,pkt) : read_frame_internal(s,pkt))
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = ( VAR2 -> packet_buffer?read_from_packet_buffer ( &s -> VAR3 , &s -> VAR4 , VAR5 ) : FUN1 ( VAR2 , VAR5 ) )
  ORIGINAL[2]: s -> packet_buffer?read_from_packet_buffer(&s -> packet_buffer,&s -> packet_buffer_end,pkt) : read_frame_internal(s,pkt)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> packet_buffer?read_from_packet_buffer ( &s -> VAR2 , &s -> VAR3 , VAR4 ) : FUN1 ( VAR1 , VAR4 )
  ORIGINAL[3]: s -> packet_buffer
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: read_from_packet_buffer(&s -> packet_buffer,&s -> packet_buffer_end,pkt)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( &s -> VAR1 , &s -> VAR2 , VAR3 )
  ORIGINAL[5]: read_frame_internal(s,pkt)
  TYPE[5]: CALL
  TOKENIZED[5]: FUN1 ( VAR1 , VAR2 )
  ORIGINAL[6]: ret
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 47244640678
FRAGMENT_COUNT: 0

CENTER_NODE: 68719480698
FRAGMENT_COUNT: 5
  ORIGINAL[0]: k < ic -> programs[j] -> nb_stream_indexes
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2 -> VAR3 [ VAR4 ] -> VAR5
  ORIGINAL[1]: ic -> programs[j] -> stream_index[k]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 [ VAR5 ]
  ORIGINAL[2]: ic -> programs[j] -> stream_index
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 [ VAR3 ] -> VAR4
  ORIGINAL[3]: k
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: k
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719480907
FRAGMENT_COUNT: 4
  ORIGINAL[0]: st -> time_base
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: time_base
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: dump_payload
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: st
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479577
FRAGMENT_COUNT: 4
  ORIGINAL[0]: (tags -> id) == id
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[1]: tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: tags++
  TYPE[2]: CALL
  TOKENIZED[2]: tags++
  ORIGINAL[3]: tags
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479617
FRAGMENT_COUNT: 5
  ORIGINAL[0]: be?AV_CODEC_ID_PCM_S24BE : AV_CODEC_ID_PCM_S24LE
  TYPE[0]: CALL
  TOKENIZED[0]: be?AV_CODEC_ID_PCM_S24BE : VAR1
  ORIGINAL[1]: bps
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: be
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AV_CODEC_ID_PCM_S24BE
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AV_CODEC_ID_PCM_S24LE
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244641160
FRAGMENT_COUNT: 0

CENTER_NODE: 68719479065
FRAGMENT_COUNT: 4
  ORIGINAL[0]: min_ts > ts || max_ts < ts
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > VAR2 || VAR3 < VAR2
  ORIGINAL[1]: s -> seek2any
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: seek2any
  TYPE[2]: FIELD_IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640857
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641191
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640711
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477066
FRAGMENT_COUNT: 8
  ORIGINAL[0]: lpd . buf_size > id3len + 16
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 . VAR2 > VAR3 + 16
  ORIGINAL[1]: lpd . buf_size
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 . VAR2
  ORIGINAL[2]: lpd . buf += id3len
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 . VAR2 += VAR3
  ORIGINAL[3]: lpd . buf
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 . VAR2
  ORIGINAL[4]: lpd . buf_size
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 . VAR2
  ORIGINAL[5]: buf_size
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: lpd
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: lpd
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 47244641157
FRAGMENT_COUNT: 0

CENTER_NODE: 68719481501
FRAGMENT_COUNT: 6
  ORIGINAL[0]: strspn(start,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: start
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: start
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: start
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: start
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: start
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 68719480493
FRAGMENT_COUNT: 5
  ORIGINAL[0]: ac -> programs[i] -> id != progid
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 [ VAR3 ] -> VAR4 != VAR5
  ORIGINAL[1]: program = ac -> programs[i]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 -> VAR3 [ VAR4 ]
  ORIGINAL[2]: j = 0
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 = 0
  ORIGINAL[3]: j
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: j
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719476957
FRAGMENT_COUNT: 6
  ORIGINAL[0]: type == AVMEDIA_TYPE_VIDEO
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: type == AVMEDIA_TYPE_AUDIO
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 == VAR2
  ORIGINAL[2]: type
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: type
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: AVMEDIA_TYPE_AUDIO
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: type
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 47244640822
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640620
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640807
FRAGMENT_COUNT: 2
  ORIGINAL[0]: st -> start_time != ((int64_t )0x8000000000000000UL)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 != ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[1]: else
  TYPE[1]: CONTROL_STRUCTURE
  TOKENIZED[1]: else

CENTER_NODE: 68719480829
FRAGMENT_COUNT: 4
  ORIGINAL[0]: hex_dump_internal(avcl,((void *)0),level,buf,size)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , ( ( void * ) 0 ) , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: level
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: buf
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: size
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064776549
FRAGMENT_COUNT: 3
  ORIGINAL[0]: v % 100
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 % 100
  ORIGINAL[1]: v % (100 * 1000)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 % ( 100 * 1000 )
  ORIGINAL[2]: 100 * 1000
  TYPE[2]: CALL
  TOKENIZED[2]: 100 * 1000

CENTER_NODE: 68719476969
FRAGMENT_COUNT: 4
  ORIGINAL[0]: match_format(short_name,fmt -> name)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 -> VAR3 )
  ORIGINAL[1]: fmt -> name
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: fmt
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: fmt
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641169
FRAGMENT_COUNT: 0

CENTER_NODE: 30064775082
FRAGMENT_COUNT: 16
  ORIGINAL[0]: (codec_tags -> id) != AV_CODEC_ID_NONE
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 ) != VAR3
  ORIGINAL[1]: codec_tags -> id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: (codec_tags -> id) == id
  TYPE[2]: CALL
  TOKENIZED[2]: ( VAR1 -> VAR2 ) == VAR2
  ORIGINAL[3]: codec_tags -> id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: *tag = codec_tags -> tag
  TYPE[4]: CALL
  TOKENIZED[4]: *tag = VAR1 -> VAR2
  ORIGINAL[5]: *tag
  TYPE[5]: CALL
  TOKENIZED[5]: *tag
  ORIGINAL[6]: codec_tags -> tag
  TYPE[6]: CALL
  TOKENIZED[6]: VAR1 -> VAR2
  ORIGINAL[7]: codec_tags++
  TYPE[7]: CALL
  TOKENIZED[7]: codec_tags++
  ORIGINAL[8]: id
  TYPE[8]: FIELD_IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: tag
  TYPE[9]: FIELD_IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: codec_tags
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: AV_CODEC_ID_NONE
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: id
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1
  ORIGINAL[13]: tag
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: codec_tags
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: codec_tags
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 30064771384
FRAGMENT_COUNT: 7
  ORIGINAL[0]: s -> maxsize >= 0 && remaining + 1 < size
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 >= 0 && VAR3 + 1 < VAR4
  ORIGINAL[1]: av_log(((void *)0),(remaining?16 : 48),\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( ( ( void * ) 0 ) , ( remaining?16 : 48 ) , \
  ORIGINAL[2]: (void *)0
  TYPE[2]: CALL
  TOKENIZED[2]: ( void * ) 0
  ORIGINAL[3]: remaining?16 : 48
  TYPE[3]: CALL
  TOKENIZED[3]: remaining?16 : 48
  ORIGINAL[4]: remaining + 1
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 + 1
  ORIGINAL[5]: size
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: remaining
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771515
FRAGMENT_COUNT: 4
  ORIGINAL[0]: {{(\
  TYPE[0]: CALL
  TOKENIZED[0]: { { ( \
  ORIGINAL[1]: {(\
  TYPE[1]: CALL
  TOKENIZED[1]: { ( \
  ORIGINAL[2]: AV_CODEC_ID_H264
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: AVMEDIA_TYPE_VIDEO
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719479639
FRAGMENT_COUNT: 4
  ORIGINAL[0]: !av_codec_get_tag2(tags,id,&tag)
  TYPE[0]: CALL
  TOKENIZED[0]: !av_codec_get_tag2 ( VAR1 , VAR2 , &tag )
  ORIGINAL[1]: &tag
  TYPE[1]: CALL
  TOKENIZED[1]: &tag
  ORIGINAL[2]: tag
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: tag
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244641221
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 47244640825
FRAGMENT_COUNT: 0

CENTER_NODE: 30064776156
FRAGMENT_COUNT: 4
  ORIGINAL[0]: s -> iformat -> read_pause
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[1]: (s -> iformat -> read_pause)(s)
  TYPE[1]: CALL
  TOKENIZED[1]: ( VAR1 -> VAR2 -> VAR3 ) ( VAR1 )
  ORIGINAL[2]: s -> iformat -> read_pause
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640690
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719479684
FRAGMENT_COUNT: 9
  ORIGINAL[0]: (AVRational ){(1), (1000000)}
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 ) { ( 1 ) , ( 1000000 ) }
  ORIGINAL[1]: ch -> time_base
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: ch -> time_base
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: ch -> end
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: ch -> start
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: time_base
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ch
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: max_time
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: ch
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244641117
FRAGMENT_COUNT: 1
  ORIGINAL[0]: for (;;)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: for ( ; ; )

CENTER_NODE: 68719477677
FRAGMENT_COUNT: 6
  ORIGINAL[0]: !desc
  TYPE[0]: CALL
  TOKENIZED[0]: !desc
  ORIGINAL[1]: desc = avcodec_descriptor_get(enc -> codec_id)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 )
  ORIGINAL[2]: avcodec_descriptor_get(enc -> codec_id)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 )
  ORIGINAL[3]: desc
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: enc
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: desc
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

CENTER_NODE: 30064775279
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !st -> codec -> codec
  TYPE[0]: CALL
  TOKENIZED[0]: !st -> VAR1 -> VAR1
  ORIGINAL[1]: codec && !st -> codec -> codec
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 && !st -> VAR1 -> VAR1
  ORIGINAL[2]: !st -> codec -> codec
  TYPE[2]: CALL
  TOKENIZED[2]: !st -> VAR1 -> VAR1
  ORIGINAL[3]: st -> codec -> codec
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2 -> VAR2
  ORIGINAL[4]: codec
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 30064776458
FRAGMENT_COUNT: 9
  ORIGINAL[0]: !program
  TYPE[0]: CALL
  TOKENIZED[0]: !program
  ORIGINAL[1]: !program
  TYPE[1]: CALL
  TOKENIZED[1]: !program
  ORIGINAL[2]: program -> start_time = program -> end_time = ((int64_t )0x8000000000000000UL)
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 = VAR1 -> VAR3 = ( ( VAR4 ) 0x8000000000000000UL )
  ORIGINAL[3]: program -> start_time
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: program -> end_time = ((int64_t )0x8000000000000000UL)
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2 = ( ( VAR3 ) 0x8000000000000000UL )
  ORIGINAL[5]: start_time
  TYPE[5]: FIELD_IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: program
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: program
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: program
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719480964
FRAGMENT_COUNT: 8
  ORIGINAL[0]: at = (strchr(p,'@'))
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( FUN1 ( VAR2 , '@' ) )
  ORIGINAL[1]: at < ls
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 < VAR2
  ORIGINAL[2]: ls
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: at
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: ls
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: ls
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: ls
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ls
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 68719476847
FRAGMENT_COUNT: 7
  ORIGINAL[0]: st -> pts_wrap_reference
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> pts_wrap_behavior == 1
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 == 1
  ORIGINAL[2]: st -> pts_wrap_behavior
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2
  ORIGINAL[3]: st -> pts_wrap_reference
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: pts_wrap_reference
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: timestamp
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: st
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1

CENTER_NODE: 30064771171
FRAGMENT_COUNT: 2
  ORIGINAL[0]: modulus_param_str[1] % 2
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 [ 1 ] % 2
  ORIGINAL[1]: modulus_param_str[1]
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 [ 1 ]

CENTER_NODE: 47244640470
FRAGMENT_COUNT: 1
  ORIGINAL[0]: (st -> codec -> codec_id) != AV_CODEC_ID_H264
  TYPE[0]: CALL
  TOKENIZED[0]: ( VAR1 -> VAR2 -> VAR3 ) != VAR4

CENTER_NODE: 47244640682
FRAGMENT_COUNT: 0

CENTER_NODE: 47244641173
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640338
FRAGMENT_COUNT: 1
  ORIGINAL[0]: err < 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < 0

CENTER_NODE: 30064773159
FRAGMENT_COUNT: 13
  ORIGINAL[0]: size > 0 || pkt == &flush_pkt && got_output
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 > 0 || VAR2 == &flush_pkt && VAR3
  ORIGINAL[1]: len = av_parser_parse2(st -> parser,st -> codec,&out_pkt . data,&out_pkt . size,data,size,pkt -> pts,pkt -> dts,pkt -> pos)
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR2 -> VAR4 , &out_pkt . VAR5 , &out_pkt . VAR6 , VAR5 , VAR6 , VAR7 -> VAR8 , VAR7 -> VAR9 , VAR7 -> VAR10 )
  ORIGINAL[2]: av_parser_parse2(st -> parser,st -> codec,&out_pkt . data,&out_pkt . size,data,size,pkt -> pts,pkt -> dts,pkt -> pos)
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 -> VAR2 , VAR1 -> VAR3 , &out_pkt . VAR4 , &out_pkt . VAR5 , VAR4 , VAR5 , VAR6 -> VAR7 , VAR6 -> VAR8 , VAR6 -> VAR9 )
  ORIGINAL[3]: st -> parser
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: st -> codec
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 -> VAR2
  ORIGINAL[5]: &out_pkt . data
  TYPE[5]: CALL
  TOKENIZED[5]: &out_pkt . VAR1
  ORIGINAL[6]: &out_pkt . size
  TYPE[6]: CALL
  TOKENIZED[6]: &out_pkt . VAR1
  ORIGINAL[7]: pkt -> pts
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: pkt -> dts
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 -> VAR2
  ORIGINAL[9]: pkt -> pos
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 -> VAR2
  ORIGINAL[10]: len
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: data
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: size
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: VAR1

CENTER_NODE: 30064771937
FRAGMENT_COUNT: 6
  ORIGINAL[0]: s -> audio_codec_id
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: st -> codec -> codec_id = s -> audio_codec_id
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2 -> VAR3 = VAR4 -> VAR5
  ORIGINAL[2]: st -> codec -> codec_id
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 -> VAR2 -> VAR3
  ORIGINAL[3]: s -> audio_codec_id
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: audio_codec_id
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: s
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1

