# Tokenized code fragments for 152579-v1.0.0-bad
# Total center nodes processed: 51
# Total code fragments found: 186

CENTER_NODE: 47244640270
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !assume_native_charset_is_utf8
  TYPE[0]: CALL
  TOKENIZED[0]: !assume_native_charset_is_utf8

CENTER_NODE: 47244640377
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477468
FRAGMENT_COUNT: 4
  ORIGINAL[0]: icers_marifrances != 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 != 0
  ORIGINAL[1]: (void *)icers_marifrances
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) VAR1
  ORIGINAL[2]: icers_marifrances
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: icers_marifrances
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640304
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771698
FRAGMENT_COUNT: 5
  ORIGINAL[0]: svn_utf_cstring_from_utf8_ex2(dest,src,topage,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: dest
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: src
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: topage
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: pool
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477102
FRAGMENT_COUNT: 10
  ORIGINAL[0]: *data
  TYPE[0]: CALL
  TOKENIZED[0]: *data
  ORIGINAL[1]: *data
  TYPE[1]: CALL
  TOKENIZED[1]: *data
  ORIGINAL[2]: *data
  TYPE[2]: CALL
  TOKENIZED[2]: *data
  ORIGINAL[3]: data - data_start
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 - VAR2
  ORIGINAL[4]: data - data_start
  TYPE[4]: CALL
  TOKENIZED[4]: VAR1 - VAR2
  ORIGINAL[5]: data
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: data_start
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: data
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: data_start
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: data
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640303
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477286
FRAGMENT_COUNT: 4
  ORIGINAL[0]: svn_utf_cstring_to_utf8_ex2(dest,src,frompage,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 , VAR4 )
  ORIGINAL[1]: src
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: frompage
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: pool
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 68719476769
FRAGMENT_COUNT: 2
  ORIGINAL[0]: ev == MG_AUTH
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == VAR2
  ORIGINAL[1]: MG_TRUE
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1

CENTER_NODE: 30064771073
FRAGMENT_COUNT: 5
  ORIGINAL[0]: mg_vprintf_data((struct mg_connection*) stonesoup_printf_context, format, argptr)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( ( struct mg_connection* ) VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: (struct mg_connection*) stonesoup_printf_context
  TYPE[1]: CALL
  TOKENIZED[1]: ( struct mg_connection* ) VAR1
  ORIGINAL[2]: format
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: argptr
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: argptr
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 68719477412
FRAGMENT_COUNT: 3
  ORIGINAL[0]: &converted
  TYPE[0]: CALL
  TOKENIZED[0]: &converted
  ORIGINAL[1]: converted
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: converted
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 30064771116
FRAGMENT_COUNT: 4
  ORIGINAL[0]: xlate_handle_hash = ((void *)0)
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 = ( ( void * ) 0 )
  ORIGINAL[1]: (void *)0
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) 0
  ORIGINAL[2]: <global> xlate_handle_hash
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: <global> VAR1
  ORIGINAL[3]: <global> xlat_ntou_static_handle
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: <global> VAR1

CENTER_NODE: 47244640277
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771418
FRAGMENT_COUNT: 55
  ORIGINAL[0]: src_length == 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 0
  ORIGINAL[1]: destlen = buflen - ( *dest) -> len
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 = VAR2 - ( *dest ) -> VAR3
  ORIGINAL[2]: buflen - ( *dest) -> len
  TYPE[2]: CALL
  TOKENIZED[2]: VAR1 - ( *dest ) -> VAR2
  ORIGINAL[3]: ( *dest) -> len
  TYPE[3]: CALL
  TOKENIZED[3]: ( *dest ) -> VAR1
  ORIGINAL[4]: *dest
  TYPE[4]: CALL
  TOKENIZED[4]: *dest
  ORIGINAL[5]: apr_err = apr_xlate_conv_buffer(node -> handle,src_data + (src_length - srclen),&srclen,( *dest) -> data + ( *dest) -> len,&destlen)
  TYPE[5]: CALL
  TOKENIZED[5]: VAR1 = FUN1 ( VAR2 -> VAR3 , VAR4 + ( VAR5 - VAR6 ) , &srclen , ( *dest ) -> VAR7 + ( *dest ) -> VAR8 , &destlen )
  ORIGINAL[6]: apr_xlate_conv_buffer(node -> handle,src_data + (src_length - srclen),&srclen,( *dest) -> data + ( *dest) -> len,&destlen)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 -> VAR2 , VAR3 + ( VAR4 - VAR5 ) , &srclen , ( *dest ) -> VAR6 + ( *dest ) -> VAR7 , &destlen )
  ORIGINAL[7]: node -> handle
  TYPE[7]: CALL
  TOKENIZED[7]: VAR1 -> VAR2
  ORIGINAL[8]: src_data + (src_length - srclen)
  TYPE[8]: CALL
  TOKENIZED[8]: VAR1 + ( VAR2 - VAR3 )
  ORIGINAL[9]: src_length - srclen
  TYPE[9]: CALL
  TOKENIZED[9]: VAR1 - VAR2
  ORIGINAL[10]: &srclen
  TYPE[10]: CALL
  TOKENIZED[10]: &srclen
  ORIGINAL[11]: ( *dest) -> data + ( *dest) -> len
  TYPE[11]: CALL
  TOKENIZED[11]: ( *dest ) -> VAR1 + ( *dest ) -> VAR2
  ORIGINAL[12]: ( *dest) -> data
  TYPE[12]: CALL
  TOKENIZED[12]: ( *dest ) -> VAR1
  ORIGINAL[13]: *dest
  TYPE[13]: CALL
  TOKENIZED[13]: *dest
  ORIGINAL[14]: ( *dest) -> len
  TYPE[14]: CALL
  TOKENIZED[14]: ( *dest ) -> VAR1
  ORIGINAL[15]: *dest
  TYPE[15]: CALL
  TOKENIZED[15]: *dest
  ORIGINAL[16]: &destlen
  TYPE[16]: CALL
  TOKENIZED[16]: &destlen
  ORIGINAL[17]: ( *dest) -> len += buflen - ( *dest) -> len - destlen
  TYPE[17]: CALL
  TOKENIZED[17]: ( *dest ) -> VAR1 += VAR2 - ( *dest ) -> VAR1 - VAR3
  ORIGINAL[18]: ( *dest) -> len
  TYPE[18]: CALL
  TOKENIZED[18]: ( *dest ) -> VAR1
  ORIGINAL[19]: *dest
  TYPE[19]: CALL
  TOKENIZED[19]: *dest
  ORIGINAL[20]: buflen - ( *dest) -> len - destlen
  TYPE[20]: CALL
  TOKENIZED[20]: VAR1 - ( *dest ) -> VAR2 - VAR3
  ORIGINAL[21]: buflen - ( *dest) -> len
  TYPE[21]: CALL
  TOKENIZED[21]: VAR1 - ( *dest ) -> VAR2
  ORIGINAL[22]: ( *dest) -> len
  TYPE[22]: CALL
  TOKENIZED[22]: ( *dest ) -> VAR1
  ORIGINAL[23]: *dest
  TYPE[23]: CALL
  TOKENIZED[23]: *dest
  ORIGINAL[24]: buflen += srclen * 3
  TYPE[24]: CALL
  TOKENIZED[24]: VAR1 += VAR2 * 3
  ORIGINAL[25]: srclen * 3
  TYPE[25]: CALL
  TOKENIZED[25]: VAR1 * 3
  ORIGINAL[26]: apr_err == 0 && srclen != 0
  TYPE[26]: CALL
  TOKENIZED[26]: VAR1 == 0 && VAR2 != 0
  ORIGINAL[27]: apr_err == 0
  TYPE[27]: CALL
  TOKENIZED[27]: VAR1 == 0
  ORIGINAL[28]: srclen != 0
  TYPE[28]: CALL
  TOKENIZED[28]: VAR1 != 0
  ORIGINAL[29]: len
  TYPE[29]: FIELD_IDENTIFIER
  TOKENIZED[29]: VAR1
  ORIGINAL[30]: handle
  TYPE[30]: FIELD_IDENTIFIER
  TOKENIZED[30]: VAR1
  ORIGINAL[31]: data
  TYPE[31]: FIELD_IDENTIFIER
  TOKENIZED[31]: VAR1
  ORIGINAL[32]: len
  TYPE[32]: FIELD_IDENTIFIER
  TOKENIZED[32]: VAR1
  ORIGINAL[33]: len
  TYPE[33]: FIELD_IDENTIFIER
  TOKENIZED[33]: VAR1
  ORIGINAL[34]: len
  TYPE[34]: FIELD_IDENTIFIER
  TOKENIZED[34]: VAR1
  ORIGINAL[35]: destlen
  TYPE[35]: IDENTIFIER
  TOKENIZED[35]: VAR1
  ORIGINAL[36]: buflen
  TYPE[36]: IDENTIFIER
  TOKENIZED[36]: VAR1
  ORIGINAL[37]: dest
  TYPE[37]: IDENTIFIER
  TOKENIZED[37]: VAR1
  ORIGINAL[38]: apr_err
  TYPE[38]: IDENTIFIER
  TOKENIZED[38]: VAR1
  ORIGINAL[39]: node
  TYPE[39]: IDENTIFIER
  TOKENIZED[39]: VAR1
  ORIGINAL[40]: src_data
  TYPE[40]: IDENTIFIER
  TOKENIZED[40]: VAR1
  ORIGINAL[41]: src_length
  TYPE[41]: IDENTIFIER
  TOKENIZED[41]: VAR1
  ORIGINAL[42]: srclen
  TYPE[42]: IDENTIFIER
  TOKENIZED[42]: VAR1
  ORIGINAL[43]: srclen
  TYPE[43]: IDENTIFIER
  TOKENIZED[43]: VAR1
  ORIGINAL[44]: dest
  TYPE[44]: IDENTIFIER
  TOKENIZED[44]: VAR1
  ORIGINAL[45]: dest
  TYPE[45]: IDENTIFIER
  TOKENIZED[45]: VAR1
  ORIGINAL[46]: destlen
  TYPE[46]: IDENTIFIER
  TOKENIZED[46]: VAR1
  ORIGINAL[47]: dest
  TYPE[47]: IDENTIFIER
  TOKENIZED[47]: VAR1
  ORIGINAL[48]: buflen
  TYPE[48]: IDENTIFIER
  TOKENIZED[48]: VAR1
  ORIGINAL[49]: dest
  TYPE[49]: IDENTIFIER
  TOKENIZED[49]: VAR1
  ORIGINAL[50]: destlen
  TYPE[50]: IDENTIFIER
  TOKENIZED[50]: VAR1
  ORIGINAL[51]: buflen
  TYPE[51]: IDENTIFIER
  TOKENIZED[51]: VAR1
  ORIGINAL[52]: srclen
  TYPE[52]: IDENTIFIER
  TOKENIZED[52]: VAR1
  ORIGINAL[53]: apr_err
  TYPE[53]: IDENTIFIER
  TOKENIZED[53]: VAR1
  ORIGINAL[54]: apr_err
  TYPE[54]: IDENTIFIER
  TOKENIZED[54]: VAR1

CENTER_NODE: 68719476867
FRAGMENT_COUNT: 9
  ORIGINAL[0]: apr_err == 22 || apr_err == 20000 + 50000 + 23
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 == 22 || VAR1 == 20000 + 50000 + 23
  ORIGINAL[1]: apr_err != 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != 0
  ORIGINAL[2]: ( *ret) -> next = ((void *)0)
  TYPE[2]: CALL
  TOKENIZED[2]: ( *ret ) -> VAR1 = ( ( void * ) 0 )
  ORIGINAL[3]: apr_pool_cleanup_register(pool,( *ret),xlate_handle_node_cleanup,apr_pool_cleanup_null)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , ( *ret ) , VAR2 , VAR3 )
  ORIGINAL[4]: *ret
  TYPE[4]: CALL
  TOKENIZED[4]: *ret
  ORIGINAL[5]: handle
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pool
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: ret
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: apr_pool_cleanup_null
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 68719476771
FRAGMENT_COUNT: 4
  ORIGINAL[0]: getenv(\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( \
  ORIGINAL[1]: getenv(\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( \
  ORIGINAL[2]: NULL
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: NULL
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 47244640394
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640361
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640371
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477421
FRAGMENT_COUNT: 5
  ORIGINAL[0]: *svn_err__temp = svn_utf_stringbuf_from_utf8(&destbuf,src,pool)
  TYPE[0]: CALL
  TOKENIZED[0]: *svn_err__temp = FUN1 ( &destbuf , VAR1 , VAR2 )
  ORIGINAL[1]: svn_utf_stringbuf_from_utf8(&destbuf,src,pool)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( &destbuf , VAR1 , VAR2 )
  ORIGINAL[2]: svn_err__temp
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: destbuf
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: svn_err__temp
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640386
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640367
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640316
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771272
FRAGMENT_COUNT: 16
  ORIGINAL[0]: old_node && old_node -> valid
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 && VAR1 -> VAR2
  ORIGINAL[1]: old_node -> valid
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2
  ORIGINAL[2]: *ret = old_node
  TYPE[2]: CALL
  TOKENIZED[2]: *ret = VAR1
  ORIGINAL[3]: *ret
  TYPE[3]: CALL
  TOKENIZED[3]: *ret
  ORIGINAL[4]: *svn_mutex__m = xlate_handle_mutex
  TYPE[4]: CALL
  TOKENIZED[4]: *svn_mutex__m = VAR1
  ORIGINAL[5]: *svn_err__temp = svn_mutex__lock(svn_mutex__m)
  TYPE[5]: CALL
  TOKENIZED[5]: *svn_err__temp = FUN1 ( VAR1 )
  ORIGINAL[6]: svn_mutex__lock(svn_mutex__m)
  TYPE[6]: CALL
  TOKENIZED[6]: FUN1 ( VAR1 )
  ORIGINAL[7]: <global> xlate_handle_hash
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: <global> VAR1
  ORIGINAL[8]: old_node
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: ret
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1
  ORIGINAL[10]: old_node
  TYPE[10]: IDENTIFIER
  TOKENIZED[10]: VAR1
  ORIGINAL[11]: svn_mutex__m
  TYPE[11]: IDENTIFIER
  TOKENIZED[11]: VAR1
  ORIGINAL[12]: <global> xlate_handle_mutex
  TYPE[12]: IDENTIFIER
  TOKENIZED[12]: <global> VAR1
  ORIGINAL[13]: svn_err__temp
  TYPE[13]: IDENTIFIER
  TOKENIZED[13]: VAR1
  ORIGINAL[14]: svn_mutex__m
  TYPE[14]: IDENTIFIER
  TOKENIZED[14]: VAR1
  ORIGINAL[15]: svn_err__temp
  TYPE[15]: IDENTIFIER
  TOKENIZED[15]: VAR1

CENTER_NODE: 47244640350
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640390
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477153
FRAGMENT_COUNT: 5
  ORIGINAL[0]: !svn_utf__cstring_is_valid(data)
  TYPE[0]: CALL
  TOKENIZED[0]: !svn_utf__cstring_is_valid ( VAR1 )
  ORIGINAL[1]: strlen(data)
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 )
  ORIGINAL[2]: data
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: data
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: data
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1

CENTER_NODE: 47244640365
FRAGMENT_COUNT: 0

CENTER_NODE: 30064771123
FRAGMENT_COUNT: 2
  ORIGINAL[0]: node -> valid = 0
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2 = 0
  ORIGINAL[1]: node -> valid
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 -> VAR2

CENTER_NODE: 47244640258
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 30064771251
FRAGMENT_COUNT: 9
  ORIGINAL[0]: old_node -> valid
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: *old_node_p = old_node -> next
  TYPE[1]: CALL
  TOKENIZED[1]: *old_node_p = VAR1 -> VAR2
  ORIGINAL[2]: *old_node_p
  TYPE[2]: CALL
  TOKENIZED[2]: *old_node_p
  ORIGINAL[3]: old_node -> next
  TYPE[3]: CALL
  TOKENIZED[3]: VAR1 -> VAR2
  ORIGINAL[4]: next
  TYPE[4]: FIELD_IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: old_node
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: old_node
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: old_node
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: old_node
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640306
FRAGMENT_COUNT: 0

CENTER_NODE: 68719476810
FRAGMENT_COUNT: 8
  ORIGINAL[0]: apr_pstrcat(pool,\
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , \
  ORIGINAL[1]: (char *)((void *)0)
  TYPE[1]: CALL
  TOKENIZED[1]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[2]: frompage
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: frompage
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1
  ORIGINAL[4]: frompage
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: pool
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: frompage
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: topage
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1

CENTER_NODE: 30064771782
FRAGMENT_COUNT: 10
  ORIGINAL[0]: strlen(infracted_cirrhoses) < 1000 - strlen(stonesoup_command_str)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 ) < 1000 - FUN1 ( VAR2 )
  ORIGINAL[1]: stonesoup_fpipe != 0
  TYPE[1]: CALL
  TOKENIZED[1]: VAR1 != 0
  ORIGINAL[2]: fgets(stonesoup_buffer,100,stonesoup_fpipe) != 0
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , 100 , VAR2 ) != 0
  ORIGINAL[3]: fgets(stonesoup_buffer,100,stonesoup_fpipe)
  TYPE[3]: CALL
  TOKENIZED[3]: FUN1 ( VAR1 , 100 , VAR2 )
  ORIGINAL[4]: pclose(stonesoup_fpipe)
  TYPE[4]: CALL
  TOKENIZED[4]: FUN1 ( VAR1 )
  ORIGINAL[5]: stonesoup_fpipe
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: stonesoup_buffer
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: stonesoup_fpipe
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: stonesoup_fpipe
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1
  ORIGINAL[9]: stonesoup_trace
  TYPE[9]: IDENTIFIER
  TOKENIZED[9]: VAR1

CENTER_NODE: 47244640363
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640265
FRAGMENT_COUNT: 1
  ORIGINAL[0]: while (1)
  TYPE[0]: CONTROL_STRUCTURE
  TOKENIZED[0]: while ( 1 )

CENTER_NODE: 47244640344
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640369
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477477
FRAGMENT_COUNT: 4
  ORIGINAL[0]: NEOMAH_TALIACOTIAN(taborite_crazycat)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 )
  ORIGINAL[1]: (void *)taborite_crazycat
  TYPE[1]: CALL
  TOKENIZED[1]: ( void * ) VAR1
  ORIGINAL[2]: taborite_crazycat
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1
  ORIGINAL[3]: taborite_crazycat
  TYPE[3]: IDENTIFIER
  TOKENIZED[3]: VAR1

CENTER_NODE: 30064771382
FRAGMENT_COUNT: 3
  ORIGINAL[0]: *new = '\\0'
  TYPE[0]: CALL
  TOKENIZED[0]: *new = '\\0'
  ORIGINAL[1]: *new
  TYPE[1]: CALL
  TOKENIZED[1]: *new
  ORIGINAL[2]: new_orig
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 68719477419
FRAGMENT_COUNT: 3
  ORIGINAL[0]: svn_utf__cstring_from_utf8_fuzzy(src,pool,svn_utf_cstring_from_utf8)
  TYPE[0]: CALL
  TOKENIZED[0]: FUN1 ( VAR1 , VAR2 , VAR3 )
  ORIGINAL[1]: src
  TYPE[1]: IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: pool
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640384
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640358
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477140
FRAGMENT_COUNT: 9
  ORIGINAL[0]: i < invalid
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 < VAR2
  ORIGINAL[1]: apr_pstrcat(pool,invalid_txt,apr_psprintf(pool,\
  TYPE[1]: CALL
  TOKENIZED[1]: FUN1 ( VAR1 , VAR2 , FUN2 ( VAR1 , \
  ORIGINAL[2]: apr_psprintf(pool,\
  TYPE[2]: CALL
  TOKENIZED[2]: FUN1 ( VAR1 , \
  ORIGINAL[3]: (char *)((void *)0)
  TYPE[3]: CALL
  TOKENIZED[3]: ( char * ) ( ( void * ) 0 )
  ORIGINAL[4]: invalid_txt
  TYPE[4]: IDENTIFIER
  TOKENIZED[4]: VAR1
  ORIGINAL[5]: invalid_txt
  TYPE[5]: IDENTIFIER
  TOKENIZED[5]: VAR1
  ORIGINAL[6]: pool
  TYPE[6]: IDENTIFIER
  TOKENIZED[6]: VAR1
  ORIGINAL[7]: invalid_txt
  TYPE[7]: IDENTIFIER
  TOKENIZED[7]: VAR1
  ORIGINAL[8]: pool
  TYPE[8]: IDENTIFIER
  TOKENIZED[8]: VAR1

CENTER_NODE: 47244640396
FRAGMENT_COUNT: 0

CENTER_NODE: 68719477216
FRAGMENT_COUNT: 3
  ORIGINAL[0]: node -> handle
  TYPE[0]: CALL
  TOKENIZED[0]: VAR1 -> VAR2
  ORIGINAL[1]: handle
  TYPE[1]: FIELD_IDENTIFIER
  TOKENIZED[1]: VAR1
  ORIGINAL[2]: node
  TYPE[2]: IDENTIFIER
  TOKENIZED[2]: VAR1

CENTER_NODE: 47244640388
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640318
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640279
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640315
FRAGMENT_COUNT: 0

CENTER_NODE: 47244640342
FRAGMENT_COUNT: 1
  ORIGINAL[0]: !svn_utf__is_valid(data,len)
  TYPE[0]: CALL
  TOKENIZED[0]: !svn_utf__is_valid ( VAR1 , VAR2 )

