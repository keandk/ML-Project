code_complexity_features:
  - feature: SHARED_MEMORY
    function_name: dfamust
    line_number: 0
    feature_group: source_taint
    file_name: /tmp/tmpJTuMcH_ss_testcase/src-rose/src/dfa.c
  - file_name: /tmp/tmpJTuMcH_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmpJTuMcH_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmpJTuMcH_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: control_flow
    feature: sequence
description: "Creating test case using base program.\nAdded an environment variable read to get a key in order to read in data from shared memory.\nCompleted injection.\n"
io_pair:
  exploits:
    - inputs:
        - key: 9026
          value_type_enum: 0
          id: source
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          stage_enum: 0
          ordinal: 1
          stage: pre_process
          value
          size: 596
          flags: 950
          value_encoding: none
    - inputs:
        - source_enum: 6
          key: 9026
          value: This is probably going to overflow a buffer of some sort.  Let's run it anyway and see what happens.  I hope that everything turns out ok, because I would love to see what this looks like in all CAPS.  Converting ASCII characters to upper case is easy, you can either call a system function, or just add the standard difference between the start of the two character sets.  But, I am sure there is a reason that system functions exist for this sort of functionality.
          ordinal: 1
          id: source
          stage: pre_process
          source: shared_memory_input
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          size: 596
          flags: 950
          value_encoding: none
          value_type_enum: 0
  base_inputs:
    - source: shared_memory_input
      source_enum: 6
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      key: 9026
      size: 596
      flags: 950
  benigns:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          stage_enum: 0
          stage: pre_process
          value_type_enum: 0
          id: source
          key: 9026
          size: 596
          source: shared_memory_input
          ordinal: 1
          flags: 950
          value: AAA
          value_encoding: none
    - inputs:
        - value_type_enum: 0
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          value: Hellow world!
          source_enum: 6
          id: source
          stage_enum: 0
          key: 9026
          ordinal: 1
          size: 596
          value_encoding: none
          flags: 950
    - inputs:
        - value_type_enum: 0
          source: shared_memory_input
          value: Good-bye cruel world!
          stage: pre_process
          ordinal: 1
          id: source
          source_enum: 6
          size: 596
          key: 9026
          stage_enum: 0
          flags: 950
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
  description: "Has a fixed heap buffer of size 64, allocated within a struct  (char [64])\n\n"