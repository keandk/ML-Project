io_pair:
  base_inputs:
    - source: socket_input
      source_enum: 5
      stage: co_process
      stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
  description: "Has a fixed heap buffer of size 64.  (char [64])\n\n"
  benigns:
    - inputs:
        - value_encoding: none
          source: socket_input
          stage: co_process
          source_enum: 5
          value_type: USE_TEXT_DIRECTLY
          address: ss-localhost
          ordinal: 1
          value: AAA
          value_type_enum: 0
          port: 8887
          id: source
          stage_enum: 1
    - inputs:
        - stage_enum: 1
          source: socket_input
          ordinal: 1
          source_enum: 5
          address: ss-localhost
          port: 8887
          id: source
          value: Hellow world!
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          stage: co_process
          value_type_enum: 0
    - inputs:
        - port: 8887
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          id: source
          stage_enum: 1
          stage: co_process
          source_enum: 5
          source: socket_input
          value: Good-bye cruel world!
          address: ss-localhost
          value_type_enum: 0
          ordinal: 1
  exploits:
    - inputs:
        - source_enum: 5
          id: source
          stage_enum: 1
          stage: co_process
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          address: ss-localhost
          port: 8887
          ordinal: 1
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          value_type_enum: 0
          source: socket_input
    - inputs:
        - stage_enum: 1
          source_enum: 5
          ordinal: 1
          source: socket_input
          address: ss-localhost
          value_encoding: none
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value: This is probably going to overflow a buffer of some sort.  Let's run it anyway and see what happens.  I hope that everything turns out ok, because I would love to see what this looks like in all CAPS.  Converting ASCII characters to upper case is easy, you can either call a system function, or just add the standard difference between the start of the two character sets.  But, I am sure there is a reason that system functions exist for this sort of functionality.
          id: source
          stage: co_process
          port: 8887
description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"
code_complexity_features:
  - feature_group: source_taint
    feature: SOCKET
    function_name: stonesoup_handle_taint
    line_number: 0
    file_name: /tmp/tmpyuBO6i_ss_testcase/src-rose/crypto/engine/eng_lib.c
  - file_name: /tmp/tmpyuBO6i_ss_testcase/src-rose/crypto/engine/eng_lib.c
    feature_group: data_type
    function_name: stonesoup_handle_taint
    line_number: 0
    feature: heap_pointer
  - function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_flow
    feature: address_as_nonlinear_expression
    file_name: /tmp/tmpyuBO6i_ss_testcase/src-rose/crypto/engine/eng_lib.c
  - function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: infinite_loop
    file_name: /tmp/tmpyuBO6i_ss_testcase/src-rose/crypto/engine/eng_lib.c