io_pair:
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: MEROSTOMATOUS_URINOSCOPY
  exploits:
    - inputs:
        - name: MEROSTOMATOUS_URINOSCOPY
          value_encoding: base64
          source_enum: 2
          stage_enum: 0
          source: env_var_input
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          id: source
          ordinal: 1
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
        - source_enum: 2
          name: INPUT_STRING
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          stage: pre_process
          value_type_enum: 0
          ordinal: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          stage_enum: 0
          source: env_var_input
    - inputs:
        - stage: pre_process
          source_enum: 2
          name: MEROSTOMATOUS_URINOSCOPY
          ordinal: 1
          value: SGVsbKUgV6lybGSI
          source: env_var_input
          stage_enum: 0
          id: source
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          value_encoding: base64
        - stage_enum: 0
          source: env_var_input
          stage: pre_process
          value_type_enum: 0
          ordinal: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          source_enum: 2
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
  benigns:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          name: MEROSTOMATOUS_URINOSCOPY
          ordinal: 1
          value_encoding: none
          stage: pre_process
          source: env_var_input
          value_type_enum: 0
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          stage_enum: 0
          source_enum: 2
          id: source
        - source: env_var_input
          ordinal: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          source_enum: 2
          value_type_enum: 0
          value_encoding: none
          stage_enum: 0
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
    - inputs:
        - source_enum: 2
          value_encoding: none
          name: MEROSTOMATOUS_URINOSCOPY
          stage: pre_process
          source: env_var_input
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          stage_enum: 0
          value_type_enum: 0
          id: source
          ordinal: 1
          value_type: USE_TEXT_DIRECTLY
        - source_enum: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          name: INPUT_STRING
          ordinal: 2
          source: env_var_input
          stage: pre_process
          value_encoding: none
          value_type_enum: 0
          stage_enum: 0
    - inputs:
        - source_enum: 2
          stage_enum: 0
          stage: pre_process
          source: env_var_input
          id: source
          value_type: USE_TEXT_DIRECTLY
          ordinal: 1
          name: MEROSTOMATOUS_URINOSCOPY
          value: As long as this statement has more than 64 characters, then nothing bad should happen
          value_encoding: none
          value_type_enum: 0
        - value_encoding: none
          name: INPUT_STRING
          source_enum: 2
          ordinal: 2
          stage_enum: 0
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type_enum: 0
          source: env_var_input
          value_type: USE_TEXT_DIRECTLY
  description: "Has a heap buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the heap buffer.  Then reads in an input and prints out the count of the characters from the heap buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"
code_complexity_features:
  - file_name: /tmp/tmpxmuS3I_ss_testcase/src-rose/app/core/gimpcontext.c
    function_name: gimp_context_dispose
    line_number: 0
    feature_group: source_taint
    feature: ENVIRONMENT_VARIABLE
  - file_name: /tmp/tmpxmuS3I_ss_testcase/src-rose/app/core/gimpcontext.c
    feature_group: data_type
    function_name: gimp_context_dispose
    line_number: 0
    feature: heap_pointer
  - file_name: /tmp/tmpxmuS3I_ss_testcase/src-rose/app/core/gimpcontext.c
    function_name: gimp_context_dispose
    line_number: 0
    feature_group: data_flow
    feature: address_as_nonlinear_expression
  - function_name: gimp_context_dispose
    line_number: 0
    feature_group: control_flow
    feature: recursive
    file_name: /tmp/tmpxmuS3I_ss_testcase/src-rose/app/core/gimpcontext.c