<?xml version="1.0" encoding="utf-8"?>
<project base_program="C-TREE" language="C" name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01" targeted_architecture="ANY" targeted_os="LINUX" test_case_type="ALL" xmlns="urn:stonesoup:project">
    <description>Creating test case using base program.
Added a Socket Server to accept communication from untrusted source.
Completed injection.
</description>
    <additional_information>
        <keyvalue key="algorithmic_variant_name">UNSPECIFIED</keyvalue>
        <keyvalue key="root_cause">UNSPECIFIED</keyvalue>
    </additional_information>
    <structure install="install" iodata="testData" scoredata="testOutput" scripts="scripts" source="src"/>
    <run_command>$SS_TC_ROOT/$SS_TC_INSTALL/bin/tree</run_command>
    <weakness generation_method="FAULT_INJECTED">
        <variant cwe="CWE-129" name="CWE-129-B"/>
        <features>
            <taint_source file_name="/color.c" line_number="0" type="SOCKET">
                <method name="stonesoup_handle_taint"/>
            </taint_source>
            <data_type file_name="/color.c" line_number="0" type="SIMPLE">
                <method name="stonesoup_handle_taint"/>
            </data_type>
            <data_flow file_name="/color.c" line_number="0" type="BASIC">
                <method name="stonesoup_handle_taint"/>
            </data_flow>
            <control_flow file_name="/color.c" line_number="0" type="SEQUENCE">
                <method name="stonesoup_handle_taint"/>
            </control_flow>
        </features>
    </weakness>
    <build_commands cppflags="-DSTONESOUP_TRACE=1" libs="-lpthread -lmongoose -ldl">
        <command>make install CC=&quot;$SS_CC&quot; LD=&quot;$SS_LNK&quot; CFLAGS=&quot;$CFLAGS&quot; CPPFLAGS=&quot;$CPPFLAGS&quot; LDFLAGS=&quot;$LDFLAGS&quot; prefix=&quot;$SS_TC_ROOT/$SS_TC_INSTALL&quot; LIBS=&quot;$LIBS&quot;</command>
    </build_commands>
    <iopairs>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-GOOD-01" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q input/good-01</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_2sF4VqxVcr" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;exampleofgoodinput&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-01" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-01/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_Rtt7Jxsyj9" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-01-Default">
                <formula name="GOOD-01-Default">STDOUT-REPORT-01 AND STDOUT-CONTENT-LENGTH-01 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-REPORT-01">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">5 directories, 10 files</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="STDOUT-CONTENT-LENGTH-01">
                    <actual input_id_ref="STDOUT-CONTENT-LENGTH-EVAL-01" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">SIMILAR</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-GOOD-02" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q -L 2 input/good-02</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_FfrL6NE7co" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;abcd12345ABCDE&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-02" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-02/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_TkyuzyPv2l" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-02-Default">
                <formula name="GOOD-02-Default">STDOUT-REPORT-02 AND STDOUT-CONTENT-LENGTH-02 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-REPORT-02">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">5 directories, 4 files</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="STDOUT-CONTENT-LENGTH-02">
                    <actual input_id_ref="STDOUT-CONTENT-LENGTH-EVAL-02" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">SIMILAR</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-GOOD-03" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q -J input/good-03</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_7rGpD2t3wj" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;R0G3RR4881T&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-03" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-03/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_yWLOQc1PDU" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-03-Default">
                <formula name="GOOD-03-Default">STDOUT-REPORT-03 AND STDOUT-CONTENT-LENGTH-03 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-REPORT-03">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">{&quot;type&quot;:&quot;report&quot;,&quot;directories&quot;:7,&quot;files&quot;:367}</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="STDOUT-CONTENT-LENGTH-03">
                    <actual input_id_ref="STDOUT-CONTENT-LENGTH-EVAL-03" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">SIMILAR</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-GOOD-04" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q -P &quot;test*&quot; -F input/good-03</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_Yd6OfOhaS4" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;exampleofgoodinput&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-04" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-04/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_oZF2s54QBA" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-04-Default">
                <formula name="GOOD-04-Default">STDOUT-REPORT-04 AND STDOUT-CONTENT-LENGTH-04 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-REPORT-04">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">7 directories, 62 files</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="STDOUT-CONTENT-LENGTH-04">
                    <actual input_id_ref="STDOUT-CONTENT-LENGTH-EVAL-04" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">SIMILAR</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-GOOD-05" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q -H &quot;&quot; input/good-01</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_KJPEcPerZh" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;abcd12345ABCDE&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-05" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-05/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_bC0D7miqjj" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-05-Default">
                <formula name="GOOD-05-Default">STDOUT-REPORT-05 AND STDOUT-CONTENT-LENGTH-05 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-REPORT-05">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">5 directories, 10 files</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="STDOUT-CONTENT-LENGTH-05">
                    <actual input_id_ref="STDOUT-CONTENT-LENGTH-EVAL-05" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">SIMILAR</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-BAD-01" reset_scheme="NONE" timeout="300" type="BAD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>DOS_UNCONTROLLED_EXIT</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q -H &quot;&quot; input/good-01</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_WejWOSDLFGCLeFc7DQRW" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;a-b+c*d&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-05O9ApqbKL9L" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-05/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_JkT6PuxNzdOFPc0SmAT8" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="segfault_formula_vT7cpkmPGC">
                <formula name="segfault_formula_vT7cpkmPGC">weakness_started_Aeu0GPogJvK3SwIzJuHz AND ((NOT PERFORMER AND (segfault_code_1hYUycdkJc OR segfault_code_abSTBQvPyp OR segfault_code_QmlZz99uuL OR segfault_code_T0znmSa3iX OR segfault_code_WJvKPu1rje OR segfault_msg_LnnuU0ue5Z OR illegal_inst_msg_HVWPSl1SRh OR unknown_operand_CKLmxIEZDo OR segfault_glibc_h3oNwEC9Gs OR segfault_illegal_return_ZUjYZgmiwT) AND NOT timeout_bO7EpNLLYG) or (PERFORMER AND NOT ((segfault_code_1hYUycdkJc OR segfault_code_abSTBQvPyp OR segfault_code_QmlZz99uuL OR segfault_code_T0znmSa3iX OR segfault_code_WJvKPu1rje OR segfault_msg_LnnuU0ue5Z OR illegal_inst_msg_HVWPSl1SRh OR unknown_operand_CKLmxIEZDo OR segfault_glibc_h3oNwEC9Gs OR segfault_illegal_return_ZUjYZgmiwT) OR timeout_bO7EpNLLYG OR controlled_exit_Z7rKGoyj2E)))</formula>
                <formula name="no_weakness_started_formula_Zbq7VlqjkT">(NOT PERFORMER AND (segfault_code_1hYUycdkJc OR segfault_code_abSTBQvPyp OR segfault_code_QmlZz99uuL OR segfault_code_T0znmSa3iX OR segfault_code_WJvKPu1rje OR segfault_msg_LnnuU0ue5Z OR illegal_inst_msg_HVWPSl1SRh OR unknown_operand_CKLmxIEZDo OR segfault_glibc_h3oNwEC9Gs OR segfault_illegal_return_ZUjYZgmiwT) AND NOT timeout_bO7EpNLLYG) or (PERFORMER AND NOT ((segfault_code_1hYUycdkJc OR segfault_code_abSTBQvPyp OR segfault_code_QmlZz99uuL OR segfault_code_T0znmSa3iX OR segfault_code_WJvKPu1rje OR segfault_msg_LnnuU0ue5Z OR illegal_inst_msg_HVWPSl1SRh OR unknown_operand_CKLmxIEZDo OR segfault_glibc_h3oNwEC9Gs OR segfault_illegal_return_ZUjYZgmiwT) OR timeout_bO7EpNLLYG OR controlled_exit_Z7rKGoyj2E))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_bO7EpNLLYG" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_Z7rKGoyj2E" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_w3iRM0UWLi" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_1hYUycdkJc">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">132</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_abSTBQvPyp">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">134</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_QmlZz99uuL">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">135</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_T0znmSa3iX">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">136</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_WJvKPu1rje">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">139</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="segfault_msg_LnnuU0ue5Z">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">Segmentation fault</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="illegal_inst_msg_HVWPSl1SRh">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">Illegal instruction</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="unknown_operand_CKLmxIEZDo">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">unknown operand</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="segfault_glibc_h3oNwEC9Gs">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">glibc detected</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_illegal_return_ZUjYZgmiwT">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">132</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="weakness_started_Aeu0GPogJvK3SwIzJuHz">
                    <actual encoding="STRING" input_id_ref="lttng_output_JkT6PuxNzdOFPc0SmAT8" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
        <iopair name="C-C129B-CTRE-01-ST03-DT02-DF11-CF20-01-BAD-02" reset_scheme="NONE" timeout="300" type="BAD">
            <description>Good input:1) environment variable contains only alphanumeric charactersBad input:1) environment variable contains non alphanumeric characters

</description>
            <technical_impact>DOS_UNCONTROLLED_EXIT</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="MALLOC_CHECK_" type="USE_TEXT">1</environment_variable>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--charset ASCII --sort=name -n -q -L 2 input/good-02</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_qE9hfXiYxIyPspVoJAPT" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;3.14159&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" input_id="STDOUT-CONTENT-LENGTH-EVAL-02qemplRUaTc" type="USE_TEXT">if [[ $(wc -c &quot;$SS_LOG_EXECUTE_STDOUT&quot; | cut -d &quot; &quot; -f 1) -eq $(wc -c &quot;$SS_TC_ROOT/$SS_TC_SCORE/good-02/output.txt&quot; | cut -d &quot; &quot; -f 1) ]]; then echo &quot;SIMILAR&quot;; else echo &quot;DIFFERENT&quot;; fi;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_oHEGtVIexblvhLMM07Kw" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="segfault_formula_9ogNCiQtJ5">
                <formula name="segfault_formula_9ogNCiQtJ5">weakness_started_RXZ6OfdHzM8vtmBA4ua5 AND ((NOT PERFORMER AND (segfault_code_V24RobbldD OR segfault_code_MlHMVByLH5 OR segfault_code_SOpcqH5MrS OR segfault_code_AcR137D5vU OR segfault_code_7LyUkNT0JO OR segfault_msg_v3hcviOsox OR illegal_inst_msg_9GIfSTkC3I OR unknown_operand_qmN0ToMxZP OR segfault_glibc_Y6H4TjSrc8 OR segfault_illegal_return_TXhWelpBGf) AND NOT timeout_cqRQUQH91S) or (PERFORMER AND NOT ((segfault_code_V24RobbldD OR segfault_code_MlHMVByLH5 OR segfault_code_SOpcqH5MrS OR segfault_code_AcR137D5vU OR segfault_code_7LyUkNT0JO OR segfault_msg_v3hcviOsox OR illegal_inst_msg_9GIfSTkC3I OR unknown_operand_qmN0ToMxZP OR segfault_glibc_Y6H4TjSrc8 OR segfault_illegal_return_TXhWelpBGf) OR timeout_cqRQUQH91S OR controlled_exit_IvP66Dxt4S)))</formula>
                <formula name="no_weakness_started_formula_5UdN1smxTR">(NOT PERFORMER AND (segfault_code_V24RobbldD OR segfault_code_MlHMVByLH5 OR segfault_code_SOpcqH5MrS OR segfault_code_AcR137D5vU OR segfault_code_7LyUkNT0JO OR segfault_msg_v3hcviOsox OR illegal_inst_msg_9GIfSTkC3I OR unknown_operand_qmN0ToMxZP OR segfault_glibc_Y6H4TjSrc8 OR segfault_illegal_return_TXhWelpBGf) AND NOT timeout_cqRQUQH91S) or (PERFORMER AND NOT ((segfault_code_V24RobbldD OR segfault_code_MlHMVByLH5 OR segfault_code_SOpcqH5MrS OR segfault_code_AcR137D5vU OR segfault_code_7LyUkNT0JO OR segfault_msg_v3hcviOsox OR illegal_inst_msg_9GIfSTkC3I OR unknown_operand_qmN0ToMxZP OR segfault_glibc_Y6H4TjSrc8 OR segfault_illegal_return_TXhWelpBGf) OR timeout_cqRQUQH91S OR controlled_exit_IvP66Dxt4S))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_cqRQUQH91S" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_IvP66Dxt4S" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_Cct0VAm0wS" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_V24RobbldD">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">132</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_MlHMVByLH5">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">134</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_SOpcqH5MrS">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">135</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_AcR137D5vU">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">136</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_code_7LyUkNT0JO">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">139</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="segfault_msg_v3hcviOsox">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">Segmentation fault</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="illegal_inst_msg_9GIfSTkC3I">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">Illegal instruction</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="unknown_operand_qmN0ToMxZP">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">unknown operand</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="segfault_glibc_Y6H4TjSrc8">
                    <actual encoding="STRING" output_type="STANDARD_ERROR">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">glibc detected</expected>
                </compare_check>
                <compare_check check_type="EXACT_MATCH" name="segfault_illegal_return_TXhWelpBGf">
                    <actual encoding="STRING" output_type="RETURN_CODE">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">132</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="weakness_started_RXZ6OfdHzM8vtmBA4ua5">
                    <actual encoding="STRING" input_id_ref="lttng_output_oHEGtVIexblvhLMM07Kw" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
    </iopairs>
</project>
