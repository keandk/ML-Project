io_pair:
  description: "Has a heap buffer of size 64.  Reads in an ascii string from an environment variable and copies the final 63 characters into the heap buffer.  Then  reads the variable back from the heap buffer in reverse order, but incorrectly uses the size of the original string.  If the original string is longer than 63characters, this will result in an underread.\n\n"
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: LIGGER_ASSERTED
  benigns:
    - inputs:
        - stage: pre_process
          id: source
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          source_enum: 2
          ordinal: 1
          name: LIGGER_ASSERTED
          source: env_var_input
          value_encoding: none
          value_type_enum: 0
    - inputs:
        - value: This is probably not going to overflow a buffer of some sort.
          value_encoding: none
          name: LIGGER_ASSERTED
          stage: pre_process
          id: source
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          ordinal: 1
          stage_enum: 0
          source_enum: 2
          source: env_var_input
    - inputs:
        - source: env_var_input
          id: source
          name: LIGGER_ASSERTED
          ordinal: 1
          value_type_enum: 0
          value_encoding: none
          value: This statement has less than 64 characters, then nothing bad.
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          stage_enum: 0
          stage: pre_process
  exploits:
    - inputs:
        - stage_enum: 0
          source_enum: 2
          value: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
          value_type: USE_TEXT_DIRECTLY
          source: env_var_input
          stage: pre_process
          id: source
          value_type_enum: 0
          ordinal: 1
          value_encoding: none
          name: LIGGER_ASSERTED
    - inputs:
        - id: source
          value_encoding: none
          source: env_var_input
          source_enum: 2
          stage: pre_process
          name: LIGGER_ASSERTED
          ordinal: 1
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value: The quick brown fox jumps over the lazy dog.  Why?  I don't know, because he was in a rush and trying to get somewhere.
          value_type_enum: 0
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"
code_complexity_features:
  - file_name: /tmp/tmp1e28Cz_ss_testcase/src-rose/crypto/mem_dbg.c
    function_name: app_info_hash
    line_number: 0
    feature: ENVIRONMENT_VARIABLE
    feature_group: source_taint
  - file_name: /tmp/tmp1e28Cz_ss_testcase/src-rose/crypto/mem_dbg.c
    function_name: app_info_hash
    line_number: 0
    feature_group: data_type
    feature: typedef
  - file_name: /tmp/tmp1e28Cz_ss_testcase/src-rose/crypto/mem_dbg.c
    function_name: app_info_hash
    line_number: 0
    feature_group: data_flow
    feature: address_as_function_return_value
  - file_name: /tmp/tmp1e28Cz_ss_testcase/src-rose/crypto/mem_dbg.c
    function_name: app_info_hash
    line_number: 0
    feature_group: control_flow
    feature: interprocedural_1