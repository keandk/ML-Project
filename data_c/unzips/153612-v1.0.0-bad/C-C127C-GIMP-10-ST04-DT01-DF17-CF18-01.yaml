io_pair:
  benigns:
    - inputs:
        - value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          stage: pre_process
          source: shared_memory_input
          key: 6802
          flags: 950
          ordinal: 1
          stage_enum: 0
          value_type_enum: 0
          id: source
          size: 105
        - value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          ordinal: 2
          source_enum: 2
          name: INPUT_STRING
          stage_enum: 0
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          source: env_var_input
          value_type_enum: 0
    - inputs:
        - value_encoding: none
          source: shared_memory_input
          source_enum: 6
          flags: 950
          stage_enum: 0
          stage: pre_process
          id: source
          key: 6802
          ordinal: 1
          size: 105
          value_type: USE_TEXT_DIRECTLY
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          value_type_enum: 0
        - name: INPUT_STRING
          ordinal: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type_enum: 0
          stage: pre_process
          source_enum: 2
          value_encoding: none
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          source: env_var_input
    - inputs:
        - flags: 950
          key: 6802
          value_type_enum: 0
          size: 105
          value_encoding: none
          source: shared_memory_input
          stage: pre_process
          source_enum: 6
          id: source
          ordinal: 1
          stage_enum: 0
          value: As long as this statement has more than 64 characters, then nothing bad should happen
          value_type: USE_TEXT_DIRECTLY
        - value_type_enum: 0
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          source: env_var_input
          ordinal: 2
          source_enum: 2
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          name: INPUT_STRING
          stage_enum: 0
  exploits:
    - inputs:
        - value_encoding: base64
          value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          id: source
          flags: 950
          stage_enum: 0
          source: shared_memory_input
          ordinal: 1
          key: 6802
          stage: pre_process
          size: 105
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          value_type_enum: 0
        - value_encoding: none
          value_type_enum: 0
          ordinal: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          source: env_var_input
          stage: pre_process
          source_enum: 2
          stage_enum: 0
          name: INPUT_STRING
    - inputs:
        - stage_enum: 0
          value: SGVsbKUgV6lybGSI
          size: 105
          id: source
          source: shared_memory_input
          key: 6802
          stage: pre_process
          ordinal: 1
          source_enum: 6
          value_type: USE_TEXT_DIRECTLY
          value_encoding: base64
          value_type_enum: 0
          flags: 950
        - value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          stage_enum: 0
          stage: pre_process
          value_type_enum: 0
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_encoding: none
          ordinal: 2
          name: INPUT_STRING
  description: "Has a heap buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the heap buffer.  Then reads in an input and prints out the count of the characters from the heap buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  base_inputs:
    - source: shared_memory_input
      source_enum: 6
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      key: 6802
      size: 105
      flags: 950
code_complexity_features:
  - function_name: tile_swap_find_offset
    line_number: 0
    feature_group: source_taint
    file_name: /tmp/tmp8QORNG_ss_testcase/src-rose/app/base/tile-swap.c
    feature: SHARED_MEMORY
  - line_number: 0
    feature_group: data_type
    feature: array
    file_name: /tmp/tmp8QORNG_ss_testcase/src-rose/app/base/tile-swap.c
    function_name: tile_swap_find_offset
  - file_name: /tmp/tmp8QORNG_ss_testcase/src-rose/app/base/tile-swap.c
    function_name: tile_swap_find_offset
    line_number: 0
    feature_group: data_flow
    feature: buffer_address_array_index
  - feature_group: control_flow
    function_name: tile_swap_find_offset
    line_number: 0
    feature: pointer_to_function
    file_name: /tmp/tmp8QORNG_ss_testcase/src-rose/app/base/tile-swap.c
description: "Creating test case using base program.\nAdded an environment variable read to get a key in order to read in data from shared memory.\nCompleted injection.\n"