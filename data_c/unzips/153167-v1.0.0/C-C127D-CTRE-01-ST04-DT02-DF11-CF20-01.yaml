description: "Creating test case using base program.\nAdded an environment variable read to get a key in order to read in data from shared memory.\nCompleted injection.\n"
code_complexity_features:
  - feature_group: source_taint
    file_name: /tmp/tmpJ35YqP_ss_testcase/src-rose/color.c
    function_name: initlinedraw
    line_number: 0
    feature: SHARED_MEMORY
  - file_name: /tmp/tmpJ35YqP_ss_testcase/src-rose/color.c
    function_name: initlinedraw
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmpJ35YqP_ss_testcase/src-rose/color.c
    function_name: initlinedraw
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmpJ35YqP_ss_testcase/src-rose/color.c
    function_name: initlinedraw
    line_number: 0
    feature_group: control_flow
    feature: sequence
io_pair:
  description: "Has a stack buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  exploits:
    - inputs:
        - source_enum: 6
          stage: pre_process
          value_type_enum: 0
          stage_enum: 0
          ordinal: 1
          flags: 950
          size: 105
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          id: source
          key: 7982
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          value_encoding: base64
        - stage_enum: 0
          value_encoding: none
          name: INPUT_STRING
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          source: env_var_input
          stage: pre_process
          source_enum: 2
          ordinal: 2
          value_type_enum: 0
    - inputs:
        - id: source
          value: SGVsbKUgV6lybGSI
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          stage_enum: 0
          source_enum: 6
          key: 7982
          ordinal: 1
          flags: 950
          size: 105
          source: shared_memory_input
          value_encoding: base64
          value_type_enum: 0
        - value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          value_encoding: none
          stage_enum: 0
          ordinal: 2
          source: env_var_input
          value_type_enum: 0
          name: INPUT_STRING
          source_enum: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
  benigns:
    - inputs:
        - value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          size: 105
          source_enum: 6
          value_encoding: none
          flags: 950
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          ordinal: 1
          key: 7982
          stage_enum: 0
          source: shared_memory_input
          id: source
        - value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          value_type_enum: 0
          value_encoding: none
          source: env_var_input
          ordinal: 2
          name: INPUT_STRING
          stage: pre_process
    - inputs:
        - value_type_enum: 0
          id: source
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          value_encoding: none
          stage_enum: 0
          source_enum: 6
          size: 105
          flags: 950
          value_type: USE_TEXT_DIRECTLY
          source: shared_memory_input
          ordinal: 1
          stage: pre_process
          key: 7982
        - value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          name: INPUT_STRING
          stage_enum: 0
          stage: pre_process
          ordinal: 2
          source_enum: 2
          value_encoding: none
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
    - inputs:
        - stage: pre_process
          key: 7982
          flags: 950
          ordinal: 1
          stage_enum: 0
          id: source
          value_type_enum: 0
          size: 105
          source_enum: 6
          value_encoding: none
          value: As long as this statement has more than 128 characters, then nothing bad should happen
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
        - stage: pre_process
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          ordinal: 2
          stage_enum: 0
          value_type_enum: 0
          name: INPUT_STRING
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          source_enum: 2
  base_inputs:
    - stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      key: 7982
      size: 105
      flags: 950
      source: shared_memory_input
      source_enum: 6