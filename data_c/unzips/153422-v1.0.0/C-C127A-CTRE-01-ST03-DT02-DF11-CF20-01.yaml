io_pair:
  base_inputs:
    - source: socket_input
      source_enum: 5
      stage: co_process
      stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
  exploits:
    - inputs:
        - stage: co_process
          ordinal: 1
          source: socket_input
          stage_enum: 1
          id: source
          address: ss-localhost
          port: 8887
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          source_enum: 5
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value_encoding: base64
        - value_encoding: none
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type_enum: 0
          stage_enum: 0
          name: INPUT_STRING
          source: env_var_input
          value_type: USE_TEXT_DIRECTLY
          ordinal: 2
          source_enum: 2
    - inputs:
        - value_encoding: base64
          port: 8887
          value_type_enum: 0
          source: socket_input
          stage_enum: 1
          value: SGVsbKUgV6lybGSI
          source_enum: 5
          id: source
          address: ss-localhost
          ordinal: 1
          stage: co_process
          value_type: USE_TEXT_DIRECTLY
        - value_encoding: none
          name: INPUT_STRING
          value_type_enum: 0
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          ordinal: 2
          source_enum: 2
          source: env_var_input
  benigns:
    - inputs:
        - port: 8887
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          value_encoding: none
          ordinal: 1
          source: socket_input
          source_enum: 5
          stage: co_process
          id: source
          address: ss-localhost
          stage_enum: 1
        - stage: pre_process
          value_encoding: none
          ordinal: 2
          name: INPUT_STRING
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          source: env_var_input
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          value_type_enum: 0
    - inputs:
        - stage: co_process
          stage_enum: 1
          value_type: USE_TEXT_DIRECTLY
          source: socket_input
          address: ss-localhost
          ordinal: 1
          port: 8887
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          value_encoding: none
          value_type_enum: 0
          id: source
          source_enum: 5
        - value_encoding: none
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          stage_enum: 0
          source: env_var_input
          source_enum: 2
          value_type_enum: 0
          stage: pre_process
          ordinal: 2
          value_type: USE_TEXT_DIRECTLY
    - inputs:
        - source: socket_input
          stage_enum: 1
          address: ss-localhost
          stage: co_process
          value_encoding: none
          value_type_enum: 0
          source_enum: 5
          ordinal: 1
          id: source
          value_type: USE_TEXT_DIRECTLY
          value: As long as this statement has more than 64 characters, then nothing bad should happen
          port: 8887
        - ordinal: 2
          source: env_var_input
          source_enum: 2
          stage: pre_process
          name: INPUT_STRING
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          stage_enum: 0
  description: "Has a stack buffer of size 128.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"
code_complexity_features:
  - function_name: stonesoup_handle_taint
    file_name: /tmp/tmpNWuF9S_ss_testcase/src-rose/color.c
    line_number: 0
    feature_group: source_taint
    feature: SOCKET
  - feature_group: data_type
    file_name: /tmp/tmpNWuF9S_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature: simple
  - file_name: /tmp/tmpNWuF9S_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmpNWuF9S_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: sequence