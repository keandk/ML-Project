io_pair:
  description: "Has a stack buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  base_inputs:
    - source: shared_memory_input
      source_enum: 6
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      key: 8093
      size: 105
      flags: 950
  exploits:
    - inputs:
        - size: 105
          stage_enum: 0
          id: source
          flags: 950
          source: shared_memory_input
          source_enum: 6
          stage: pre_process
          ordinal: 1
          key: 8093
          value_type: USE_TEXT_DIRECTLY
          value_encoding: base64
          value_type_enum: 0
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
        - ordinal: 2
          stage: pre_process
          source_enum: 2
          source: env_var_input
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_encoding: none
          name: INPUT_STRING
          value_type_enum: 0
    - inputs:
        - source: shared_memory_input
          stage: pre_process
          source_enum: 6
          value: SGVsbKUgV6lybGSI
          value_encoding: base64
          id: source
          ordinal: 1
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          key: 8093
          size: 105
          value_type_enum: 0
          flags: 950
        - stage_enum: 0
          source: env_var_input
          source_enum: 2
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          value_type_enum: 0
          ordinal: 2
          value_encoding: none
  benigns:
    - inputs:
        - value_encoding: none
          source: shared_memory_input
          source_enum: 6
          stage_enum: 0
          stage: pre_process
          id: source
          size: 105
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          ordinal: 1
          key: 8093
          flags: 950
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
        - source_enum: 2
          ordinal: 2
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          stage_enum: 0
          source: env_var_input
          value_type_enum: 0
          name: INPUT_STRING
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
    - inputs:
        - id: source
          source_enum: 6
          stage: pre_process
          size: 105
          ordinal: 1
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          source: shared_memory_input
          stage_enum: 0
          value_encoding: none
          key: 8093
          flags: 950
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
        - source_enum: 2
          source: env_var_input
          ordinal: 2
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          name: INPUT_STRING
          value_type_enum: 0
    - inputs:
        - key: 8093
          size: 105
          id: source
          stage_enum: 0
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          stage: pre_process
          value: As long as this statement has more than 128 characters, then nothing bad should happen
          value_encoding: none
          value_type_enum: 0
          ordinal: 1
          flags: 950
        - source: env_var_input
          stage_enum: 0
          source_enum: 2
          ordinal: 2
          value_type_enum: 0
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          value_encoding: none
description: "Creating test case using base program.\nAdded an environment variable read to get a key in order to read in data from shared memory.\nCompleted injection.\n"
code_complexity_features:
  - function_name: dfamust
    line_number: 0
    feature_group: source_taint
    feature: SHARED_MEMORY
    file_name: /tmp/tmpP_WQ4b_ss_testcase/src-rose/src/dfa.c
  - file_name: /tmp/tmpP_WQ4b_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmpP_WQ4b_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmpP_WQ4b_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: control_flow
    feature: sequence