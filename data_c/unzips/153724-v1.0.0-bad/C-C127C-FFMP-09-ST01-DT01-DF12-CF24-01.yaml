io_pair:
  description: "Has a heap buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the heap buffer.  Then reads in an input and prints out the count of the characters from the heap buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: SIMMIE_AUDUN
  benigns:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          source_enum: 2
          stage: pre_process
          stage_enum: 0
          id: source
          ordinal: 1
          value_type_enum: 0
          name: SIMMIE_AUDUN
          source: env_var_input
          value_encoding: none
        - stage: pre_process
          value_encoding: none
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          ordinal: 2
          source: env_var_input
          source_enum: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type_enum: 0
          name: INPUT_STRING
    - inputs:
        - value_encoding: none
          source_enum: 2
          id: source
          value_type_enum: 0
          source: env_var_input
          ordinal: 1
          stage: pre_process
          stage_enum: 0
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          value_type: USE_TEXT_DIRECTLY
          name: SIMMIE_AUDUN
        - name: INPUT_STRING
          value_encoding: none
          source_enum: 2
          stage_enum: 0
          ordinal: 2
          source: env_var_input
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type_enum: 0
    - inputs:
        - value: As long as this statement has more than 64 characters, then nothing bad should happen
          value_type: USE_TEXT_DIRECTLY
          name: SIMMIE_AUDUN
          value_type_enum: 0
          stage_enum: 0
          source: env_var_input
          source_enum: 2
          stage: pre_process
          id: source
          ordinal: 1
          value_encoding: none
        - value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          source: env_var_input
          value_type_enum: 0
          stage: pre_process
          stage_enum: 0
          ordinal: 2
          source_enum: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
  exploits:
    - inputs:
        - ordinal: 1
          value_type: USE_TEXT_DIRECTLY
          id: source
          stage_enum: 0
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          value_encoding: base64
          source_enum: 2
          stage: pre_process
          name: SIMMIE_AUDUN
          value_type_enum: 0
          source: env_var_input
        - ordinal: 2
          stage_enum: 0
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          stage: pre_process
          source_enum: 2
          source: env_var_input
          name: INPUT_STRING
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
    - inputs:
        - name: SIMMIE_AUDUN
          id: source
          source_enum: 2
          stage: pre_process
          ordinal: 1
          source: env_var_input
          stage_enum: 0
          value_encoding: base64
          value: SGVsbKUgV6lybGSI
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
        - ordinal: 2
          value_encoding: none
          source_enum: 2
          value_type_enum: 0
          stage: pre_process
          stage_enum: 0
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          name: INPUT_STRING
code_complexity_features:
  - feature: ENVIRONMENT_VARIABLE
    file_name: /tmp/tmpMnVTPx_ss_testcase/src-rose/ffmpeg.c
    function_name: sub2video_heartbeat
    line_number: 0
    feature_group: source_taint
  - file_name: /tmp/tmpMnVTPx_ss_testcase/src-rose/ffmpeg.c
    function_name: sub2video_heartbeat
    line_number: 0
    feature_group: data_type
    feature: array
  - file_name: /tmp/tmpMnVTPx_ss_testcase/src-rose/ffmpeg.c
    function_name: sub2video_heartbeat
    line_number: 0
    feature_group: data_flow
    feature: var_arg_list
  - file_name: /tmp/tmpMnVTPx_ss_testcase/src-rose/ffmpeg.c
    function_name: capsidae_preoutfitted
    line_number: 0
    feature_group: control_flow
    feature: unconditional_jump
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"