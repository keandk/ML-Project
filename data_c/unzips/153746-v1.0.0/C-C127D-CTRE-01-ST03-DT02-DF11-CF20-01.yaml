io_pair:
  exploits:
    - inputs:
        - port: 8887
          id: source
          stage_enum: 1
          ordinal: 1
          source_enum: 5
          stage: co_process
          value_type_enum: 0
          address: ss-localhost
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          value_encoding: base64
          source: socket_input
          value_type: USE_TEXT_DIRECTLY
        - value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          source: env_var_input
          value_encoding: none
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type_enum: 0
          ordinal: 2
          stage_enum: 0
          stage: pre_process
          name: INPUT_STRING
    - inputs:
        - value_encoding: base64
          source_enum: 5
          value_type: USE_TEXT_DIRECTLY
          value: SGVsbKUgV6lybGSI
          source: socket_input
          stage_enum: 1
          stage: co_process
          ordinal: 1
          id: source
          address: ss-localhost
          port: 8887
          value_type_enum: 0
        - source: env_var_input
          name: INPUT_STRING
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
          value_type_enum: 0
          source_enum: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_encoding: none
          ordinal: 2
          stage: pre_process
  base_inputs:
    - source: socket_input
      source_enum: 5
      stage: co_process
      stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
  benigns:
    - inputs:
        - ordinal: 1
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          value_type_enum: 0
          port: 8887
          source_enum: 5
          stage: co_process
          address: ss-localhost
          id: source
          stage_enum: 1
          source: socket_input
        - value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          name: INPUT_STRING
          ordinal: 2
          source: env_var_input
          stage: pre_process
          value_encoding: none
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          stage_enum: 0
          value_type_enum: 0
    - inputs:
        - source: socket_input
          id: source
          source_enum: 5
          stage: co_process
          address: ss-localhost
          ordinal: 1
          stage_enum: 1
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          value_encoding: none
          port: 8887
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
        - value_encoding: none
          source: env_var_input
          stage_enum: 0
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          name: INPUT_STRING
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          ordinal: 2
          source_enum: 2
          value_type_enum: 0
    - inputs:
        - id: source
          stage_enum: 1
          source_enum: 5
          ordinal: 1
          stage: co_process
          address: ss-localhost
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          value_type_enum: 0
          value: As long as this statement has more than 128 characters, then nothing bad should happen
          port: 8887
          source: socket_input
        - value_type_enum: 0
          source_enum: 2
          value_encoding: none
          ordinal: 2
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          name: INPUT_STRING
          stage_enum: 0
  description: "Has a stack buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
code_complexity_features:
  - file_name: /tmp/tmp9kgM7j_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: source_taint
    feature: SOCKET
  - file_name: /tmp/tmp9kgM7j_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmp9kgM7j_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmp9kgM7j_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: sequence
description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"