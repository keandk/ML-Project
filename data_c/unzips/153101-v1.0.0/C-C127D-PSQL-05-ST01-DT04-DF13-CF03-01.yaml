io_pair:
  benigns:
    - inputs:
        - source: env_var_input
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          value_type: USE_TEXT_DIRECTLY
          name: SPHERULA_STOMATOTOMIES
          value_encoding: none
          value_type_enum: 0
          stage: pre_process
          stage_enum: 0
          ordinal: 1
          source_enum: 2
          id: source
        - source: env_var_input
          name: INPUT_STRING
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          ordinal: 2
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          value_type_enum: 0
          stage_enum: 0
          value_encoding: none
          stage: pre_process
    - inputs:
        - stage: pre_process
          stage_enum: 0
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          value_type: USE_TEXT_DIRECTLY
          name: SPHERULA_STOMATOTOMIES
          value_encoding: none
          source_enum: 2
          id: source
          value_type_enum: 0
          ordinal: 1
          source: env_var_input
        - source: env_var_input
          name: INPUT_STRING
          ordinal: 2
          stage: pre_process
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          source_enum: 2
          stage_enum: 0
    - inputs:
        - value: As long as this statement has more than 128 characters, then nothing bad should happen
          source_enum: 2
          value_encoding: none
          id: source
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          ordinal: 1
          source: env_var_input
          name: SPHERULA_STOMATOTOMIES
          stage_enum: 0
        - source_enum: 2
          value_encoding: none
          value_type_enum: 0
          stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          source: env_var_input
          ordinal: 2
          name: INPUT_STRING
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: SPHERULA_STOMATOTOMIES
  description: "Has a stack buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  exploits:
    - inputs:
        - value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          ordinal: 1
          id: source
          source: env_var_input
          stage: pre_process
          source_enum: 2
          stage_enum: 0
          value_encoding: base64
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          name: SPHERULA_STOMATOTOMIES
        - source_enum: 2
          stage: pre_process
          source: env_var_input
          ordinal: 2
          stage_enum: 0
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          name: INPUT_STRING
          value_type_enum: 0
          value_encoding: none
    - inputs:
        - name: SPHERULA_STOMATOTOMIES
          source: env_var_input
          source_enum: 2
          value: SGVsbKUgV6lybGSI
          ordinal: 1
          id: source
          value_type_enum: 0
          stage: pre_process
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value_encoding: base64
        - stage: pre_process
          value_type_enum: 0
          source: env_var_input
          ordinal: 2
          stage_enum: 0
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          value_encoding: none
          source_enum: 2
          value_type: USE_TEXT_DIRECTLY
code_complexity_features:
  - file_name: /tmp/tmpdBXHYw_ss_testcase/src-rose/src/backend/utils/resowner/resowner.c
    function_name: ResourceOwnerForgetCatCacheRef
    line_number: 0
    feature: ENVIRONMENT_VARIABLE
    feature_group: source_taint
  - function_name: ResourceOwnerForgetCatCacheRef
    line_number: 0
    feature: heap_pointer
    feature_group: data_type
    file_name: /tmp/tmpdBXHYw_ss_testcase/src-rose/src/backend/utils/resowner/resowner.c
  - line_number: 0
    feature: address_as_linear_expression
    file_name: /tmp/tmpdBXHYw_ss_testcase/src-rose/src/backend/utils/resowner/resowner.c
    function_name: ResourceOwnerForgetCatCacheRef
    feature_group: data_flow
  - function_name: ResourceOwnerForgetCatCacheRef
    line_number: 0
    feature_group: control_flow
    file_name: /tmp/tmpdBXHYw_ss_testcase/src-rose/src/backend/utils/resowner/resowner.c
    feature: infinite_loop
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"