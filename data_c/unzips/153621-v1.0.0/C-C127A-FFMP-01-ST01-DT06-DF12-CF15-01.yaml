io_pair:
  benigns:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          source: env_var_input
          value_type_enum: 0
          stage_enum: 0
          ordinal: 1
          id: source
          name: SILKWORKER_REFORMER
          stage: pre_process
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          source_enum: 2
        - stage: pre_process
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          ordinal: 2
          value_type: USE_TEXT_DIRECTLY
          source: env_var_input
          value_encoding: none
          name: INPUT_STRING
          value_type_enum: 0
          source_enum: 2
          stage_enum: 0
    - inputs:
        - id: source
          value_encoding: none
          stage: pre_process
          stage_enum: 0
          source: env_var_input
          ordinal: 1
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          name: SILKWORKER_REFORMER
        - stage_enum: 0
          name: INPUT_STRING
          value_type_enum: 0
          value_encoding: none
          ordinal: 2
          source_enum: 2
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
    - inputs:
        - source_enum: 2
          stage: pre_process
          ordinal: 1
          source: env_var_input
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          id: source
          value: As long as this statement has more than 64 characters, then nothing bad should happen
          value_encoding: none
          value_type_enum: 0
          name: SILKWORKER_REFORMER
        - value_type_enum: 0
          stage_enum: 0
          name: INPUT_STRING
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          stage: pre_process
          source_enum: 2
          ordinal: 2
          source: env_var_input
  exploits:
    - inputs:
        - id: source
          name: SILKWORKER_REFORMER
          stage: pre_process
          source_enum: 2
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          stage_enum: 0
          source: env_var_input
          value_encoding: base64
          value_type_enum: 0
          ordinal: 1
          value_type: USE_TEXT_DIRECTLY
        - source_enum: 2
          value_encoding: none
          name: INPUT_STRING
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          source: env_var_input
          stage_enum: 0
          value_type_enum: 0
          ordinal: 2
    - inputs:
        - source_enum: 2
          stage_enum: 0
          source: env_var_input
          value_encoding: base64
          id: source
          ordinal: 1
          value_type_enum: 0
          value: SGVsbKUgV6lybGSI
          value_type: USE_TEXT_DIRECTLY
          name: SILKWORKER_REFORMER
          stage: pre_process
        - ordinal: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          source_enum: 2
          stage_enum: 0
          value_type_enum: 0
          stage: pre_process
          source: env_var_input
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
  description: "Has a stack buffer of size 128.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  base_inputs:
    - source_enum: 2
      id: source
      name: SILKWORKER_REFORMER
      stage_enum: 0
      stage: pre_process
      ordinal: 1
      source: env_var_input
code_complexity_features:
  - feature: ENVIRONMENT_VARIABLE
    feature_group: source_taint
    file_name: /tmp/tmpq2IyxP_ss_testcase/src-rose/libavdevice/avdevice.c
    function_name: avdevice_version
    line_number: 0
  - feature_group: data_type
    file_name: /tmp/tmpq2IyxP_ss_testcase/src-rose/libavdevice/avdevice.c
    line_number: 0
    feature: typedef
    function_name: avdevice_version
  - feature_group: data_flow
    feature: var_arg_list
    file_name: /tmp/tmpq2IyxP_ss_testcase/src-rose/libavdevice/avdevice.c
    function_name: avdevice_version
    line_number: 0
  - file_name: /tmp/tmpq2IyxP_ss_testcase/src-rose/libavdevice/avdevice.c
    function_name: rockman_ottweilian
    line_number: 0
    feature: interprocedural_50
    feature_group: control_flow
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"