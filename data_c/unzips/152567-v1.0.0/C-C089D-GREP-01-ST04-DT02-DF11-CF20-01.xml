<?xml version="1.0" encoding="utf-8"?>
<project base_program="C-GREP" language="C" name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01" targeted_architecture="ANY" targeted_os="LINUX" test_case_type="ALL" xmlns="urn:stonesoup:project">
    <description>Creating test case using base program.
Added an environment variable read to get a key in order to read in data from shared memory.
Completed injection.
</description>
    <additional_information>
        <keyvalue key="algorithmic_variant_name">UNSPECIFIED</keyvalue>
        <keyvalue key="root_cause">UNSPECIFIED</keyvalue>
    </additional_information>
    <structure install="install" iodata="testData" scoredata="testOutput" scripts="scripts" source="src"/>
    <run_command>$SS_TC_ROOT/$SS_TC_INSTALL/bin/grep</run_command>
    <weakness generation_method="FAULT_INJECTED">
        <variant cwe="CWE-89" name="CWE-89-D"/>
        <features>
            <taint_source file_name="/src/dfa.c" line_number="0" type="SHARED_MEMORY">
                <method name="dfamust"/>
            </taint_source>
            <data_type file_name="/src/dfa.c" line_number="0" type="SIMPLE">
                <method name="dfamust"/>
            </data_type>
            <data_flow file_name="/src/dfa.c" line_number="0" type="BASIC">
                <method name="dfamust"/>
            </data_flow>
            <control_flow file_name="/src/dfa.c" line_number="0" type="SEQUENCE">
                <method name="dfamust"/>
            </control_flow>
        </features>
    </weakness>
    <build_commands cppflags="-DSTONESOUP_TRACE=1" libs="-lssl -lpq -ldl">
        <command>./configure --prefix=&quot;$SS_TC_ROOT/$SS_TC_INSTALL&quot; --exec-prefix=&quot;$SS_TC_ROOT/$SS_TC_INSTALL&quot; --with-included-regex</command>
        <command>make V=1 CC=&quot;$SS_CC&quot; CCLD=&quot;$SS_LNK&quot;</command>
        <command>make V=1 install CC=&quot;$SS_CC&quot; CCLD=&quot;$SS_LNK&quot;</command>
    </build_commands>
    <iopairs>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-01" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>all words beginning with e or x, case sensitive
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;shipper1&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_quxzekbihjwlijxq" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_quxzekbihjwlijxq.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_quxzekbihjwlijxq</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">^[ex] input/dict.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_quxzekbihjwlijxq" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_BsSNqRpC0W" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-01-Default">
                <formula name="GOOD-01-Default">STDOUT-01 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-01">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-01/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-02" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>find BIRMINGHAM, ignore case, recursive
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;NewShipper&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_bgqdycviyzkblzve" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_bgqdycviyzkblzve.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_bgqdycviyzkblzve</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-r -i BIRMINGHAM input/zip/</run_command>
            <post_processes scheme="SEQUENCE">
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">sort $SS_LOG_EXECUTE_STDOUT -o $SS_LOG_EXECUTE_STDOUT_tmp &amp;&amp; mv $SS_LOG_EXECUTE_STDOUT_tmp $SS_LOG_EXECUTE_STDOUT</script>
                </process>
                <process>
                    <database database_name="northwind_bgqdycviyzkblzve" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_SFQFDLCiKu" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-02-Default">
                <formula name="GOOD-02-Default">STDOUT-02 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-02">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-02/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-03" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>read extented regular expressions from file
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;ShippingCompany&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_cximdssbkprjkpjs" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_cximdssbkprjkpjs.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_cximdssbkprjkpjs</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-E -f input/grep-good-03-expr.txt input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_cximdssbkprjkpjs" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_iyJbzsaGDQ" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-03-Default">
                <formula name="GOOD-03-Default">STDOUT-03 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-03">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-03/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-04" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>search for entire words matching a specific pattern
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;shipper1&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_kecrmvivtgtmhzxs" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_kecrmvivtgtmhzxs.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_kecrmvivtgtmhzxs</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-w -f input/grep-good-04-expr.txt input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_kecrmvivtgtmhzxs" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_xey4GQPUE4" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-04-Default">
                <formula name="GOOD-04-Default">STDOUT-04 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-04">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-04/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-05" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>use mmap(), find NASDAQ in file
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;NewShipper&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_pskaaukusohjwrsa" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_pskaaukusohjwrsa.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_pskaaukusohjwrsa</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">--mmap NASDAQ input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_pskaaukusohjwrsa" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_aJOpmib7Dt" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-05-Default">
                <formula name="GOOD-05-Default">STDOUT-05 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-05">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-05/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-06" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>match lines not containing NASDAQ, ignore case, count
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;ShippingCompany&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_pksfcewduxjgzjak" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_pksfcewduxjgzjak.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_pksfcewduxjgzjak</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-v -i -c NASDAQ input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_pksfcewduxjgzjak" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_vWnCQBnRzN" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-06-Default">
                <formula name="GOOD-06-Default">STDOUT-06 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-06">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-06/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-07" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>grep stdin (a device), match words beginning w/ D, P, or Z, redirect file into stdin
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;shipper1&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_uxlnlmaxjmjimuzz" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_uxlnlmaxjmjimuzz.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_uxlnlmaxjmjimuzz</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-D read -e ^[DPZ] /dev/stdin &lt; input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_uxlnlmaxjmjimuzz" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_iLEAhBREoY" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-07-Default">
                <formula name="GOOD-07-Default">STDOUT-07 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-07">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-07/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-08" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>extended grep, print number of lines of context
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;NewShipper&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_dsldxdkotjfpirqj" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_dsldxdkotjfpirqj.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_dsldxdkotjfpirqj</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-E -C 15 ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_dsldxdkotjfpirqj" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_EmWmz3thHI" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-08-Default">
                <formula name="GOOD-08-Default">STDOUT-08 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-08">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-08/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-09" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>lines not beginning w/ B, R or T
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;ShippingCompany&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_sotxbqlxuimddeyz" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_sotxbqlxuimddeyz.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_sotxbqlxuimddeyz</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-v ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_sotxbqlxuimddeyz" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_hWYF4WEqYt" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-09-Default">
                <formula name="GOOD-09-Default">STDOUT-09 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-09">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-09/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-GOOD-10" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>count lines not beginning w/ B, R or T
Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;shipper1&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_rclrejvylgskizlx" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_rclrejvylgskizlx.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_rclrejvylgskizlx</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-c -v ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_rclrejvylgskizlx" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_HcZ33Jstux" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-10-Default">
                <formula name="GOOD-10-Default">STDOUT-10 AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT-10">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-10/std-out.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-BAD-01" reset_scheme="NONE" timeout="300" type="BAD">
            <description>Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>EXECUTE_UNAUTHORIZED_CODE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;BadShipper'), ('80','BadShipper2&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_jovhbcqnndqctqfk" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_jovhbcqnndqctqfk.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_jovhbcqnndqctqfk</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-E -C 15 ^[BRT] input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_jovhbcqnndqctqfk" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_7KFmNfsl9nUZhUU20c3P" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="db_sql_formula_ozKrKwTfQf">
                <formula name="db_sql_formula_ozKrKwTfQf">weakness_started_aO4TbYkIysGxopHlJfrc AND ((NOT PERFORMER AND (db_sql_output_Vcd1xTsxhh OR db_sql_output_z7YJ337JjA OR database_insert_check_uKuUXWYjgp) AND NOT timeout_UHFJ7hiDgF) or (PERFORMER AND NOT ((db_sql_output_Vcd1xTsxhh OR db_sql_output_z7YJ337JjA OR database_insert_check_uKuUXWYjgp) OR timeout_UHFJ7hiDgF)))</formula>
                <formula name="no_weakness_started_formula_b0hnc7bxKA">(NOT PERFORMER AND (db_sql_output_Vcd1xTsxhh OR db_sql_output_z7YJ337JjA OR database_insert_check_uKuUXWYjgp) AND NOT timeout_UHFJ7hiDgF) or (PERFORMER AND NOT ((db_sql_output_Vcd1xTsxhh OR db_sql_output_z7YJ337JjA OR database_insert_check_uKuUXWYjgp) OR timeout_UHFJ7hiDgF))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_UHFJ7hiDgF" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_olwoNJXrfF" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_BffAhrXCka" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <compare_check check_type="CONTAINS" name="db_sql_output_Vcd1xTsxhh">
                    <actual encoding="STRING" output_type="FILE_CONTENTS">logfile.txt</actual>
                    <expected encoding="STRING" type="USE_TEXT">Query OK, 2 rows affected</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="db_sql_output_z7YJ337JjA">
                    <actual encoding="STRING" output_type="FILE_CONTENTS">logfile.txt</actual>
                    <expected encoding="STRING" type="USE_TEXT">Query OK, 4 rows affected</expected>
                </compare_check>
                <simple_check check_type="SCRIPT" encoding="STRING" name="database_insert_check_uKuUXWYjgp" type="USE_TEXT">export PGPASSWORD=$DBPGPASSWORD; if `psql -U $DBPGUSER -h $DBPGHOST -d $SS_DBPGDATABASE -c &quot;select * from shippers;&quot; | grep -q &quot;BadShipper2\|ShipAttack&quot;`; then true; else false; fi;</simple_check>
                <compare_check check_type="CONTAINS" name="weakness_started_aO4TbYkIysGxopHlJfrc">
                    <actual encoding="STRING" input_id_ref="lttng_output_7KFmNfsl9nUZhUU20c3P" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
        <iopair name="C-C089D-GREP-01-ST04-DT02-DF11-CF20-01-BAD-02" reset_scheme="NONE" timeout="300" type="BAD">
            <description>Good inputs: 1) name of shipper for use in Sql databaseBad inputs:SQL argument injection 

</description>
            <technical_impact>EXECUTE_UNAUTHORIZED_CODE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">gcc -o &quot;$SS_TC_ROOT/scripts/shm_setup&quot; &quot;$SS_TC_ROOT/scripts/shm_setup.c&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf 'env SS_DBPGDATABASE;\n' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup shm_setup -k 1483 -s 73 -m &quot;ShippersRUs'), ('20','BadShips'), ('65','ShipAttack'), ('45', 'MultiShip&quot; -o /opt/stonesoup/workspace/inputDaemons/shared_memory_01.id &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid &amp;&amp; echo &quot;Shared memory created&quot;</script>
                </process>
                <process>
                    <database database_name="northwind_psegbjbgyotzzcxi" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_FILE_CONTENTS">/opt/stonesoup/workspace/scripts/northwind_create_northwind_psegbjbgyotzzcxi.sql</database>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_DBPGDATABASE" type="USE_TEXT">northwind_psegbjbgyotzzcxi</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">sleep 2 &amp;&amp; printf &quot;Sleeping to allow DB to be created.&quot;</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">-E -f input/grep-good-03-expr.txt input/mktsymbols.txt</run_command>
            <post_processes scheme="SEQUENCE">
                <process>
                    <database database_name="northwind_psegbjbgyotzzcxi" database_type="POSTGRESQL" encoding="STRING" server="ss-db-postgres" type="USE_TEXT">DROP DATABASE IF EXISTS &quot;$SS_DBPGDATABASE;&quot;</database>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.pid&quot;) &amp;&amp; echo &quot;Killed shared memory server.&quot;; else echo &quot;Failed: Shared memory server PID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot; ]]; then ipcrm -m $(cat &quot;/opt/stonesoup/workspace/inputDaemons/shared_memory_01.id&quot;) &amp;&amp; echo &quot;Deleted shared memory segment.&quot;; else echo &quot;Failed: Shared memory ID file does not exist.&quot;; fi</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_rKJipnkDA4wpcObghFh3" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="db_sql_formula_097BTmBR01">
                <formula name="db_sql_formula_097BTmBR01">weakness_started_ytW9HOKhgcVIXt7EvWWF AND ((NOT PERFORMER AND (db_sql_output_iuu7mnh5F5 OR db_sql_output_rRYXR6oujT OR database_insert_check_A98Vt4OSXr) AND NOT timeout_dI2bWGUFYM) or (PERFORMER AND NOT ((db_sql_output_iuu7mnh5F5 OR db_sql_output_rRYXR6oujT OR database_insert_check_A98Vt4OSXr) OR timeout_dI2bWGUFYM)))</formula>
                <formula name="no_weakness_started_formula_mEd3JOUOVE">(NOT PERFORMER AND (db_sql_output_iuu7mnh5F5 OR db_sql_output_rRYXR6oujT OR database_insert_check_A98Vt4OSXr) AND NOT timeout_dI2bWGUFYM) or (PERFORMER AND NOT ((db_sql_output_iuu7mnh5F5 OR db_sql_output_rRYXR6oujT OR database_insert_check_A98Vt4OSXr) OR timeout_dI2bWGUFYM))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_dI2bWGUFYM" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_zs9SV530kO" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_8RcPMz5iZn" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <compare_check check_type="CONTAINS" name="db_sql_output_iuu7mnh5F5">
                    <actual encoding="STRING" output_type="FILE_CONTENTS">logfile.txt</actual>
                    <expected encoding="STRING" type="USE_TEXT">Query OK, 2 rows affected</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="db_sql_output_rRYXR6oujT">
                    <actual encoding="STRING" output_type="FILE_CONTENTS">logfile.txt</actual>
                    <expected encoding="STRING" type="USE_TEXT">Query OK, 4 rows affected</expected>
                </compare_check>
                <simple_check check_type="SCRIPT" encoding="STRING" name="database_insert_check_A98Vt4OSXr" type="USE_TEXT">export PGPASSWORD=$DBPGPASSWORD; if `psql -U $DBPGUSER -h $DBPGHOST -d $SS_DBPGDATABASE -c &quot;select * from shippers;&quot; | grep -q &quot;BadShipper2\|ShipAttack&quot;`; then true; else false; fi;</simple_check>
                <compare_check check_type="CONTAINS" name="weakness_started_ytW9HOKhgcVIXt7EvWWF">
                    <actual encoding="STRING" input_id_ref="lttng_output_rKJipnkDA4wpcObghFh3" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
    </iopairs>
</project>
