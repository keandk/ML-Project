io_pair:
  base_inputs:
    - source: socket_input
      source_enum: 5
      stage: co_process
      stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
  exploits:
    - inputs:
        - source_enum: 5
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 1
          stage: co_process
          source: socket_input
          value: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
          value_type_enum: 0
          id: source
          address: ss-localhost
          ordinal: 1
          port: 8887
    - inputs:
        - stage_enum: 1
          id: source
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          address: ss-localhost
          port: 8887
          value: The quick brown fox jumps over the lazy dog.  Why?  I don't know, because he was in a rush and trying to get somewhere.
          source: socket_input
          stage: co_process
          source_enum: 5
          value_type_enum: 0
          ordinal: 1
  description: "Has a heap buffer of size 64.  Reads in an ascii string from an environment variable and copies the final 63 characters into the heap buffer.  Then  reads the variable back from the heap buffer in reverse order, but incorrectly uses the size of the original string.  If the original string is longer than 63characters, this will result in an underread.\n\n"
  benigns:
    - inputs:
        - stage_enum: 1
          source_enum: 5
          port: 8887
          stage: co_process
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          value_type_enum: 0
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          address: ss-localhost
          id: source
          ordinal: 1
          source: socket_input
    - inputs:
        - source_enum: 5
          value: This is probably not going to overflow a buffer of some sort.
          address: ss-localhost
          source: socket_input
          value_type: USE_TEXT_DIRECTLY
          ordinal: 1
          stage_enum: 1
          stage: co_process
          id: source
          port: 8887
          value_type_enum: 0
          value_encoding: none
    - inputs:
        - ordinal: 1
          value_encoding: none
          source: socket_input
          source_enum: 5
          stage: co_process
          stage_enum: 1
          port: 8887
          address: ss-localhost
          id: source
          value_type: USE_TEXT_DIRECTLY
          value: This statement has less than 64 characters, then nothing bad.
          value_type_enum: 0
code_complexity_features:
  - feature: SOCKET
    feature_group: source_taint
    function_name: stonesoup_handle_taint
    line_number: 0
    file_name: /tmp/tmpAKiYgI_ss_testcase/src-rose/crypto/evp/e_aes.c
  - feature_group: data_type
    feature: void_pointer
    file_name: /tmp/tmpAKiYgI_ss_testcase/src-rose/crypto/evp/e_aes.c
    function_name: stonesoup_handle_taint
    line_number: 0
  - line_number: 0
    feature_group: data_flow
    feature: address_as_linear_expression
    file_name: /tmp/tmpAKiYgI_ss_testcase/src-rose/crypto/evp/e_aes.c
    function_name: stonesoup_handle_taint
  - file_name: /tmp/tmpAKiYgI_ss_testcase/src-rose/crypto/evp/e_aes.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: set_jump_long_jump
description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"