description: "Creating test case using base program.\nAdded an environment variable read to get a key in order to read in data from shared memory.\nCompleted injection.\n"
code_complexity_features:
  - feature: SHARED_MEMORY
    function_name: dfamust
    line_number: 0
    file_name: /tmp/tmp3EC36g_ss_testcase/src-rose/src/dfa.c
    feature_group: source_taint
  - file_name: /tmp/tmp3EC36g_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmp3EC36g_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: data_flow
    feature: basic
  - file_name: /tmp/tmp3EC36g_ss_testcase/src-rose/src/dfa.c
    function_name: dfamust
    line_number: 0
    feature_group: control_flow
    feature: sequence
io_pair:
  exploits:
    - inputs:
        - size: 596
          stage_enum: 0
          key: 6269
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          flags: 950
          source_enum: 6
          stage: pre_process
          ordinal: 1
          value
          id: source
          value_type_enum: 0
          value_encoding: none
    - inputs:
        - stage_enum: 0
          stage: pre_process
          ordinal: 1
          source_enum: 6
          value: This is probably going to overflow a buffer of some sort.  Let's run it anyway and see what happens.  I hope that everything turns out ok, because I would love to see what this looks like in all CAPS.  Converting ASCII characters to upper case is easy, you can either call a system function, or just add the standard difference between the start of the two character sets.  But, I am sure there is a reason that system functions exist for this sort of functionality.
          source: shared_memory_input
          value_type: USE_TEXT_DIRECTLY
          key: 6269
          size: 596
          flags: 950
          value_encoding: none
          value_type_enum: 0
          id: source
  description: "Has a fixed stack buffer of size 64, allocated within a struct When input has a larger size, the stack buffer will be over read\n\n"
  benigns:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          source_enum: 6
          stage_enum: 0
          stage: pre_process
          value_type_enum: 0
          id: source
          key: 6269
          size: 596
          ordinal: 1
          flags: 950
          value: AAAAAAAAAAAAAAAAAAAAAAA
          value_encoding: none
          source: shared_memory_input
    - inputs:
        - source: shared_memory_input
          value: Hello World!
          stage: pre_process
          key: 6269
          size: 596
          source_enum: 6
          id: source
          stage_enum: 0
          ordinal: 1
          flags: 950
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          value_type_enum: 0
    - inputs:
        - value_encoding: none
          value_type_enum: 0
          source: shared_memory_input
          value: Short is good
          stage: pre_process
          ordinal: 1
          id: source
          source_enum: 6
          size: 596
          key: 6269
          stage_enum: 0
          flags: 950
          value_type: USE_TEXT_DIRECTLY
  base_inputs:
    - source: shared_memory_input
      source_enum: 6
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      key: 6269
      size: 596
      flags: 950