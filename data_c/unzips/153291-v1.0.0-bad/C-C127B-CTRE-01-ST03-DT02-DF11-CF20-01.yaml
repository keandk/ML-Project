description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"
io_pair:
  base_inputs:
    - stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
      source: socket_input
      source_enum: 5
      stage: co_process
  benigns:
    - inputs:
        - stage: co_process
          value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          source: socket_input
          value_type_enum: 0
          value_encoding: none
          source_enum: 5
          value_type: USE_TEXT_DIRECTLY
          id: source
          ordinal: 1
          address: ss-localhost
          stage_enum: 1
          port: 8887
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          stage_enum: 1
          port: 8887
          value_type_enum: 0
          address: ss-localhost
          source_enum: 5
          source: socket_input
          stage: co_process
          value_encoding: none
          value: This is probably not going to overflow a buffer of some sort.
          id: source
          ordinal: 1
    - inputs:
        - source: socket_input
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          stage: co_process
          value_encoding: none
          id: source
          address: ss-localhost
          ordinal: 1
          value: This statement has less than 64 characters, then nothing bad.
          source_enum: 5
          stage_enum: 1
          port: 8887
  description: "Has a heap buffer of size 64.  Reads in an ascii string from an environment variable and copies the final 63 characters into the heap buffer.  Then  reads the variable back from the heap buffer in reverse order, but incorrectly uses the size of the original string.  If the original string is longer than 63characters, this will result in an underread.\n\n"
  exploits:
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          address: ss-localhost
          source_enum: 5
          stage: co_process
          source: socket_input
          value: abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
          id: source
          stage_enum: 1
          ordinal: 1
          port: 8887
          value_encoding: none
          value_type_enum: 0
    - inputs:
        - source_enum: 5
          source: socket_input
          address: ss-localhost
          value_encoding: none
          id: source
          port: 8887
          stage: co_process
          stage_enum: 1
          ordinal: 1
          value: The quick brown fox jumps over the lazy dog.  Why?  I don't know, because he was in a rush and trying to get somewhere.
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
code_complexity_features:
  - file_name: /tmp/tmpS7LOaN_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: source_taint
    feature: SOCKET
  - file_name: /tmp/tmpS7LOaN_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_type
    feature: simple
  - feature_group: data_flow
    feature: basic
    file_name: /tmp/tmpS7LOaN_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
  - file_name: /tmp/tmpS7LOaN_ss_testcase/src-rose/color.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: sequence