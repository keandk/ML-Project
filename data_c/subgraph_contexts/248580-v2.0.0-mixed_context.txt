# Subgraphs for folder: 248580-v2.0.0-mixed
# Total center nodes with subgraphs: 8

START_SUBGRAPH center_node=30064771125
# Node count: 5
# Neighbor count: 4
  "30064771116" -> "30064771125" [label="CDG"];
  "30064771116" [label="CALL", ARGUMENT_INDEX="-1", CODE="acceptSocket == SOCKET_ERROR", COLUMN_NUMBER="21", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="106", METHOD_FULL_NAME="<operator>.equals", NAME="<operator>.equals", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771123" -> "30064771125" [label="POST_DOMINATE"];
  "30064771123" [label="CALL", ARGUMENT_INDEX="3", CODE="sizeof(wchar_t) * (100 - dataLen - 1)", COLUMN_NUMBER="75", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="111", METHOD_FULL_NAME="<operator>.multiplication", NAME="<operator>.multiplication", ORDER="3", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771124" [label="CALL", ARGUMENT_INDEX="1", CODE="sizeof(wchar_t)", COLUMN_NUMBER="75", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="111", METHOD_FULL_NAME="<operator>.sizeOf", NAME="<operator>.sizeOf", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771125" -> "30064771123" [label="REACHING_DEF", property="100 - dataLen - 1"];
  "30064771125" -> "30064771124" [label="REACHING_DEF", property="100 - dataLen - 1"];
  "30064771125" -> "30064771126" [label="AST"];
  "30064771125" [label="CALL", ARGUMENT_INDEX="2", CODE="100 - dataLen - 1", COLUMN_NUMBER="94", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="111", METHOD_FULL_NAME="<operator>.subtraction", NAME="<operator>.subtraction", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771126" -> "30064771125" [label="REACHING_DEF", property="100 - dataLen"];
  "30064771126" [label="CALL", ARGUMENT_INDEX="1", CODE="100 - dataLen", COLUMN_NUMBER="94", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="111", METHOD_FULL_NAME="<operator>.subtraction", NAME="<operator>.subtraction", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
END_SUBGRAPH center_node=30064771125

START_SUBGRAPH center_node=47244640274
# Node count: 1
# Neighbor count: 0
  "47244640274" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L\"*.*\");
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="185", ORDER="6", PARSER_TYPE_NAME="CASTIfStatement"];
END_SUBGRAPH center_node=47244640274

START_SUBGRAPH center_node=30064771174
# Node count: 4
# Neighbor count: 3
  "30064771174" -> "30064771175" [label="POST_DOMINATE"];
  "30064771174" -> "68719476801" [label="AST"];
  "30064771174" -> "68719476802" [label="DOMINATE"];
  "30064771174" [label="CALL", ARGUMENT_INDEX="3", CODE="dataBuffer[100] = COMMAND_ARG2", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="183", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="4", SIGNATURE="", TYPE_FULL_NAME="wchar_t[100]"];
  "30064771175" -> "30064771174" [label="REACHING_DEF", property="COMMAND_ARG2"];
  "30064771175" [label="CALL", ARGUMENT_INDEX="2", CODE="COMMAND_ARG2", COLUMN_NUMBER="31", DISPATCH_TYPE="INLINED", LINE_NUMBER="183", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnlp_02.c:32:32:COMMAND_ARG2:0", NAME="COMMAND_ARG2", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="char*"];
  "68719476801" -> "30064771174" [label="REACHING_DEF", property="dataBuffer"];
  "68719476801" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="dataBuffer", COLUMN_NUMBER="13", LINE_NUMBER="183", NAME="dataBuffer", ORDER="1", TYPE_FULL_NAME="wchar_t[100]"];
  "68719476802" -> "30064771174" [label="POST_DOMINATE"];
  "68719476802" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="data", COLUMN_NUMBER="5", LINE_NUMBER="184", NAME="data", ORDER="1", TYPE_FULL_NAME="wchar_t*"];
END_SUBGRAPH center_node=30064771174

START_SUBGRAPH center_node=47244640272
# Node count: 2
# Neighbor count: 1
  "47244640272" -> "47244640273" [label="AST"];
  "47244640272" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine(\"Benign, fixed string\");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L\"*.*\");
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="163", ORDER="6", PARSER_TYPE_NAME="CASTIfStatement"];
  "47244640273" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="else", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="ELSE", LINE_NUMBER="169", ORDER="3", PARSER_TYPE_NAME="CASTCompoundStatement"];
END_SUBGRAPH center_node=47244640272

START_SUBGRAPH center_node=47244640257
# Node count: 1
# Neighbor count: 0
  "47244640257" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket...", COLUMN_NUMBER="13", CONTROL_STRUCTURE_TYPE="DO", LINE_NUMBER="78", ORDER="10", PARSER_TYPE_NAME="CASTDoStatement"];
END_SUBGRAPH center_node=47244640257

START_SUBGRAPH center_node=30064771184
# Node count: 2
# Neighbor count: 1
  "30064771183" -> "30064771184" [label="DOMINATE"];
  "30064771183" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B1()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="198", METHOD_FULL_NAME="goodG2B1", NAME="goodG2B1", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="void"];
  "30064771184" -> "30064771183" [label="POST_DOMINATE"];
  "30064771184" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B2()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="199", METHOD_FULL_NAME="goodG2B2", NAME="goodG2B2", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="void"];
END_SUBGRAPH center_node=30064771184

START_SUBGRAPH center_node=68719476795
# Node count: 4
# Neighbor count: 3
  "30064771164" -> "68719476795" [label="POST_DOMINATE"];
  "30064771164" [label="CALL", ARGUMENT_INDEX="-1", CODE="data = dataBuffer", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="162", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="5", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "68719476793" -> "68719476795" [label="REACHING_DEF", property="dataBuffer"];
  "68719476793" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="dataBuffer", COLUMN_NUMBER="13", LINE_NUMBER="161", NAME="dataBuffer", ORDER="1", TYPE_FULL_NAME="wchar_t[100]"];
  "68719476794" -> "68719476795" [label="DOMINATE"];
  "68719476794" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="data", COLUMN_NUMBER="5", LINE_NUMBER="162", NAME="data", ORDER="1", TYPE_FULL_NAME="wchar_t*"];
  "68719476795" -> "30064771164" [label="REACHING_DEF", property="dataBuffer"];
  "68719476795" -> "68719476794" [label="REACHING_DEF", property="dataBuffer"];
  "68719476795" [label="IDENTIFIER", ARGUMENT_INDEX="2", CODE="dataBuffer", COLUMN_NUMBER="12", LINE_NUMBER="162", NAME="dataBuffer", ORDER="2", TYPE_FULL_NAME="wchar_t[100]"];
END_SUBGRAPH center_node=68719476795

START_SUBGRAPH center_node=47244640256
# Node count: 1
# Neighbor count: 0
  "47244640256" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            wchar_t *replace;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            size_t dataLen = wcslen(data);
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service...", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="65", ORDER="6", PARSER_TYPE_NAME="CASTIfStatement"];
END_SUBGRAPH center_node=47244640256

