# Subgraphs for folder: 247260-v2.0.0-mixed
# Total center nodes with subgraphs: 7

START_SUBGRAPH center_node=68719476768
# Node count: 3
# Neighbor count: 2
  "30064771116" -> "68719476768" [label="AST"];
  "30064771116" [label="CALL", ARGUMENT_INDEX="2", CODE="dataBuffer[100] = COMMAND_ARG2", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="107", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="3", SIGNATURE="", TYPE_FULL_NAME="wchar_t[100]"];
  "30064771117" -> "68719476768" [label="REACHING_DEF", property="dataBuffer[100] = COMMAND_ARG2"];
  "30064771117" [label="CALL", ARGUMENT_INDEX="2", CODE="dataBuffer[100] = COMMAND_ARG2", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="107", METHOD_FULL_NAME="<operator>.alloc", NAME="<operator>.alloc", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="wchar_t[100]"];
  "68719476768" -> "30064771116" [label="REACHING_DEF", property="dataBuffer"];
  "68719476768" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="dataBuffer", COLUMN_NUMBER="13", LINE_NUMBER="107", NAME="dataBuffer", ORDER="1", TYPE_FULL_NAME="wchar_t[100]"];
END_SUBGRAPH center_node=68719476768

START_SUBGRAPH center_node=47244640261
# Node count: 2
# Neighbor count: 1
  "47244640261" -> "47244640262" [label="AST"];
  "47244640261" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine(\"Benign, fixed string\");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L\"*.*\");
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="88", ORDER="6", PARSER_TYPE_NAME="CASTIfStatement"];
  "47244640262" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="else", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="ELSE", LINE_NUMBER="94", ORDER="3", PARSER_TYPE_NAME="CASTCompoundStatement"];
END_SUBGRAPH center_node=47244640261

START_SUBGRAPH center_node=30064771128
# Node count: 2
# Neighbor count: 1
  "30064771127" -> "30064771128" [label="DOMINATE"];
  "30064771127" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B1()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="121", METHOD_FULL_NAME="goodG2B1", NAME="goodG2B1", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="void"];
  "30064771128" -> "30064771127" [label="POST_DOMINATE"];
  "30064771128" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B2()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="122", METHOD_FULL_NAME="goodG2B2", NAME="goodG2B2", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="void"];
END_SUBGRAPH center_node=30064771128

START_SUBGRAPH center_node=30064771114
# Node count: 7
# Neighbor count: 6
  "30064771111" -> "30064771114" [label="AST"];
  "30064771111" [label="CALL", ARGUMENT_INDEX="-1", CODE="_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="100", METHOD_FULL_NAME="_wspawnl", NAME="_wspawnl", ORDER="7", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771112" -> "30064771114" [label="REACHING_DEF", property="COMMAND_INT_PATH"];
  "30064771112" [label="CALL", ARGUMENT_INDEX="2", CODE="COMMAND_INT_PATH", COLUMN_NUMBER="23", DISPATCH_TYPE="INLINED", LINE_NUMBER="100", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_console_w32spawnl_02.c:29:29:COMMAND_INT_PATH:0", NAME="COMMAND_INT_PATH", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="char*"];
  "30064771113" -> "30064771114" [label="REACHING_DEF", property="COMMAND_INT_PATH"];
  "30064771113" [label="CALL", ARGUMENT_INDEX="3", CODE="COMMAND_INT_PATH", COLUMN_NUMBER="41", DISPATCH_TYPE="INLINED", LINE_NUMBER="100", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_console_w32spawnl_02.c:29:29:COMMAND_INT_PATH:0", NAME="COMMAND_INT_PATH", ORDER="3", SIGNATURE="", TYPE_FULL_NAME="char*"];
  "30064771114" -> "30064771111" [label="REACHING_DEF", property="COMMAND_ARG1"];
  "30064771114" -> "30064771112" [label="REACHING_DEF", property="COMMAND_ARG1"];
  "30064771114" -> "30064771113" [label="REACHING_DEF", property="COMMAND_ARG1"];
  "30064771114" -> "30064771115" [label="REACHING_DEF", property="COMMAND_ARG1"];
  "30064771114" -> "68719476765" [label="REACHING_DEF", property="COMMAND_ARG1"];
  "30064771114" -> "68719476767" [label="REACHING_DEF", property="COMMAND_ARG1"];
  "30064771114" [label="CALL", ARGUMENT_INDEX="4", CODE="COMMAND_ARG1", COLUMN_NUMBER="59", DISPATCH_TYPE="INLINED", LINE_NUMBER="100", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_console_w32spawnl_02.c:31:31:COMMAND_ARG1:0", NAME="COMMAND_ARG1", ORDER="4", SIGNATURE="", TYPE_FULL_NAME="char*"];
  "30064771115" -> "30064771114" [label="REACHING_DEF", property="COMMAND_ARG3"];
  "30064771115" [label="CALL", ARGUMENT_INDEX="5", CODE="COMMAND_ARG3", COLUMN_NUMBER="73", DISPATCH_TYPE="INLINED", LINE_NUMBER="100", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_console_w32spawnl_02.c:33:33:COMMAND_ARG3:0", NAME="COMMAND_ARG3", ORDER="5", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "68719476765" -> "30064771114" [label="REACHING_DEF", property="_P_WAIT"];
  "68719476765" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="_P_WAIT", COLUMN_NUMBER="14", LINE_NUMBER="100", NAME="_P_WAIT", ORDER="1", TYPE_FULL_NAME="ANY"];
  "68719476767" -> "30064771114" [label="REACHING_DEF", property="NULL"];
  "68719476767" [label="IDENTIFIER", ARGUMENT_INDEX="6", CODE="NULL", COLUMN_NUMBER="87", LINE_NUMBER="100", NAME="NULL", ORDER="6", TYPE_FULL_NAME="ANY"];
END_SUBGRAPH center_node=30064771114

START_SUBGRAPH center_node=47244640263
# Node count: 1
# Neighbor count: 0
  "47244640263" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L\"*.*\");
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="109", ORDER="6", PARSER_TYPE_NAME="CASTIfStatement"];
END_SUBGRAPH center_node=47244640263

START_SUBGRAPH center_node=68719476755
# Node count: 6
# Neighbor count: 5
  "30064771081" -> "68719476755" [label="CDG"];
  "30064771081" [label="CALL", ARGUMENT_INDEX="-1", CODE="fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL", COLUMN_NUMBER="21", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="54", METHOD_FULL_NAME="<operator>.notEquals", NAME="<operator>.notEquals", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771096" -> "68719476755" [label="DOMINATE"];
  "30064771096" [label="CALL", ARGUMENT_INDEX="-1", CODE="printLine(\"fgetws() failed\")", COLUMN_NUMBER="21", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="66", METHOD_FULL_NAME="printLine", NAME="printLine", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771098" -> "68719476755" [label="AST"];
  "30064771098" [label="CALL", ARGUMENT_INDEX="1", CODE="data[dataLen]", COLUMN_NUMBER="21", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="68", METHOD_FULL_NAME="<operator>.indirectIndexAccess", NAME="<operator>.indirectIndexAccess", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "68719476743" -> "68719476755" [label="REACHING_DEF", property="data"];
  "68719476743" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="data", COLUMN_NUMBER="28", LINE_NUMBER="54", NAME="data", ORDER="1", TYPE_FULL_NAME="wchar_t*"];
  "68719476755" -> "30064771096" [label="POST_DOMINATE"];
  "68719476755" -> "68719476756" [label="DOMINATE"];
  "68719476755" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="data", COLUMN_NUMBER="21", LINE_NUMBER="68", NAME="data", ORDER="1", TYPE_FULL_NAME="wchar_t*"];
  "68719476756" -> "68719476755" [label="POST_DOMINATE"];
  "68719476756" [label="IDENTIFIER", ARGUMENT_INDEX="2", CODE="dataLen", COLUMN_NUMBER="26", LINE_NUMBER="68", NAME="dataLen", ORDER="2", TYPE_FULL_NAME="size_t"];
END_SUBGRAPH center_node=68719476755

START_SUBGRAPH center_node=47244640256
# Node count: 1
# Neighbor count: 0
  "47244640256" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if(1)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\\n')
                    {
                        data[dataLen-1] = L'\\0';
                    }
                }
                else
                {
                    printLine(\"fgetws() failed\");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\\0';
                }
            }
        }
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="45", ORDER="6", PARSER_TYPE_NAME="CASTIfStatement"];
END_SUBGRAPH center_node=47244640256

