# Subgraphs for folder: 248405-v2.0.0-mixed
# Total center nodes with subgraphs: 8

START_SUBGRAPH center_node=30064771183
# Node count: 2
# Neighbor count: 1
  "30064771180" -> "30064771183" [label="CDG"];
  "30064771180" [label="CALL", ARGUMENT_INDEX="-1", CODE="SYSTEM(data) != 0", COLUMN_NUMBER="9", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="204", METHOD_FULL_NAME="<operator>.notEquals", NAME="<operator>.notEquals", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771183" [label="CALL", ARGUMENT_INDEX="-1", CODE="printLine(\"command execution failed!\")", COLUMN_NUMBER="9", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="206", METHOD_FULL_NAME="printLine", NAME="printLine", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
END_SUBGRAPH center_node=30064771183

START_SUBGRAPH center_node=47244640279
# Node count: 1
# Neighbor count: 0
  "47244640279" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="switch(6)
    {
    case 6:
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L\"*.*\");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine(\"Benign, fixed string\");
        break;
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="SWITCH", LINE_NUMBER="192", ORDER="6", PARSER_TYPE_NAME="CASTSwitchStatement"];
END_SUBGRAPH center_node=47244640279

START_SUBGRAPH center_node=47244640264
# Node count: 2
# Neighbor count: 1
  "30064771116" [label="CALL", ARGUMENT_INDEX="-1", CODE="acceptSocket == SOCKET_ERROR", COLUMN_NUMBER="17", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="103", METHOD_FULL_NAME="<operator>.equals", NAME="<operator>.equals", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "47244640264" -> "30064771116" [label="CONDITION"];
  "47244640264" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }", COLUMN_NUMBER="13", CONTROL_STRUCTURE_TYPE="IF", LINE_NUMBER="103", ORDER="10", PARSER_TYPE_NAME="CASTIfStatement"];
END_SUBGRAPH center_node=47244640264

START_SUBGRAPH center_node=47244640275
# Node count: 1
# Neighbor count: 0
  "47244640275" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine(\"Benign, fixed string\");
        break;
    default:
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L\"*.*\");
        break;
    }", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="SWITCH", LINE_NUMBER="167", ORDER="6", PARSER_TYPE_NAME="CASTSwitchStatement"];
END_SUBGRAPH center_node=47244640275

START_SUBGRAPH center_node=47244640277
# Node count: 3
# Neighbor count: 2
  "30064771167" -> "47244640277" [label="DOMINATE"];
  "30064771167" [label="CALL", ARGUMENT_INDEX="-1", CODE="wcscat(data, L\"*.*\")", COLUMN_NUMBER="9", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="175", METHOD_FULL_NAME="wcscat", NAME="wcscat", ORDER="6", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "30064771169" -> "47244640277" [label="POST_DOMINATE"];
  "30064771169" [label="CALL", ARGUMENT_INDEX="1", CODE="SYSTEM(data)", COLUMN_NUMBER="9", DISPATCH_TYPE="INLINED", LINE_NUMBER="179", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_listen_socket_system_15.c:51:51:SYSTEM:0", NAME="SYSTEM", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "47244640277" -> "30064771167" [label="POST_DOMINATE"];
  "47244640277" -> "30064771169" [label="CFG"];
  "47244640277" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="break;", COLUMN_NUMBER="9", CONTROL_STRUCTURE_TYPE="BREAK", LINE_NUMBER="176", ORDER="7", PARSER_TYPE_NAME="CASTBreakStatement"];
END_SUBGRAPH center_node=47244640277

START_SUBGRAPH center_node=30064771185
# Node count: 2
# Neighbor count: 1
  "30064771185" -> "30064771186" [label="DOMINATE"];
  "30064771185" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B1()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="213", METHOD_FULL_NAME="goodG2B1", NAME="goodG2B1", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="void"];
  "30064771186" -> "30064771185" [label="POST_DOMINATE"];
  "30064771186" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B2()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="214", METHOD_FULL_NAME="goodG2B2", NAME="goodG2B2", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="void"];
END_SUBGRAPH center_node=30064771185

START_SUBGRAPH center_node=47244640256
# Node count: 1
# Neighbor count: 0
  "47244640256" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="1", CODE="switch(6)
    {
    case 6:
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        wchar_t *replace;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        size_t dataLen = wcslen(data);
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&servi...", COLUMN_NUMBER="5", CONTROL_STRUCTURE_TYPE="SWITCH", LINE_NUMBER="61", ORDER="6", PARSER_TYPE_NAME="CASTSwitchStatement"];
END_SUBGRAPH center_node=47244640256

START_SUBGRAPH center_node=47244640257
# Node count: 1
# Neighbor count: 0
  "47244640257" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
   ...", COLUMN_NUMBER="9", CONTROL_STRUCTURE_TYPE="DO", LINE_NUMBER="75", ORDER="10", PARSER_TYPE_NAME="CASTDoStatement"];
END_SUBGRAPH center_node=47244640257

