# Subgraphs for folder: 248696-v2.0.0-mixed
# Total center nodes with subgraphs: 4

START_SUBGRAPH center_node=30064771195
# Node count: 1
# Neighbor count: 0
  "30064771195" [label="CALL", ARGUMENT_INDEX="-1", CODE="goodG2B()", COLUMN_NUMBER="5", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="194", METHOD_FULL_NAME="goodG2B", NAME="goodG2B", ORDER="1", SIGNATURE="", TYPE_FULL_NAME="void"];
END_SUBGRAPH center_node=30064771195

START_SUBGRAPH center_node=30064771090
# Node count: 4
# Neighbor count: 3
  "30064771089" -> "30064771090" [label="POST_DOMINATE"];
  "30064771089" [label="CALL", ARGUMENT_INDEX="2", CODE="dataLen = wcslen(data)", COLUMN_NUMBER="20", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="79", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="9", SIGNATURE="", TYPE_FULL_NAME="size_t"];
  "30064771090" -> "30064771089" [label="REACHING_DEF", property="wcslen(data)"];
  "30064771090" -> "68719476748" [label="REACHING_DEF", property="wcslen(data)"];
  "30064771090" -> "68719476749" [label="POST_DOMINATE"];
  "30064771090" [label="CALL", ARGUMENT_INDEX="2", CODE="wcslen(data)", COLUMN_NUMBER="30", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="79", METHOD_FULL_NAME="wcslen", NAME="wcslen", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="ANY"];
  "68719476748" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="dataLen", COLUMN_NUMBER="20", LINE_NUMBER="79", NAME="dataLen", ORDER="1", TYPE_FULL_NAME="size_t"];
  "68719476749" -> "30064771090" [label="REACHING_DEF", property="data"];
  "68719476749" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="data", COLUMN_NUMBER="37", LINE_NUMBER="79", NAME="data", ORDER="1", TYPE_FULL_NAME="wchar_t*"];
END_SUBGRAPH center_node=30064771090

START_SUBGRAPH center_node=68719476809
# Node count: 5
# Neighbor count: 4
  "30064771176" -> "68719476809" [label="DOMINATE"];
  "30064771176" [label="CALL", ARGUMENT_INDEX="2", CODE="dataBuffer[100] = COMMAND_ARG2", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="172", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="7", SIGNATURE="", TYPE_FULL_NAME="wchar_t[100]"];
  "30064771178" -> "68719476809" [label="AST"];
  "30064771178" [label="CALL", ARGUMENT_INDEX="3", CODE="dataBuffer[100] = COMMAND_ARG2", COLUMN_NUMBER="13", DISPATCH_TYPE="STATIC_DISPATCH", LINE_NUMBER="172", METHOD_FULL_NAME="<operator>.assignment", NAME="<operator>.assignment", ORDER="8", SIGNATURE="", TYPE_FULL_NAME="wchar_t[100]"];
  "30064771179" -> "68719476809" [label="REACHING_DEF", property="COMMAND_ARG2"];
  "30064771179" [label="CALL", ARGUMENT_INDEX="2", CODE="COMMAND_ARG2", COLUMN_NUMBER="31", DISPATCH_TYPE="INLINED", LINE_NUMBER="172", METHOD_FULL_NAME="CWE78_OS_Command_Injection__wchar_t_listen_socket_w32_spawnvp_32.c:32:32:COMMAND_ARG2:0", NAME="COMMAND_ARG2", ORDER="2", SIGNATURE="", TYPE_FULL_NAME="char*"];
  "68719476809" -> "30064771176" [label="POST_DOMINATE"];
  "68719476809" -> "30064771178" [label="REACHING_DEF", property="dataBuffer"];
  "68719476809" -> "30064771179" [label="DOMINATE"];
  "68719476809" -> "68719476811" [label="REACHING_DEF", property="dataBuffer"];
  "68719476809" [label="IDENTIFIER", ARGUMENT_INDEX="1", CODE="dataBuffer", COLUMN_NUMBER="13", LINE_NUMBER="172", NAME="dataBuffer", ORDER="1", TYPE_FULL_NAME="wchar_t[100]"];
  "68719476811" [label="IDENTIFIER", ARGUMENT_INDEX="2", CODE="dataBuffer", COLUMN_NUMBER="12", LINE_NUMBER="173", NAME="dataBuffer", ORDER="2", TYPE_FULL_NAME="wchar_t[100]"];
END_SUBGRAPH center_node=68719476809

START_SUBGRAPH center_node=47244640256
# Node count: 1
# Neighbor count: 0
  "47244640256" [label="CONTROL_STRUCTURE", ARGUMENT_INDEX="-1", CODE="do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket...", COLUMN_NUMBER="13", CONTROL_STRUCTURE_TYPE="DO", LINE_NUMBER="80", ORDER="10", PARSER_TYPE_NAME="CASTDoStatement"];
END_SUBGRAPH center_node=47244640256

