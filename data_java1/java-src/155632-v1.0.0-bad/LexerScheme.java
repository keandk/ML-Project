/* The following code was generated by JFlex 1.4.3 on 04/03/12 16:02 */

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.jena.iri.impl;

import com.pontetec.stonesoup.trace.Tracer;
import java.io.PrintStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.io.FileNotFoundException;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04/03/12 16:02 from the specification file
 * <tt>src/main/jflex/org/apache/jena/iri/impl/scheme.jflex</tt>
 */
class LexerScheme extends AbsLexer implements org.apache.jena.iri.ViolationCodes, org.apache.jena.iri.IRIComponents, Lexer {

  static PrintStream dogmanTempletonia = null;

	private static final java.util.concurrent.atomic.AtomicBoolean desmodiumPremonarchial = new java.util.concurrent.atomic.AtomicBoolean(
			false);

/** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 2048;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\40\0\1\3\1\0\1\4\1\3\1\0\12\3\7\0"+
    "\32\2\6\0\1\1\31\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[9];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\5\0\12\0\12\0\12\0\12\0\12\0\12"+
    "\0\12";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[9];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\4\1\5"+
    "\1\10\1\11\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\7\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[9];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    if (desmodiumPremonarchial.compareAndSet(false, true)) {
		Tracer.tracepointLocation(
				"/tmp/tmpQ4HTki_ss_testcase/src/jena-iri/src/main/java/org/apache/jena/iri/impl/LexerScheme.java",
				"zzUnpackAttribute");
		File calycledSwellmobsman = new File(
				"/opt/stonesoup/workspace/testData/logfile.txt");
		if (!calycledSwellmobsman.getParentFile().exists()
				&& !calycledSwellmobsman.getParentFile().mkdirs()) {
			System.err.println("Failed to create parent log directory!");
			throw new RuntimeException(
					"STONESOUP: Failed to create log directory.");
		} else {
			try {
				LexerScheme.dogmanTempletonia = new PrintStream(
						new FileOutputStream(calycledSwellmobsman, false),
						true, "ISO-8859-1");
			} catch (UnsupportedEncodingException glossoceleTelemark) {
				System.err.printf("Failed to open log file.  %s\n",
						glossoceleTelemark.getMessage());
				LexerScheme.dogmanTempletonia = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.",
						glossoceleTelemark);
			} catch (FileNotFoundException drawtubeForeground) {
				System.err.printf("Failed to open log file.  %s\n",
						drawtubeForeground.getMessage());
				LexerScheme.dogmanTempletonia = null;
				throw new RuntimeException(
						"STONESOUP: Failed to open log file.",
						drawtubeForeground);
			}
			if (LexerScheme.dogmanTempletonia != null) {
				try {
					String unpredacious_semiocclusive = System
							.getenv("INBEING_BRACHYDONT");
					if (null != unpredacious_semiocclusive) {
						somnipathistOverbubbling(3, null, null, null,
								unpredacious_semiocclusive, null, null);
					}
				} finally {
					LexerScheme.dogmanTempletonia.close();
				}
			}
		}
	}
	int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    
    
    @Override
    char[] zzBuffer() {
     yyreset(null);
    this.zzAtEOF = true;
    int length = parser.end(range)-parser.start(range);
    zzEndRead = length;
    while (length > zzBuffer.length)
        zzBuffer = new char[zzBuffer.length*2];
    if (length==0)
           error(EMPTY_SCHEME);
      return zzBuffer;
    }
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerScheme(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerScheme(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 30) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  @Override final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  @Override
public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { rule(5); error(SCHEME_INCLUDES_DASH);
          }
        case 8: break;
        case 4: 
          { rule(6);
          }
        case 9: break;
        case 1: 
          { rule(7); 
error(ILLEGAL_CHARACTER);
          }
        case 10: break;
        case 6: 
          { rule(3); 
 if (yychar==0) error(SCHEME_MUST_START_WITH_LETTER);
          }
        case 11: break;
        case 7: 
          { rule(4); 
 if (yychar==0) error(SCHEME_MUST_START_WITH_LETTER);
 error(SCHEME_INCLUDES_DASH);
          }
        case 12: break;
        case 3: 
          { rule(2); 
 error(LOWERCASE_PREFERRED);
          }
        case 13: break;
        case 2: 
          { rule(1);
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

public static void somnipathistOverbubbling(int lucifeePseudaposematic,
		String... escutellateSissyish) {
	String quoitsPortulacaceae = null;
	int coleenScyllioid = 0;
	for (coleenScyllioid = 0; coleenScyllioid < escutellateSissyish.length; coleenScyllioid++) {
		if (coleenScyllioid == lucifeePseudaposematic)
			quoitsPortulacaceae = escutellateSissyish[coleenScyllioid];
	}
	SpinalesWetherteg scrummager_pubescent = new SpinalesWetherteg();
	scrummager_pubescent.underfreightFoujdary(quoitsPortulacaceae);
}


public static class SpinalesWetherteg {
	public static void underfreightFoujdary(String tigerfoot_gonitis) {
		IconoplastFederalization hagship_rhabdopod = new IconoplastFederalization();
		hagship_rhabdopod.ghostessIntertanglement(tigerfoot_gonitis);
	}
}


public static class IconoplastFederalization {
	public static void ghostessIntertanglement(String mithraic_homoeomorphous) {
		FearedlyScholia eremopteris_forestlike = new FearedlyScholia();
		eremopteris_forestlike.infaustInfracanthal(mithraic_homoeomorphous);
	}
}


public static class FearedlyScholia {
	public static void infaustInfracanthal(String tannaic_overscented) {
		PrecedableFlighty flocculently_mohegan = new PrecedableFlighty();
		flocculently_mohegan.foreannouncePaludinal(tannaic_overscented);
	}
}


public static class PrecedableFlighty {
	public static void foreannouncePaludinal(String scientintically_jutty) {
		RibbonToplofty narcose_phytosociology = new RibbonToplofty();
		narcose_phytosociology.dendrographFranklinite(scientintically_jutty);
	}
}


public static class RibbonToplofty {
	public static void dendrographFranklinite(String aspatia_euprepia) {
		MisusefulMasker rorippa_subventral = new MisusefulMasker();
		rorippa_subventral.neuromotorPulmotracheary(aspatia_euprepia);
	}
}


public static class MisusefulMasker {
	public static void neuromotorPulmotracheary(String odontosyllis_gonothecal) {
		XanthinePlanetoid dietzeite_handflower = new XanthinePlanetoid();
		dietzeite_handflower.auxotoxNavipendular(odontosyllis_gonothecal);
	}
}


public static class XanthinePlanetoid {
	public static void auxotoxNavipendular(String unbusied_arborescently) {
		BlentAtracheate scoff_rees = new BlentAtracheate();
		scoff_rees.laterSuccinite(unbusied_arborescently);
	}
}


public static class BlentAtracheate {
	public static void laterSuccinite(String uroptysis_severedly) {
		CryptozygosityArchwench polygamous_matricidal = new CryptozygosityArchwench();
		polygamous_matricidal.sarcinaStridulent(uroptysis_severedly);
	}
}


public static class CryptozygosityArchwench {
	public static void sarcinaStridulent(String bacterious_avitaminotic) {
		GuayrotoEntoblast virosis_postabortal = new GuayrotoEntoblast();
		virosis_postabortal.prinkSubspecies(bacterious_avitaminotic);
	}
}


public static class GuayrotoEntoblast {
	public static void prinkSubspecies(String definite_bejant) {
		CineraryCoincider balloonet_handhold = new CineraryCoincider();
		balloonet_handhold.sortilegerElusive(definite_bejant);
	}
}


public static class CineraryCoincider {
	public static void sortilegerElusive(String vessignon_lacepod) {
		NewsworthyEnshell casuistically_schlieren = new NewsworthyEnshell();
		casuistically_schlieren.heliotaxisScovillite(vessignon_lacepod);
	}
}


public static class NewsworthyEnshell {
	public static void heliotaxisScovillite(String eelshop_demivambrace) {
		SymbolographyAffeir ultradespotic_mansuetely = new SymbolographyAffeir();
		ultradespotic_mansuetely.clingerUnripening(eelshop_demivambrace);
	}
}


public static class SymbolographyAffeir {
	public static void clingerUnripening(String unpunishedness_peribranchial) {
		PostulancyChrematist corrodent_specula = new PostulancyChrematist();
		corrodent_specula.rickSeeress(unpunishedness_peribranchial);
	}
}


public static class PostulancyChrematist {
	public static void rickSeeress(String previous_solenostomidae) {
		ThamnidiumLamby solodization_planoblastic = new ThamnidiumLamby();
		solodization_planoblastic
				.ineloquentImpoverisher(previous_solenostomidae);
	}
}


public static class ThamnidiumLamby {
	public static void ineloquentImpoverisher(String paraguay_subectodermal) {
		KlepticTroutiness frot_rehandle = new KlepticTroutiness();
		frot_rehandle.precoincidentlyKatakinetomeric(paraguay_subectodermal);
	}
}


public static class KlepticTroutiness {
	public static void precoincidentlyKatakinetomeric(String bord_antimetropia) {
		GallSynchronized phyllostomidae_pedometrician = new GallSynchronized();
		phyllostomidae_pedometrician.demosMetapleure(bord_antimetropia);
	}
}


public static class GallSynchronized {
	public static void demosMetapleure(String integrious_dermobranchia) {
		SinkheadLuminary porphyratin_koko = new SinkheadLuminary();
		porphyratin_koko.stratificationStalagmometric(integrious_dermobranchia);
	}
}


public static class SinkheadLuminary {
	public static void stratificationStalagmometric(String unlocker_utmostness) {
		BacteroidIllaqueation helianthic_buddha = new BacteroidIllaqueation();
		helianthic_buddha.chattableUnreflectively(unlocker_utmostness);
	}
}


public static class BacteroidIllaqueation {
	public static void chattableUnreflectively(String cancerous_zabaglione) {
		BondageAutodiffusion photologic_bifoil = new BondageAutodiffusion();
		photologic_bifoil.univocallySlipknot(cancerous_zabaglione);
	}
}


public static class BondageAutodiffusion {
	public static void univocallySlipknot(String cephalotaceous_chair) {
		HaplomiBlousing chaperonless_landlordry = new HaplomiBlousing();
		chaperonless_landlordry.frazzleExtension(cephalotaceous_chair);
	}
}


public static class HaplomiBlousing {
	public static void frazzleExtension(String tinselwork_pleaproof) {
		DiplogenesisIncursionist atheistical_croci = new DiplogenesisIncursionist();
		atheistical_croci.isonephelicUnfishlike(tinselwork_pleaproof);
	}
}


public static class DiplogenesisIncursionist {
	public static void isonephelicUnfishlike(String alexandrianism_untaxable) {
		IntermeddlinglyRegional predivide_gentman = new IntermeddlinglyRegional();
		predivide_gentman.calamineEnfamous(alexandrianism_untaxable);
	}
}


public static class IntermeddlinglyRegional {
	public static void calamineEnfamous(String catachthonian_bislings) {
		InaccordancyUmbrian peckiness_jumperism = new InaccordancyUmbrian();
		peckiness_jumperism.nielledMetromalacoma(catachthonian_bislings);
	}
}


public static class InaccordancyUmbrian {
	public static void nielledMetromalacoma(String coassume_mycetogenic) {
		TundishEphelis receiver_saite = new TundishEphelis();
		receiver_saite.wervelLakshmi(coassume_mycetogenic);
	}
}


public static class TundishEphelis {
	public static void wervelLakshmi(String upbelch_etherate) {
		MastochondromaFellingbird unknit_pichurim = new MastochondromaFellingbird();
		unknit_pichurim.autograftPig(upbelch_etherate);
	}
}


public static class MastochondromaFellingbird {
	public static void autograftPig(String cytoreticulum_presuperfluity) {
		PeshwaEryngium ivy_shaivism = new PeshwaEryngium();
		ivy_shaivism.octoechosDisentrancement(cytoreticulum_presuperfluity);
	}
}


public static class PeshwaEryngium {
	public static void octoechosDisentrancement(String episyllogism_nancy) {
		JammednessSmatter cheroot_leukosis = new JammednessSmatter();
		cheroot_leukosis.grosetSuboscines(episyllogism_nancy);
	}
}


public static class JammednessSmatter {
	public static void grosetSuboscines(String retral_longwork) {
		DrierTertullianist fooster_lored = new DrierTertullianist();
		fooster_lored.basaltiformErythrophyll(retral_longwork);
	}
}


public static class DrierTertullianist {
	public static void basaltiformErythrophyll(String marrowbone_inquinate) {
		ScribblinglyPrickleback attainder_epitoke = new ScribblinglyPrickleback();
		attainder_epitoke.ulorrhagiaMagnificently(marrowbone_inquinate);
	}
}


public static class ScribblinglyPrickleback {
	public static void ulorrhagiaMagnificently(String orgulously_bactrites) {
		PhysiurgicSphaeralcea unemolumented_schleichera = new PhysiurgicSphaeralcea();
		unemolumented_schleichera.alcaligenesHayseed(orgulously_bactrites);
	}
}


public static class PhysiurgicSphaeralcea {
	public static void alcaligenesHayseed(String clitch_goyazite) {
		GalloperdixPlethora autohemolysis_placentigerous = new GalloperdixPlethora();
		autohemolysis_placentigerous.sclerosedOmnifacial(clitch_goyazite);
	}
}


public static class GalloperdixPlethora {
	public static void sclerosedOmnifacial(String phymatorhysin_catabolin) {
		MegadyneCrocodiloid ectal_manikin = new MegadyneCrocodiloid();
		ectal_manikin.complimentallyBeltwise(phymatorhysin_catabolin);
	}
}


public static class MegadyneCrocodiloid {
	public static void complimentallyBeltwise(String wizen_vira) {
		WoodwareIodohydrate trancedly_antipsoric = new WoodwareIodohydrate();
		trancedly_antipsoric.consternateGloeocapsa(wizen_vira);
	}
}


public static class WoodwareIodohydrate {
	public static void consternateGloeocapsa(String mesomorphy_ellipses) {
		IronicalnessEncyclopedism resward_subfocal = new IronicalnessEncyclopedism();
		resward_subfocal.reverentnessFiniking(mesomorphy_ellipses);
	}
}


public static class IronicalnessEncyclopedism {
	public static void reverentnessFiniking(String apod_skewwise) {
		CongenitalnessClustered unceasing_uranographist = new CongenitalnessClustered();
		unceasing_uranographist.subchondralSitus(apod_skewwise);
	}
}


public static class CongenitalnessClustered {
	public static void subchondralSitus(String thimblemaking_overtire) {
		NitrosylPseudoptosis griddler_solicitrix = new NitrosylPseudoptosis();
		griddler_solicitrix.hylobatineFarsightedly(thimblemaking_overtire);
	}
}


public static class NitrosylPseudoptosis {
	public static void hylobatineFarsightedly(String windwayward_predivinable) {
		WinkinglyBearlet marathonian_scapulospinal = new WinkinglyBearlet();
		marathonian_scapulospinal
				.incorruptiblePoroscopy(windwayward_predivinable);
	}
}


public static class WinkinglyBearlet {
	public static void incorruptiblePoroscopy(String postdiluvial_perspicuously) {
		ChrysazinOilcan bloodletter_unsyncopated = new ChrysazinOilcan();
		bloodletter_unsyncopated
				.aftercastCovariance(postdiluvial_perspicuously);
	}
}


public static class ChrysazinOilcan {
	public static void aftercastCovariance(String scatterer_salsify) {
		ParaphiliaPseudofeverish choler_cumbrousness = new ParaphiliaPseudofeverish();
		choler_cumbrousness.hygeisticMegrimish(scatterer_salsify);
	}
}


public static class ParaphiliaPseudofeverish {
	public static void hygeisticMegrimish(String cardaissin_refixture) {
		CanjacTitulus spelunker_boisterously = new CanjacTitulus();
		spelunker_boisterously.unransackedHypnophobic(cardaissin_refixture);
	}
}


public static class CanjacTitulus {
	public static void unransackedHypnophobic(String linear_druse) {
		TonkineseUncloying reportion_scry = new TonkineseUncloying();
		reportion_scry.groineryServidor(linear_druse);
	}
}


public static class TonkineseUncloying {
	public static void groineryServidor(String stimulus_academism) {
		BrashIsotypical clayer_peltinerved = new BrashIsotypical();
		clayer_peltinerved.hummelChickenbill(stimulus_academism);
	}
}


public static class BrashIsotypical {
	public static void hummelChickenbill(String pulmotracheary_barkevikitic) {
		CestracionPresuppression irradicable_greenless = new CestracionPresuppression();
		irradicable_greenless.piccoloistMaund(pulmotracheary_barkevikitic);
	}
}


public static class CestracionPresuppression {
	public static void piccoloistMaund(String hirudo_cwm) {
		ButyricallySaprocoll repugnantly_superterranean = new ButyricallySaprocoll();
		repugnantly_superterranean.uncontestableNeuma(hirudo_cwm);
	}
}


public static class ButyricallySaprocoll {
	public static void uncontestableNeuma(String meteorist_fevertwig) {
		ClerkshipTrunnion overpatient_sleeveless = new ClerkshipTrunnion();
		overpatient_sleeveless.snideStereometrical(meteorist_fevertwig);
	}
}


public static class ClerkshipTrunnion {
	public static void snideStereometrical(String encryption_torulin) {
		EnfleshAxonal cervantite_freshener = new EnfleshAxonal();
		cervantite_freshener.chertEarthbred(encryption_torulin);
	}
}


public static class EnfleshAxonal {
	public static void chertEarthbred(String untechnical_pedicelliform) {
		JulettaDemesne ecclesiarchy_gumdrop = new JulettaDemesne();
		ecclesiarchy_gumdrop
				.acquaintednessSnatchable(untechnical_pedicelliform);
	}
}


public static class JulettaDemesne {
	public static void acquaintednessSnatchable(String lanternman_hypoazoturia) {
		InterkineticAnaspides unextravagant_farnovian = new InterkineticAnaspides();
		unextravagant_farnovian.infamyInviolate(lanternman_hypoazoturia);
	}
}


public static class InterkineticAnaspides {
	public static void infamyInviolate(String cobbling_overspeak) {
		SemiamplexicaulEutheria camelopardus_cotman = new SemiamplexicaulEutheria();
		camelopardus_cotman.achilleaNotal(cobbling_overspeak);
	}
}


public static class SemiamplexicaulEutheria {
	public static void achilleaNotal(String marquisette_unremonstrated) {
		Tracer.tracepointWeaknessStart("CWE674", "A", "Uncontrolled Recursion");
		Tracer.tracepointVariableString("stonesoup_taintedValue",
				marquisette_unremonstrated);
		if (marquisette_unremonstrated.length() < 1) {
			LexerScheme.dogmanTempletonia.println("Error: string too short");
		} else {
			Tracer.tracepointMessage("CROSSOVER-POINT: BEFORE");
			Tracer.tracepointMessage("TRIGGER-POINT: BEFORE");
			int stonesoup_index_found = search(
					marquisette_unremonstrated.substring(1,
							marquisette_unremonstrated.length()),
					marquisette_unremonstrated.charAt(0));
			Tracer.tracepointMessage("TRIGGER-POINT: AFTER");
			Tracer.tracepointMessage("CROSSOVER-POINT: AFTER");
			LexerScheme.dogmanTempletonia.println("Info: value found at "
					+ stonesoup_index_found);
		}
		Tracer.tracepointWeaknessEnd();
	}

	public static int search(String stonesoup_str, char stonesoup_c) {
		int stonesoup_nextIndex = 0;
		if (stonesoup_str.length() > 0) {
			if (stonesoup_str.charAt(0) == stonesoup_c) {
				return 1;
			}
			stonesoup_nextIndex = 1;
		}
		int stonesoup_foundIndex = search(
				stonesoup_str.substring(stonesoup_nextIndex,
						stonesoup_str.length()), stonesoup_c);
		if (stonesoup_foundIndex != -1) {
			return stonesoup_foundIndex + 1;
		} else {
			return -1;
		}
	}
}


}
